(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([
  typeof document === 'object' ? document.currentScript : undefined,
  {
    '[project]/node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs [app-client] (ecmascript) <locals>':
      (__turbopack_context__) => {
        'use strict';

        // src/index.ts
        __turbopack_context__.s({
          ReducerType: () => ReducerType,
          SHOULD_AUTOBATCH: () => SHOULD_AUTOBATCH,
          TaskAbortError: () => TaskAbortError,
          Tuple: () => Tuple,
          addListener: () => addListener,
          asyncThunkCreator: () => asyncThunkCreator,
          autoBatchEnhancer: () => autoBatchEnhancer,
          buildCreateSlice: () => buildCreateSlice,
          clearAllListeners: () => clearAllListeners,
          combineSlices: () => combineSlices,
          configureStore: () => configureStore,
          createAction: () => createAction,
          createActionCreatorInvariantMiddleware: () =>
            createActionCreatorInvariantMiddleware,
          createAsyncThunk: () => createAsyncThunk,
          createDraftSafeSelector: () => createDraftSafeSelector,
          createDraftSafeSelectorCreator: () => createDraftSafeSelectorCreator,
          createDynamicMiddleware: () => createDynamicMiddleware,
          createEntityAdapter: () => createEntityAdapter,
          createImmutableStateInvariantMiddleware: () =>
            createImmutableStateInvariantMiddleware,
          createListenerMiddleware: () => createListenerMiddleware,
          createReducer: () => createReducer,
          createSerializableStateInvariantMiddleware: () =>
            createSerializableStateInvariantMiddleware,
          createSlice: () => createSlice,
          findNonSerializableValue: () => findNonSerializableValue,
          formatProdErrorMessage: () => formatProdErrorMessage,
          isActionCreator: () => isActionCreator,
          isAllOf: () => isAllOf,
          isAnyOf: () => isAnyOf,
          isAsyncThunkAction: () => isAsyncThunkAction,
          isFluxStandardAction: () => isFSA,
          isFulfilled: () => isFulfilled,
          isImmutableDefault: () => isImmutableDefault,
          isPending: () => isPending,
          isPlain: () => isPlain,
          isRejected: () => isRejected,
          isRejectedWithValue: () => isRejectedWithValue,
          miniSerializeError: () => miniSerializeError,
          nanoid: () => nanoid,
          prepareAutoBatched: () => prepareAutoBatched,
          removeListener: () => removeListener,
          unwrapResult: () => unwrapResult,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          /*#__PURE__*/ __turbopack_context__.i(
            '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)'
          );
        // src/createDraftSafeSelector.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/immer/dist/immer.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/reselect/dist/reselect.mjs [app-client] (ecmascript)'
          );
        // src/configureStore.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/redux/dist/redux.mjs [app-client] (ecmascript)'
          );
        // src/getDefaultMiddleware.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/redux-thunk/dist/redux-thunk.mjs [app-client] (ecmascript)'
          );
        var createDraftSafeSelectorCreator = function () {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }
          const createSelector2 = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createSelectorCreator'
          ])(...args);
          const createDraftSafeSelector2 = Object.assign(
            function () {
              for (
                var _len = arguments.length, args2 = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args2[_key] = arguments[_key];
              }
              const selector = createSelector2(...args2);
              const wrappedSelector = function (value) {
                for (
                  var _len = arguments.length,
                    rest = new Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  rest[_key - 1] = arguments[_key];
                }
                return selector(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'isDraft'
                  ])(value)
                    ? (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'current'
                      ])(value)
                    : value,
                  ...rest
                );
              };
              Object.assign(wrappedSelector, selector);
              return wrappedSelector;
            },
            {
              withTypes: () => createDraftSafeSelector2,
            }
          );
          return createDraftSafeSelector2;
        };
        var createDraftSafeSelector =
          /* @__PURE__ */ createDraftSafeSelectorCreator(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'weakMapMemoize'
            ]
          );
        var composeWithDevTools =
          typeof window !== 'undefined' &&
          window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
            ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
            : function () {
                if (arguments.length === 0) return void 0;
                if (typeof arguments[0] === 'object')
                  return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'compose'
                  ];
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'compose'
                ].apply(null, arguments);
              };
        var devToolsEnhancer =
          typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__
            ? window.__REDUX_DEVTOOLS_EXTENSION__
            : function () {
                return function (noop3) {
                  return noop3;
                };
              };
        // src/tsHelpers.ts
        var hasMatchFunction = (v) => {
          return v && typeof v.match === 'function';
        };
        // src/createAction.ts
        function createAction(type, prepareAction) {
          function actionCreator() {
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }
            if (prepareAction) {
              let prepared = prepareAction(...args);
              if (!prepared) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'prepareAction did not return an object'
                );
              }
              return {
                type,
                payload: prepared.payload,
                ...('meta' in prepared && {
                  meta: prepared.meta,
                }),
                ...('error' in prepared && {
                  error: prepared.error,
                }),
              };
            }
            return {
              type,
              payload: args[0],
            };
          }
          actionCreator.toString = () => ''.concat(type);
          actionCreator.type = type;
          actionCreator.match = (action) =>
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isAction'
            ])(action) && action.type === type;
          return actionCreator;
        }
        function isActionCreator(action) {
          return (
            typeof action === 'function' &&
            'type' in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it
            hasMatchFunction(action)
          );
        }
        function isFSA(action) {
          return (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isAction'
            ])(action) && Object.keys(action).every(isValidKey)
          );
        }
        function isValidKey(key) {
          return ['type', 'payload', 'error', 'meta'].indexOf(key) > -1;
        }
        // src/actionCreatorInvariantMiddleware.ts
        function getMessage(type) {
          const splitType = type ? ''.concat(type).split('/') : [];
          const actionName = splitType[splitType.length - 1] || 'actionCreator';
          return 'Detected an action creator with type "'
            .concat(
              type || 'unknown',
              '" being dispatched. \nMake sure you\'re calling the action creator before dispatching, i.e. `dispatch('
            )
            .concat(actionName, '())` instead of `dispatch(')
            .concat(
              actionName,
              ')`. This is necessary even if the action has no payload.'
            );
        }
        function createActionCreatorInvariantMiddleware() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          if (
            ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
          );
          const { isActionCreator: isActionCreator2 = isActionCreator } =
            options;
          return () => (next) => (action) => {
            if (isActionCreator2(action)) {
              console.warn(getMessage(action.type));
            }
            return next(action);
          };
        }
        function getTimeMeasureUtils(maxDelay, fnName) {
          let elapsed = 0;
          return {
            measureTime(fn) {
              const started = Date.now();
              try {
                return fn();
              } finally {
                const finished = Date.now();
                elapsed += finished - started;
              }
            },
            warnIfExceeded() {
              if (elapsed > maxDelay) {
                console.warn(
                  ''
                    .concat(fnName, ' took ')
                    .concat(
                      elapsed,
                      'ms, which is more than the warning threshold of '
                    )
                    .concat(
                      maxDelay,
                      "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that."
                    )
                );
              }
            },
          };
        }
        var Tuple = class _Tuple extends Array {
          static get [Symbol.species]() {
            return _Tuple;
          }
          concat() {
            for (
              var _len = arguments.length, arr = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              arr[_key] = arguments[_key];
            }
            return super.concat.apply(this, arr);
          }
          prepend() {
            for (
              var _len = arguments.length, arr = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              arr[_key] = arguments[_key];
            }
            if (arr.length === 1 && Array.isArray(arr[0])) {
              return new _Tuple(...arr[0].concat(this));
            }
            return new _Tuple(...arr.concat(this));
          }
          constructor(...items) {
            super(...items);
            Object.setPrototypeOf(this, _Tuple.prototype);
          }
        };
        function freezeDraftable(val) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'isDraftable'
          ])(val)
            ? (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'produce'
              ])(val, () => {})
            : val;
        }
        function getOrInsertComputed(map, key, compute) {
          if (map.has(key)) return map.get(key);
          return map.set(key, compute(key)).get(key);
        }
        // src/immutableStateInvariantMiddleware.ts
        function isImmutableDefault(value) {
          return (
            typeof value !== 'object' || value == null || Object.isFrozen(value)
          );
        }
        function trackForMutations(isImmutable, ignorePaths, obj) {
          const trackedProperties = trackProperties(
            isImmutable,
            ignorePaths,
            obj
          );
          return {
            detectMutations() {
              return detectMutations(
                isImmutable,
                ignorePaths,
                trackedProperties,
                obj
              );
            },
          };
        }
        function trackProperties(isImmutable) {
          let ignorePaths =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : [],
            obj = arguments.length > 2 ? arguments[2] : void 0,
            path =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : '',
            checkedObjects =
              arguments.length > 4 && arguments[4] !== void 0
                ? arguments[4]
                : /* @__PURE__ */ new Set();
          const tracked = {
            value: obj,
          };
          if (!isImmutable(obj) && !checkedObjects.has(obj)) {
            checkedObjects.add(obj);
            tracked.children = {};
            for (const key in obj) {
              const childPath = path ? path + '.' + key : key;
              if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
                continue;
              }
              tracked.children[key] = trackProperties(
                isImmutable,
                ignorePaths,
                obj[key],
                childPath
              );
            }
          }
          return tracked;
        }
        function detectMutations(isImmutable) {
          let ignoredPaths =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : [],
            trackedProperty = arguments.length > 2 ? arguments[2] : void 0,
            obj = arguments.length > 3 ? arguments[3] : void 0,
            sameParentRef =
              arguments.length > 4 && arguments[4] !== void 0
                ? arguments[4]
                : false,
            path =
              arguments.length > 5 && arguments[5] !== void 0
                ? arguments[5]
                : '';
          const prevObj = trackedProperty ? trackedProperty.value : void 0;
          const sameRef = prevObj === obj;
          if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
            return {
              wasMutated: true,
              path,
            };
          }
          if (isImmutable(prevObj) || isImmutable(obj)) {
            return {
              wasMutated: false,
            };
          }
          const keysToDetect = {};
          for (let key in trackedProperty.children) {
            keysToDetect[key] = true;
          }
          for (let key in obj) {
            keysToDetect[key] = true;
          }
          const hasIgnoredPaths = ignoredPaths.length > 0;
          for (let key in keysToDetect) {
            const nestedPath = path ? path + '.' + key : key;
            if (hasIgnoredPaths) {
              const hasMatches = ignoredPaths.some((ignored) => {
                if (ignored instanceof RegExp) {
                  return ignored.test(nestedPath);
                }
                return nestedPath === ignored;
              });
              if (hasMatches) {
                continue;
              }
            }
            const result = detectMutations(
              isImmutable,
              ignoredPaths,
              trackedProperty.children[key],
              obj[key],
              sameRef,
              nestedPath
            );
            if (result.wasMutated) {
              return result;
            }
          }
          return {
            wasMutated: false,
          };
        }
        function createImmutableStateInvariantMiddleware() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          if (('TURBOPACK compile-time falsy', 0));
          else {
            //TURBOPACK unreachable
            let stringify2 = function (obj, serializer, indent, decycler) {
                return JSON.stringify(
                  obj,
                  getSerialize2(serializer, decycler),
                  indent
                );
              },
              getSerialize2 = function (serializer, decycler) {
                let stack = [],
                  keys = [];
                if (!decycler)
                  decycler = function (_, value) {
                    if (stack[0] === value) return '[Circular ~]';
                    return (
                      '[Circular ~.' +
                      keys.slice(0, stack.indexOf(value)).join('.') +
                      ']'
                    );
                  };
                return function (key, value) {
                  if (stack.length > 0) {
                    var thisPos = stack.indexOf(this);
                    ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
                    ~thisPos
                      ? keys.splice(thisPos, Infinity, key)
                      : keys.push(key);
                    if (~stack.indexOf(value))
                      value = decycler.call(this, key, value);
                  } else stack.push(value);
                  return serializer == null
                    ? value
                    : serializer.call(this, key, value);
                };
              };
            var stringify = stringify2,
              getSerialize = getSerialize2;
            let {
              isImmutable = isImmutableDefault,
              ignoredPaths,
              warnAfter = 32,
            } = options;
            const track = trackForMutations.bind(
              null,
              isImmutable,
              ignoredPaths
            );
            return (param) => {
              let { getState } = param;
              let state = getState();
              let tracker = track(state);
              let result;
              return (next) => (action) => {
                const measureUtils = getTimeMeasureUtils(
                  warnAfter,
                  'ImmutableStateInvariantMiddleware'
                );
                measureUtils.measureTime(() => {
                  state = getState();
                  result = tracker.detectMutations();
                  tracker = track(state);
                  if (result.wasMutated) {
                    throw new Error(
                      ('TURBOPACK compile-time falsy', 0)
                        ? 'TURBOPACK unreachable'
                        : "A state mutation was detected between dispatches, in the path '".concat(
                            result.path || '',
                            "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)"
                          )
                    );
                  }
                });
                const dispatchedAction = next(action);
                measureUtils.measureTime(() => {
                  state = getState();
                  result = tracker.detectMutations();
                  tracker = track(state);
                  if (result.wasMutated) {
                    throw new Error(
                      ('TURBOPACK compile-time falsy', 0)
                        ? 'TURBOPACK unreachable'
                        : 'A state mutation was detected inside a dispatch, in the path: '
                            .concat(
                              result.path || '',
                              '. Take a look at the reducer(s) handling the action '
                            )
                            .concat(
                              stringify2(action),
                              '. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)'
                            )
                    );
                  }
                });
                measureUtils.warnIfExceeded();
                return dispatchedAction;
              };
            };
          }
        }
        function isPlain(val) {
          const type = typeof val;
          return (
            val == null ||
            type === 'string' ||
            type === 'boolean' ||
            type === 'number' ||
            Array.isArray(val) ||
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isPlainObject'
            ])(val)
          );
        }
        function findNonSerializableValue(value) {
          let path =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : '',
            isSerializable =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : isPlain,
            getEntries = arguments.length > 3 ? arguments[3] : void 0,
            ignoredPaths =
              arguments.length > 4 && arguments[4] !== void 0
                ? arguments[4]
                : [],
            cache = arguments.length > 5 ? arguments[5] : void 0;
          let foundNestedSerializable;
          if (!isSerializable(value)) {
            return {
              keyPath: path || '<root>',
              value,
            };
          }
          if (typeof value !== 'object' || value === null) {
            return false;
          }
          if (cache === null || cache === void 0 ? void 0 : cache.has(value))
            return false;
          const entries =
            getEntries != null ? getEntries(value) : Object.entries(value);
          const hasIgnoredPaths = ignoredPaths.length > 0;
          for (const [key, nestedValue] of entries) {
            const nestedPath = path ? path + '.' + key : key;
            if (hasIgnoredPaths) {
              const hasMatches = ignoredPaths.some((ignored) => {
                if (ignored instanceof RegExp) {
                  return ignored.test(nestedPath);
                }
                return nestedPath === ignored;
              });
              if (hasMatches) {
                continue;
              }
            }
            if (!isSerializable(nestedValue)) {
              return {
                keyPath: nestedPath,
                value: nestedValue,
              };
            }
            if (typeof nestedValue === 'object') {
              foundNestedSerializable = findNonSerializableValue(
                nestedValue,
                nestedPath,
                isSerializable,
                getEntries,
                ignoredPaths,
                cache
              );
              if (foundNestedSerializable) {
                return foundNestedSerializable;
              }
            }
          }
          if (cache && isNestedFrozen(value)) cache.add(value);
          return false;
        }
        function isNestedFrozen(value) {
          if (!Object.isFrozen(value)) return false;
          for (const nestedValue of Object.values(value)) {
            if (typeof nestedValue !== 'object' || nestedValue === null)
              continue;
            if (!isNestedFrozen(nestedValue)) return false;
          }
          return true;
        }
        function createSerializableStateInvariantMiddleware() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          if (('TURBOPACK compile-time falsy', 0));
          else {
            //TURBOPACK unreachable
            const {
              isSerializable = isPlain,
              getEntries,
              ignoredActions = [],
              ignoredActionPaths = ['meta.arg', 'meta.baseQueryMeta'],
              ignoredPaths = [],
              warnAfter = 32,
              ignoreState = false,
              ignoreActions = false,
              disableCache = false,
            } = options;
            const cache =
              !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
            return (storeAPI) => (next) => (action) => {
              if (
                !(0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'isAction'
                ])(action)
              ) {
                return next(action);
              }
              const result = next(action);
              const measureUtils = getTimeMeasureUtils(
                warnAfter,
                'SerializableStateInvariantMiddleware'
              );
              if (
                !ignoreActions &&
                !(
                  ignoredActions.length &&
                  ignoredActions.indexOf(action.type) !== -1
                )
              ) {
                measureUtils.measureTime(() => {
                  const foundActionNonSerializableValue =
                    findNonSerializableValue(
                      action,
                      '',
                      isSerializable,
                      getEntries,
                      ignoredActionPaths,
                      cache
                    );
                  if (foundActionNonSerializableValue) {
                    const { keyPath, value } = foundActionNonSerializableValue;
                    console.error(
                      'A non-serializable value was detected in an action, in the path: `'.concat(
                        keyPath,
                        '`. Value:'
                      ),
                      value,
                      '\nTake a look at the logic that dispatched this action: ',
                      action,
                      '\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)',
                      '\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)'
                    );
                  }
                });
              }
              if (!ignoreState) {
                measureUtils.measureTime(() => {
                  const state = storeAPI.getState();
                  const foundStateNonSerializableValue =
                    findNonSerializableValue(
                      state,
                      '',
                      isSerializable,
                      getEntries,
                      ignoredPaths,
                      cache
                    );
                  if (foundStateNonSerializableValue) {
                    const { keyPath, value } = foundStateNonSerializableValue;
                    console.error(
                      'A non-serializable value was detected in the state, in the path: `'.concat(
                        keyPath,
                        '`. Value:'
                      ),
                      value,
                      '\nTake a look at the reducer(s) handling this action type: '.concat(
                        action.type,
                        '.\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)'
                      )
                    );
                  }
                });
                measureUtils.warnIfExceeded();
              }
              return result;
            };
          }
        }
        // src/getDefaultMiddleware.ts
        function isBoolean(x) {
          return typeof x === 'boolean';
        }
        var buildGetDefaultMiddleware = () =>
          function getDefaultMiddleware(options) {
            const {
              thunk = true,
              immutableCheck = true,
              serializableCheck = true,
              actionCreatorCheck = true,
            } = options !== null && options !== void 0 ? options : {};
            let middlewareArray = new Tuple();
            if (thunk) {
              if (isBoolean(thunk)) {
                middlewareArray.push(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'thunk'
                  ]
                );
              } else {
                middlewareArray.push(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'withExtraArgument'
                  ])(thunk.extraArgument)
                );
              }
            }
            if (('TURBOPACK compile-time truthy', 1)) {
              if (immutableCheck) {
                let immutableOptions = {};
                if (!isBoolean(immutableCheck)) {
                  immutableOptions = immutableCheck;
                }
                middlewareArray.unshift(
                  createImmutableStateInvariantMiddleware(immutableOptions)
                );
              }
              if (serializableCheck) {
                let serializableOptions = {};
                if (!isBoolean(serializableCheck)) {
                  serializableOptions = serializableCheck;
                }
                middlewareArray.push(
                  createSerializableStateInvariantMiddleware(
                    serializableOptions
                  )
                );
              }
              if (actionCreatorCheck) {
                let actionCreatorOptions = {};
                if (!isBoolean(actionCreatorCheck)) {
                  actionCreatorOptions = actionCreatorCheck;
                }
                middlewareArray.unshift(
                  createActionCreatorInvariantMiddleware(actionCreatorOptions)
                );
              }
            }
            return middlewareArray;
          };
        // src/autoBatchEnhancer.ts
        var SHOULD_AUTOBATCH = 'RTK_autoBatch';
        var prepareAutoBatched = () => (payload) => ({
          payload,
          meta: {
            [SHOULD_AUTOBATCH]: true,
          },
        });
        var createQueueWithTimer = (timeout) => {
          return (notify) => {
            setTimeout(notify, timeout);
          };
        };
        var autoBatchEnhancer = function () {
          let options =
            arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : {
                  type: 'raf',
                };
          return (next) =>
            function () {
              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }
              const store = next(...args);
              let notifying = true;
              let shouldNotifyAtEndOfTick = false;
              let notificationQueued = false;
              const listeners = /* @__PURE__ */ new Set();
              const queueCallback =
                options.type === 'tick'
                  ? queueMicrotask
                  : options.type === 'raf' // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.
                    ? typeof window !== 'undefined' &&
                      window.requestAnimationFrame
                      ? window.requestAnimationFrame
                      : createQueueWithTimer(10)
                    : options.type === 'callback'
                      ? options.queueNotification
                      : createQueueWithTimer(options.timeout);
              const notifyListeners = () => {
                notificationQueued = false;
                if (shouldNotifyAtEndOfTick) {
                  shouldNotifyAtEndOfTick = false;
                  listeners.forEach((l) => l());
                }
              };
              return Object.assign({}, store, {
                // Override the base `store.subscribe` method to keep original listeners
                // from running if we're delaying notifications
                subscribe(listener2) {
                  const wrappedListener = () => notifying && listener2();
                  const unsubscribe = store.subscribe(wrappedListener);
                  listeners.add(listener2);
                  return () => {
                    unsubscribe();
                    listeners.delete(listener2);
                  };
                },
                // Override the base `store.dispatch` method so that we can check actions
                // for the `shouldAutoBatch` flag and determine if batching is active
                dispatch(action) {
                  try {
                    var _action_meta;
                    notifying = !(action === null || action === void 0
                      ? void 0
                      : (_action_meta = action.meta) === null ||
                          _action_meta === void 0
                        ? void 0
                        : _action_meta[SHOULD_AUTOBATCH]);
                    shouldNotifyAtEndOfTick = !notifying;
                    if (shouldNotifyAtEndOfTick) {
                      if (!notificationQueued) {
                        notificationQueued = true;
                        queueCallback(notifyListeners);
                      }
                    }
                    return store.dispatch(action);
                  } finally {
                    notifying = true;
                  }
                },
              });
            };
        };
        // src/getDefaultEnhancers.ts
        var buildGetDefaultEnhancers = (middlewareEnhancer) =>
          function getDefaultEnhancers(options) {
            const { autoBatch = true } =
              options !== null && options !== void 0 ? options : {};
            let enhancerArray = new Tuple(middlewareEnhancer);
            if (autoBatch) {
              enhancerArray.push(
                autoBatchEnhancer(
                  typeof autoBatch === 'object' ? autoBatch : void 0
                )
              );
            }
            return enhancerArray;
          };
        // src/configureStore.ts
        function configureStore(options) {
          const getDefaultMiddleware = buildGetDefaultMiddleware();
          const {
            reducer = void 0,
            middleware,
            devTools = true,
            duplicateMiddlewareCheck = true,
            preloadedState = void 0,
            enhancers = void 0,
          } = options || {};
          let rootReducer;
          if (typeof reducer === 'function') {
            rootReducer = reducer;
          } else if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isPlainObject'
            ])(reducer)
          ) {
            rootReducer = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'combineReducers'
            ])(reducer);
          } else {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : '`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers'
            );
          }
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            middleware &&
            typeof middleware !== 'function'
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : '`middleware` field must be a callback'
            );
          }
          let finalMiddleware;
          if (typeof middleware === 'function') {
            finalMiddleware = middleware(getDefaultMiddleware);
            if (
              ('TURBOPACK compile-time value', 'development') !==
                'production' &&
              !Array.isArray(finalMiddleware)
            ) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'when using a middleware builder function, an array of middleware must be returned'
              );
            }
          } else {
            finalMiddleware = getDefaultMiddleware();
          }
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            finalMiddleware.some((item) => typeof item !== 'function')
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'each middleware provided to configureStore must be a function'
            );
          }
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            duplicateMiddlewareCheck
          ) {
            let middlewareReferences = /* @__PURE__ */ new Set();
            finalMiddleware.forEach((middleware2) => {
              if (middlewareReferences.has(middleware2)) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.'
                );
              }
              middlewareReferences.add(middleware2);
            });
          }
          let finalCompose =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'compose'
            ];
          if (devTools) {
            finalCompose = composeWithDevTools({
              // Enable capture of stack traces for dispatched Redux actions
              trace:
                ('TURBOPACK compile-time value', 'development') !==
                'production',
              ...(typeof devTools === 'object' && devTools),
            });
          }
          const middlewareEnhancer = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'applyMiddleware'
          ])(...finalMiddleware);
          const getDefaultEnhancers =
            buildGetDefaultEnhancers(middlewareEnhancer);
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            enhancers &&
            typeof enhancers !== 'function'
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : '`enhancers` field must be a callback'
            );
          }
          let storeEnhancers =
            typeof enhancers === 'function'
              ? enhancers(getDefaultEnhancers)
              : getDefaultEnhancers();
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            !Array.isArray(storeEnhancers)
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : '`enhancers` callback must return an array'
            );
          }
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            storeEnhancers.some((item) => typeof item !== 'function')
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'each enhancer provided to configureStore must be a function'
            );
          }
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            finalMiddleware.length &&
            !storeEnhancers.includes(middlewareEnhancer)
          ) {
            console.error(
              'middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`'
            );
          }
          const composedEnhancer = finalCompose(...storeEnhancers);
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createStore'
          ])(rootReducer, preloadedState, composedEnhancer);
        }
        // src/mapBuilders.ts
        function executeReducerBuilderCallback(builderCallback) {
          const actionsMap = {};
          const actionMatchers = [];
          let defaultCaseReducer;
          const builder = {
            addCase(typeOrActionCreator, reducer) {
              if (('TURBOPACK compile-time truthy', 1)) {
                if (actionMatchers.length > 0) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`builder.addCase` should only be called before calling `builder.addMatcher`'
                  );
                }
                if (defaultCaseReducer) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`builder.addCase` should only be called before calling `builder.addDefaultCase`'
                  );
                }
              }
              const type =
                typeof typeOrActionCreator === 'string'
                  ? typeOrActionCreator
                  : typeOrActionCreator.type;
              if (!type) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : '`builder.addCase` cannot be called with an empty action type'
                );
              }
              if (type in actionsMap) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : "`builder.addCase` cannot be called with two reducers for the same action type '".concat(
                        type,
                        "'"
                      )
                );
              }
              actionsMap[type] = reducer;
              return builder;
            },
            addMatcher(matcher, reducer) {
              if (('TURBOPACK compile-time truthy', 1)) {
                if (defaultCaseReducer) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`builder.addMatcher` should only be called before calling `builder.addDefaultCase`'
                  );
                }
              }
              actionMatchers.push({
                matcher,
                reducer,
              });
              return builder;
            },
            addDefaultCase(reducer) {
              if (('TURBOPACK compile-time truthy', 1)) {
                if (defaultCaseReducer) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`builder.addDefaultCase` can only be called once'
                  );
                }
              }
              defaultCaseReducer = reducer;
              return builder;
            },
          };
          builderCallback(builder);
          return [actionsMap, actionMatchers, defaultCaseReducer];
        }
        // src/createReducer.ts
        function isStateFunction(x) {
          return typeof x === 'function';
        }
        function createReducer(initialState, mapOrBuilderCallback) {
          if (('TURBOPACK compile-time truthy', 1)) {
            if (typeof mapOrBuilderCallback === 'object') {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : "The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer"
              );
            }
          }
          let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] =
            executeReducerBuilderCallback(mapOrBuilderCallback);
          let getInitialState;
          if (isStateFunction(initialState)) {
            getInitialState = () => freezeDraftable(initialState());
          } else {
            const frozenInitialState = freezeDraftable(initialState);
            getInitialState = () => frozenInitialState;
          }
          function reducer() {
            let state =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : getInitialState(),
              action = arguments.length > 1 ? arguments[1] : void 0;
            let caseReducers = [
              actionsMap[action.type],
              ...finalActionMatchers
                .filter((param) => {
                  let { matcher } = param;
                  return matcher(action);
                })
                .map((param) => {
                  let { reducer: reducer2 } = param;
                  return reducer2;
                }),
            ];
            if (caseReducers.filter((cr) => !!cr).length === 0) {
              caseReducers = [finalDefaultCaseReducer];
            }
            return caseReducers.reduce((previousState, caseReducer) => {
              if (caseReducer) {
                if (
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'isDraft'
                  ])(previousState)
                ) {
                  const draft = previousState;
                  const result = caseReducer(draft, action);
                  if (result === void 0) {
                    return previousState;
                  }
                  return result;
                } else if (
                  !(0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'isDraftable'
                  ])(previousState)
                ) {
                  const result = caseReducer(previousState, action);
                  if (result === void 0) {
                    if (previousState === null) {
                      return previousState;
                    }
                    throw Error(
                      'A case reducer on a non-draftable value must not return undefined'
                    );
                  }
                  return result;
                } else {
                  return (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'produce'
                  ])(previousState, (draft) => {
                    return caseReducer(draft, action);
                  });
                }
              }
              return previousState;
            }, state);
          }
          reducer.getInitialState = getInitialState;
          return reducer;
        }
        // src/matchers.ts
        var matches = (matcher, action) => {
          if (hasMatchFunction(matcher)) {
            return matcher.match(action);
          } else {
            return matcher(action);
          }
        };
        function isAnyOf() {
          for (
            var _len = arguments.length, matchers = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            matchers[_key] = arguments[_key];
          }
          return (action) => {
            return matchers.some((matcher) => matches(matcher, action));
          };
        }
        function isAllOf() {
          for (
            var _len = arguments.length, matchers = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            matchers[_key] = arguments[_key];
          }
          return (action) => {
            return matchers.every((matcher) => matches(matcher, action));
          };
        }
        function hasExpectedRequestMetadata(action, validStatus) {
          if (!action || !action.meta) return false;
          const hasValidRequestId = typeof action.meta.requestId === 'string';
          const hasValidRequestStatus =
            validStatus.indexOf(action.meta.requestStatus) > -1;
          return hasValidRequestId && hasValidRequestStatus;
        }
        function isAsyncThunkArray(a) {
          return (
            typeof a[0] === 'function' &&
            'pending' in a[0] &&
            'fulfilled' in a[0] &&
            'rejected' in a[0]
          );
        }
        function isPending() {
          for (
            var _len = arguments.length,
              asyncThunks = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            asyncThunks[_key] = arguments[_key];
          }
          if (asyncThunks.length === 0) {
            return (action) => hasExpectedRequestMetadata(action, ['pending']);
          }
          if (!isAsyncThunkArray(asyncThunks)) {
            return isPending()(asyncThunks[0]);
          }
          return isAnyOf(
            ...asyncThunks.map((asyncThunk) => asyncThunk.pending)
          );
        }
        function isRejected() {
          for (
            var _len = arguments.length,
              asyncThunks = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            asyncThunks[_key] = arguments[_key];
          }
          if (asyncThunks.length === 0) {
            return (action) => hasExpectedRequestMetadata(action, ['rejected']);
          }
          if (!isAsyncThunkArray(asyncThunks)) {
            return isRejected()(asyncThunks[0]);
          }
          return isAnyOf(
            ...asyncThunks.map((asyncThunk) => asyncThunk.rejected)
          );
        }
        function isRejectedWithValue() {
          for (
            var _len = arguments.length,
              asyncThunks = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            asyncThunks[_key] = arguments[_key];
          }
          const hasFlag = (action) => {
            return action && action.meta && action.meta.rejectedWithValue;
          };
          if (asyncThunks.length === 0) {
            return isAllOf(isRejected(...asyncThunks), hasFlag);
          }
          if (!isAsyncThunkArray(asyncThunks)) {
            return isRejectedWithValue()(asyncThunks[0]);
          }
          return isAllOf(isRejected(...asyncThunks), hasFlag);
        }
        function isFulfilled() {
          for (
            var _len = arguments.length,
              asyncThunks = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            asyncThunks[_key] = arguments[_key];
          }
          if (asyncThunks.length === 0) {
            return (action) =>
              hasExpectedRequestMetadata(action, ['fulfilled']);
          }
          if (!isAsyncThunkArray(asyncThunks)) {
            return isFulfilled()(asyncThunks[0]);
          }
          return isAnyOf(
            ...asyncThunks.map((asyncThunk) => asyncThunk.fulfilled)
          );
        }
        function isAsyncThunkAction() {
          for (
            var _len = arguments.length,
              asyncThunks = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            asyncThunks[_key] = arguments[_key];
          }
          if (asyncThunks.length === 0) {
            return (action) =>
              hasExpectedRequestMetadata(action, [
                'pending',
                'fulfilled',
                'rejected',
              ]);
          }
          if (!isAsyncThunkArray(asyncThunks)) {
            return isAsyncThunkAction()(asyncThunks[0]);
          }
          return isAnyOf(
            ...asyncThunks.flatMap((asyncThunk) => [
              asyncThunk.pending,
              asyncThunk.rejected,
              asyncThunk.fulfilled,
            ])
          );
        }
        // src/nanoid.ts
        var urlAlphabet =
          'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';
        var nanoid = function () {
          let size =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 21;
          let id = '';
          let i = size;
          while (i--) {
            id += urlAlphabet[(Math.random() * 64) | 0];
          }
          return id;
        };
        // src/createAsyncThunk.ts
        var commonProperties = ['name', 'message', 'stack', 'code'];
        var RejectWithValue = class {
          constructor(payload, meta) {
            /*
  type-only property to distinguish between RejectWithValue and FulfillWithMeta
  does not exist at runtime
  */ (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, '_type', void 0);
            this.payload = payload;
            this.meta = meta;
          }
        };
        var FulfillWithMeta = class {
          constructor(payload, meta) {
            /*
  type-only property to distinguish between RejectWithValue and FulfillWithMeta
  does not exist at runtime
  */ (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, '_type', void 0);
            this.payload = payload;
            this.meta = meta;
          }
        };
        var miniSerializeError = (value) => {
          if (typeof value === 'object' && value !== null) {
            const simpleError = {};
            for (const property of commonProperties) {
              if (typeof value[property] === 'string') {
                simpleError[property] = value[property];
              }
            }
            return simpleError;
          }
          return {
            message: String(value),
          };
        };
        var externalAbortMessage = 'External signal was aborted';
        var createAsyncThunk = /* @__PURE__ */ (() => {
          function createAsyncThunk2(typePrefix, payloadCreator, options) {
            const fulfilled = createAction(
              typePrefix + '/fulfilled',
              (payload, requestId, arg, meta) => ({
                payload,
                meta: {
                  ...(meta || {}),
                  arg,
                  requestId,
                  requestStatus: 'fulfilled',
                },
              })
            );
            const pending = createAction(
              typePrefix + '/pending',
              (requestId, arg, meta) => ({
                payload: void 0,
                meta: {
                  ...(meta || {}),
                  arg,
                  requestId,
                  requestStatus: 'pending',
                },
              })
            );
            const rejected = createAction(
              typePrefix + '/rejected',
              (error, requestId, arg, payload, meta) => ({
                payload,
                error: (
                  (options && options.serializeError) ||
                  miniSerializeError
                )(error || 'Rejected'),
                meta: {
                  ...(meta || {}),
                  arg,
                  requestId,
                  rejectedWithValue: !!payload,
                  requestStatus: 'rejected',
                  aborted:
                    (error === null || error === void 0
                      ? void 0
                      : error.name) === 'AbortError',
                  condition:
                    (error === null || error === void 0
                      ? void 0
                      : error.name) === 'ConditionError',
                },
              })
            );
            function actionCreator(arg) {
              let { signal } =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              return (dispatch, getState, extra) => {
                const requestId = (
                  options === null || options === void 0
                    ? void 0
                    : options.idGenerator
                )
                  ? options.idGenerator(arg)
                  : nanoid();
                const abortController = new AbortController();
                let abortHandler;
                let abortReason;
                function abort(reason) {
                  abortReason = reason;
                  abortController.abort();
                }
                if (signal) {
                  if (signal.aborted) {
                    abort(externalAbortMessage);
                  } else {
                    signal.addEventListener(
                      'abort',
                      () => abort(externalAbortMessage),
                      {
                        once: true,
                      }
                    );
                  }
                }
                const promise = (async function () {
                  let finalAction;
                  try {
                    var _options_condition, _options_getPendingMeta;
                    let conditionResult =
                      options === null || options === void 0
                        ? void 0
                        : (_options_condition = options.condition) === null ||
                            _options_condition === void 0
                          ? void 0
                          : _options_condition.call(options, arg, {
                              getState,
                              extra,
                            });
                    if (isThenable(conditionResult)) {
                      conditionResult = await conditionResult;
                    }
                    if (
                      conditionResult === false ||
                      abortController.signal.aborted
                    ) {
                      throw {
                        name: 'ConditionError',
                        message:
                          'Aborted due to condition callback returning false.',
                      };
                    }
                    const abortedPromise = new Promise((_, reject) => {
                      abortHandler = () => {
                        reject({
                          name: 'AbortError',
                          message: abortReason || 'Aborted',
                        });
                      };
                      abortController.signal.addEventListener(
                        'abort',
                        abortHandler
                      );
                    });
                    dispatch(
                      pending(
                        requestId,
                        arg,
                        options === null || options === void 0
                          ? void 0
                          : (_options_getPendingMeta =
                                options.getPendingMeta) === null ||
                              _options_getPendingMeta === void 0
                            ? void 0
                            : _options_getPendingMeta.call(
                                options,
                                {
                                  requestId,
                                  arg,
                                },
                                {
                                  getState,
                                  extra,
                                }
                              )
                      )
                    );
                    finalAction = await Promise.race([
                      abortedPromise,
                      Promise.resolve(
                        payloadCreator(arg, {
                          dispatch,
                          getState,
                          extra,
                          requestId,
                          signal: abortController.signal,
                          abort,
                          rejectWithValue: (value, meta) => {
                            return new RejectWithValue(value, meta);
                          },
                          fulfillWithValue: (value, meta) => {
                            return new FulfillWithMeta(value, meta);
                          },
                        })
                      ).then((result) => {
                        if (result instanceof RejectWithValue) {
                          throw result;
                        }
                        if (result instanceof FulfillWithMeta) {
                          return fulfilled(
                            result.payload,
                            requestId,
                            arg,
                            result.meta
                          );
                        }
                        return fulfilled(result, requestId, arg);
                      }),
                    ]);
                  } catch (err) {
                    finalAction =
                      err instanceof RejectWithValue
                        ? rejected(null, requestId, arg, err.payload, err.meta)
                        : rejected(err, requestId, arg);
                  } finally {
                    if (abortHandler) {
                      abortController.signal.removeEventListener(
                        'abort',
                        abortHandler
                      );
                    }
                  }
                  const skipDispatch =
                    options &&
                    !options.dispatchConditionRejection &&
                    rejected.match(finalAction) &&
                    finalAction.meta.condition;
                  if (!skipDispatch) {
                    dispatch(finalAction);
                  }
                  return finalAction;
                })();
                return Object.assign(promise, {
                  abort,
                  requestId,
                  arg,
                  unwrap() {
                    return promise.then(unwrapResult);
                  },
                });
              };
            }
            return Object.assign(actionCreator, {
              pending,
              rejected,
              fulfilled,
              settled: isAnyOf(rejected, fulfilled),
              typePrefix,
            });
          }
          createAsyncThunk2.withTypes = () => createAsyncThunk2;
          return createAsyncThunk2;
        })();
        function unwrapResult(action) {
          if (action.meta && action.meta.rejectedWithValue) {
            throw action.payload;
          }
          if (action.error) {
            throw action.error;
          }
          return action.payload;
        }
        function isThenable(value) {
          return (
            value !== null &&
            typeof value === 'object' &&
            typeof value.then === 'function'
          );
        }
        // src/createSlice.ts
        var asyncThunkSymbol = /* @__PURE__ */ Symbol.for(
          'rtk-slice-createasyncthunk'
        );
        var asyncThunkCreator = {
          [asyncThunkSymbol]: createAsyncThunk,
        };
        var ReducerType = /* @__PURE__ */ ((ReducerType2) => {
          ReducerType2['reducer'] = 'reducer';
          ReducerType2['reducerWithPrepare'] = 'reducerWithPrepare';
          ReducerType2['asyncThunk'] = 'asyncThunk';
          return ReducerType2;
        })(ReducerType || {});
        function getType(slice, actionKey) {
          return ''.concat(slice, '/').concat(actionKey);
        }
        function buildCreateSlice() {
          let { creators } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var _creators_asyncThunk;
          const cAT =
            creators === null || creators === void 0
              ? void 0
              : (_creators_asyncThunk = creators.asyncThunk) === null ||
                  _creators_asyncThunk === void 0
                ? void 0
                : _creators_asyncThunk[asyncThunkSymbol];
          return function createSlice2(options) {
            const { name, reducerPath = name } = options;
            if (!name) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : '`name` is a required option for createSlice'
              );
            }
            if (
              typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'default'
              ] !== 'undefined' &&
              ('TURBOPACK compile-time value', 'development') === 'development'
            ) {
              if (options.initialState === void 0) {
                console.error(
                  'You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`'
                );
              }
            }
            const reducers =
              (typeof options.reducers === 'function'
                ? options.reducers(buildReducerCreators())
                : options.reducers) || {};
            const reducerNames = Object.keys(reducers);
            const context = {
              sliceCaseReducersByName: {},
              sliceCaseReducersByType: {},
              actionCreators: {},
              sliceMatchers: [],
            };
            const contextMethods = {
              addCase(typeOrActionCreator, reducer2) {
                const type =
                  typeof typeOrActionCreator === 'string'
                    ? typeOrActionCreator
                    : typeOrActionCreator.type;
                if (!type) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`context.addCase` cannot be called with an empty action type'
                  );
                }
                if (type in context.sliceCaseReducersByType) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`context.addCase` cannot be called with two reducers for the same action type: ' +
                        type
                  );
                }
                context.sliceCaseReducersByType[type] = reducer2;
                return contextMethods;
              },
              addMatcher(matcher, reducer2) {
                context.sliceMatchers.push({
                  matcher,
                  reducer: reducer2,
                });
                return contextMethods;
              },
              exposeAction(name2, actionCreator) {
                context.actionCreators[name2] = actionCreator;
                return contextMethods;
              },
              exposeCaseReducer(name2, reducer2) {
                context.sliceCaseReducersByName[name2] = reducer2;
                return contextMethods;
              },
            };
            reducerNames.forEach((reducerName) => {
              const reducerDefinition = reducers[reducerName];
              const reducerDetails = {
                reducerName,
                type: getType(name, reducerName),
                createNotation: typeof options.reducers === 'function',
              };
              if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {
                handleThunkCaseReducerDefinition(
                  reducerDetails,
                  reducerDefinition,
                  contextMethods,
                  cAT
                );
              } else {
                handleNormalReducerDefinition(
                  reducerDetails,
                  reducerDefinition,
                  contextMethods
                );
              }
            });
            function buildReducer() {
              if (('TURBOPACK compile-time truthy', 1)) {
                if (typeof options.extraReducers === 'object') {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : "The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice"
                  );
                }
              }
              const [
                extraReducers = {},
                actionMatchers = [],
                defaultCaseReducer = void 0,
              ] =
                typeof options.extraReducers === 'function'
                  ? executeReducerBuilderCallback(options.extraReducers)
                  : [options.extraReducers];
              const finalCaseReducers = {
                ...extraReducers,
                ...context.sliceCaseReducersByType,
              };
              return createReducer(options.initialState, (builder) => {
                for (let key in finalCaseReducers) {
                  builder.addCase(key, finalCaseReducers[key]);
                }
                for (let sM of context.sliceMatchers) {
                  builder.addMatcher(sM.matcher, sM.reducer);
                }
                for (let m of actionMatchers) {
                  builder.addMatcher(m.matcher, m.reducer);
                }
                if (defaultCaseReducer) {
                  builder.addDefaultCase(defaultCaseReducer);
                }
              });
            }
            const selectSelf = (state) => state;
            const injectedSelectorCache = /* @__PURE__ */ new Map();
            const injectedStateCache = /* @__PURE__ */ new WeakMap();
            let _reducer;
            function reducer(state, action) {
              if (!_reducer) _reducer = buildReducer();
              return _reducer(state, action);
            }
            function getInitialState() {
              if (!_reducer) _reducer = buildReducer();
              return _reducer.getInitialState();
            }
            function makeSelectorProps(reducerPath2) {
              let injected =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : false;
              function selectSlice(state) {
                let sliceState = state[reducerPath2];
                if (typeof sliceState === 'undefined') {
                  if (injected) {
                    sliceState = getOrInsertComputed(
                      injectedStateCache,
                      selectSlice,
                      getInitialState
                    );
                  } else if (('TURBOPACK compile-time truthy', 1)) {
                    throw new Error(
                      ('TURBOPACK compile-time falsy', 0)
                        ? 'TURBOPACK unreachable'
                        : 'selectSlice returned undefined for an uninjected slice reducer'
                    );
                  }
                }
                return sliceState;
              }
              function getSelectors() {
                let selectState =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : selectSelf;
                const selectorCache = getOrInsertComputed(
                  injectedSelectorCache,
                  injected,
                  () => /* @__PURE__ */ new WeakMap()
                );
                return getOrInsertComputed(selectorCache, selectState, () => {
                  const map = {};
                  var _options_selectors;
                  for (const [name2, selector] of Object.entries(
                    (_options_selectors = options.selectors) !== null &&
                      _options_selectors !== void 0
                      ? _options_selectors
                      : {}
                  )) {
                    map[name2] = wrapSelector(
                      selector,
                      selectState,
                      () =>
                        getOrInsertComputed(
                          injectedStateCache,
                          selectState,
                          getInitialState
                        ),
                      injected
                    );
                  }
                  return map;
                });
              }
              return {
                reducerPath: reducerPath2,
                getSelectors,
                get selectors() {
                  return getSelectors(selectSlice);
                },
                selectSlice,
              };
            }
            const slice = {
              name,
              reducer,
              actions: context.actionCreators,
              caseReducers: context.sliceCaseReducersByName,
              getInitialState,
              ...makeSelectorProps(reducerPath),
              injectInto(injectable) {
                let { reducerPath: pathOpt, ...config } =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : {};
                const newReducerPath =
                  pathOpt !== null && pathOpt !== void 0
                    ? pathOpt
                    : reducerPath;
                injectable.inject(
                  {
                    reducerPath: newReducerPath,
                    reducer,
                  },
                  config
                );
                return {
                  ...slice,
                  ...makeSelectorProps(newReducerPath, true),
                };
              },
            };
            return slice;
          };
        }
        function wrapSelector(
          selector,
          selectState,
          getInitialState,
          injected
        ) {
          function wrapper(rootState) {
            for (
              var _len = arguments.length,
                args = new Array(_len > 1 ? _len - 1 : 0),
                _key = 1;
              _key < _len;
              _key++
            ) {
              args[_key - 1] = arguments[_key];
            }
            let sliceState = selectState(rootState);
            if (typeof sliceState === 'undefined') {
              if (injected) {
                sliceState = getInitialState();
              } else if (('TURBOPACK compile-time truthy', 1)) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'selectState returned undefined for an uninjected slice reducer'
                );
              }
            }
            return selector(sliceState, ...args);
          }
          wrapper.unwrapped = selector;
          return wrapper;
        }
        var createSlice = /* @__PURE__ */ buildCreateSlice();
        function buildReducerCreators() {
          function asyncThunk(payloadCreator, config) {
            return {
              _reducerDefinitionType: 'asyncThunk' /* asyncThunk */,
              payloadCreator,
              ...config,
            };
          }
          asyncThunk.withTypes = () => asyncThunk;
          return {
            reducer(caseReducer) {
              return Object.assign(
                {
                  // hack so the wrapping function has the same name as the original
                  // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
                  [caseReducer.name]() {
                    for (
                      var _len = arguments.length,
                        args = new Array(_len),
                        _key = 0;
                      _key < _len;
                      _key++
                    ) {
                      args[_key] = arguments[_key];
                    }
                    return caseReducer(...args);
                  },
                }[caseReducer.name],
                {
                  _reducerDefinitionType: 'reducer' /* reducer */,
                }
              );
            },
            preparedReducer(prepare, reducer) {
              return {
                _reducerDefinitionType:
                  'reducerWithPrepare' /* reducerWithPrepare */,
                prepare,
                reducer,
              };
            },
            asyncThunk,
          };
        }
        function handleNormalReducerDefinition(
          param,
          maybeReducerWithPrepare,
          context
        ) {
          let { type, reducerName, createNotation } = param;
          let caseReducer;
          let prepareCallback;
          if ('reducer' in maybeReducerWithPrepare) {
            if (
              createNotation &&
              !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)
            ) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.'
              );
            }
            caseReducer = maybeReducerWithPrepare.reducer;
            prepareCallback = maybeReducerWithPrepare.prepare;
          } else {
            caseReducer = maybeReducerWithPrepare;
          }
          context
            .addCase(type, caseReducer)
            .exposeCaseReducer(reducerName, caseReducer)
            .exposeAction(
              reducerName,
              prepareCallback
                ? createAction(type, prepareCallback)
                : createAction(type)
            );
        }
        function isAsyncThunkSliceReducerDefinition(reducerDefinition) {
          return (
            reducerDefinition._reducerDefinitionType ===
            'asyncThunk' /* asyncThunk */
          );
        }
        function isCaseReducerWithPrepareDefinition(reducerDefinition) {
          return (
            reducerDefinition._reducerDefinitionType ===
            'reducerWithPrepare' /* reducerWithPrepare */
          );
        }
        function handleThunkCaseReducerDefinition(
          param,
          reducerDefinition,
          context,
          cAT
        ) {
          let { type, reducerName } = param;
          if (!cAT) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.'
            );
          }
          const {
            payloadCreator,
            fulfilled,
            pending,
            rejected,
            settled,
            options,
          } = reducerDefinition;
          const thunk = cAT(type, payloadCreator, options);
          context.exposeAction(reducerName, thunk);
          if (fulfilled) {
            context.addCase(thunk.fulfilled, fulfilled);
          }
          if (pending) {
            context.addCase(thunk.pending, pending);
          }
          if (rejected) {
            context.addCase(thunk.rejected, rejected);
          }
          if (settled) {
            context.addMatcher(thunk.settled, settled);
          }
          context.exposeCaseReducer(reducerName, {
            fulfilled: fulfilled || noop,
            pending: pending || noop,
            rejected: rejected || noop,
            settled: settled || noop,
          });
        }
        function noop() {}
        // src/entities/entity_state.ts
        function getInitialEntityState() {
          return {
            ids: [],
            entities: {},
          };
        }
        function createInitialStateFactory(stateAdapter) {
          function getInitialState() {
            let additionalState =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {},
              entities = arguments.length > 1 ? arguments[1] : void 0;
            const state = Object.assign(
              getInitialEntityState(),
              additionalState
            );
            return entities ? stateAdapter.setAll(state, entities) : state;
          }
          return {
            getInitialState,
          };
        }
        // src/entities/state_selectors.ts
        function createSelectorsFactory() {
          function getSelectors(selectState) {
            let options =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
            const {
              createSelector: createSelector2 = createDraftSafeSelector,
            } = options;
            const selectIds = (state) => state.ids;
            const selectEntities = (state) => state.entities;
            const selectAll = createSelector2(
              selectIds,
              selectEntities,
              (ids, entities) => ids.map((id) => entities[id])
            );
            const selectId = (_, id) => id;
            const selectById = (entities, id) => entities[id];
            const selectTotal = createSelector2(selectIds, (ids) => ids.length);
            if (!selectState) {
              return {
                selectIds,
                selectEntities,
                selectAll,
                selectTotal,
                selectById: createSelector2(
                  selectEntities,
                  selectId,
                  selectById
                ),
              };
            }
            const selectGlobalizedEntities = createSelector2(
              selectState,
              selectEntities
            );
            return {
              selectIds: createSelector2(selectState, selectIds),
              selectEntities: selectGlobalizedEntities,
              selectAll: createSelector2(selectState, selectAll),
              selectTotal: createSelector2(selectState, selectTotal),
              selectById: createSelector2(
                selectGlobalizedEntities,
                selectId,
                selectById
              ),
            };
          }
          return {
            getSelectors,
          };
        }
        var isDraftTyped =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'isDraft'
          ];
        function createSingleArgumentStateOperator(mutator) {
          const operator = createStateOperator((_, state) => mutator(state));
          return function operation(state) {
            return operator(state, void 0);
          };
        }
        function createStateOperator(mutator) {
          return function operation(state, arg) {
            function isPayloadActionArgument(arg2) {
              return isFSA(arg2);
            }
            const runMutator = (draft) => {
              if (isPayloadActionArgument(arg)) {
                mutator(arg.payload, draft);
              } else {
                mutator(arg, draft);
              }
            };
            if (isDraftTyped(state)) {
              runMutator(state);
              return state;
            }
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'produce'
            ])(state, runMutator);
          };
        }
        function selectIdValue(entity, selectId) {
          const key = selectId(entity);
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            key === void 0
          ) {
            console.warn(
              'The entity passed to the `selectId` implementation returned undefined.',
              'You should probably provide your own `selectId` implementation.',
              'The entity that was passed:',
              entity,
              'The `selectId` implementation:',
              selectId.toString()
            );
          }
          return key;
        }
        function ensureEntitiesArray(entities) {
          if (!Array.isArray(entities)) {
            entities = Object.values(entities);
          }
          return entities;
        }
        function getCurrent(value) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'isDraft'
          ])(value)
            ? (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'current'
              ])(value)
            : value;
        }
        function splitAddedUpdatedEntities(newEntities, selectId, state) {
          newEntities = ensureEntitiesArray(newEntities);
          const existingIdsArray = getCurrent(state.ids);
          const existingIds = new Set(existingIdsArray);
          const added = [];
          const addedIds = /* @__PURE__ */ new Set([]);
          const updated = [];
          for (const entity of newEntities) {
            const id = selectIdValue(entity, selectId);
            if (existingIds.has(id) || addedIds.has(id)) {
              updated.push({
                id,
                changes: entity,
              });
            } else {
              addedIds.add(id);
              added.push(entity);
            }
          }
          return [added, updated, existingIdsArray];
        }
        // src/entities/unsorted_state_adapter.ts
        function createUnsortedStateAdapter(selectId) {
          function addOneMutably(entity, state) {
            const key = selectIdValue(entity, selectId);
            if (key in state.entities) {
              return;
            }
            state.ids.push(key);
            state.entities[key] = entity;
          }
          function addManyMutably(newEntities, state) {
            newEntities = ensureEntitiesArray(newEntities);
            for (const entity of newEntities) {
              addOneMutably(entity, state);
            }
          }
          function setOneMutably(entity, state) {
            const key = selectIdValue(entity, selectId);
            if (!(key in state.entities)) {
              state.ids.push(key);
            }
            state.entities[key] = entity;
          }
          function setManyMutably(newEntities, state) {
            newEntities = ensureEntitiesArray(newEntities);
            for (const entity of newEntities) {
              setOneMutably(entity, state);
            }
          }
          function setAllMutably(newEntities, state) {
            newEntities = ensureEntitiesArray(newEntities);
            state.ids = [];
            state.entities = {};
            addManyMutably(newEntities, state);
          }
          function removeOneMutably(key, state) {
            return removeManyMutably([key], state);
          }
          function removeManyMutably(keys, state) {
            let didMutate = false;
            keys.forEach((key) => {
              if (key in state.entities) {
                delete state.entities[key];
                didMutate = true;
              }
            });
            if (didMutate) {
              state.ids = state.ids.filter((id) => id in state.entities);
            }
          }
          function removeAllMutably(state) {
            Object.assign(state, {
              ids: [],
              entities: {},
            });
          }
          function takeNewKey(keys, update, state) {
            const original3 = state.entities[update.id];
            if (original3 === void 0) {
              return false;
            }
            const updated = Object.assign({}, original3, update.changes);
            const newKey = selectIdValue(updated, selectId);
            const hasNewKey = newKey !== update.id;
            if (hasNewKey) {
              keys[update.id] = newKey;
              delete state.entities[update.id];
            }
            state.entities[newKey] = updated;
            return hasNewKey;
          }
          function updateOneMutably(update, state) {
            return updateManyMutably([update], state);
          }
          function updateManyMutably(updates, state) {
            const newKeys = {};
            const updatesPerEntity = {};
            updates.forEach((update) => {
              if (update.id in state.entities) {
                var _updatesPerEntity_update_id;
                updatesPerEntity[update.id] = {
                  id: update.id,
                  // Spreads ignore falsy values, so this works even if there isn't
                  // an existing update already at this key
                  changes: {
                    ...((_updatesPerEntity_update_id =
                      updatesPerEntity[update.id]) === null ||
                    _updatesPerEntity_update_id === void 0
                      ? void 0
                      : _updatesPerEntity_update_id.changes),
                    ...update.changes,
                  },
                };
              }
            });
            updates = Object.values(updatesPerEntity);
            const didMutateEntities = updates.length > 0;
            if (didMutateEntities) {
              const didMutateIds =
                updates.filter((update) => takeNewKey(newKeys, update, state))
                  .length > 0;
              if (didMutateIds) {
                state.ids = Object.values(state.entities).map((e) =>
                  selectIdValue(e, selectId)
                );
              }
            }
          }
          function upsertOneMutably(entity, state) {
            return upsertManyMutably([entity], state);
          }
          function upsertManyMutably(newEntities, state) {
            const [added, updated] = splitAddedUpdatedEntities(
              newEntities,
              selectId,
              state
            );
            addManyMutably(added, state);
            updateManyMutably(updated, state);
          }
          return {
            removeAll: createSingleArgumentStateOperator(removeAllMutably),
            addOne: createStateOperator(addOneMutably),
            addMany: createStateOperator(addManyMutably),
            setOne: createStateOperator(setOneMutably),
            setMany: createStateOperator(setManyMutably),
            setAll: createStateOperator(setAllMutably),
            updateOne: createStateOperator(updateOneMutably),
            updateMany: createStateOperator(updateManyMutably),
            upsertOne: createStateOperator(upsertOneMutably),
            upsertMany: createStateOperator(upsertManyMutably),
            removeOne: createStateOperator(removeOneMutably),
            removeMany: createStateOperator(removeManyMutably),
          };
        }
        // src/entities/sorted_state_adapter.ts
        function findInsertIndex(sortedItems, item, comparisonFunction) {
          let lowIndex = 0;
          let highIndex = sortedItems.length;
          while (lowIndex < highIndex) {
            let middleIndex = (lowIndex + highIndex) >>> 1;
            const currentItem = sortedItems[middleIndex];
            const res = comparisonFunction(item, currentItem);
            if (res >= 0) {
              lowIndex = middleIndex + 1;
            } else {
              highIndex = middleIndex;
            }
          }
          return lowIndex;
        }
        function insert(sortedItems, item, comparisonFunction) {
          const insertAtIndex = findInsertIndex(
            sortedItems,
            item,
            comparisonFunction
          );
          sortedItems.splice(insertAtIndex, 0, item);
          return sortedItems;
        }
        function createSortedStateAdapter(selectId, comparer) {
          const { removeOne, removeMany, removeAll } =
            createUnsortedStateAdapter(selectId);
          function addOneMutably(entity, state) {
            return addManyMutably([entity], state);
          }
          function addManyMutably(newEntities, state, existingIds) {
            newEntities = ensureEntitiesArray(newEntities);
            const existingKeys = new Set(
              existingIds !== null && existingIds !== void 0
                ? existingIds
                : getCurrent(state.ids)
            );
            const models = newEntities.filter(
              (model) => !existingKeys.has(selectIdValue(model, selectId))
            );
            if (models.length !== 0) {
              mergeFunction(state, models);
            }
          }
          function setOneMutably(entity, state) {
            return setManyMutably([entity], state);
          }
          function setManyMutably(newEntities, state) {
            newEntities = ensureEntitiesArray(newEntities);
            if (newEntities.length !== 0) {
              for (const item of newEntities) {
                delete state.entities[selectId(item)];
              }
              mergeFunction(state, newEntities);
            }
          }
          function setAllMutably(newEntities, state) {
            newEntities = ensureEntitiesArray(newEntities);
            state.entities = {};
            state.ids = [];
            addManyMutably(newEntities, state, []);
          }
          function updateOneMutably(update, state) {
            return updateManyMutably([update], state);
          }
          function updateManyMutably(updates, state) {
            let appliedUpdates = false;
            let replacedIds = false;
            for (let update of updates) {
              const entity = state.entities[update.id];
              if (!entity) {
                continue;
              }
              appliedUpdates = true;
              Object.assign(entity, update.changes);
              const newId = selectId(entity);
              if (update.id !== newId) {
                replacedIds = true;
                delete state.entities[update.id];
                const oldIndex = state.ids.indexOf(update.id);
                state.ids[oldIndex] = newId;
                state.entities[newId] = entity;
              }
            }
            if (appliedUpdates) {
              mergeFunction(state, [], appliedUpdates, replacedIds);
            }
          }
          function upsertOneMutably(entity, state) {
            return upsertManyMutably([entity], state);
          }
          function upsertManyMutably(newEntities, state) {
            const [added, updated, existingIdsArray] =
              splitAddedUpdatedEntities(newEntities, selectId, state);
            if (added.length) {
              addManyMutably(added, state, existingIdsArray);
            }
            if (updated.length) {
              updateManyMutably(updated, state);
            }
          }
          function areArraysEqual(a, b) {
            if (a.length !== b.length) {
              return false;
            }
            for (let i = 0; i < a.length; i++) {
              if (a[i] === b[i]) {
                continue;
              }
              return false;
            }
            return true;
          }
          const mergeFunction = (
            state,
            addedItems,
            appliedUpdates,
            replacedIds
          ) => {
            const currentEntities = getCurrent(state.entities);
            const currentIds = getCurrent(state.ids);
            const stateEntities = state.entities;
            let ids = currentIds;
            if (replacedIds) {
              ids = new Set(currentIds);
            }
            let sortedEntities = [];
            for (const id of ids) {
              const entity = currentEntities[id];
              if (entity) {
                sortedEntities.push(entity);
              }
            }
            const wasPreviouslyEmpty = sortedEntities.length === 0;
            for (const item of addedItems) {
              stateEntities[selectId(item)] = item;
              if (!wasPreviouslyEmpty) {
                insert(sortedEntities, item, comparer);
              }
            }
            if (wasPreviouslyEmpty) {
              sortedEntities = addedItems.slice().sort(comparer);
            } else if (appliedUpdates) {
              sortedEntities.sort(comparer);
            }
            const newSortedIds = sortedEntities.map(selectId);
            if (!areArraysEqual(currentIds, newSortedIds)) {
              state.ids = newSortedIds;
            }
          };
          return {
            removeOne,
            removeMany,
            removeAll,
            addOne: createStateOperator(addOneMutably),
            updateOne: createStateOperator(updateOneMutably),
            upsertOne: createStateOperator(upsertOneMutably),
            setOne: createStateOperator(setOneMutably),
            setMany: createStateOperator(setManyMutably),
            setAll: createStateOperator(setAllMutably),
            addMany: createStateOperator(addManyMutably),
            updateMany: createStateOperator(updateManyMutably),
            upsertMany: createStateOperator(upsertManyMutably),
          };
        }
        // src/entities/create_adapter.ts
        function createEntityAdapter() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          const { selectId, sortComparer } = {
            sortComparer: false,
            selectId: (instance) => instance.id,
            ...options,
          };
          const stateAdapter = sortComparer
            ? createSortedStateAdapter(selectId, sortComparer)
            : createUnsortedStateAdapter(selectId);
          const stateFactory = createInitialStateFactory(stateAdapter);
          const selectorsFactory = createSelectorsFactory();
          return {
            selectId,
            sortComparer,
            ...stateFactory,
            ...selectorsFactory,
            ...stateAdapter,
          };
        }
        // src/listenerMiddleware/exceptions.ts
        var task = 'task';
        var listener = 'listener';
        var completed = 'completed';
        var cancelled = 'cancelled';
        var taskCancelled = 'task-'.concat(cancelled);
        var taskCompleted = 'task-'.concat(completed);
        var listenerCancelled = ''.concat(listener, '-').concat(cancelled);
        var listenerCompleted = ''.concat(listener, '-').concat(completed);
        var TaskAbortError = class {
          constructor(code) {
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'name', 'TaskAbortError');
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'message', void 0);
            this.code = code;
            this.message = ''
              .concat(task, ' ')
              .concat(cancelled, ' (reason: ')
              .concat(code, ')');
          }
        };
        // src/listenerMiddleware/utils.ts
        var assertFunction = (func, expected) => {
          if (typeof func !== 'function') {
            throw new TypeError(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : ''.concat(expected, ' is not a function')
            );
          }
        };
        var noop2 = () => {};
        var catchRejection = function (promise) {
          let onError =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : noop2;
          promise.catch(onError);
          return promise;
        };
        var addAbortSignalListener = (abortSignal, callback) => {
          abortSignal.addEventListener('abort', callback, {
            once: true,
          });
          return () => abortSignal.removeEventListener('abort', callback);
        };
        var abortControllerWithReason = (abortController, reason) => {
          const signal = abortController.signal;
          if (signal.aborted) {
            return;
          }
          if (!('reason' in signal)) {
            Object.defineProperty(signal, 'reason', {
              enumerable: true,
              value: reason,
              configurable: true,
              writable: true,
            });
          }
          abortController.abort(reason);
        };
        // src/listenerMiddleware/task.ts
        var validateActive = (signal) => {
          if (signal.aborted) {
            const { reason } = signal;
            throw new TaskAbortError(reason);
          }
        };
        function raceWithSignal(signal, promise) {
          let cleanup = noop2;
          return new Promise((resolve, reject) => {
            const notifyRejection = () =>
              reject(new TaskAbortError(signal.reason));
            if (signal.aborted) {
              notifyRejection();
              return;
            }
            cleanup = addAbortSignalListener(signal, notifyRejection);
            promise.finally(() => cleanup()).then(resolve, reject);
          }).finally(() => {
            cleanup = noop2;
          });
        }
        var runTask = async (task2, cleanUp) => {
          try {
            await Promise.resolve();
            const value = await task2();
            return {
              status: 'ok',
              value,
            };
          } catch (error) {
            return {
              status:
                error instanceof TaskAbortError ? 'cancelled' : 'rejected',
              error,
            };
          } finally {
            cleanUp === null || cleanUp === void 0 ? void 0 : cleanUp();
          }
        };
        var createPause = (signal) => {
          return (promise) => {
            return catchRejection(
              raceWithSignal(signal, promise).then((output) => {
                validateActive(signal);
                return output;
              })
            );
          };
        };
        var createDelay = (signal) => {
          const pause = createPause(signal);
          return (timeoutMs) => {
            return pause(
              new Promise((resolve) => setTimeout(resolve, timeoutMs))
            );
          };
        };
        // src/listenerMiddleware/index.ts
        var { assign } = Object;
        var INTERNAL_NIL_TOKEN = {};
        var alm = 'listenerMiddleware';
        var createFork = (parentAbortSignal, parentBlockingPromises) => {
          const linkControllers = (controller) =>
            addAbortSignalListener(parentAbortSignal, () =>
              abortControllerWithReason(controller, parentAbortSignal.reason)
            );
          return (taskExecutor, opts) => {
            assertFunction(taskExecutor, 'taskExecutor');
            const childAbortController = new AbortController();
            linkControllers(childAbortController);
            const result = runTask(
              async () => {
                validateActive(parentAbortSignal);
                validateActive(childAbortController.signal);
                const result2 = await taskExecutor({
                  pause: createPause(childAbortController.signal),
                  delay: createDelay(childAbortController.signal),
                  signal: childAbortController.signal,
                });
                validateActive(childAbortController.signal);
                return result2;
              },
              () =>
                abortControllerWithReason(childAbortController, taskCompleted)
            );
            if (opts === null || opts === void 0 ? void 0 : opts.autoJoin) {
              parentBlockingPromises.push(result.catch(noop2));
            }
            return {
              result: createPause(parentAbortSignal)(result),
              cancel() {
                abortControllerWithReason(childAbortController, taskCancelled);
              },
            };
          };
        };
        var createTakePattern = (startListening, signal) => {
          const take = async (predicate, timeout) => {
            validateActive(signal);
            let unsubscribe = () => {};
            const tuplePromise = new Promise((resolve, reject) => {
              let stopListening = startListening({
                predicate,
                effect: (action, listenerApi) => {
                  listenerApi.unsubscribe();
                  resolve([
                    action,
                    listenerApi.getState(),
                    listenerApi.getOriginalState(),
                  ]);
                },
              });
              unsubscribe = () => {
                stopListening();
                reject();
              };
            });
            const promises = [tuplePromise];
            if (timeout != null) {
              promises.push(
                new Promise((resolve) => setTimeout(resolve, timeout, null))
              );
            }
            try {
              const output = await raceWithSignal(
                signal,
                Promise.race(promises)
              );
              validateActive(signal);
              return output;
            } finally {
              unsubscribe();
            }
          };
          return (predicate, timeout) =>
            catchRejection(take(predicate, timeout));
        };
        var getListenerEntryPropsFrom = (options) => {
          let { type, actionCreator, matcher, predicate, effect } = options;
          if (type) {
            predicate = createAction(type).match;
          } else if (actionCreator) {
            type = actionCreator.type;
            predicate = actionCreator.match;
          } else if (matcher) {
            predicate = matcher;
          } else if (predicate) {
          } else {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Creating or removing a listener requires one of the known fields for matching an action'
            );
          }
          assertFunction(effect, 'options.listener');
          return {
            predicate,
            type,
            effect,
          };
        };
        var createListenerEntry = /* @__PURE__ */ assign(
          (options) => {
            const { type, predicate, effect } =
              getListenerEntryPropsFrom(options);
            const entry = {
              id: nanoid(),
              effect,
              type,
              predicate,
              pending: /* @__PURE__ */ new Set(),
              unsubscribe: () => {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'Unsubscribe not initialized'
                );
              },
            };
            return entry;
          },
          {
            withTypes: () => createListenerEntry,
          }
        );
        var findListenerEntry = (listenerMap, options) => {
          const { type, effect, predicate } =
            getListenerEntryPropsFrom(options);
          return Array.from(listenerMap.values()).find((entry) => {
            const matchPredicateOrType =
              typeof type === 'string'
                ? entry.type === type
                : entry.predicate === predicate;
            return matchPredicateOrType && entry.effect === effect;
          });
        };
        var cancelActiveListeners = (entry) => {
          entry.pending.forEach((controller) => {
            abortControllerWithReason(controller, listenerCancelled);
          });
        };
        var createClearListenerMiddleware = (listenerMap) => {
          return () => {
            listenerMap.forEach(cancelActiveListeners);
            listenerMap.clear();
          };
        };
        var safelyNotifyError = (errorHandler, errorToNotify, errorInfo) => {
          try {
            errorHandler(errorToNotify, errorInfo);
          } catch (errorHandlerError) {
            setTimeout(() => {
              throw errorHandlerError;
            }, 0);
          }
        };
        var addListener = /* @__PURE__ */ assign(
          /* @__PURE__ */ createAction(''.concat(alm, '/add')),
          {
            withTypes: () => addListener,
          }
        );
        var clearAllListeners = /* @__PURE__ */ createAction(
          ''.concat(alm, '/removeAll')
        );
        var removeListener = /* @__PURE__ */ assign(
          /* @__PURE__ */ createAction(''.concat(alm, '/remove')),
          {
            withTypes: () => removeListener,
          }
        );
        var defaultErrorHandler = function () {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }
          console.error(''.concat(alm, '/error'), ...args);
        };
        var createListenerMiddleware = function () {
          let middlewareOptions =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          const listenerMap = /* @__PURE__ */ new Map();
          const { extra, onError = defaultErrorHandler } = middlewareOptions;
          assertFunction(onError, 'onError');
          const insertEntry = (entry) => {
            entry.unsubscribe = () => listenerMap.delete(entry.id);
            listenerMap.set(entry.id, entry);
            return (cancelOptions) => {
              entry.unsubscribe();
              if (
                cancelOptions === null || cancelOptions === void 0
                  ? void 0
                  : cancelOptions.cancelActive
              ) {
                cancelActiveListeners(entry);
              }
            };
          };
          const startListening = (options) => {
            var _findListenerEntry;
            const entry =
              (_findListenerEntry = findListenerEntry(listenerMap, options)) !==
                null && _findListenerEntry !== void 0
                ? _findListenerEntry
                : createListenerEntry(options);
            return insertEntry(entry);
          };
          assign(startListening, {
            withTypes: () => startListening,
          });
          const stopListening = (options) => {
            const entry = findListenerEntry(listenerMap, options);
            if (entry) {
              entry.unsubscribe();
              if (options.cancelActive) {
                cancelActiveListeners(entry);
              }
            }
            return !!entry;
          };
          assign(stopListening, {
            withTypes: () => stopListening,
          });
          const notifyListener = async (
            entry,
            action,
            api,
            getOriginalState
          ) => {
            const internalTaskController = new AbortController();
            const take = createTakePattern(
              startListening,
              internalTaskController.signal
            );
            const autoJoinPromises = [];
            try {
              entry.pending.add(internalTaskController);
              await Promise.resolve(
                entry.effect(
                  action, // Use assign() rather than ... to avoid extra helper functions added to bundle
                  assign({}, api, {
                    getOriginalState,
                    condition: (predicate, timeout) =>
                      take(predicate, timeout).then(Boolean),
                    take,
                    delay: createDelay(internalTaskController.signal),
                    pause: createPause(internalTaskController.signal),
                    extra,
                    signal: internalTaskController.signal,
                    fork: createFork(
                      internalTaskController.signal,
                      autoJoinPromises
                    ),
                    unsubscribe: entry.unsubscribe,
                    subscribe: () => {
                      listenerMap.set(entry.id, entry);
                    },
                    cancelActiveListeners: () => {
                      entry.pending.forEach((controller, _, set) => {
                        if (controller !== internalTaskController) {
                          abortControllerWithReason(
                            controller,
                            listenerCancelled
                          );
                          set.delete(controller);
                        }
                      });
                    },
                    cancel: () => {
                      abortControllerWithReason(
                        internalTaskController,
                        listenerCancelled
                      );
                      entry.pending.delete(internalTaskController);
                    },
                    throwIfCancelled: () => {
                      validateActive(internalTaskController.signal);
                    },
                  })
                )
              );
            } catch (listenerError) {
              if (!(listenerError instanceof TaskAbortError)) {
                safelyNotifyError(onError, listenerError, {
                  raisedBy: 'effect',
                });
              }
            } finally {
              await Promise.all(autoJoinPromises);
              abortControllerWithReason(
                internalTaskController,
                listenerCompleted
              );
              entry.pending.delete(internalTaskController);
            }
          };
          const clearListenerMiddleware =
            createClearListenerMiddleware(listenerMap);
          const middleware = (api) => (next) => (action) => {
            if (
              !(0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isAction'
              ])(action)
            ) {
              return next(action);
            }
            if (addListener.match(action)) {
              return startListening(action.payload);
            }
            if (clearAllListeners.match(action)) {
              clearListenerMiddleware();
              return;
            }
            if (removeListener.match(action)) {
              return stopListening(action.payload);
            }
            let originalState = api.getState();
            const getOriginalState = () => {
              if (originalState === INTERNAL_NIL_TOKEN) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : ''.concat(
                        alm,
                        ': getOriginalState can only be called synchronously'
                      )
                );
              }
              return originalState;
            };
            let result;
            try {
              result = next(action);
              if (listenerMap.size > 0) {
                const currentState = api.getState();
                const listenerEntries = Array.from(listenerMap.values());
                for (const entry of listenerEntries) {
                  let runListener = false;
                  try {
                    runListener = entry.predicate(
                      action,
                      currentState,
                      originalState
                    );
                  } catch (predicateError) {
                    runListener = false;
                    safelyNotifyError(onError, predicateError, {
                      raisedBy: 'predicate',
                    });
                  }
                  if (!runListener) {
                    continue;
                  }
                  notifyListener(entry, action, api, getOriginalState);
                }
              }
            } finally {
              originalState = INTERNAL_NIL_TOKEN;
            }
            return result;
          };
          return {
            middleware,
            startListening,
            stopListening,
            clearListeners: clearListenerMiddleware,
          };
        };
        var createMiddlewareEntry = (middleware) => ({
          middleware,
          applied: /* @__PURE__ */ new Map(),
        });
        var matchInstance = (instanceId) => (action) => {
          var _action_meta;
          return (
            (action === null || action === void 0
              ? void 0
              : (_action_meta = action.meta) === null || _action_meta === void 0
                ? void 0
                : _action_meta.instanceId) === instanceId
          );
        };
        var createDynamicMiddleware = () => {
          const instanceId = nanoid();
          const middlewareMap = /* @__PURE__ */ new Map();
          const withMiddleware = Object.assign(
            createAction('dynamicMiddleware/add', function () {
              for (
                var _len = arguments.length,
                  middlewares = new Array(_len),
                  _key = 0;
                _key < _len;
                _key++
              ) {
                middlewares[_key] = arguments[_key];
              }
              return {
                payload: middlewares,
                meta: {
                  instanceId,
                },
              };
            }),
            {
              withTypes: () => withMiddleware,
            }
          );
          const addMiddleware = Object.assign(
            function addMiddleware2() {
              for (
                var _len = arguments.length,
                  middlewares = new Array(_len),
                  _key = 0;
                _key < _len;
                _key++
              ) {
                middlewares[_key] = arguments[_key];
              }
              middlewares.forEach((middleware2) => {
                getOrInsertComputed(
                  middlewareMap,
                  middleware2,
                  createMiddlewareEntry
                );
              });
            },
            {
              withTypes: () => addMiddleware,
            }
          );
          const getFinalMiddleware = (api) => {
            const appliedMiddleware = Array.from(middlewareMap.values()).map(
              (entry) =>
                getOrInsertComputed(entry.applied, api, entry.middleware)
            );
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'compose'
            ])(...appliedMiddleware);
          };
          const isWithMiddleware = isAllOf(
            withMiddleware,
            matchInstance(instanceId)
          );
          const middleware = (api) => (next) => (action) => {
            if (isWithMiddleware(action)) {
              addMiddleware(...action.payload);
              return api.dispatch;
            }
            return getFinalMiddleware(api)(next)(action);
          };
          return {
            middleware,
            addMiddleware,
            withMiddleware,
            instanceId,
          };
        };
        var isSliceLike = (maybeSliceLike) =>
          'reducerPath' in maybeSliceLike &&
          typeof maybeSliceLike.reducerPath === 'string';
        var getReducers = (slices) =>
          slices.flatMap((sliceOrMap) =>
            isSliceLike(sliceOrMap)
              ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]]
              : Object.entries(sliceOrMap)
          );
        var ORIGINAL_STATE = Symbol.for('rtk-state-proxy-original');
        var isStateProxy = (value) => !!value && !!value[ORIGINAL_STATE];
        var stateProxyMap = /* @__PURE__ */ new WeakMap();
        var createStateProxy = (state, reducerMap, initialStateCache) =>
          getOrInsertComputed(
            stateProxyMap,
            state,
            () =>
              new Proxy(state, {
                get: (target, prop, receiver) => {
                  if (prop === ORIGINAL_STATE) return target;
                  const result = Reflect.get(target, prop, receiver);
                  if (typeof result === 'undefined') {
                    const cached = initialStateCache[prop];
                    if (typeof cached !== 'undefined') return cached;
                    const reducer = reducerMap[prop];
                    if (reducer) {
                      const reducerResult = reducer(void 0, {
                        type: nanoid(),
                      });
                      if (typeof reducerResult === 'undefined') {
                        throw new Error(
                          ('TURBOPACK compile-time falsy', 0)
                            ? 'TURBOPACK unreachable'
                            : 'The slice reducer for key "'.concat(
                                prop.toString(),
                                '" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don\'t want to set a value for this reducer, you can use null instead of undefined.'
                              )
                        );
                      }
                      initialStateCache[prop] = reducerResult;
                      return reducerResult;
                    }
                  }
                  return result;
                },
              })
          );
        var original = (state) => {
          if (!isStateProxy(state)) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'original must be used on state Proxy'
            );
          }
          return state[ORIGINAL_STATE];
        };
        var emptyObject = {};
        var noopReducer = function () {
          let state =
            arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : emptyObject;
          return state;
        };
        function combineSlices() {
          for (
            var _len = arguments.length, slices = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            slices[_key] = arguments[_key];
          }
          const reducerMap = Object.fromEntries(getReducers(slices));
          const getReducer = () =>
            Object.keys(reducerMap).length
              ? (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'combineReducers'
                ])(reducerMap)
              : noopReducer;
          let reducer = getReducer();
          function combinedReducer(state, action) {
            return reducer(state, action);
          }
          combinedReducer.withLazyLoadedSlices = () => combinedReducer;
          const initialStateCache = {};
          const inject = function (slice) {
            let config =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
            const { reducerPath, reducer: reducerToInject } = slice;
            const currentReducer = reducerMap[reducerPath];
            if (
              !config.overrideExisting &&
              currentReducer &&
              currentReducer !== reducerToInject
            ) {
              if (
                typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'default'
                ] !== 'undefined' &&
                ('TURBOPACK compile-time value', 'development') ===
                  'development'
              ) {
                console.error(
                  'called `inject` to override already-existing reducer '.concat(
                    reducerPath,
                    ' without specifying `overrideExisting: true`'
                  )
                );
              }
              return combinedReducer;
            }
            if (config.overrideExisting && currentReducer !== reducerToInject) {
              delete initialStateCache[reducerPath];
            }
            reducerMap[reducerPath] = reducerToInject;
            reducer = getReducer();
            return combinedReducer;
          };
          const selector = Object.assign(
            function makeSelector(selectorFn, selectState) {
              return function selector2(state) {
                for (
                  var _len = arguments.length,
                    args = new Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }
                return selectorFn(
                  createStateProxy(
                    selectState ? selectState(state, ...args) : state,
                    reducerMap,
                    initialStateCache
                  ),
                  ...args
                );
              };
            },
            {
              original,
            }
          );
          return Object.assign(combinedReducer, {
            inject,
            selector,
          });
        }
        // src/formatProdErrorMessage.ts
        function formatProdErrorMessage(code) {
          return 'Minified Redux Toolkit error #'
            .concat(code, '; visit https://redux-toolkit.js.org/Errors?code=')
            .concat(
              code,
              ' for the full message or use the non-minified dev environment for full errors. '
            );
        }
        //# sourceMappingURL=redux-toolkit.modern.mjs.map
      },
    '[project]/node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        // src/query/core/apiState.ts
        __turbopack_context__.s({
          NamedSchemaError: () => NamedSchemaError,
          QueryStatus: () => QueryStatus,
          _NEVER: () => _NEVER,
          buildCreateApi: () => buildCreateApi,
          copyWithStructuralSharing: () => copyWithStructuralSharing,
          coreModule: () => coreModule,
          coreModuleName: () => coreModuleName,
          createApi: () => createApi,
          defaultSerializeQueryArgs: () => defaultSerializeQueryArgs,
          fakeBaseQuery: () => fakeBaseQuery,
          fetchBaseQuery: () => fetchBaseQuery,
          retry: () => retry,
          setupListeners: () => setupListeners,
          skipToken: () => skipToken,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          /*#__PURE__*/ __turbopack_context__.i(
            '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
          );
        // src/query/core/rtkImports.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs [app-client] (ecmascript) <locals>'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/reselect/dist/reselect.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/redux/dist/redux.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/immer/dist/immer.mjs [app-client] (ecmascript) <export produce as createNextState>'
          );
        // src/query/core/buildThunks.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/immer/dist/immer.mjs [app-client] (ecmascript)'
          );
        // src/query/standardSchema.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$standard$2d$schema$2f$utils$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@standard-schema/utils/dist/index.js [app-client] (ecmascript)'
          );
        var QueryStatus = /* @__PURE__ */ ((QueryStatus2) => {
          QueryStatus2['uninitialized'] = 'uninitialized';
          QueryStatus2['pending'] = 'pending';
          QueryStatus2['fulfilled'] = 'fulfilled';
          QueryStatus2['rejected'] = 'rejected';
          return QueryStatus2;
        })(QueryStatus || {});
        function getRequestStatusFlags(status) {
          return {
            status,
            isUninitialized: status === 'uninitialized' /* uninitialized */,
            isLoading: status === 'pending' /* pending */,
            isSuccess: status === 'fulfilled' /* fulfilled */,
            isError: status === 'rejected' /* rejected */,
          };
        }
        // src/query/utils/copyWithStructuralSharing.ts
        var isPlainObject2 =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'isPlainObject'
          ];
        function copyWithStructuralSharing(oldObj, newObj) {
          if (
            oldObj === newObj ||
            !(
              (isPlainObject2(oldObj) && isPlainObject2(newObj)) ||
              (Array.isArray(oldObj) && Array.isArray(newObj))
            )
          ) {
            return newObj;
          }
          const newKeys = Object.keys(newObj);
          const oldKeys = Object.keys(oldObj);
          let isSameObject = newKeys.length === oldKeys.length;
          const mergeObj = Array.isArray(newObj) ? [] : {};
          for (const key of newKeys) {
            mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);
            if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];
          }
          return isSameObject ? oldObj : mergeObj;
        }
        // src/query/utils/countObjectKeys.ts
        function countObjectKeys(obj) {
          let count = 0;
          for (const _key in obj) {
            count++;
          }
          return count;
        }
        // src/query/utils/flatten.ts
        var flatten = (arr) => [].concat(...arr);
        // src/query/utils/isAbsoluteUrl.ts
        function isAbsoluteUrl(url) {
          return new RegExp('(^|:)//').test(url);
        }
        // src/query/utils/isDocumentVisible.ts
        function isDocumentVisible() {
          if (typeof document === 'undefined') {
            return true;
          }
          return document.visibilityState !== 'hidden';
        }
        // src/query/utils/isNotNullish.ts
        function isNotNullish(v) {
          return v != null;
        }
        // src/query/utils/isOnline.ts
        function isOnline() {
          return typeof navigator === 'undefined'
            ? true
            : navigator.onLine === void 0
              ? true
              : navigator.onLine;
        }
        // src/query/utils/joinUrls.ts
        var withoutTrailingSlash = (url) => url.replace(/\/$/, '');
        var withoutLeadingSlash = (url) => url.replace(/^\//, '');
        function joinUrls(base, url) {
          if (!base) {
            return url;
          }
          if (!url) {
            return base;
          }
          if (isAbsoluteUrl(url)) {
            return url;
          }
          const delimiter =
            base.endsWith('/') || !url.startsWith('?') ? '/' : '';
          base = withoutTrailingSlash(base);
          url = withoutLeadingSlash(url);
          return ''.concat(base).concat(delimiter).concat(url);
        }
        // src/query/utils/getOrInsert.ts
        function getOrInsert(map, key, value) {
          if (map.has(key)) return map.get(key);
          return map.set(key, value).get(key);
        }
        // src/query/fetchBaseQuery.ts
        var defaultFetchFn = function () {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }
          return fetch(...args);
        };
        var defaultValidateStatus = (response) =>
          response.status >= 200 && response.status <= 299;
        var defaultIsJsonContentType = (headers) =>
          /*applicat*/ /ion\/(vnd\.api\+)?json/.test(
            headers.get('content-type') || ''
          );
        function stripUndefined(obj) {
          if (
            !(0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isPlainObject'
            ])(obj)
          ) {
            return obj;
          }
          const copy = {
            ...obj,
          };
          for (const [k, v] of Object.entries(copy)) {
            if (v === void 0) delete copy[k];
          }
          return copy;
        }
        function fetchBaseQuery() {
          let {
            baseUrl,
            prepareHeaders = (x) => x,
            fetchFn = defaultFetchFn,
            paramsSerializer,
            isJsonContentType = defaultIsJsonContentType,
            jsonContentType = 'application/json',
            jsonReplacer,
            timeout: defaultTimeout,
            responseHandler: globalResponseHandler,
            validateStatus: globalValidateStatus,
            ...baseFetchOptions
          } = arguments.length > 0 && arguments[0] !== void 0
            ? arguments[0]
            : {};
          if (typeof fetch === 'undefined' && fetchFn === defaultFetchFn) {
            console.warn(
              'Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.'
            );
          }
          return async (arg, api, extraOptions) => {
            const { getState, extra, endpoint, forced, type } = api;
            let meta;
            let {
              url,
              headers = new Headers(baseFetchOptions.headers),
              params = void 0,
              responseHandler = globalResponseHandler !== null &&
              globalResponseHandler !== void 0
                ? globalResponseHandler
                : 'json',
              validateStatus = globalValidateStatus !== null &&
              globalValidateStatus !== void 0
                ? globalValidateStatus
                : defaultValidateStatus,
              timeout = defaultTimeout,
              ...rest
            } = typeof arg == 'string'
              ? {
                  url: arg,
                }
              : arg;
            let abortController,
              signal = api.signal;
            if (timeout) {
              abortController = new AbortController();
              api.signal.addEventListener('abort', abortController.abort);
              signal = abortController.signal;
            }
            let config = {
              ...baseFetchOptions,
              signal,
              ...rest,
            };
            headers = new Headers(stripUndefined(headers));
            config.headers =
              (await prepareHeaders(headers, {
                getState,
                arg,
                extra,
                endpoint,
                forced,
                type,
                extraOptions,
              })) || headers;
            const isJsonifiable = (body) =>
              typeof body === 'object' &&
              ((0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isPlainObject'
              ])(body) ||
                Array.isArray(body) ||
                typeof body.toJSON === 'function');
            if (
              !config.headers.has('content-type') &&
              isJsonifiable(config.body)
            ) {
              config.headers.set('content-type', jsonContentType);
            }
            if (
              isJsonifiable(config.body) &&
              isJsonContentType(config.headers)
            ) {
              config.body = JSON.stringify(config.body, jsonReplacer);
            }
            if (params) {
              const divider = ~url.indexOf('?') ? '&' : '?';
              const query = paramsSerializer
                ? paramsSerializer(params)
                : new URLSearchParams(stripUndefined(params));
              url += divider + query;
            }
            url = joinUrls(baseUrl, url);
            const request = new Request(url, config);
            const requestClone = new Request(url, config);
            meta = {
              request: requestClone,
            };
            let response,
              timedOut = false,
              timeoutId =
                abortController &&
                setTimeout(() => {
                  timedOut = true;
                  abortController.abort();
                }, timeout);
            try {
              response = await fetchFn(request);
            } catch (e) {
              return {
                error: {
                  status: timedOut ? 'TIMEOUT_ERROR' : 'FETCH_ERROR',
                  error: String(e),
                },
                meta,
              };
            } finally {
              if (timeoutId) clearTimeout(timeoutId);
              abortController === null || abortController === void 0
                ? void 0
                : abortController.signal.removeEventListener(
                    'abort',
                    abortController.abort
                  );
            }
            const responseClone = response.clone();
            meta.response = responseClone;
            let resultData;
            let responseText = '';
            try {
              let handleResponseError;
              await Promise.all([
                handleResponse(response, responseHandler).then(
                  (r) => (resultData = r),
                  (e) => (handleResponseError = e)
                ),
                // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182
                // we *have* to "use up" both streams at the same time or they will stop running in node-fetch scenarios
                responseClone.text().then(
                  (r) => (responseText = r),
                  () => {}
                ),
              ]);
              if (handleResponseError) throw handleResponseError;
            } catch (e) {
              return {
                error: {
                  status: 'PARSING_ERROR',
                  originalStatus: response.status,
                  data: responseText,
                  error: String(e),
                },
                meta,
              };
            }
            return validateStatus(response, resultData)
              ? {
                  data: resultData,
                  meta,
                }
              : {
                  error: {
                    status: response.status,
                    data: resultData,
                  },
                  meta,
                };
          };
          //TURBOPACK unreachable
          async function handleResponse(response, responseHandler) {
            if (typeof responseHandler === 'function') {
              return responseHandler(response);
            }
            if (responseHandler === 'content-type') {
              responseHandler = isJsonContentType(response.headers)
                ? 'json'
                : 'text';
            }
            if (responseHandler === 'json') {
              const text = await response.text();
              return text.length ? JSON.parse(text) : null;
            }
            return response.text();
          }
        }
        // src/query/HandledError.ts
        var HandledError = class {
          constructor(value, meta = void 0) {
            this.value = value;
            this.meta = meta;
          }
        };
        // src/query/retry.ts
        async function defaultBackoff() {
          let attempt =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : 0,
            maxRetries =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : 5;
          const attempts = Math.min(attempt, maxRetries);
          const timeout = ~~((Math.random() + 0.4) * (300 << attempts));
          await new Promise((resolve) =>
            setTimeout((res) => resolve(res), timeout)
          );
        }
        function fail(error, meta) {
          throw Object.assign(
            new HandledError({
              error,
              meta,
            }),
            {
              throwImmediately: true,
            }
          );
        }
        var EMPTY_OPTIONS = {};
        var retryWithBackoff =
          (baseQuery, defaultOptions) => async (args, api, extraOptions) => {
            const possibleMaxRetries = [
              5,
              (defaultOptions || EMPTY_OPTIONS).maxRetries,
              (extraOptions || EMPTY_OPTIONS).maxRetries,
            ].filter((x) => x !== void 0);
            const [maxRetries] = possibleMaxRetries.slice(-1);
            const defaultRetryCondition = (_, __, param) => {
              let { attempt } = param;
              return attempt <= maxRetries;
            };
            const options = {
              maxRetries,
              backoff: defaultBackoff,
              retryCondition: defaultRetryCondition,
              ...defaultOptions,
              ...extraOptions,
            };
            let retry2 = 0;
            while (true) {
              try {
                const result = await baseQuery(args, api, extraOptions);
                if (result.error) {
                  throw new HandledError(result);
                }
                return result;
              } catch (e) {
                retry2++;
                if (e.throwImmediately) {
                  if (e instanceof HandledError) {
                    return e.value;
                  }
                  throw e;
                }
                if (
                  e instanceof HandledError &&
                  !options.retryCondition(e.value.error, args, {
                    attempt: retry2,
                    baseQueryApi: api,
                    extraOptions,
                  })
                ) {
                  return e.value;
                }
                await options.backoff(retry2, options.maxRetries);
              }
            }
          };
        var retry = /* @__PURE__ */ Object.assign(retryWithBackoff, {
          fail,
        });
        // src/query/core/setupListeners.ts
        var onFocus = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createAction'
        ])('__rtkq/focused');
        var onFocusLost = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createAction'
        ])('__rtkq/unfocused');
        var onOnline = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createAction'
        ])('__rtkq/online');
        var onOffline = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createAction'
        ])('__rtkq/offline');
        var initialized = false;
        function setupListeners(dispatch, customHandler) {
          function defaultHandler() {
            const handleFocus = () => dispatch(onFocus());
            const handleFocusLost = () => dispatch(onFocusLost());
            const handleOnline = () => dispatch(onOnline());
            const handleOffline = () => dispatch(onOffline());
            const handleVisibilityChange = () => {
              if (window.document.visibilityState === 'visible') {
                handleFocus();
              } else {
                handleFocusLost();
              }
            };
            if (!initialized) {
              if (typeof window !== 'undefined' && window.addEventListener) {
                window.addEventListener(
                  'visibilitychange',
                  handleVisibilityChange,
                  false
                );
                window.addEventListener('focus', handleFocus, false);
                window.addEventListener('online', handleOnline, false);
                window.addEventListener('offline', handleOffline, false);
                initialized = true;
              }
            }
            const unsubscribe = () => {
              window.removeEventListener('focus', handleFocus);
              window.removeEventListener(
                'visibilitychange',
                handleVisibilityChange
              );
              window.removeEventListener('online', handleOnline);
              window.removeEventListener('offline', handleOffline);
              initialized = false;
            };
            return unsubscribe;
          }
          return customHandler
            ? customHandler(dispatch, {
                onFocus,
                onFocusLost,
                onOffline,
                onOnline,
              })
            : defaultHandler();
        }
        // src/query/endpointDefinitions.ts
        function isQueryDefinition(e) {
          return e.type === 'query' /* query */;
        }
        function isMutationDefinition(e) {
          return e.type === 'mutation' /* mutation */;
        }
        function isInfiniteQueryDefinition(e) {
          return e.type === 'infinitequery' /* infinitequery */;
        }
        function isAnyQueryDefinition(e) {
          return isQueryDefinition(e) || isInfiniteQueryDefinition(e);
        }
        function calculateProvidedBy(
          description,
          result,
          error,
          queryArg,
          meta,
          assertTagTypes
        ) {
          if (isFunction(description)) {
            return description(result, error, queryArg, meta)
              .filter(isNotNullish)
              .map(expandTagDescription)
              .map(assertTagTypes);
          }
          if (Array.isArray(description)) {
            return description.map(expandTagDescription).map(assertTagTypes);
          }
          return [];
        }
        function isFunction(t) {
          return typeof t === 'function';
        }
        function expandTagDescription(description) {
          return typeof description === 'string'
            ? {
                type: description,
              }
            : description;
        }
        // src/tsHelpers.ts
        function asSafePromise(promise, fallback) {
          return promise.catch(fallback);
        }
        // src/query/core/buildInitiate.ts
        var forceQueryFnSymbol = Symbol('forceQueryFn');
        var isUpsertQuery = (arg) =>
          typeof arg[forceQueryFnSymbol] === 'function';
        function buildInitiate(param) {
          let {
            serializeQueryArgs,
            queryThunk,
            infiniteQueryThunk,
            mutationThunk,
            api,
            context,
          } = param;
          const runningQueries = /* @__PURE__ */ new Map();
          const runningMutations = /* @__PURE__ */ new Map();
          const {
            unsubscribeQueryResult,
            removeMutationResult,
            updateSubscriptionOptions,
          } = api.internalActions;
          return {
            buildInitiateQuery,
            buildInitiateInfiniteQuery,
            buildInitiateMutation,
            getRunningQueryThunk,
            getRunningMutationThunk,
            getRunningQueriesThunk,
            getRunningMutationsThunk,
          };
          //TURBOPACK unreachable
          function getRunningQueryThunk(endpointName, queryArgs) {
            return (dispatch) => {
              var _runningQueries_get;
              const endpointDefinition =
                context.endpointDefinitions[endpointName];
              const queryCacheKey = serializeQueryArgs({
                queryArgs,
                endpointDefinition,
                endpointName,
              });
              return (_runningQueries_get = runningQueries.get(dispatch)) ===
                null || _runningQueries_get === void 0
                ? void 0
                : _runningQueries_get[queryCacheKey];
            };
          }
          function getRunningMutationThunk(
            _endpointName,
            fixedCacheKeyOrRequestId
          ) {
            return (dispatch) => {
              var _runningMutations_get;
              return (_runningMutations_get =
                runningMutations.get(dispatch)) === null ||
                _runningMutations_get === void 0
                ? void 0
                : _runningMutations_get[fixedCacheKeyOrRequestId];
            };
          }
          function getRunningQueriesThunk() {
            return (dispatch) =>
              Object.values(runningQueries.get(dispatch) || {}).filter(
                isNotNullish
              );
          }
          function getRunningMutationsThunk() {
            return (dispatch) =>
              Object.values(runningMutations.get(dispatch) || {}).filter(
                isNotNullish
              );
          }
          function middlewareWarning(dispatch) {
            if (('TURBOPACK compile-time truthy', 1)) {
              if (middlewareWarning.triggered) return;
              const returnedValue = dispatch(
                api.internalActions.internal_getRTKQSubscriptions()
              );
              middlewareWarning.triggered = true;
              if (
                typeof returnedValue !== 'object' ||
                typeof (returnedValue === null || returnedValue === void 0
                  ? void 0
                  : returnedValue.type) === 'string'
              ) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'Warning: Middleware for RTK-Query API at reducerPath "'.concat(
                        api.reducerPath,
                        '" has not been added to the store.\nYou must add the middleware for RTK-Query to function correctly!'
                      )
                );
              }
            }
          }
          function buildInitiateAnyQuery(endpointName, endpointDefinition) {
            const queryAction = function (arg) {
              let {
                subscribe = true,
                forceRefetch,
                subscriptionOptions,
                [forceQueryFnSymbol]: forceQueryFn,
                ...rest
              } = arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
              return (dispatch, getState) => {
                var _runningQueries_get;
                const queryCacheKey = serializeQueryArgs({
                  queryArgs: arg,
                  endpointDefinition,
                  endpointName,
                });
                let thunk;
                const commonThunkArgs = {
                  ...rest,
                  type: 'query',
                  subscribe,
                  forceRefetch,
                  subscriptionOptions,
                  endpointName,
                  originalArgs: arg,
                  queryCacheKey,
                  [forceQueryFnSymbol]: forceQueryFn,
                };
                if (isQueryDefinition(endpointDefinition)) {
                  thunk = queryThunk(commonThunkArgs);
                } else {
                  const { direction, initialPageParam } = rest;
                  thunk = infiniteQueryThunk({
                    ...commonThunkArgs,
                    // Supply these even if undefined. This helps with a field existence
                    // check over in `buildSlice.ts`
                    direction,
                    initialPageParam,
                  });
                }
                const selector = api.endpoints[endpointName].select(arg);
                const thunkResult = dispatch(thunk);
                const stateAfter = selector(getState());
                middlewareWarning(dispatch);
                const { requestId, abort } = thunkResult;
                const skippedSynchronously = stateAfter.requestId !== requestId;
                const runningQuery =
                  (_runningQueries_get = runningQueries.get(dispatch)) ===
                    null || _runningQueries_get === void 0
                    ? void 0
                    : _runningQueries_get[queryCacheKey];
                const selectFromState = () => selector(getState());
                const statePromise = Object.assign(
                  forceQueryFn // a query has been forced (upsertQueryData)
                    ? // -> we want to resolve it once data has been written with the data that will be written
                      thunkResult.then(selectFromState)
                    : skippedSynchronously && !runningQuery // a query has been skipped due to a condition and we do not have any currently running query
                      ? // -> we want to resolve it immediately with the current data
                        Promise.resolve(stateAfter) // query just started or one is already in flight
                      : // -> wait for the running query, then resolve with data from after that
                        Promise.all([runningQuery, thunkResult]).then(
                          selectFromState
                        ),
                  {
                    arg,
                    requestId,
                    subscriptionOptions,
                    queryCacheKey,
                    abort,
                    async unwrap() {
                      const result = await statePromise;
                      if (result.isError) {
                        throw result.error;
                      }
                      return result.data;
                    },
                    refetch: () =>
                      dispatch(
                        queryAction(arg, {
                          subscribe: false,
                          forceRefetch: true,
                        })
                      ),
                    unsubscribe() {
                      if (subscribe)
                        dispatch(
                          unsubscribeQueryResult({
                            queryCacheKey,
                            requestId,
                          })
                        );
                    },
                    updateSubscriptionOptions(options) {
                      statePromise.subscriptionOptions = options;
                      dispatch(
                        updateSubscriptionOptions({
                          endpointName,
                          requestId,
                          queryCacheKey,
                          options,
                        })
                      );
                    },
                  }
                );
                if (!runningQuery && !skippedSynchronously && !forceQueryFn) {
                  const running = getOrInsert(runningQueries, dispatch, {});
                  running[queryCacheKey] = statePromise;
                  statePromise.then(() => {
                    delete running[queryCacheKey];
                    if (!countObjectKeys(running)) {
                      runningQueries.delete(dispatch);
                    }
                  });
                }
                return statePromise;
              };
            };
            return queryAction;
          }
          function buildInitiateQuery(endpointName, endpointDefinition) {
            const queryAction = buildInitiateAnyQuery(
              endpointName,
              endpointDefinition
            );
            return queryAction;
          }
          function buildInitiateInfiniteQuery(
            endpointName,
            endpointDefinition
          ) {
            const infiniteQueryAction = buildInitiateAnyQuery(
              endpointName,
              endpointDefinition
            );
            return infiniteQueryAction;
          }
          function buildInitiateMutation(endpointName) {
            return function (arg) {
              let { track = true, fixedCacheKey } =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              return (dispatch, getState) => {
                const thunk = mutationThunk({
                  type: 'mutation',
                  endpointName,
                  originalArgs: arg,
                  track,
                  fixedCacheKey,
                });
                const thunkResult = dispatch(thunk);
                middlewareWarning(dispatch);
                const { requestId, abort, unwrap } = thunkResult;
                const returnValuePromise = asSafePromise(
                  thunkResult.unwrap().then((data) => ({
                    data,
                  })),
                  (error) => ({
                    error,
                  })
                );
                const reset = () => {
                  dispatch(
                    removeMutationResult({
                      requestId,
                      fixedCacheKey,
                    })
                  );
                };
                const ret = Object.assign(returnValuePromise, {
                  arg: thunkResult.arg,
                  requestId,
                  abort,
                  unwrap,
                  reset,
                });
                const running = runningMutations.get(dispatch) || {};
                runningMutations.set(dispatch, running);
                running[requestId] = ret;
                ret.then(() => {
                  delete running[requestId];
                  if (!countObjectKeys(running)) {
                    runningMutations.delete(dispatch);
                  }
                });
                if (fixedCacheKey) {
                  running[fixedCacheKey] = ret;
                  ret.then(() => {
                    if (running[fixedCacheKey] === ret) {
                      delete running[fixedCacheKey];
                      if (!countObjectKeys(running)) {
                        runningMutations.delete(dispatch);
                      }
                    }
                  });
                }
                return ret;
              };
            };
          }
        }
        var NamedSchemaError = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$standard$2d$schema$2f$utils$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
          'SchemaError'
        ] {
          constructor(issues, value, schemaName, _bqMeta) {
            super(issues);
            this.value = value;
            this.schemaName = schemaName;
            this._bqMeta = _bqMeta;
          }
        };
        async function parseWithSchema(schema, data, schemaName, bqMeta) {
          const result = await schema['~standard'].validate(data);
          if (result.issues) {
            throw new NamedSchemaError(result.issues, data, schemaName, bqMeta);
          }
          return result.value;
        }
        // src/query/core/buildThunks.ts
        function defaultTransformResponse(baseQueryReturnValue) {
          return baseQueryReturnValue;
        }
        var addShouldAutoBatch = function () {
          let arg =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          return {
            ...arg,
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'SHOULD_AUTOBATCH'
            ]]: true,
          };
        };
        function buildThunks(param) {
          let {
            reducerPath,
            baseQuery,
            context: { endpointDefinitions },
            serializeQueryArgs,
            api,
            assertTagType,
            selectors,
            onSchemaFailure,
            catchSchemaFailure: globalCatchSchemaFailure,
            skipSchemaValidation: globalSkipSchemaValidation,
          } = param;
          const patchQueryData =
            (endpointName, arg, patches, updateProvided) =>
            (dispatch, getState) => {
              const endpointDefinition = endpointDefinitions[endpointName];
              const queryCacheKey = serializeQueryArgs({
                queryArgs: arg,
                endpointDefinition,
                endpointName,
              });
              dispatch(
                api.internalActions.queryResultPatched({
                  queryCacheKey,
                  patches,
                })
              );
              if (!updateProvided) {
                return;
              }
              const newValue = api.endpoints[endpointName].select(arg)(
                // Work around TS 4.1 mismatch
                getState()
              );
              const providedTags = calculateProvidedBy(
                endpointDefinition.providesTags,
                newValue.data,
                void 0,
                arg,
                {},
                assertTagType
              );
              dispatch(
                api.internalActions.updateProvidedBy([
                  {
                    queryCacheKey,
                    providedTags,
                  },
                ])
              );
            };
          function addToStart(items, item) {
            let max =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : 0;
            const newItems = [item, ...items];
            return max && newItems.length > max
              ? newItems.slice(0, -1)
              : newItems;
          }
          function addToEnd(items, item) {
            let max =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : 0;
            const newItems = [...items, item];
            return max && newItems.length > max ? newItems.slice(1) : newItems;
          }
          const updateQueryData = function (endpointName, arg, updateRecipe) {
            let updateProvided =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : true;
            return (dispatch, getState) => {
              const endpointDefinition = api.endpoints[endpointName];
              const currentState = endpointDefinition.select(arg)(
                // Work around TS 4.1 mismatch
                getState()
              );
              const ret = {
                patches: [],
                inversePatches: [],
                undo: () =>
                  dispatch(
                    api.util.patchQueryData(
                      endpointName,
                      arg,
                      ret.inversePatches,
                      updateProvided
                    )
                  ),
              };
              if (currentState.status === 'uninitialized' /* uninitialized */) {
                return ret;
              }
              let newValue;
              if ('data' in currentState) {
                if (
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'isDraftable'
                  ])(currentState.data)
                ) {
                  const [value, patches, inversePatches] = (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'produceWithPatches'
                  ])(currentState.data, updateRecipe);
                  ret.patches.push(...patches);
                  ret.inversePatches.push(...inversePatches);
                  newValue = value;
                } else {
                  newValue = updateRecipe(currentState.data);
                  ret.patches.push({
                    op: 'replace',
                    path: [],
                    value: newValue,
                  });
                  ret.inversePatches.push({
                    op: 'replace',
                    path: [],
                    value: currentState.data,
                  });
                }
              }
              if (ret.patches.length === 0) {
                return ret;
              }
              dispatch(
                api.util.patchQueryData(
                  endpointName,
                  arg,
                  ret.patches,
                  updateProvided
                )
              );
              return ret;
            };
          };
          const upsertQueryData = (endpointName, arg, value) => (dispatch) => {
            const res = dispatch(
              api.endpoints[endpointName].initiate(arg, {
                subscribe: false,
                forceRefetch: true,
                [forceQueryFnSymbol]: () => ({
                  data: value,
                }),
              })
            );
            return res;
          };
          const getTransformCallbackForEndpoint = (
            endpointDefinition,
            transformFieldName
          ) => {
            return endpointDefinition.query &&
              endpointDefinition[transformFieldName]
              ? endpointDefinition[transformFieldName]
              : defaultTransformResponse;
          };
          const executeEndpoint = async (arg, param) => {
            let {
              signal,
              abort,
              rejectWithValue,
              fulfillWithValue,
              dispatch,
              getState,
              extra,
            } = param;
            const endpointDefinition = endpointDefinitions[arg.endpointName];
            const {
              metaSchema,
              skipSchemaValidation = globalSkipSchemaValidation,
            } = endpointDefinition;
            try {
              let transformResponse = getTransformCallbackForEndpoint(
                endpointDefinition,
                'transformResponse'
              );
              const baseQueryApi = {
                signal,
                abort,
                dispatch,
                getState,
                extra,
                endpoint: arg.endpointName,
                type: arg.type,
                forced:
                  arg.type === 'query'
                    ? isForcedQuery(arg, getState())
                    : void 0,
                queryCacheKey:
                  arg.type === 'query' ? arg.queryCacheKey : void 0,
              };
              const forceQueryFn =
                arg.type === 'query' ? arg[forceQueryFnSymbol] : void 0;
              let finalQueryReturnValue;
              const fetchPage = async (data, param, maxPages, previous) => {
                if (param == null && data.pages.length) {
                  return Promise.resolve({
                    data,
                  });
                }
                const finalQueryArg = {
                  queryArg: arg.originalArgs,
                  pageParam: param,
                };
                const pageResponse = await executeRequest(finalQueryArg);
                const addTo = previous ? addToStart : addToEnd;
                return {
                  data: {
                    pages: addTo(data.pages, pageResponse.data, maxPages),
                    pageParams: addTo(data.pageParams, param, maxPages),
                  },
                  meta: pageResponse.meta,
                };
              };
              async function executeRequest(finalQueryArg) {
                let result;
                const {
                  extraOptions,
                  argSchema,
                  rawResponseSchema,
                  responseSchema,
                } = endpointDefinition;
                if (argSchema && !skipSchemaValidation) {
                  finalQueryArg = await parseWithSchema(
                    argSchema,
                    finalQueryArg,
                    'argSchema',
                    {}
                  );
                }
                if (forceQueryFn) {
                  result = forceQueryFn();
                } else if (endpointDefinition.query) {
                  result = await baseQuery(
                    endpointDefinition.query(finalQueryArg),
                    baseQueryApi,
                    extraOptions
                  );
                } else {
                  result = await endpointDefinition.queryFn(
                    finalQueryArg,
                    baseQueryApi,
                    extraOptions,
                    (arg2) => baseQuery(arg2, baseQueryApi, extraOptions)
                  );
                }
                if (
                  typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'default'
                  ] !== 'undefined' &&
                  ('TURBOPACK compile-time value', 'development') ===
                    'development'
                ) {
                  const what = endpointDefinition.query
                    ? '`baseQuery`'
                    : '`queryFn`';
                  let err;
                  if (!result) {
                    err = ''.concat(what, ' did not return anything.');
                  } else if (typeof result !== 'object') {
                    err = ''.concat(what, ' did not return an object.');
                  } else if (result.error && result.data) {
                    err = ''.concat(
                      what,
                      ' returned an object containing both `error` and `result`.'
                    );
                  } else if (
                    result.error === void 0 &&
                    result.data === void 0
                  ) {
                    err = ''.concat(
                      what,
                      ' returned an object containing neither a valid `error` and `result`. At least one of them should not be `undefined`'
                    );
                  } else {
                    for (const key of Object.keys(result)) {
                      if (key !== 'error' && key !== 'data' && key !== 'meta') {
                        err = 'The object returned by '
                          .concat(what, ' has the unknown property ')
                          .concat(key, '.');
                        break;
                      }
                    }
                  }
                  if (err) {
                    console.error(
                      'Error encountered handling the endpoint '
                        .concat(arg.endpointName, '.\n                  ')
                        .concat(
                          err,
                          '\n                  It needs to return an object with either the shape `{ data: <value> }` or `{ error: <value> }` that may contain an optional `meta` property.\n                  Object returned was:'
                        ),
                      result
                    );
                  }
                }
                if (result.error)
                  throw new HandledError(result.error, result.meta);
                let { data } = result;
                if (rawResponseSchema && !skipSchemaValidation) {
                  data = await parseWithSchema(
                    rawResponseSchema,
                    result.data,
                    'rawResponseSchema',
                    result.meta
                  );
                }
                let transformedResponse = await transformResponse(
                  data,
                  result.meta,
                  finalQueryArg
                );
                if (responseSchema && !skipSchemaValidation) {
                  transformedResponse = await parseWithSchema(
                    responseSchema,
                    transformedResponse,
                    'responseSchema',
                    result.meta
                  );
                }
                return {
                  ...result,
                  data: transformedResponse,
                };
              }
              if (
                arg.type === 'query' &&
                'infiniteQueryOptions' in endpointDefinition
              ) {
                var _selectors_selectQueryEntry;
                const { infiniteQueryOptions } = endpointDefinition;
                const { maxPages = Infinity } = infiniteQueryOptions;
                let result;
                const blankData = {
                  pages: [],
                  pageParams: [],
                };
                const cachedData =
                  (_selectors_selectQueryEntry = selectors.selectQueryEntry(
                    getState(),
                    arg.queryCacheKey
                  )) === null || _selectors_selectQueryEntry === void 0
                    ? void 0
                    : _selectors_selectQueryEntry.data;
                const isForcedQueryNeedingRefetch = // arg.forceRefetch
                  isForcedQuery(arg, getState()) && !arg.direction;
                const existingData =
                  isForcedQueryNeedingRefetch || !cachedData
                    ? blankData
                    : cachedData;
                if (
                  'direction' in arg &&
                  arg.direction &&
                  existingData.pages.length
                ) {
                  const previous = arg.direction === 'backward';
                  const pageParamFn = previous
                    ? getPreviousPageParam
                    : getNextPageParam;
                  const param = pageParamFn(
                    infiniteQueryOptions,
                    existingData,
                    arg.originalArgs
                  );
                  result = await fetchPage(
                    existingData,
                    param,
                    maxPages,
                    previous
                  );
                } else {
                  const {
                    initialPageParam = infiniteQueryOptions.initialPageParam,
                  } = arg;
                  var _cachedData_pageParams;
                  const cachedPageParams =
                    (_cachedData_pageParams =
                      cachedData === null || cachedData === void 0
                        ? void 0
                        : cachedData.pageParams) !== null &&
                    _cachedData_pageParams !== void 0
                      ? _cachedData_pageParams
                      : [];
                  var _cachedPageParams_;
                  const firstPageParam =
                    (_cachedPageParams_ = cachedPageParams[0]) !== null &&
                    _cachedPageParams_ !== void 0
                      ? _cachedPageParams_
                      : initialPageParam;
                  const totalPages = cachedPageParams.length;
                  result = await fetchPage(
                    existingData,
                    firstPageParam,
                    maxPages
                  );
                  if (forceQueryFn) {
                    result = {
                      data: result.data.pages[0],
                    };
                  }
                  for (let i = 1; i < totalPages; i++) {
                    const param = getNextPageParam(
                      infiniteQueryOptions,
                      result.data,
                      arg.originalArgs
                    );
                    result = await fetchPage(result.data, param, maxPages);
                  }
                }
                finalQueryReturnValue = result;
              } else {
                finalQueryReturnValue = await executeRequest(arg.originalArgs);
              }
              if (
                metaSchema &&
                !skipSchemaValidation &&
                finalQueryReturnValue.meta
              ) {
                finalQueryReturnValue.meta = await parseWithSchema(
                  metaSchema,
                  finalQueryReturnValue.meta,
                  'metaSchema',
                  finalQueryReturnValue.meta
                );
              }
              return fulfillWithValue(
                finalQueryReturnValue.data,
                addShouldAutoBatch({
                  fulfilledTimeStamp: Date.now(),
                  baseQueryMeta: finalQueryReturnValue.meta,
                })
              );
            } catch (error) {
              let caughtError = error;
              if (caughtError instanceof HandledError) {
                let transformErrorResponse = getTransformCallbackForEndpoint(
                  endpointDefinition,
                  'transformErrorResponse'
                );
                const { rawErrorResponseSchema, errorResponseSchema } =
                  endpointDefinition;
                let { value, meta } = caughtError;
                try {
                  if (rawErrorResponseSchema && !skipSchemaValidation) {
                    value = await parseWithSchema(
                      rawErrorResponseSchema,
                      value,
                      'rawErrorResponseSchema',
                      meta
                    );
                  }
                  if (metaSchema && !skipSchemaValidation) {
                    meta = await parseWithSchema(
                      metaSchema,
                      meta,
                      'metaSchema',
                      meta
                    );
                  }
                  let transformedErrorResponse = await transformErrorResponse(
                    value,
                    meta,
                    arg.originalArgs
                  );
                  if (errorResponseSchema && !skipSchemaValidation) {
                    transformedErrorResponse = await parseWithSchema(
                      errorResponseSchema,
                      transformedErrorResponse,
                      'errorResponseSchema',
                      meta
                    );
                  }
                  return rejectWithValue(
                    transformedErrorResponse,
                    addShouldAutoBatch({
                      baseQueryMeta: meta,
                    })
                  );
                } catch (e) {
                  caughtError = e;
                }
              }
              try {
                if (caughtError instanceof NamedSchemaError) {
                  var _endpointDefinition_onSchemaFailure;
                  const info = {
                    endpoint: arg.endpointName,
                    arg: arg.originalArgs,
                    type: arg.type,
                    queryCacheKey:
                      arg.type === 'query' ? arg.queryCacheKey : void 0,
                  };
                  (_endpointDefinition_onSchemaFailure =
                    endpointDefinition.onSchemaFailure) === null ||
                  _endpointDefinition_onSchemaFailure === void 0
                    ? void 0
                    : _endpointDefinition_onSchemaFailure.call(
                        endpointDefinition,
                        caughtError,
                        info
                      );
                  onSchemaFailure === null || onSchemaFailure === void 0
                    ? void 0
                    : onSchemaFailure(caughtError, info);
                  const { catchSchemaFailure = globalCatchSchemaFailure } =
                    endpointDefinition;
                  if (catchSchemaFailure) {
                    return rejectWithValue(
                      catchSchemaFailure(caughtError, info),
                      addShouldAutoBatch({
                        baseQueryMeta: caughtError._bqMeta,
                      })
                    );
                  }
                }
              } catch (e) {
                caughtError = e;
              }
              if (
                typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'default'
                ] !== 'undefined' &&
                ('TURBOPACK compile-time value', 'development') !== 'production'
              ) {
                console.error(
                  'An unhandled error occurred processing a request for the endpoint "'.concat(
                    arg.endpointName,
                    '".\nIn the case of an unhandled error, no tags will be "provided" or "invalidated".'
                  ),
                  caughtError
                );
              } else {
                console.error(caughtError);
              }
              throw caughtError;
            }
          };
          function isForcedQuery(arg, state) {
            const requestState = selectors.selectQueryEntry(
              state,
              arg.queryCacheKey
            );
            const baseFetchOnMountOrArgChange =
              selectors.selectConfig(state).refetchOnMountOrArgChange;
            const fulfilledVal =
              requestState === null || requestState === void 0
                ? void 0
                : requestState.fulfilledTimeStamp;
            var _arg_forceRefetch;
            const refetchVal =
              (_arg_forceRefetch = arg.forceRefetch) !== null &&
              _arg_forceRefetch !== void 0
                ? _arg_forceRefetch
                : arg.subscribe && baseFetchOnMountOrArgChange;
            if (refetchVal) {
              return (
                refetchVal === true ||
                (Number(/* @__PURE__ */ new Date()) - Number(fulfilledVal)) /
                  1e3 >=
                  refetchVal
              );
            }
            return false;
          }
          const createQueryThunk = () => {
            const generatedQueryThunk = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'createAsyncThunk'
            ])(''.concat(reducerPath, '/executeQuery'), executeEndpoint, {
              getPendingMeta(param) {
                let { arg } = param;
                const endpointDefinition =
                  endpointDefinitions[arg.endpointName];
                return addShouldAutoBatch({
                  startedTimeStamp: Date.now(),
                  ...(isInfiniteQueryDefinition(endpointDefinition)
                    ? {
                        direction: arg.direction,
                      }
                    : {}),
                });
              },
              condition(queryThunkArg, param) {
                let { getState } = param;
                var _endpointDefinition_forceRefetch;
                const state = getState();
                const requestState = selectors.selectQueryEntry(
                  state,
                  queryThunkArg.queryCacheKey
                );
                const fulfilledVal =
                  requestState === null || requestState === void 0
                    ? void 0
                    : requestState.fulfilledTimeStamp;
                const currentArg = queryThunkArg.originalArgs;
                const previousArg =
                  requestState === null || requestState === void 0
                    ? void 0
                    : requestState.originalArgs;
                const endpointDefinition =
                  endpointDefinitions[queryThunkArg.endpointName];
                const direction = queryThunkArg.direction;
                if (isUpsertQuery(queryThunkArg)) {
                  return true;
                }
                if (
                  (requestState === null || requestState === void 0
                    ? void 0
                    : requestState.status) === 'pending'
                ) {
                  return false;
                }
                if (isForcedQuery(queryThunkArg, state)) {
                  return true;
                }
                if (
                  isQueryDefinition(endpointDefinition) &&
                  (endpointDefinition === null || endpointDefinition === void 0
                    ? void 0
                    : (_endpointDefinition_forceRefetch =
                          endpointDefinition.forceRefetch) === null ||
                        _endpointDefinition_forceRefetch === void 0
                      ? void 0
                      : _endpointDefinition_forceRefetch.call(
                          endpointDefinition,
                          {
                            currentArg,
                            previousArg,
                            endpointState: requestState,
                            state,
                          }
                        ))
                ) {
                  return true;
                }
                if (fulfilledVal && !direction) {
                  return false;
                }
                return true;
              },
              dispatchConditionRejection: true,
            });
            return generatedQueryThunk;
          };
          const queryThunk = createQueryThunk();
          const infiniteQueryThunk = createQueryThunk();
          const mutationThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createAsyncThunk'
          ])(''.concat(reducerPath, '/executeMutation'), executeEndpoint, {
            getPendingMeta() {
              return addShouldAutoBatch({
                startedTimeStamp: Date.now(),
              });
            },
          });
          const hasTheForce = (options) => 'force' in options;
          const hasMaxAge = (options) => 'ifOlderThan' in options;
          const prefetch =
            (endpointName, arg, options) => (dispatch, getState) => {
              const force = hasTheForce(options) && options.force;
              const maxAge = hasMaxAge(options) && options.ifOlderThan;
              const queryAction = function () {
                let force2 =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : true;
                const options2 = {
                  forceRefetch: force2,
                  isPrefetch: true,
                };
                return api.endpoints[endpointName].initiate(arg, options2);
              };
              const latestStateValue =
                api.endpoints[endpointName].select(arg)(getState());
              if (force) {
                dispatch(queryAction());
              } else if (maxAge) {
                const lastFulfilledTs =
                  latestStateValue === null || latestStateValue === void 0
                    ? void 0
                    : latestStateValue.fulfilledTimeStamp;
                if (!lastFulfilledTs) {
                  dispatch(queryAction());
                  return;
                }
                const shouldRetrigger =
                  (Number(/* @__PURE__ */ new Date()) -
                    Number(new Date(lastFulfilledTs))) /
                    1e3 >=
                  maxAge;
                if (shouldRetrigger) {
                  dispatch(queryAction());
                }
              } else {
                dispatch(queryAction(false));
              }
            };
          function matchesEndpoint(endpointName) {
            return (action) => {
              var _action_meta_arg, _action_meta;
              return (
                (action === null || action === void 0
                  ? void 0
                  : (_action_meta = action.meta) === null ||
                      _action_meta === void 0
                    ? void 0
                    : (_action_meta_arg = _action_meta.arg) === null ||
                        _action_meta_arg === void 0
                      ? void 0
                      : _action_meta_arg.endpointName) === endpointName
              );
            };
          }
          function buildMatchThunkActions(thunk, endpointName) {
            return {
              matchPending: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'isAllOf'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'isPending'
                ])(thunk),
                matchesEndpoint(endpointName)
              ),
              matchFulfilled: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'isAllOf'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'isFulfilled'
                ])(thunk),
                matchesEndpoint(endpointName)
              ),
              matchRejected: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'isAllOf'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'isRejected'
                ])(thunk),
                matchesEndpoint(endpointName)
              ),
            };
          }
          return {
            queryThunk,
            mutationThunk,
            infiniteQueryThunk,
            prefetch,
            updateQueryData,
            upsertQueryData,
            patchQueryData,
            buildMatchThunkActions,
          };
        }
        function getNextPageParam(options, param, queryArg) {
          let { pages, pageParams } = param;
          const lastIndex = pages.length - 1;
          return options.getNextPageParam(
            pages[lastIndex],
            pages,
            pageParams[lastIndex],
            pageParams,
            queryArg
          );
        }
        function getPreviousPageParam(options, param, queryArg) {
          let { pages, pageParams } = param;
          var _options_getPreviousPageParam;
          return (_options_getPreviousPageParam =
            options.getPreviousPageParam) === null ||
            _options_getPreviousPageParam === void 0
            ? void 0
            : _options_getPreviousPageParam.call(
                options,
                pages[0],
                pages,
                pageParams[0],
                pageParams,
                queryArg
              );
        }
        function calculateProvidedByThunk(
          action,
          type,
          endpointDefinitions,
          assertTagType
        ) {
          return calculateProvidedBy(
            endpointDefinitions[action.meta.arg.endpointName][type],
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isFulfilled'
            ])(action)
              ? action.payload
              : void 0,
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isRejectedWithValue'
            ])(action)
              ? action.payload
              : void 0,
            action.meta.arg.originalArgs,
            'baseQueryMeta' in action.meta ? action.meta.baseQueryMeta : void 0,
            assertTagType
          );
        }
        function updateQuerySubstateIfExists(state, queryCacheKey, update) {
          const substate = state[queryCacheKey];
          if (substate) {
            update(substate);
          }
        }
        function getMutationCacheKey(id) {
          var _ref;
          return (_ref =
            'arg' in id ? id.arg.fixedCacheKey : id.fixedCacheKey) !== null &&
            _ref !== void 0
            ? _ref
            : id.requestId;
        }
        function updateMutationSubstateIfExists(state, id, update) {
          const substate = state[getMutationCacheKey(id)];
          if (substate) {
            update(substate);
          }
        }
        var initialState = {};
        function buildSlice(param) {
          let {
            reducerPath,
            queryThunk,
            mutationThunk,
            serializeQueryArgs,
            context: {
              endpointDefinitions: definitions,
              apiUid,
              extractRehydrationInfo,
              hasRehydrationInfo,
            },
            assertTagType,
            config,
          } = param;
          const resetApiState = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createAction'
          ])(''.concat(reducerPath, '/resetApiState'));
          function writePendingCacheEntry(draft, arg, upserting, meta) {
            var _draft, _arg_queryCacheKey;
            var _;
            (_ = (_draft = draft)[(_arg_queryCacheKey = arg.queryCacheKey)]) !==
              null && _ !== void 0
              ? _
              : (_draft[_arg_queryCacheKey] = {
                  status: 'uninitialized' /* uninitialized */,
                  endpointName: arg.endpointName,
                });
            updateQuerySubstateIfExists(
              draft,
              arg.queryCacheKey,
              (substate) => {
                substate.status = 'pending' /* pending */;
                substate.requestId =
                  upserting && substate.requestId // for `upsertQuery` **updates**, keep the current `requestId`
                    ? substate.requestId // for normal queries or `upsertQuery` **inserts** always update the `requestId`
                    : meta.requestId;
                if (arg.originalArgs !== void 0) {
                  substate.originalArgs = arg.originalArgs;
                }
                substate.startedTimeStamp = meta.startedTimeStamp;
                const endpointDefinition = definitions[meta.arg.endpointName];
                if (
                  isInfiniteQueryDefinition(endpointDefinition) &&
                  'direction' in arg
                ) {
                  substate.direction = arg.direction;
                }
              }
            );
          }
          function writeFulfilledCacheEntry(draft, meta, payload, upserting) {
            updateQuerySubstateIfExists(
              draft,
              meta.arg.queryCacheKey,
              (substate) => {
                if (substate.requestId !== meta.requestId && !upserting) return;
                const { merge } = definitions[meta.arg.endpointName];
                substate.status = 'fulfilled' /* fulfilled */;
                if (merge) {
                  if (substate.data !== void 0) {
                    const {
                      fulfilledTimeStamp,
                      arg,
                      baseQueryMeta,
                      requestId,
                    } = meta;
                    let newData = (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__[
                      'createNextState'
                    ])(substate.data, (draftSubstateData) => {
                      return merge(draftSubstateData, payload, {
                        arg: arg.originalArgs,
                        baseQueryMeta,
                        fulfilledTimeStamp,
                        requestId,
                      });
                    });
                    substate.data = newData;
                  } else {
                    substate.data = payload;
                  }
                } else {
                  var _definitions_meta_arg_endpointName_structuralSharing;
                  substate.data = (
                    (_definitions_meta_arg_endpointName_structuralSharing =
                      definitions[meta.arg.endpointName].structuralSharing) !==
                      null &&
                    _definitions_meta_arg_endpointName_structuralSharing !==
                      void 0
                      ? _definitions_meta_arg_endpointName_structuralSharing
                      : true
                  )
                    ? copyWithStructuralSharing(
                        (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                          'isDraft'
                        ])(substate.data)
                          ? (0,
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                              'original'
                            ])(substate.data)
                          : substate.data,
                        payload
                      )
                    : payload;
                }
                delete substate.error;
                substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;
              }
            );
          }
          const querySlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/queries'),
            initialState,
            reducers: {
              removeQueryResult: {
                reducer(draft, param) {
                  let {
                    payload: { queryCacheKey },
                  } = param;
                  delete draft[queryCacheKey];
                },
                prepare: (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'prepareAutoBatched'
                ])(),
              },
              cacheEntriesUpserted: {
                reducer(draft, action) {
                  for (const entry of action.payload) {
                    const { queryDescription: arg, value } = entry;
                    writePendingCacheEntry(draft, arg, true, {
                      arg,
                      requestId: action.meta.requestId,
                      startedTimeStamp: action.meta.timestamp,
                    });
                    writeFulfilledCacheEntry(
                      draft,
                      {
                        arg,
                        requestId: action.meta.requestId,
                        fulfilledTimeStamp: action.meta.timestamp,
                        baseQueryMeta: {},
                      },
                      value, // We know we're upserting here
                      true
                    );
                  }
                },
                prepare: (payload) => {
                  const queryDescriptions = payload.map((entry) => {
                    const { endpointName, arg, value } = entry;
                    const endpointDefinition = definitions[endpointName];
                    const queryDescription = {
                      type: 'query',
                      endpointName,
                      originalArgs: entry.arg,
                      queryCacheKey: serializeQueryArgs({
                        queryArgs: arg,
                        endpointDefinition,
                        endpointName,
                      }),
                    };
                    return {
                      queryDescription,
                      value,
                    };
                  });
                  const result = {
                    payload: queryDescriptions,
                    meta: {
                      [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                        'SHOULD_AUTOBATCH'
                      ]]: true,
                      requestId: (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                        'nanoid'
                      ])(),
                      timestamp: Date.now(),
                    },
                  };
                  return result;
                },
              },
              queryResultPatched: {
                reducer(draft, param) {
                  let {
                    payload: { queryCacheKey, patches },
                  } = param;
                  updateQuerySubstateIfExists(
                    draft,
                    queryCacheKey,
                    (substate) => {
                      substate.data = (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'applyPatches'
                      ])(substate.data, patches.concat());
                    }
                  );
                },
                prepare: (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'prepareAutoBatched'
                ])(),
              },
            },
            extraReducers(builder) {
              builder
                .addCase(queryThunk.pending, (draft, param) => {
                  let {
                    meta,
                    meta: { arg },
                  } = param;
                  const upserting = isUpsertQuery(arg);
                  writePendingCacheEntry(draft, arg, upserting, meta);
                })
                .addCase(queryThunk.fulfilled, (draft, param) => {
                  let { meta, payload } = param;
                  const upserting = isUpsertQuery(meta.arg);
                  writeFulfilledCacheEntry(draft, meta, payload, upserting);
                })
                .addCase(queryThunk.rejected, (draft, param) => {
                  let {
                    meta: { condition, arg, requestId },
                    error,
                    payload,
                  } = param;
                  updateQuerySubstateIfExists(
                    draft,
                    arg.queryCacheKey,
                    (substate) => {
                      if (condition) {
                      } else {
                        if (substate.requestId !== requestId) return;
                        substate.status = 'rejected' /* rejected */;
                        substate.error =
                          payload !== null && payload !== void 0
                            ? payload
                            : error;
                      }
                    }
                  );
                })
                .addMatcher(hasRehydrationInfo, (draft, action) => {
                  const { queries } = extractRehydrationInfo(action);
                  for (const [key, entry] of Object.entries(queries)) {
                    if (
                      // do not rehydrate entries that were currently in flight.
                      (entry === null || entry === void 0
                        ? void 0
                        : entry.status) === 'fulfilled' /* fulfilled */ ||
                      (entry === null || entry === void 0
                        ? void 0
                        : entry.status) === 'rejected' /* rejected */
                    ) {
                      draft[key] = entry;
                    }
                  }
                });
            },
          });
          const mutationSlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/mutations'),
            initialState,
            reducers: {
              removeMutationResult: {
                reducer(draft, param) {
                  let { payload } = param;
                  const cacheKey = getMutationCacheKey(payload);
                  if (cacheKey in draft) {
                    delete draft[cacheKey];
                  }
                },
                prepare: (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'prepareAutoBatched'
                ])(),
              },
            },
            extraReducers(builder) {
              builder
                .addCase(mutationThunk.pending, (draft, param) => {
                  let {
                    meta,
                    meta: { requestId, arg, startedTimeStamp },
                  } = param;
                  if (!arg.track) return;
                  draft[getMutationCacheKey(meta)] = {
                    requestId,
                    status: 'pending' /* pending */,
                    endpointName: arg.endpointName,
                    startedTimeStamp,
                  };
                })
                .addCase(mutationThunk.fulfilled, (draft, param) => {
                  let { payload, meta } = param;
                  if (!meta.arg.track) return;
                  updateMutationSubstateIfExists(draft, meta, (substate) => {
                    if (substate.requestId !== meta.requestId) return;
                    substate.status = 'fulfilled' /* fulfilled */;
                    substate.data = payload;
                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;
                  });
                })
                .addCase(mutationThunk.rejected, (draft, param) => {
                  let { payload, error, meta } = param;
                  if (!meta.arg.track) return;
                  updateMutationSubstateIfExists(draft, meta, (substate) => {
                    if (substate.requestId !== meta.requestId) return;
                    substate.status = 'rejected' /* rejected */;
                    substate.error =
                      payload !== null && payload !== void 0 ? payload : error;
                  });
                })
                .addMatcher(hasRehydrationInfo, (draft, action) => {
                  const { mutations } = extractRehydrationInfo(action);
                  for (const [key, entry] of Object.entries(mutations)) {
                    if (
                      // do not rehydrate entries that were currently in flight.
                      ((entry === null || entry === void 0
                        ? void 0
                        : entry.status) === 'fulfilled' /* fulfilled */ ||
                        (entry === null || entry === void 0
                          ? void 0
                          : entry.status) === 'rejected') /* rejected */ && // only rehydrate endpoints that were persisted using a `fixedCacheKey`
                      key !==
                        (entry === null || entry === void 0
                          ? void 0
                          : entry.requestId)
                    ) {
                      draft[key] = entry;
                    }
                  }
                });
            },
          });
          const initialInvalidationState = {
            tags: {},
            keys: {},
          };
          const invalidationSlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/invalidation'),
            initialState: initialInvalidationState,
            reducers: {
              updateProvidedBy: {
                reducer(draft, action) {
                  for (const {
                    queryCacheKey,
                    providedTags,
                  } of action.payload) {
                    removeCacheKeyFromTags(draft, queryCacheKey);
                    for (const { type, id } of providedTags) {
                      var _ref, _ref1, _draft_tags, _type;
                      var _, _1;
                      const subscribedQueries =
                        (_1 = (_ref =
                          (_ = (_draft_tags = draft.tags)[(_type = type)]) !==
                            null && _ !== void 0
                            ? _
                            : (_draft_tags[_type] = {}))[
                          (_ref1 = id || '__internal_without_id')
                        ]) !== null && _1 !== void 0
                          ? _1
                          : (_ref[_ref1] = []);
                      const alreadySubscribed =
                        subscribedQueries.includes(queryCacheKey);
                      if (!alreadySubscribed) {
                        subscribedQueries.push(queryCacheKey);
                      }
                    }
                    draft.keys[queryCacheKey] = providedTags;
                  }
                },
                prepare: (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'prepareAutoBatched'
                ])(),
              },
            },
            extraReducers(builder) {
              builder
                .addCase(
                  querySlice.actions.removeQueryResult,
                  (draft, param) => {
                    let {
                      payload: { queryCacheKey },
                    } = param;
                    removeCacheKeyFromTags(draft, queryCacheKey);
                  }
                )
                .addMatcher(hasRehydrationInfo, (draft, action) => {
                  const { provided } = extractRehydrationInfo(action);
                  for (const [type, incomingTags] of Object.entries(provided)) {
                    for (const [id, cacheKeys] of Object.entries(
                      incomingTags
                    )) {
                      var _ref, _ref1, _draft_tags, _type;
                      var _, _1;
                      const subscribedQueries =
                        (_1 = (_ref =
                          (_ = (_draft_tags = draft.tags)[(_type = type)]) !==
                            null && _ !== void 0
                            ? _
                            : (_draft_tags[_type] = {}))[
                          (_ref1 = id || '__internal_without_id')
                        ]) !== null && _1 !== void 0
                          ? _1
                          : (_ref[_ref1] = []);
                      for (const queryCacheKey of cacheKeys) {
                        const alreadySubscribed =
                          subscribedQueries.includes(queryCacheKey);
                        if (!alreadySubscribed) {
                          subscribedQueries.push(queryCacheKey);
                        }
                      }
                    }
                  }
                })
                .addMatcher(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    'isAnyOf'
                  ])(
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                      'isFulfilled'
                    ])(queryThunk),
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                      'isRejectedWithValue'
                    ])(queryThunk)
                  ),
                  (draft, action) => {
                    writeProvidedTagsForQueries(draft, [action]);
                  }
                )
                .addMatcher(
                  querySlice.actions.cacheEntriesUpserted.match,
                  (draft, action) => {
                    const mockActions = action.payload.map((param) => {
                      let { queryDescription, value } = param;
                      return {
                        type: 'UNKNOWN',
                        payload: value,
                        meta: {
                          requestStatus: 'fulfilled',
                          requestId: 'UNKNOWN',
                          arg: queryDescription,
                        },
                      };
                    });
                    writeProvidedTagsForQueries(draft, mockActions);
                  }
                );
            },
          });
          function removeCacheKeyFromTags(draft, queryCacheKey) {
            var _draft_keys_queryCacheKey;
            const existingTags =
              (_draft_keys_queryCacheKey = draft.keys[queryCacheKey]) !==
                null && _draft_keys_queryCacheKey !== void 0
                ? _draft_keys_queryCacheKey
                : [];
            for (const tag of existingTags) {
              var _draft_tags_tagType;
              const tagType = tag.type;
              var _tag_id;
              const tagId =
                (_tag_id = tag.id) !== null && _tag_id !== void 0
                  ? _tag_id
                  : '__internal_without_id';
              const tagSubscriptions =
                (_draft_tags_tagType = draft.tags[tagType]) === null ||
                _draft_tags_tagType === void 0
                  ? void 0
                  : _draft_tags_tagType[tagId];
              if (tagSubscriptions) {
                draft.tags[tagType][tagId] = tagSubscriptions.filter(
                  (qc) => qc !== queryCacheKey
                );
              }
            }
            delete draft.keys[queryCacheKey];
          }
          function writeProvidedTagsForQueries(draft, actions2) {
            const providedByEntries = actions2.map((action) => {
              const providedTags = calculateProvidedByThunk(
                action,
                'providesTags',
                definitions,
                assertTagType
              );
              const { queryCacheKey } = action.meta.arg;
              return {
                queryCacheKey,
                providedTags,
              };
            });
            invalidationSlice.caseReducers.updateProvidedBy(
              draft,
              invalidationSlice.actions.updateProvidedBy(providedByEntries)
            );
          }
          const subscriptionSlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/subscriptions'),
            initialState,
            reducers: {
              updateSubscriptionOptions(d, a) {},
              unsubscribeQueryResult(d, a) {},
              internal_getRTKQSubscriptions() {},
            },
          });
          const internalSubscriptionsSlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/internalSubscriptions'),
            initialState,
            reducers: {
              subscriptionsUpdated: {
                reducer(state, action) {
                  return (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'applyPatches'
                  ])(state, action.payload);
                },
                prepare: (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'prepareAutoBatched'
                ])(),
              },
            },
          });
          const configSlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/config'),
            initialState: {
              online: isOnline(),
              focused: isDocumentVisible(),
              middlewareRegistered: false,
              ...config,
            },
            reducers: {
              middlewareRegistered(state, param) {
                let { payload } = param;
                state.middlewareRegistered =
                  state.middlewareRegistered === 'conflict' ||
                  apiUid !== payload
                    ? 'conflict'
                    : true;
              },
            },
            extraReducers: (builder) => {
              builder
                .addCase(onOnline, (state) => {
                  state.online = true;
                })
                .addCase(onOffline, (state) => {
                  state.online = false;
                })
                .addCase(onFocus, (state) => {
                  state.focused = true;
                })
                .addCase(onFocusLost, (state) => {
                  state.focused = false;
                })
                .addMatcher(hasRehydrationInfo, (draft) => ({
                  ...draft,
                }));
            },
          });
          const combinedReducer = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'combineReducers'
          ])({
            queries: querySlice.reducer,
            mutations: mutationSlice.reducer,
            provided: invalidationSlice.reducer,
            subscriptions: internalSubscriptionsSlice.reducer,
            config: configSlice.reducer,
          });
          const reducer = (state, action) =>
            combinedReducer(
              resetApiState.match(action) ? void 0 : state,
              action
            );
          const actions = {
            ...configSlice.actions,
            ...querySlice.actions,
            ...subscriptionSlice.actions,
            ...internalSubscriptionsSlice.actions,
            ...mutationSlice.actions,
            ...invalidationSlice.actions,
            resetApiState,
          };
          return {
            reducer,
            actions,
          };
        }
        // src/query/core/buildSelectors.ts
        var skipToken = /* @__PURE__ */ Symbol.for('RTKQ/skipToken');
        var initialSubState = {
          status: 'uninitialized' /* uninitialized */,
        };
        var defaultQuerySubState = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__[
          'createNextState'
        ])(initialSubState, () => {});
        var defaultMutationSubState = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__[
          'createNextState'
        ])(initialSubState, () => {});
        function buildSelectors(param) {
          let {
            serializeQueryArgs,
            reducerPath,
            createSelector: createSelector2,
          } = param;
          const selectSkippedQuery = (state) => defaultQuerySubState;
          const selectSkippedMutation = (state) => defaultMutationSubState;
          return {
            buildQuerySelector,
            buildInfiniteQuerySelector,
            buildMutationSelector,
            selectInvalidatedBy,
            selectCachedArgsForQuery,
            selectApiState,
            selectQueries,
            selectMutations,
            selectQueryEntry,
            selectConfig,
          };
          //TURBOPACK unreachable
          function withRequestFlags(substate) {
            return {
              ...substate,
              ...getRequestStatusFlags(substate.status),
            };
          }
          function selectApiState(rootState) {
            const state = rootState[reducerPath];
            if (('TURBOPACK compile-time truthy', 1)) {
              if (!state) {
                if (selectApiState.triggered) return state;
                selectApiState.triggered = true;
                console.error(
                  'Error: No data found at `state.'.concat(
                    reducerPath,
                    '`. Did you forget to add the reducer to the store?'
                  )
                );
              }
            }
            return state;
          }
          function selectQueries(rootState) {
            var _selectApiState;
            return (_selectApiState = selectApiState(rootState)) === null ||
              _selectApiState === void 0
              ? void 0
              : _selectApiState.queries;
          }
          function selectQueryEntry(rootState, cacheKey) {
            var _selectQueries;
            return (_selectQueries = selectQueries(rootState)) === null ||
              _selectQueries === void 0
              ? void 0
              : _selectQueries[cacheKey];
          }
          function selectMutations(rootState) {
            var _selectApiState;
            return (_selectApiState = selectApiState(rootState)) === null ||
              _selectApiState === void 0
              ? void 0
              : _selectApiState.mutations;
          }
          function selectConfig(rootState) {
            var _selectApiState;
            return (_selectApiState = selectApiState(rootState)) === null ||
              _selectApiState === void 0
              ? void 0
              : _selectApiState.config;
          }
          function buildAnyQuerySelector(
            endpointName,
            endpointDefinition,
            combiner
          ) {
            return (queryArgs) => {
              if (queryArgs === skipToken) {
                return createSelector2(selectSkippedQuery, combiner);
              }
              const serializedArgs = serializeQueryArgs({
                queryArgs,
                endpointDefinition,
                endpointName,
              });
              const selectQuerySubstate = (state) => {
                var _selectQueryEntry;
                return (_selectQueryEntry = selectQueryEntry(
                  state,
                  serializedArgs
                )) !== null && _selectQueryEntry !== void 0
                  ? _selectQueryEntry
                  : defaultQuerySubState;
              };
              return createSelector2(selectQuerySubstate, combiner);
            };
          }
          function buildQuerySelector(endpointName, endpointDefinition) {
            return buildAnyQuerySelector(
              endpointName,
              endpointDefinition,
              withRequestFlags
            );
          }
          function buildInfiniteQuerySelector(
            endpointName,
            endpointDefinition
          ) {
            const { infiniteQueryOptions } = endpointDefinition;
            function withInfiniteQueryResultFlags(substate) {
              const stateWithRequestFlags = {
                ...substate,
                ...getRequestStatusFlags(substate.status),
              };
              const { isLoading, isError, direction } = stateWithRequestFlags;
              const isForward = direction === 'forward';
              const isBackward = direction === 'backward';
              return {
                ...stateWithRequestFlags,
                hasNextPage: getHasNextPage(
                  infiniteQueryOptions,
                  stateWithRequestFlags.data,
                  stateWithRequestFlags.originalArgs
                ),
                hasPreviousPage: getHasPreviousPage(
                  infiniteQueryOptions,
                  stateWithRequestFlags.data,
                  stateWithRequestFlags.originalArgs
                ),
                isFetchingNextPage: isLoading && isForward,
                isFetchingPreviousPage: isLoading && isBackward,
                isFetchNextPageError: isError && isForward,
                isFetchPreviousPageError: isError && isBackward,
              };
            }
            return buildAnyQuerySelector(
              endpointName,
              endpointDefinition,
              withInfiniteQueryResultFlags
            );
          }
          function buildMutationSelector() {
            return (id) => {
              let mutationId;
              if (typeof id === 'object') {
                var _getMutationCacheKey;
                mutationId =
                  (_getMutationCacheKey = getMutationCacheKey(id)) !== null &&
                  _getMutationCacheKey !== void 0
                    ? _getMutationCacheKey
                    : skipToken;
              } else {
                mutationId = id;
              }
              const selectMutationSubstate = (state) => {
                var _selectApiState_mutations, _selectApiState;
                var _selectApiState_mutations_mutationId;
                return (_selectApiState_mutations_mutationId =
                  (_selectApiState = selectApiState(state)) === null ||
                  _selectApiState === void 0
                    ? void 0
                    : (_selectApiState_mutations =
                          _selectApiState.mutations) === null ||
                        _selectApiState_mutations === void 0
                      ? void 0
                      : _selectApiState_mutations[mutationId]) !== null &&
                  _selectApiState_mutations_mutationId !== void 0
                  ? _selectApiState_mutations_mutationId
                  : defaultMutationSubState;
              };
              const finalSelectMutationSubstate =
                mutationId === skipToken
                  ? selectSkippedMutation
                  : selectMutationSubstate;
              return createSelector2(
                finalSelectMutationSubstate,
                withRequestFlags
              );
            };
          }
          function selectInvalidatedBy(state, tags) {
            const apiState = state[reducerPath];
            const toInvalidate = /* @__PURE__ */ new Set();
            for (const tag of tags
              .filter(isNotNullish)
              .map(expandTagDescription)) {
              const provided = apiState.provided.tags[tag.type];
              if (!provided) {
                continue;
              }
              var _ref;
              let invalidateSubscriptions =
                (_ref =
                  tag.id !== void 0 // id given: invalidate all queries that provide this type & id
                    ? provided[tag.id] // no id: invalidate all queries that provide this type
                    : flatten(Object.values(provided))) !== null &&
                _ref !== void 0
                  ? _ref
                  : [];
              for (const invalidate of invalidateSubscriptions) {
                toInvalidate.add(invalidate);
              }
            }
            return flatten(
              Array.from(toInvalidate.values()).map((queryCacheKey) => {
                const querySubState = apiState.queries[queryCacheKey];
                return querySubState
                  ? [
                      {
                        queryCacheKey,
                        endpointName: querySubState.endpointName,
                        originalArgs: querySubState.originalArgs,
                      },
                    ]
                  : [];
              })
            );
          }
          function selectCachedArgsForQuery(state, queryName) {
            return Object.values(selectQueries(state))
              .filter(
                (entry) =>
                  (entry === null || entry === void 0
                    ? void 0
                    : entry.endpointName) === queryName &&
                  entry.status !== 'uninitialized' /* uninitialized */
              )
              .map((entry) => entry.originalArgs);
          }
          function getHasNextPage(options, data, queryArg) {
            if (!data) return false;
            return getNextPageParam(options, data, queryArg) != null;
          }
          function getHasPreviousPage(options, data, queryArg) {
            if (!data || !options.getPreviousPageParam) return false;
            return getPreviousPageParam(options, data, queryArg) != null;
          }
        }
        // src/query/defaultSerializeQueryArgs.ts
        var cache = WeakMap ? /* @__PURE__ */ new WeakMap() : void 0;
        var defaultSerializeQueryArgs = (param) => {
          let { endpointName, queryArgs } = param;
          let serialized = '';
          const cached =
            cache === null || cache === void 0 ? void 0 : cache.get(queryArgs);
          if (typeof cached === 'string') {
            serialized = cached;
          } else {
            const stringified = JSON.stringify(queryArgs, (key, value) => {
              value =
                typeof value === 'bigint'
                  ? {
                      $bigint: value.toString(),
                    }
                  : value;
              value = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isPlainObject'
              ])(value)
                ? Object.keys(value)
                    .sort()
                    .reduce((acc, key2) => {
                      acc[key2] = value[key2];
                      return acc;
                    }, {})
                : value;
              return value;
            });
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isPlainObject'
              ])(queryArgs)
            ) {
              cache === null || cache === void 0
                ? void 0
                : cache.set(queryArgs, stringified);
            }
            serialized = stringified;
          }
          return ''.concat(endpointName, '(').concat(serialized, ')');
        };
        function buildCreateApi() {
          for (
            var _len = arguments.length, modules = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            modules[_key] = arguments[_key];
          }
          return function baseCreateApi(options) {
            const extractRehydrationInfo = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'weakMapMemoize'
            ])((action) => {
              var _options_extractRehydrationInfo;
              var _options_reducerPath;
              return (_options_extractRehydrationInfo =
                options.extractRehydrationInfo) === null ||
                _options_extractRehydrationInfo === void 0
                ? void 0
                : _options_extractRehydrationInfo.call(options, action, {
                    reducerPath:
                      (_options_reducerPath = options.reducerPath) !== null &&
                      _options_reducerPath !== void 0
                        ? _options_reducerPath
                        : 'api',
                  });
            });
            const optionsWithDefaults = {
              reducerPath: 'api',
              keepUnusedDataFor: 60,
              refetchOnMountOrArgChange: false,
              refetchOnFocus: false,
              refetchOnReconnect: false,
              invalidationBehavior: 'delayed',
              ...options,
              extractRehydrationInfo,
              serializeQueryArgs(queryArgsApi) {
                let finalSerializeQueryArgs = defaultSerializeQueryArgs;
                if ('serializeQueryArgs' in queryArgsApi.endpointDefinition) {
                  const endpointSQA =
                    queryArgsApi.endpointDefinition.serializeQueryArgs;
                  finalSerializeQueryArgs = (queryArgsApi2) => {
                    const initialResult = endpointSQA(queryArgsApi2);
                    if (typeof initialResult === 'string') {
                      return initialResult;
                    } else {
                      return defaultSerializeQueryArgs({
                        ...queryArgsApi2,
                        queryArgs: initialResult,
                      });
                    }
                  };
                } else if (options.serializeQueryArgs) {
                  finalSerializeQueryArgs = options.serializeQueryArgs;
                }
                return finalSerializeQueryArgs(queryArgsApi);
              },
              tagTypes: [...(options.tagTypes || [])],
            };
            const context = {
              endpointDefinitions: {},
              batch(fn) {
                fn();
              },
              apiUid: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'nanoid'
              ])(),
              extractRehydrationInfo,
              hasRehydrationInfo: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'weakMapMemoize'
              ])((action) => extractRehydrationInfo(action) != null),
            };
            const api = {
              injectEndpoints,
              enhanceEndpoints(param) {
                let { addTagTypes, endpoints } = param;
                if (addTagTypes) {
                  for (const eT of addTagTypes) {
                    if (!optionsWithDefaults.tagTypes.includes(eT)) {
                      optionsWithDefaults.tagTypes.push(eT);
                    }
                  }
                }
                if (endpoints) {
                  for (const [
                    endpointName,
                    partialDefinition,
                  ] of Object.entries(endpoints)) {
                    if (typeof partialDefinition === 'function') {
                      partialDefinition(
                        context.endpointDefinitions[endpointName]
                      );
                    } else {
                      Object.assign(
                        context.endpointDefinitions[endpointName] || {},
                        partialDefinition
                      );
                    }
                  }
                }
                return api;
              },
            };
            const initializedModules = modules.map((m) =>
              m.init(api, optionsWithDefaults, context)
            );
            function injectEndpoints(inject) {
              const evaluatedEndpoints = inject.endpoints({
                query: (x) => ({
                  ...x,
                  type: 'query' /* query */,
                }),
                mutation: (x) => ({
                  ...x,
                  type: 'mutation' /* mutation */,
                }),
                infiniteQuery: (x) => ({
                  ...x,
                  type: 'infinitequery' /* infinitequery */,
                }),
              });
              for (const [endpointName, definition] of Object.entries(
                evaluatedEndpoints
              )) {
                if (
                  inject.overrideExisting !== true &&
                  endpointName in context.endpointDefinitions
                ) {
                  if (inject.overrideExisting === 'throw') {
                    throw new Error(
                      ('TURBOPACK compile-time falsy', 0)
                        ? 'TURBOPACK unreachable'
                        : 'called `injectEndpoints` to override already-existing endpointName '.concat(
                            endpointName,
                            ' without specifying `overrideExisting: true`'
                          )
                    );
                  } else if (
                    typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'default'
                    ] !== 'undefined' &&
                    ('TURBOPACK compile-time value', 'development') ===
                      'development'
                  ) {
                    console.error(
                      'called `injectEndpoints` to override already-existing endpointName '.concat(
                        endpointName,
                        ' without specifying `overrideExisting: true`'
                      )
                    );
                  }
                  continue;
                }
                if (
                  typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'default'
                  ] !== 'undefined' &&
                  ('TURBOPACK compile-time value', 'development') ===
                    'development'
                ) {
                  if (isInfiniteQueryDefinition(definition)) {
                    const { infiniteQueryOptions } = definition;
                    const {
                      maxPages,
                      getPreviousPageParam: getPreviousPageParam2,
                    } = infiniteQueryOptions;
                    if (typeof maxPages === 'number') {
                      if (maxPages < 1) {
                        throw new Error(
                          ('TURBOPACK compile-time falsy', 0)
                            ? 'TURBOPACK unreachable'
                            : "maxPages for endpoint '".concat(
                                endpointName,
                                "' must be a number greater than 0"
                              )
                        );
                      }
                      if (typeof getPreviousPageParam2 !== 'function') {
                        throw new Error(
                          ('TURBOPACK compile-time falsy', 0)
                            ? 'TURBOPACK unreachable'
                            : "getPreviousPageParam for endpoint '".concat(
                                endpointName,
                                "' must be a function if maxPages is used"
                              )
                        );
                      }
                    }
                  }
                }
                context.endpointDefinitions[endpointName] = definition;
                for (const m of initializedModules) {
                  m.injectEndpoint(endpointName, definition);
                }
              }
              return api;
            }
            return api.injectEndpoints({
              endpoints: options.endpoints,
            });
          };
        }
        var _NEVER = /* @__PURE__ */ Symbol();
        function fakeBaseQuery() {
          return function () {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.'
            );
          };
        }
        // src/query/tsHelpers.ts
        function assertCast(v) {}
        function safeAssign(target) {
          for (
            var _len = arguments.length,
              args = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key];
          }
          return Object.assign(target, ...args);
        }
        var buildBatchedActionsHandler = (param) => {
          let { api, queryThunk, internalState } = param;
          const subscriptionsPrefix = ''.concat(
            api.reducerPath,
            '/subscriptions'
          );
          let previousSubscriptions = null;
          let updateSyncTimer = null;
          const { updateSubscriptionOptions, unsubscribeQueryResult } =
            api.internalActions;
          const actuallyMutateSubscriptions = (mutableState, action) => {
            if (updateSubscriptionOptions.match(action)) {
              var _mutableState_queryCacheKey;
              const { queryCacheKey, requestId, options } = action.payload;
              if (
                mutableState === null || mutableState === void 0
                  ? void 0
                  : (_mutableState_queryCacheKey =
                        mutableState[queryCacheKey]) === null ||
                      _mutableState_queryCacheKey === void 0
                    ? void 0
                    : _mutableState_queryCacheKey[requestId]
              ) {
                mutableState[queryCacheKey][requestId] = options;
              }
              return true;
            }
            if (unsubscribeQueryResult.match(action)) {
              const { queryCacheKey, requestId } = action.payload;
              if (mutableState[queryCacheKey]) {
                delete mutableState[queryCacheKey][requestId];
              }
              return true;
            }
            if (api.internalActions.removeQueryResult.match(action)) {
              delete mutableState[action.payload.queryCacheKey];
              return true;
            }
            if (queryThunk.pending.match(action)) {
              var _mutableState, _arg_queryCacheKey;
              const {
                meta: { arg, requestId },
              } = action;
              var _;
              const substate =
                (_ = (_mutableState = mutableState)[
                  (_arg_queryCacheKey = arg.queryCacheKey)
                ]) !== null && _ !== void 0
                  ? _
                  : (_mutableState[_arg_queryCacheKey] = {});
              substate[''.concat(requestId, '_running')] = {};
              if (arg.subscribe) {
                var _arg_subscriptionOptions, _ref;
                substate[requestId] =
                  (_ref =
                    (_arg_subscriptionOptions = arg.subscriptionOptions) !==
                      null && _arg_subscriptionOptions !== void 0
                      ? _arg_subscriptionOptions
                      : substate[requestId]) !== null && _ref !== void 0
                    ? _ref
                    : {};
              }
              return true;
            }
            let mutated = false;
            if (
              queryThunk.fulfilled.match(action) ||
              queryThunk.rejected.match(action)
            ) {
              const state = mutableState[action.meta.arg.queryCacheKey] || {};
              const key = ''.concat(action.meta.requestId, '_running');
              mutated || (mutated = !!state[key]);
              delete state[key];
            }
            if (queryThunk.rejected.match(action)) {
              const {
                meta: { condition, arg, requestId },
              } = action;
              if (condition && arg.subscribe) {
                var _mutableState1, _arg_queryCacheKey1;
                var _1;
                const substate =
                  (_1 = (_mutableState1 = mutableState)[
                    (_arg_queryCacheKey1 = arg.queryCacheKey)
                  ]) !== null && _1 !== void 0
                    ? _1
                    : (_mutableState1[_arg_queryCacheKey1] = {});
                var _arg_subscriptionOptions1, _ref1;
                substate[requestId] =
                  (_ref1 =
                    (_arg_subscriptionOptions1 = arg.subscriptionOptions) !==
                      null && _arg_subscriptionOptions1 !== void 0
                      ? _arg_subscriptionOptions1
                      : substate[requestId]) !== null && _ref1 !== void 0
                    ? _ref1
                    : {};
                mutated = true;
              }
            }
            return mutated;
          };
          const getSubscriptions = () => internalState.currentSubscriptions;
          const getSubscriptionCount = (queryCacheKey) => {
            const subscriptions = getSubscriptions();
            var _subscriptions_queryCacheKey;
            const subscriptionsForQueryArg =
              (_subscriptions_queryCacheKey = subscriptions[queryCacheKey]) !==
                null && _subscriptions_queryCacheKey !== void 0
                ? _subscriptions_queryCacheKey
                : {};
            return countObjectKeys(subscriptionsForQueryArg);
          };
          const isRequestSubscribed = (queryCacheKey, requestId) => {
            var _subscriptions_queryCacheKey;
            const subscriptions = getSubscriptions();
            return !!(subscriptions === null || subscriptions === void 0
              ? void 0
              : (_subscriptions_queryCacheKey =
                    subscriptions[queryCacheKey]) === null ||
                  _subscriptions_queryCacheKey === void 0
                ? void 0
                : _subscriptions_queryCacheKey[requestId]);
          };
          const subscriptionSelectors = {
            getSubscriptions,
            getSubscriptionCount,
            isRequestSubscribed,
          };
          return (action, mwApi) => {
            if (!previousSubscriptions) {
              previousSubscriptions = JSON.parse(
                JSON.stringify(internalState.currentSubscriptions)
              );
            }
            if (api.util.resetApiState.match(action)) {
              previousSubscriptions = internalState.currentSubscriptions = {};
              updateSyncTimer = null;
              return [true, false];
            }
            if (
              api.internalActions.internal_getRTKQSubscriptions.match(action)
            ) {
              return [false, subscriptionSelectors];
            }
            const didMutate = actuallyMutateSubscriptions(
              internalState.currentSubscriptions,
              action
            );
            let actionShouldContinue = true;
            if (didMutate) {
              if (!updateSyncTimer) {
                updateSyncTimer = setTimeout(() => {
                  const newSubscriptions = JSON.parse(
                    JSON.stringify(internalState.currentSubscriptions)
                  );
                  const [, patches] = (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'produceWithPatches'
                  ])(previousSubscriptions, () => newSubscriptions);
                  mwApi.next(api.internalActions.subscriptionsUpdated(patches));
                  previousSubscriptions = newSubscriptions;
                  updateSyncTimer = null;
                }, 500);
              }
              const isSubscriptionSliceAction =
                typeof action.type == 'string' &&
                !!action.type.startsWith(subscriptionsPrefix);
              const isAdditionalSubscriptionAction =
                queryThunk.rejected.match(action) &&
                action.meta.condition &&
                !!action.meta.arg.subscribe;
              actionShouldContinue =
                !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;
            }
            return [actionShouldContinue, false];
          };
        };
        // src/query/core/buildMiddleware/cacheCollection.ts
        function isObjectEmpty(obj) {
          for (const k in obj) {
            return false;
          }
          return true;
        }
        var THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;
        var buildCacheCollectionHandler = (param) => {
          let {
            reducerPath,
            api,
            queryThunk,
            context,
            internalState,
            selectors: { selectQueryEntry, selectConfig },
          } = param;
          const {
            removeQueryResult,
            unsubscribeQueryResult,
            cacheEntriesUpserted,
          } = api.internalActions;
          const canTriggerUnsubscribe = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isAnyOf'
          ])(
            unsubscribeQueryResult.match,
            queryThunk.fulfilled,
            queryThunk.rejected,
            cacheEntriesUpserted.match
          );
          function anySubscriptionsRemainingForKey(queryCacheKey) {
            const subscriptions =
              internalState.currentSubscriptions[queryCacheKey];
            return !!subscriptions && !isObjectEmpty(subscriptions);
          }
          const currentRemovalTimeouts = {};
          const handler = (action, mwApi, internalState2) => {
            const state = mwApi.getState();
            const config = selectConfig(state);
            if (canTriggerUnsubscribe(action)) {
              let queryCacheKeys;
              if (cacheEntriesUpserted.match(action)) {
                queryCacheKeys = action.payload.map(
                  (entry) => entry.queryDescription.queryCacheKey
                );
              } else {
                const { queryCacheKey } = unsubscribeQueryResult.match(action)
                  ? action.payload
                  : action.meta.arg;
                queryCacheKeys = [queryCacheKey];
              }
              handleUnsubscribeMany(queryCacheKeys, mwApi, config);
            }
            if (api.util.resetApiState.match(action)) {
              for (const [key, timeout] of Object.entries(
                currentRemovalTimeouts
              )) {
                if (timeout) clearTimeout(timeout);
                delete currentRemovalTimeouts[key];
              }
            }
            if (context.hasRehydrationInfo(action)) {
              const { queries } = context.extractRehydrationInfo(action);
              handleUnsubscribeMany(Object.keys(queries), mwApi, config);
            }
          };
          function handleUnsubscribeMany(cacheKeys, api2, config) {
            const state = api2.getState();
            for (const queryCacheKey of cacheKeys) {
              const entry = selectQueryEntry(state, queryCacheKey);
              handleUnsubscribe(
                queryCacheKey,
                entry === null || entry === void 0
                  ? void 0
                  : entry.endpointName,
                api2,
                config
              );
            }
          }
          function handleUnsubscribe(
            queryCacheKey,
            endpointName,
            api2,
            config
          ) {
            const endpointDefinition =
              context.endpointDefinitions[endpointName];
            var _endpointDefinition_keepUnusedDataFor;
            const keepUnusedDataFor =
              (_endpointDefinition_keepUnusedDataFor =
                endpointDefinition === null || endpointDefinition === void 0
                  ? void 0
                  : endpointDefinition.keepUnusedDataFor) !== null &&
              _endpointDefinition_keepUnusedDataFor !== void 0
                ? _endpointDefinition_keepUnusedDataFor
                : config.keepUnusedDataFor;
            if (keepUnusedDataFor === Infinity) {
              return;
            }
            const finalKeepUnusedDataFor = Math.max(
              0,
              Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS)
            );
            if (!anySubscriptionsRemainingForKey(queryCacheKey)) {
              const currentTimeout = currentRemovalTimeouts[queryCacheKey];
              if (currentTimeout) {
                clearTimeout(currentTimeout);
              }
              currentRemovalTimeouts[queryCacheKey] = setTimeout(() => {
                if (!anySubscriptionsRemainingForKey(queryCacheKey)) {
                  api2.dispatch(
                    removeQueryResult({
                      queryCacheKey,
                    })
                  );
                }
                delete currentRemovalTimeouts[queryCacheKey];
              }, finalKeepUnusedDataFor * 1e3);
            }
          }
          return handler;
        };
        // src/query/core/buildMiddleware/cacheLifecycle.ts
        var neverResolvedError = new Error(
          'Promise never resolved before cacheEntryRemoved.'
        );
        var buildCacheLifecycleHandler = (param) => {
          let {
            api,
            reducerPath,
            context,
            queryThunk,
            mutationThunk,
            internalState,
            selectors: { selectQueryEntry, selectApiState },
          } = param;
          const isQueryThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isAsyncThunkAction'
          ])(queryThunk);
          const isMutationThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isAsyncThunkAction'
          ])(mutationThunk);
          const isFulfilledThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isFulfilled'
          ])(queryThunk, mutationThunk);
          const lifecycleMap = {};
          function resolveLifecycleEntry(cacheKey, data, meta) {
            const lifecycle = lifecycleMap[cacheKey];
            if (
              lifecycle === null || lifecycle === void 0
                ? void 0
                : lifecycle.valueResolved
            ) {
              lifecycle.valueResolved({
                data,
                meta,
              });
              delete lifecycle.valueResolved;
            }
          }
          function removeLifecycleEntry(cacheKey) {
            const lifecycle = lifecycleMap[cacheKey];
            if (lifecycle) {
              delete lifecycleMap[cacheKey];
              lifecycle.cacheEntryRemoved();
            }
          }
          const handler = (action, mwApi, stateBefore) => {
            const cacheKey = getCacheKey(action);
            function checkForNewCacheKey(
              endpointName,
              cacheKey2,
              requestId,
              originalArgs
            ) {
              const oldEntry = selectQueryEntry(stateBefore, cacheKey2);
              const newEntry = selectQueryEntry(mwApi.getState(), cacheKey2);
              if (!oldEntry && newEntry) {
                handleNewKey(
                  endpointName,
                  originalArgs,
                  cacheKey2,
                  mwApi,
                  requestId
                );
              }
            }
            if (queryThunk.pending.match(action)) {
              checkForNewCacheKey(
                action.meta.arg.endpointName,
                cacheKey,
                action.meta.requestId,
                action.meta.arg.originalArgs
              );
            } else if (api.internalActions.cacheEntriesUpserted.match(action)) {
              for (const { queryDescription, value } of action.payload) {
                const { endpointName, originalArgs, queryCacheKey } =
                  queryDescription;
                checkForNewCacheKey(
                  endpointName,
                  queryCacheKey,
                  action.meta.requestId,
                  originalArgs
                );
                resolveLifecycleEntry(queryCacheKey, value, {});
              }
            } else if (mutationThunk.pending.match(action)) {
              const state = mwApi.getState()[reducerPath].mutations[cacheKey];
              if (state) {
                handleNewKey(
                  action.meta.arg.endpointName,
                  action.meta.arg.originalArgs,
                  cacheKey,
                  mwApi,
                  action.meta.requestId
                );
              }
            } else if (isFulfilledThunk(action)) {
              resolveLifecycleEntry(
                cacheKey,
                action.payload,
                action.meta.baseQueryMeta
              );
            } else if (
              api.internalActions.removeQueryResult.match(action) ||
              api.internalActions.removeMutationResult.match(action)
            ) {
              removeLifecycleEntry(cacheKey);
            } else if (api.util.resetApiState.match(action)) {
              for (const cacheKey2 of Object.keys(lifecycleMap)) {
                removeLifecycleEntry(cacheKey2);
              }
            }
          };
          function getCacheKey(action) {
            if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;
            if (isMutationThunk(action)) {
              var _action_meta_arg_fixedCacheKey;
              return (_action_meta_arg_fixedCacheKey =
                action.meta.arg.fixedCacheKey) !== null &&
                _action_meta_arg_fixedCacheKey !== void 0
                ? _action_meta_arg_fixedCacheKey
                : action.meta.requestId;
            }
            if (api.internalActions.removeQueryResult.match(action))
              return action.payload.queryCacheKey;
            if (api.internalActions.removeMutationResult.match(action))
              return getMutationCacheKey(action.payload);
            return '';
          }
          function handleNewKey(
            endpointName,
            originalArgs,
            queryCacheKey,
            mwApi,
            requestId
          ) {
            const endpointDefinition =
              context.endpointDefinitions[endpointName];
            const onCacheEntryAdded =
              endpointDefinition === null || endpointDefinition === void 0
                ? void 0
                : endpointDefinition.onCacheEntryAdded;
            if (!onCacheEntryAdded) return;
            const lifecycle = {};
            const cacheEntryRemoved = new Promise((resolve) => {
              lifecycle.cacheEntryRemoved = resolve;
            });
            const cacheDataLoaded = Promise.race([
              new Promise((resolve) => {
                lifecycle.valueResolved = resolve;
              }),
              cacheEntryRemoved.then(() => {
                throw neverResolvedError;
              }),
            ]);
            cacheDataLoaded.catch(() => {});
            lifecycleMap[queryCacheKey] = lifecycle;
            const selector = api.endpoints[endpointName].select(
              isAnyQueryDefinition(endpointDefinition)
                ? originalArgs
                : queryCacheKey
            );
            const extra = mwApi.dispatch((_, __, extra2) => extra2);
            const lifecycleApi = {
              ...mwApi,
              getCacheEntry: () => selector(mwApi.getState()),
              requestId,
              extra,
              updateCachedData: isAnyQueryDefinition(endpointDefinition)
                ? (updateRecipe) =>
                    mwApi.dispatch(
                      api.util.updateQueryData(
                        endpointName,
                        originalArgs,
                        updateRecipe
                      )
                    )
                : void 0,
              cacheDataLoaded,
              cacheEntryRemoved,
            };
            const runningHandler = onCacheEntryAdded(
              originalArgs,
              lifecycleApi
            );
            Promise.resolve(runningHandler).catch((e) => {
              if (e === neverResolvedError) return;
              throw e;
            });
          }
          return handler;
        };
        // src/query/core/buildMiddleware/devMiddleware.ts
        var buildDevCheckHandler = (param) => {
          let {
            api,
            context: { apiUid },
            reducerPath,
          } = param;
          return (action, mwApi) => {
            if (api.util.resetApiState.match(action)) {
              mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));
            }
            if (
              typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'default'
              ] !== 'undefined' &&
              ('TURBOPACK compile-time value', 'development') === 'development'
            ) {
              var _mwApi_getState_reducerPath_config,
                _mwApi_getState_reducerPath;
              if (
                api.internalActions.middlewareRegistered.match(action) &&
                action.payload === apiUid &&
                ((_mwApi_getState_reducerPath =
                  mwApi.getState()[reducerPath]) === null ||
                _mwApi_getState_reducerPath === void 0
                  ? void 0
                  : (_mwApi_getState_reducerPath_config =
                        _mwApi_getState_reducerPath.config) === null ||
                      _mwApi_getState_reducerPath_config === void 0
                    ? void 0
                    : _mwApi_getState_reducerPath_config.middlewareRegistered) ===
                  'conflict'
              ) {
                console.warn(
                  'There is a mismatch between slice and middleware for the reducerPath "'
                    .concat(
                      reducerPath,
                      '".\nYou can only have one api per reducer path, this will lead to crashes in various situations!'
                    )
                    .concat(
                      reducerPath === 'api'
                        ? '\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!'
                        : ''
                    )
                );
              }
            }
          };
        };
        // src/query/core/buildMiddleware/invalidationByTags.ts
        var buildInvalidationByTagsHandler = (param) => {
          let {
            reducerPath,
            context,
            context: { endpointDefinitions },
            mutationThunk,
            queryThunk,
            api,
            assertTagType,
            refetchQuery,
            internalState,
          } = param;
          const { removeQueryResult } = api.internalActions;
          const isThunkActionWithTags = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isAnyOf'
          ])(
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isFulfilled'
            ])(mutationThunk),
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isRejectedWithValue'
            ])(mutationThunk)
          );
          const isQueryEnd = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isAnyOf'
          ])(
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isFulfilled'
            ])(mutationThunk, queryThunk),
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isRejected'
            ])(mutationThunk, queryThunk)
          );
          let pendingTagInvalidations = [];
          const handler = (action, mwApi) => {
            if (isThunkActionWithTags(action)) {
              invalidateTags(
                calculateProvidedByThunk(
                  action,
                  'invalidatesTags',
                  endpointDefinitions,
                  assertTagType
                ),
                mwApi
              );
            } else if (isQueryEnd(action)) {
              invalidateTags([], mwApi);
            } else if (api.util.invalidateTags.match(action)) {
              invalidateTags(
                calculateProvidedBy(
                  action.payload,
                  void 0,
                  void 0,
                  void 0,
                  void 0,
                  assertTagType
                ),
                mwApi
              );
            }
          };
          function hasPendingRequests(state) {
            const { queries, mutations } = state;
            for (const cacheRecord of [queries, mutations]) {
              for (const key in cacheRecord) {
                var _cacheRecord_key;
                if (
                  ((_cacheRecord_key = cacheRecord[key]) === null ||
                  _cacheRecord_key === void 0
                    ? void 0
                    : _cacheRecord_key.status) === 'pending' /* pending */
                )
                  return true;
              }
            }
            return false;
          }
          function invalidateTags(newTags, mwApi) {
            const rootState = mwApi.getState();
            const state = rootState[reducerPath];
            pendingTagInvalidations.push(...newTags);
            if (
              state.config.invalidationBehavior === 'delayed' &&
              hasPendingRequests(state)
            ) {
              return;
            }
            const tags = pendingTagInvalidations;
            pendingTagInvalidations = [];
            if (tags.length === 0) return;
            const toInvalidate = api.util.selectInvalidatedBy(rootState, tags);
            context.batch(() => {
              const valuesArray = Array.from(toInvalidate.values());
              for (const { queryCacheKey } of valuesArray) {
                const querySubState = state.queries[queryCacheKey];
                var _internalState_currentSubscriptions_queryCacheKey;
                const subscriptionSubState =
                  (_internalState_currentSubscriptions_queryCacheKey =
                    internalState.currentSubscriptions[queryCacheKey]) !==
                    null &&
                  _internalState_currentSubscriptions_queryCacheKey !== void 0
                    ? _internalState_currentSubscriptions_queryCacheKey
                    : {};
                if (querySubState) {
                  if (countObjectKeys(subscriptionSubState) === 0) {
                    mwApi.dispatch(
                      removeQueryResult({
                        queryCacheKey,
                      })
                    );
                  } else if (
                    querySubState.status !== 'uninitialized' /* uninitialized */
                  ) {
                    mwApi.dispatch(refetchQuery(querySubState));
                  }
                }
              }
            });
          }
          return handler;
        };
        // src/query/core/buildMiddleware/polling.ts
        var buildPollingHandler = (param) => {
          let { reducerPath, queryThunk, api, refetchQuery, internalState } =
            param;
          const currentPolls = {};
          const handler = (action, mwApi) => {
            if (
              api.internalActions.updateSubscriptionOptions.match(action) ||
              api.internalActions.unsubscribeQueryResult.match(action)
            ) {
              updatePollingInterval(action.payload, mwApi);
            }
            if (
              queryThunk.pending.match(action) ||
              (queryThunk.rejected.match(action) && action.meta.condition)
            ) {
              updatePollingInterval(action.meta.arg, mwApi);
            }
            if (
              queryThunk.fulfilled.match(action) ||
              (queryThunk.rejected.match(action) && !action.meta.condition)
            ) {
              startNextPoll(action.meta.arg, mwApi);
            }
            if (api.util.resetApiState.match(action)) {
              clearPolls();
            }
          };
          function getCacheEntrySubscriptions(queryCacheKey, api2) {
            const state = api2.getState()[reducerPath];
            const querySubState = state.queries[queryCacheKey];
            const subscriptions =
              internalState.currentSubscriptions[queryCacheKey];
            if (
              !querySubState ||
              querySubState.status === 'uninitialized' /* uninitialized */
            )
              return;
            return subscriptions;
          }
          function startNextPoll(param, api2) {
            let { queryCacheKey } = param;
            const state = api2.getState()[reducerPath];
            const querySubState = state.queries[queryCacheKey];
            const subscriptions =
              internalState.currentSubscriptions[queryCacheKey];
            if (
              !querySubState ||
              querySubState.status === 'uninitialized' /* uninitialized */
            )
              return;
            const { lowestPollingInterval, skipPollingIfUnfocused } =
              findLowestPollingInterval(subscriptions);
            if (!Number.isFinite(lowestPollingInterval)) return;
            const currentPoll = currentPolls[queryCacheKey];
            if (
              currentPoll === null || currentPoll === void 0
                ? void 0
                : currentPoll.timeout
            ) {
              clearTimeout(currentPoll.timeout);
              currentPoll.timeout = void 0;
            }
            const nextPollTimestamp = Date.now() + lowestPollingInterval;
            currentPolls[queryCacheKey] = {
              nextPollTimestamp,
              pollingInterval: lowestPollingInterval,
              timeout: setTimeout(() => {
                if (state.config.focused || !skipPollingIfUnfocused) {
                  api2.dispatch(refetchQuery(querySubState));
                }
                startNextPoll(
                  {
                    queryCacheKey,
                  },
                  api2
                );
              }, lowestPollingInterval),
            };
          }
          function updatePollingInterval(param, api2) {
            let { queryCacheKey } = param;
            const state = api2.getState()[reducerPath];
            const querySubState = state.queries[queryCacheKey];
            const subscriptions =
              internalState.currentSubscriptions[queryCacheKey];
            if (
              !querySubState ||
              querySubState.status === 'uninitialized' /* uninitialized */
            ) {
              return;
            }
            const { lowestPollingInterval } =
              findLowestPollingInterval(subscriptions);
            if (!Number.isFinite(lowestPollingInterval)) {
              cleanupPollForKey(queryCacheKey);
              return;
            }
            const currentPoll = currentPolls[queryCacheKey];
            const nextPollTimestamp = Date.now() + lowestPollingInterval;
            if (
              !currentPoll ||
              nextPollTimestamp < currentPoll.nextPollTimestamp
            ) {
              startNextPoll(
                {
                  queryCacheKey,
                },
                api2
              );
            }
          }
          function cleanupPollForKey(key) {
            const existingPoll = currentPolls[key];
            if (
              existingPoll === null || existingPoll === void 0
                ? void 0
                : existingPoll.timeout
            ) {
              clearTimeout(existingPoll.timeout);
            }
            delete currentPolls[key];
          }
          function clearPolls() {
            for (const key of Object.keys(currentPolls)) {
              cleanupPollForKey(key);
            }
          }
          function findLowestPollingInterval() {
            let subscribers =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {};
            let skipPollingIfUnfocused = false;
            let lowestPollingInterval = Number.POSITIVE_INFINITY;
            for (let key in subscribers) {
              if (!!subscribers[key].pollingInterval) {
                lowestPollingInterval = Math.min(
                  subscribers[key].pollingInterval,
                  lowestPollingInterval
                );
                skipPollingIfUnfocused =
                  subscribers[key].skipPollingIfUnfocused ||
                  skipPollingIfUnfocused;
              }
            }
            return {
              lowestPollingInterval,
              skipPollingIfUnfocused,
            };
          }
          return handler;
        };
        // src/query/core/buildMiddleware/queryLifecycle.ts
        var buildQueryLifecycleHandler = (param) => {
          let { api, context, queryThunk, mutationThunk } = param;
          const isPendingThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isPending'
          ])(queryThunk, mutationThunk);
          const isRejectedThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isRejected'
          ])(queryThunk, mutationThunk);
          const isFullfilledThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isFulfilled'
          ])(queryThunk, mutationThunk);
          const lifecycleMap = {};
          const handler = (action, mwApi) => {
            if (isPendingThunk(action)) {
              const {
                requestId,
                arg: { endpointName, originalArgs },
              } = action.meta;
              const endpointDefinition =
                context.endpointDefinitions[endpointName];
              const onQueryStarted =
                endpointDefinition === null || endpointDefinition === void 0
                  ? void 0
                  : endpointDefinition.onQueryStarted;
              if (onQueryStarted) {
                const lifecycle = {};
                const queryFulfilled = new Promise((resolve, reject) => {
                  lifecycle.resolve = resolve;
                  lifecycle.reject = reject;
                });
                queryFulfilled.catch(() => {});
                lifecycleMap[requestId] = lifecycle;
                const selector = api.endpoints[endpointName].select(
                  isAnyQueryDefinition(endpointDefinition)
                    ? originalArgs
                    : requestId
                );
                const extra = mwApi.dispatch((_, __, extra2) => extra2);
                const lifecycleApi = {
                  ...mwApi,
                  getCacheEntry: () => selector(mwApi.getState()),
                  requestId,
                  extra,
                  updateCachedData: isAnyQueryDefinition(endpointDefinition)
                    ? (updateRecipe) =>
                        mwApi.dispatch(
                          api.util.updateQueryData(
                            endpointName,
                            originalArgs,
                            updateRecipe
                          )
                        )
                    : void 0,
                  queryFulfilled,
                };
                onQueryStarted(originalArgs, lifecycleApi);
              }
            } else if (isFullfilledThunk(action)) {
              var _lifecycleMap_requestId;
              const { requestId, baseQueryMeta } = action.meta;
              (_lifecycleMap_requestId = lifecycleMap[requestId]) === null ||
              _lifecycleMap_requestId === void 0
                ? void 0
                : _lifecycleMap_requestId.resolve({
                    data: action.payload,
                    meta: baseQueryMeta,
                  });
              delete lifecycleMap[requestId];
            } else if (isRejectedThunk(action)) {
              var _lifecycleMap_requestId1;
              const { requestId, rejectedWithValue, baseQueryMeta } =
                action.meta;
              var _action_payload;
              (_lifecycleMap_requestId1 = lifecycleMap[requestId]) === null ||
              _lifecycleMap_requestId1 === void 0
                ? void 0
                : _lifecycleMap_requestId1.reject({
                    error:
                      (_action_payload = action.payload) !== null &&
                      _action_payload !== void 0
                        ? _action_payload
                        : action.error,
                    isUnhandledError: !rejectedWithValue,
                    meta: baseQueryMeta,
                  });
              delete lifecycleMap[requestId];
            }
          };
          return handler;
        };
        // src/query/core/buildMiddleware/windowEventHandling.ts
        var buildWindowEventHandler = (param) => {
          let { reducerPath, context, api, refetchQuery, internalState } =
            param;
          const { removeQueryResult } = api.internalActions;
          const handler = (action, mwApi) => {
            if (onFocus.match(action)) {
              refetchValidQueries(mwApi, 'refetchOnFocus');
            }
            if (onOnline.match(action)) {
              refetchValidQueries(mwApi, 'refetchOnReconnect');
            }
          };
          function refetchValidQueries(api2, type) {
            const state = api2.getState()[reducerPath];
            const queries = state.queries;
            const subscriptions = internalState.currentSubscriptions;
            context.batch(() => {
              for (const queryCacheKey of Object.keys(subscriptions)) {
                const querySubState = queries[queryCacheKey];
                const subscriptionSubState = subscriptions[queryCacheKey];
                if (!subscriptionSubState || !querySubState) continue;
                const shouldRefetch =
                  Object.values(subscriptionSubState).some(
                    (sub) => sub[type] === true
                  ) ||
                  (Object.values(subscriptionSubState).every(
                    (sub) => sub[type] === void 0
                  ) &&
                    state.config[type]);
                if (shouldRefetch) {
                  if (countObjectKeys(subscriptionSubState) === 0) {
                    api2.dispatch(
                      removeQueryResult({
                        queryCacheKey,
                      })
                    );
                  } else if (
                    querySubState.status !== 'uninitialized' /* uninitialized */
                  ) {
                    api2.dispatch(refetchQuery(querySubState));
                  }
                }
              }
            });
          }
          return handler;
        };
        // src/query/core/buildMiddleware/index.ts
        function buildMiddleware(input) {
          const { reducerPath, queryThunk, api, context } = input;
          const { apiUid } = context;
          const actions = {
            invalidateTags: (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'createAction'
            ])(''.concat(reducerPath, '/invalidateTags')),
          };
          const isThisApiSliceAction = (action) =>
            action.type.startsWith(''.concat(reducerPath, '/'));
          const handlerBuilders = [
            buildDevCheckHandler,
            buildCacheCollectionHandler,
            buildInvalidationByTagsHandler,
            buildPollingHandler,
            buildCacheLifecycleHandler,
            buildQueryLifecycleHandler,
          ];
          const middleware = (mwApi) => {
            let initialized2 = false;
            const internalState = {
              currentSubscriptions: {},
            };
            const builderArgs = {
              ...input,
              internalState,
              refetchQuery,
              isThisApiSliceAction,
            };
            const handlers = handlerBuilders.map((build) => build(builderArgs));
            const batchedActionsHandler =
              buildBatchedActionsHandler(builderArgs);
            const windowEventsHandler = buildWindowEventHandler(builderArgs);
            return (next) => {
              return (action) => {
                if (
                  !(0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'isAction'
                  ])(action)
                ) {
                  return next(action);
                }
                if (!initialized2) {
                  initialized2 = true;
                  mwApi.dispatch(
                    api.internalActions.middlewareRegistered(apiUid)
                  );
                }
                const mwApiWithNext = {
                  ...mwApi,
                  next,
                };
                const stateBefore = mwApi.getState();
                const [actionShouldContinue, internalProbeResult] =
                  batchedActionsHandler(action, mwApiWithNext, stateBefore);
                let res;
                if (actionShouldContinue) {
                  res = next(action);
                } else {
                  res = internalProbeResult;
                }
                if (!!mwApi.getState()[reducerPath]) {
                  windowEventsHandler(action, mwApiWithNext, stateBefore);
                  if (
                    isThisApiSliceAction(action) ||
                    context.hasRehydrationInfo(action)
                  ) {
                    for (const handler of handlers) {
                      handler(action, mwApiWithNext, stateBefore);
                    }
                  }
                }
                return res;
              };
            };
          };
          return {
            middleware,
            actions,
          };
          //TURBOPACK unreachable
          function refetchQuery(querySubState) {
            return input.api.endpoints[querySubState.endpointName].initiate(
              querySubState.originalArgs,
              {
                subscribe: false,
                forceRefetch: true,
              }
            );
          }
        }
        // src/query/core/module.ts
        var coreModuleName = /* @__PURE__ */ Symbol();
        var coreModule = function () {
          let {
            createSelector:
              createSelector2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createSelector'
              ],
          } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          return {
            name: coreModuleName,
            init(api, param, context) {
              let {
                baseQuery,
                tagTypes,
                reducerPath,
                serializeQueryArgs,
                keepUnusedDataFor,
                refetchOnMountOrArgChange,
                refetchOnFocus,
                refetchOnReconnect,
                invalidationBehavior,
                onSchemaFailure,
                catchSchemaFailure,
                skipSchemaValidation,
              } = param;
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'enablePatches'
              ])();
              assertCast(serializeQueryArgs);
              const assertTagType = (tag) => {
                if (
                  typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'default'
                  ] !== 'undefined' &&
                  ('TURBOPACK compile-time value', 'development') ===
                    'development'
                ) {
                  if (!tagTypes.includes(tag.type)) {
                    console.error(
                      "Tag type '".concat(
                        tag.type,
                        "' was used, but not specified in `tagTypes`!"
                      )
                    );
                  }
                }
                return tag;
              };
              Object.assign(api, {
                reducerPath,
                endpoints: {},
                internalActions: {
                  onOnline,
                  onOffline,
                  onFocus,
                  onFocusLost,
                },
                util: {},
              });
              const selectors = buildSelectors({
                serializeQueryArgs,
                reducerPath,
                createSelector: createSelector2,
              });
              const {
                selectInvalidatedBy,
                selectCachedArgsForQuery,
                buildQuerySelector,
                buildInfiniteQuerySelector,
                buildMutationSelector,
              } = selectors;
              safeAssign(api.util, {
                selectInvalidatedBy,
                selectCachedArgsForQuery,
              });
              const {
                queryThunk,
                infiniteQueryThunk,
                mutationThunk,
                patchQueryData,
                updateQueryData,
                upsertQueryData,
                prefetch,
                buildMatchThunkActions,
              } = buildThunks({
                baseQuery,
                reducerPath,
                context,
                api,
                serializeQueryArgs,
                assertTagType,
                selectors,
                onSchemaFailure,
                catchSchemaFailure,
                skipSchemaValidation,
              });
              const { reducer, actions: sliceActions } = buildSlice({
                context,
                queryThunk,
                infiniteQueryThunk,
                mutationThunk,
                serializeQueryArgs,
                reducerPath,
                assertTagType,
                config: {
                  refetchOnFocus,
                  refetchOnReconnect,
                  refetchOnMountOrArgChange,
                  keepUnusedDataFor,
                  reducerPath,
                  invalidationBehavior,
                },
              });
              safeAssign(api.util, {
                patchQueryData,
                updateQueryData,
                upsertQueryData,
                prefetch,
                resetApiState: sliceActions.resetApiState,
                upsertQueryEntries: sliceActions.cacheEntriesUpserted,
              });
              safeAssign(api.internalActions, sliceActions);
              const { middleware, actions: middlewareActions } =
                buildMiddleware({
                  reducerPath,
                  context,
                  queryThunk,
                  mutationThunk,
                  infiniteQueryThunk,
                  api,
                  assertTagType,
                  selectors,
                });
              safeAssign(api.util, middlewareActions);
              safeAssign(api, {
                reducer,
                middleware,
              });
              const {
                buildInitiateQuery,
                buildInitiateInfiniteQuery,
                buildInitiateMutation,
                getRunningMutationThunk,
                getRunningMutationsThunk,
                getRunningQueriesThunk,
                getRunningQueryThunk,
              } = buildInitiate({
                queryThunk,
                mutationThunk,
                infiniteQueryThunk,
                api,
                serializeQueryArgs,
                context,
              });
              safeAssign(api.util, {
                getRunningMutationThunk,
                getRunningMutationsThunk,
                getRunningQueryThunk,
                getRunningQueriesThunk,
              });
              return {
                name: coreModuleName,
                injectEndpoint(endpointName, definition) {
                  var _anyApi_endpoints, _endpointName;
                  const anyApi = api;
                  var _;
                  const endpoint =
                    (_ = (_anyApi_endpoints = anyApi.endpoints)[
                      (_endpointName = endpointName)
                    ]) !== null && _ !== void 0
                      ? _
                      : (_anyApi_endpoints[_endpointName] = {});
                  if (isQueryDefinition(definition)) {
                    safeAssign(
                      endpoint,
                      {
                        name: endpointName,
                        select: buildQuerySelector(endpointName, definition),
                        initiate: buildInitiateQuery(endpointName, definition),
                      },
                      buildMatchThunkActions(queryThunk, endpointName)
                    );
                  }
                  if (isMutationDefinition(definition)) {
                    safeAssign(
                      endpoint,
                      {
                        name: endpointName,
                        select: buildMutationSelector(),
                        initiate: buildInitiateMutation(endpointName),
                      },
                      buildMatchThunkActions(mutationThunk, endpointName)
                    );
                  }
                  if (isInfiniteQueryDefinition(definition)) {
                    safeAssign(
                      endpoint,
                      {
                        name: endpointName,
                        select: buildInfiniteQuerySelector(
                          endpointName,
                          definition
                        ),
                        initiate: buildInitiateInfiniteQuery(
                          endpointName,
                          definition
                        ),
                      },
                      buildMatchThunkActions(queryThunk, endpointName)
                    );
                  }
                },
              };
            },
          };
        };
        // src/query/core/index.ts
        var createApi = /* @__PURE__ */ buildCreateApi(coreModule());
        //# sourceMappingURL=rtk-query.modern.mjs.map
      },
    '[project]/node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs [app-client] (ecmascript) <locals>':
      (__turbopack_context__) => {
        'use strict';

        // src/query/react/index.ts
        __turbopack_context__.s({
          ApiProvider: () => ApiProvider,
          UNINITIALIZED_VALUE: () => UNINITIALIZED_VALUE,
          createApi: () => createApi,
          reactHooksModule: () => reactHooksModule,
          reactHooksModuleName: () => reactHooksModuleName,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          /*#__PURE__*/ __turbopack_context__.i(
            '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/react-redux/dist/react-redux.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/reselect/dist/reselect.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        // src/query/react/ApiProvider.tsx
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs [app-client] (ecmascript) <locals>'
          );
        // src/query/utils/capitalize.ts
        function capitalize(str) {
          return str.replace(str[0], str[0].toUpperCase());
        }
        // src/query/utils/countObjectKeys.ts
        function countObjectKeys(obj) {
          let count = 0;
          for (const _key in obj) {
            count++;
          }
          return count;
        }
        // src/query/endpointDefinitions.ts
        function isQueryDefinition(e) {
          return e.type === 'query' /* query */;
        }
        function isMutationDefinition(e) {
          return e.type === 'mutation' /* mutation */;
        }
        function isInfiniteQueryDefinition(e) {
          return e.type === 'infinitequery' /* infinitequery */;
        }
        // src/query/tsHelpers.ts
        function safeAssign(target) {
          for (
            var _len = arguments.length,
              args = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key];
          }
          return Object.assign(target, ...args);
        }
        // src/query/react/constants.ts
        var UNINITIALIZED_VALUE = Symbol();
        function useStableQueryArgs(
          queryArgs,
          serialize,
          endpointDefinition,
          endpointName
        ) {
          const incoming = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ])(
            {
              'useStableQueryArgs.useMemo[incoming]': () => ({
                queryArgs,
                serialized:
                  typeof queryArgs == 'object'
                    ? serialize({
                        queryArgs,
                        endpointDefinition,
                        endpointName,
                      })
                    : queryArgs,
              }),
            }['useStableQueryArgs.useMemo[incoming]'],
            [queryArgs, serialize, endpointDefinition, endpointName]
          );
          const cache = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useRef'
          ])(incoming);
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ])(
            {
              'useStableQueryArgs.useEffect': () => {
                if (cache.current.serialized !== incoming.serialized) {
                  cache.current = incoming;
                }
              },
            }['useStableQueryArgs.useEffect'],
            [incoming]
          );
          return cache.current.serialized === incoming.serialized
            ? cache.current.queryArgs
            : queryArgs;
        }
        function useShallowStableValue(value) {
          const cache = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useRef'
          ])(value);
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ])(
            {
              'useShallowStableValue.useEffect2': () => {
                if (
                  !(0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'shallowEqual'
                  ])(cache.current, value)
                ) {
                  cache.current = value;
                }
              },
            }['useShallowStableValue.useEffect2'],
            [value]
          );
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'shallowEqual'
          ])(cache.current, value)
            ? cache.current
            : value;
        }
        // src/query/react/buildHooks.ts
        var canUseDOM = () =>
          !!(
            typeof window !== 'undefined' &&
            typeof window.document !== 'undefined' &&
            typeof window.document.createElement !== 'undefined'
          );
        var isDOM = /* @__PURE__ */ canUseDOM();
        var isRunningInReactNative = () =>
          typeof navigator !== 'undefined' &&
          navigator.product === 'ReactNative';
        var isReactNative = /* @__PURE__ */ isRunningInReactNative();
        var getUseIsomorphicLayoutEffect = () =>
          isDOM || isReactNative
            ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useLayoutEffect'
              ]
            : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ];
        var useIsomorphicLayoutEffect =
          /* @__PURE__ */ getUseIsomorphicLayoutEffect();
        var noPendingQueryStateSelector = (selected) => {
          if (selected.isUninitialized) {
            return {
              ...selected,
              isUninitialized: false,
              isFetching: true,
              isLoading: selected.data !== void 0 ? false : true,
              status:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'QueryStatus'
                ].pending,
            };
          }
          return selected;
        };
        function pick(obj) {
          for (
            var _len = arguments.length,
              keys = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            keys[_key - 1] = arguments[_key];
          }
          const ret = {};
          keys.forEach((key) => {
            ret[key] = obj[key];
          });
          return ret;
        }
        var COMMON_HOOK_DEBUG_FIELDS = [
          'data',
          'status',
          'isLoading',
          'isSuccess',
          'isError',
          'error',
        ];
        function buildHooks(param) {
          let {
            api,
            moduleOptions: {
              batch,
              hooks: { useDispatch, useSelector, useStore },
              unstable__sideEffectsInRender,
              createSelector,
            },
            serializeQueryArgs,
            context,
          } = param;
          const usePossiblyImmediateEffect = unstable__sideEffectsInRender
            ? (cb) => cb()
            : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ];
          return {
            buildQueryHooks,
            buildInfiniteQueryHooks,
            buildMutationHook,
            usePrefetch,
          };
          //TURBOPACK unreachable
          function queryStatePreSelector(currentState, lastResult, queryArgs) {
            if (
              (lastResult === null || lastResult === void 0
                ? void 0
                : lastResult.endpointName) &&
              currentState.isUninitialized
            ) {
              const { endpointName } = lastResult;
              const endpointDefinition =
                context.endpointDefinitions[endpointName];
              if (
                queryArgs !==
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'skipToken'
                  ] &&
                serializeQueryArgs({
                  queryArgs: lastResult.originalArgs,
                  endpointDefinition,
                  endpointName,
                }) ===
                  serializeQueryArgs({
                    queryArgs,
                    endpointDefinition,
                    endpointName,
                  })
              )
                lastResult = void 0;
            }
            let data = currentState.isSuccess
              ? currentState.data
              : lastResult === null || lastResult === void 0
                ? void 0
                : lastResult.data;
            if (data === void 0) data = currentState.data;
            const hasData = data !== void 0;
            const isFetching = currentState.isLoading;
            const isLoading =
              (!lastResult ||
                lastResult.isLoading ||
                lastResult.isUninitialized) &&
              !hasData &&
              isFetching;
            const isSuccess =
              currentState.isSuccess ||
              (hasData &&
                ((isFetching &&
                  !(lastResult === null || lastResult === void 0
                    ? void 0
                    : lastResult.isError)) ||
                  currentState.isUninitialized));
            return {
              ...currentState,
              data,
              currentData: currentState.data,
              isFetching,
              isLoading,
              isSuccess,
            };
          }
          function infiniteQueryStatePreSelector(
            currentState,
            lastResult,
            queryArgs
          ) {
            if (
              (lastResult === null || lastResult === void 0
                ? void 0
                : lastResult.endpointName) &&
              currentState.isUninitialized
            ) {
              const { endpointName } = lastResult;
              const endpointDefinition =
                context.endpointDefinitions[endpointName];
              if (
                queryArgs !==
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'skipToken'
                  ] &&
                serializeQueryArgs({
                  queryArgs: lastResult.originalArgs,
                  endpointDefinition,
                  endpointName,
                }) ===
                  serializeQueryArgs({
                    queryArgs,
                    endpointDefinition,
                    endpointName,
                  })
              )
                lastResult = void 0;
            }
            let data = currentState.isSuccess
              ? currentState.data
              : lastResult === null || lastResult === void 0
                ? void 0
                : lastResult.data;
            if (data === void 0) data = currentState.data;
            const hasData = data !== void 0;
            const isFetching = currentState.isLoading;
            const isLoading =
              (!lastResult ||
                lastResult.isLoading ||
                lastResult.isUninitialized) &&
              !hasData &&
              isFetching;
            const isSuccess = currentState.isSuccess || (isFetching && hasData);
            return {
              ...currentState,
              data,
              currentData: currentState.data,
              isFetching,
              isLoading,
              isSuccess,
            };
          }
          function usePrefetch(endpointName, defaultOptions) {
            const dispatch = useDispatch();
            const stableDefaultOptions = useShallowStableValue(defaultOptions);
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ])(
              {
                'buildHooks.usePrefetch.useCallback': (arg, options) =>
                  dispatch(
                    api.util.prefetch(endpointName, arg, {
                      ...stableDefaultOptions,
                      ...options,
                    })
                  ),
              }['buildHooks.usePrefetch.useCallback'],
              [endpointName, dispatch, stableDefaultOptions]
            );
          }
          function useQuerySubscriptionCommonImpl(endpointName, arg) {
            let {
              refetchOnReconnect,
              refetchOnFocus,
              refetchOnMountOrArgChange,
              skip = false,
              pollingInterval = 0,
              skipPollingIfUnfocused = false,
              ...rest
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {};
            const { initiate } = api.endpoints[endpointName];
            const dispatch = useDispatch();
            const subscriptionSelectorsRef = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ])(void 0);
            if (!subscriptionSelectorsRef.current) {
              const returnedValue = dispatch(
                api.internalActions.internal_getRTKQSubscriptions()
              );
              if (('TURBOPACK compile-time truthy', 1)) {
                if (
                  typeof returnedValue !== 'object' ||
                  typeof (returnedValue === null || returnedValue === void 0
                    ? void 0
                    : returnedValue.type) === 'string'
                ) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : 'Warning: Middleware for RTK-Query API at reducerPath "'.concat(
                          api.reducerPath,
                          '" has not been added to the store.\n    You must add the middleware for RTK-Query to function correctly!'
                        )
                  );
                }
              }
              subscriptionSelectorsRef.current = returnedValue;
            }
            const stableArg = useStableQueryArgs(
              skip
                ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'skipToken'
                  ]
                : arg, // Even if the user provided a per-endpoint `serializeQueryArgs` with
              // a consistent return value, _here_ we want to use the default behavior
              // so we can tell if _anything_ actually changed. Otherwise, we can end up
              // with a case where the query args did change but the serialization doesn't,
              // and then we never try to initiate a refetch.
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'defaultSerializeQueryArgs'
              ],
              context.endpointDefinitions[endpointName],
              endpointName
            );
            const stableSubscriptionOptions = useShallowStableValue({
              refetchOnReconnect,
              refetchOnFocus,
              pollingInterval,
              skipPollingIfUnfocused,
            });
            const initialPageParam = rest.initialPageParam;
            const stableInitialPageParam =
              useShallowStableValue(initialPageParam);
            const promiseRef = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ])(void 0);
            let { queryCacheKey, requestId } = promiseRef.current || {};
            let currentRenderHasSubscription = false;
            if (queryCacheKey && requestId) {
              currentRenderHasSubscription =
                subscriptionSelectorsRef.current.isRequestSubscribed(
                  queryCacheKey,
                  requestId
                );
            }
            const subscriptionRemoved =
              !currentRenderHasSubscription && promiseRef.current !== void 0;
            usePossiblyImmediateEffect(
              {
                'buildHooks.useQuerySubscriptionCommonImpl.usePossiblyImmediateEffect':
                  () => {
                    if (subscriptionRemoved) {
                      promiseRef.current = void 0;
                    }
                  },
              }[
                'buildHooks.useQuerySubscriptionCommonImpl.usePossiblyImmediateEffect'
              ],
              [subscriptionRemoved]
            );
            usePossiblyImmediateEffect(
              {
                'buildHooks.useQuerySubscriptionCommonImpl.usePossiblyImmediateEffect':
                  () => {
                    var _promiseRef_current;
                    const lastPromise = promiseRef.current;
                    if (
                      ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
                    );
                    if (
                      stableArg ===
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'skipToken'
                      ]
                    ) {
                      lastPromise === null || lastPromise === void 0
                        ? void 0
                        : lastPromise.unsubscribe();
                      promiseRef.current = void 0;
                      return;
                    }
                    const lastSubscriptionOptions =
                      (_promiseRef_current = promiseRef.current) === null ||
                      _promiseRef_current === void 0
                        ? void 0
                        : _promiseRef_current.subscriptionOptions;
                    if (!lastPromise || lastPromise.arg !== stableArg) {
                      lastPromise === null || lastPromise === void 0
                        ? void 0
                        : lastPromise.unsubscribe();
                      const promise = dispatch(
                        initiate(stableArg, {
                          subscriptionOptions: stableSubscriptionOptions,
                          forceRefetch: refetchOnMountOrArgChange,
                          ...(isInfiniteQueryDefinition(
                            context.endpointDefinitions[endpointName]
                          )
                            ? {
                                initialPageParam: stableInitialPageParam,
                              }
                            : {}),
                        })
                      );
                      promiseRef.current = promise;
                    } else if (
                      stableSubscriptionOptions !== lastSubscriptionOptions
                    ) {
                      lastPromise.updateSubscriptionOptions(
                        stableSubscriptionOptions
                      );
                    }
                  },
              }[
                'buildHooks.useQuerySubscriptionCommonImpl.usePossiblyImmediateEffect'
              ],
              [
                dispatch,
                initiate,
                refetchOnMountOrArgChange,
                stableArg,
                stableSubscriptionOptions,
                subscriptionRemoved,
                stableInitialPageParam,
                endpointName,
              ]
            );
            return [promiseRef, dispatch, initiate, stableSubscriptionOptions];
          }
          function buildUseQueryState(endpointName, preSelector) {
            const useQueryState = function (arg) {
              let { skip = false, selectFromResult } =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              const { select } = api.endpoints[endpointName];
              const stableArg = useStableQueryArgs(
                skip
                  ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'skipToken'
                    ]
                  : arg,
                serializeQueryArgs,
                context.endpointDefinitions[endpointName],
                endpointName
              );
              const lastValue = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ])(void 0);
              const selectDefaultResult = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]':
                    () =>
                      // Normally ts-ignores are bad and should be avoided, but we're
                      // already casting this selector to be `Selector<any>` anyway,
                      // so the inconsistencies don't matter here
                      // @ts-ignore
                      createSelector(
                        [
                          // @ts-ignore
                          select(stableArg),
                          {
                            'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]':
                              (_, lastResult) => lastResult,
                          }[
                            'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]'
                          ],
                          {
                            'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]':
                              (_) => stableArg,
                          }[
                            'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]'
                          ],
                        ],
                        preSelector,
                        {
                          memoizeOptions: {
                            resultEqualityCheck:
                              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                                'shallowEqual'
                              ],
                          },
                        }
                      ),
                }[
                  'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]'
                ],
                [select, stableArg]
              );
              const querySelector = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildUseQueryState.useQueryState.useMemo2[querySelector]':
                    () =>
                      selectFromResult
                        ? createSelector(
                            [selectDefaultResult],
                            selectFromResult,
                            {
                              devModeChecks: {
                                identityFunctionCheck: 'never',
                              },
                            }
                          )
                        : selectDefaultResult,
                }[
                  'buildHooks.buildUseQueryState.useQueryState.useMemo2[querySelector]'
                ],
                [selectDefaultResult, selectFromResult]
              );
              const currentState = useSelector(
                {
                  'buildHooks.buildUseQueryState.useQueryState.useSelector[currentState]':
                    (state) => querySelector(state, lastValue.current),
                }[
                  'buildHooks.buildUseQueryState.useQueryState.useSelector[currentState]'
                ],
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'shallowEqual'
                ]
              );
              const store = useStore();
              const newLastValue = selectDefaultResult(
                store.getState(),
                lastValue.current
              );
              useIsomorphicLayoutEffect(
                {
                  'buildHooks.buildUseQueryState.useQueryState.useIsomorphicLayoutEffect':
                    () => {
                      lastValue.current = newLastValue;
                    },
                }[
                  'buildHooks.buildUseQueryState.useQueryState.useIsomorphicLayoutEffect'
                ],
                [newLastValue]
              );
              return currentState;
            };
            return useQueryState;
          }
          function usePromiseRefUnsubscribeOnUnmount(promiseRef) {
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useEffect'
            ])(
              {
                'buildHooks.usePromiseRefUnsubscribeOnUnmount.useEffect3':
                  () => {
                    return {
                      'buildHooks.usePromiseRefUnsubscribeOnUnmount.useEffect3':
                        () => {
                          var _promiseRef_current_unsubscribe,
                            _promiseRef_current;
                          (_promiseRef_current = promiseRef.current) === null ||
                          _promiseRef_current === void 0
                            ? void 0
                            : (_promiseRef_current_unsubscribe =
                                  _promiseRef_current.unsubscribe) === null ||
                                _promiseRef_current_unsubscribe === void 0
                              ? void 0
                              : _promiseRef_current_unsubscribe.call(
                                  _promiseRef_current
                                );
                          promiseRef.current = void 0;
                        },
                    }[
                      'buildHooks.usePromiseRefUnsubscribeOnUnmount.useEffect3'
                    ];
                  },
              }['buildHooks.usePromiseRefUnsubscribeOnUnmount.useEffect3'],
              [promiseRef]
            );
          }
          function refetchOrErrorIfUnmounted(promiseRef) {
            if (!promiseRef.current)
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'Cannot refetch a query that has not been started yet.'
              );
            return promiseRef.current.refetch();
          }
          function buildQueryHooks(endpointName) {
            const useQuerySubscription = function (arg) {
              let options =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              const [promiseRef] = useQuerySubscriptionCommonImpl(
                endpointName,
                arg,
                options
              );
              usePromiseRefUnsubscribeOnUnmount(promiseRef);
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildQueryHooks.useQuerySubscription.useMemo2':
                    () => ({
                      /**
                       * A method to manually refetch data for the query
                       */ refetch: {
                        'buildHooks.buildQueryHooks.useQuerySubscription.useMemo2':
                          () => refetchOrErrorIfUnmounted(promiseRef),
                      }[
                        'buildHooks.buildQueryHooks.useQuerySubscription.useMemo2'
                      ],
                    }),
                }['buildHooks.buildQueryHooks.useQuerySubscription.useMemo2'],
                [promiseRef]
              );
            };
            const useLazyQuerySubscription = function () {
              let {
                refetchOnReconnect,
                refetchOnFocus,
                pollingInterval = 0,
                skipPollingIfUnfocused = false,
              } = arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {};
              const { initiate } = api.endpoints[endpointName];
              const dispatch = useDispatch();
              const [arg, setArg] = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useState'
              ])(UNINITIALIZED_VALUE);
              const promiseRef = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ])(void 0);
              const stableSubscriptionOptions = useShallowStableValue({
                refetchOnReconnect,
                refetchOnFocus,
                pollingInterval,
                skipPollingIfUnfocused,
              });
              usePossiblyImmediateEffect(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.usePossiblyImmediateEffect':
                    () => {
                      var _promiseRef_current;
                      const lastSubscriptionOptions =
                        (_promiseRef_current = promiseRef.current) === null ||
                        _promiseRef_current === void 0
                          ? void 0
                          : _promiseRef_current.subscriptionOptions;
                      if (
                        stableSubscriptionOptions !== lastSubscriptionOptions
                      ) {
                        var _promiseRef_current1;
                        (_promiseRef_current1 = promiseRef.current) === null ||
                        _promiseRef_current1 === void 0
                          ? void 0
                          : _promiseRef_current1.updateSubscriptionOptions(
                              stableSubscriptionOptions
                            );
                      }
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.usePossiblyImmediateEffect'
                ],
                [stableSubscriptionOptions]
              );
              const subscriptionOptionsRef = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ])(stableSubscriptionOptions);
              usePossiblyImmediateEffect(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.usePossiblyImmediateEffect':
                    () => {
                      subscriptionOptionsRef.current =
                        stableSubscriptionOptions;
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.usePossiblyImmediateEffect'
                ],
                [stableSubscriptionOptions]
              );
              const trigger = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[trigger]':
                    function (arg2) {
                      let preferCacheValue =
                        arguments.length > 1 && arguments[1] !== void 0
                          ? arguments[1]
                          : false;
                      let promise;
                      batch(
                        {
                          'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[trigger]':
                            () => {
                              var _promiseRef_current;
                              (_promiseRef_current = promiseRef.current) ===
                                null || _promiseRef_current === void 0
                                ? void 0
                                : _promiseRef_current.unsubscribe();
                              promiseRef.current = promise = dispatch(
                                initiate(arg2, {
                                  subscriptionOptions:
                                    subscriptionOptionsRef.current,
                                  forceRefetch: !preferCacheValue,
                                })
                              );
                              setArg(arg2);
                            },
                        }[
                          'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[trigger]'
                        ]
                      );
                      return promise;
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[trigger]'
                ],
                [dispatch, initiate]
              );
              const reset = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[reset]':
                    () => {
                      var _promiseRef_current;
                      if (
                        (_promiseRef_current = promiseRef.current) === null ||
                        _promiseRef_current === void 0
                          ? void 0
                          : _promiseRef_current.queryCacheKey
                      ) {
                        var _promiseRef_current1;
                        dispatch(
                          api.internalActions.removeQueryResult({
                            queryCacheKey:
                              (_promiseRef_current1 = promiseRef.current) ===
                                null || _promiseRef_current1 === void 0
                                ? void 0
                                : _promiseRef_current1.queryCacheKey,
                          })
                        );
                      }
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[reset]'
                ],
                [dispatch]
              );
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ])(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3':
                    () => {
                      return {
                        'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3':
                          () => {
                            var _promiseRef_current;
                            promiseRef === null || promiseRef === void 0
                              ? void 0
                              : (_promiseRef_current = promiseRef.current) ===
                                    null || _promiseRef_current === void 0
                                ? void 0
                                : _promiseRef_current.unsubscribe();
                          },
                      }[
                        'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3'
                      ];
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3'
                ],
                []
              );
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ])(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3':
                    () => {
                      if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {
                        trigger(arg, true);
                      }
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3'
                ],
                [arg, trigger]
              );
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useMemo2':
                    () => [
                      trigger,
                      arg,
                      {
                        reset,
                      },
                    ],
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useMemo2'
                ],
                [trigger, arg, reset]
              );
            };
            const useQueryState = buildUseQueryState(
              endpointName,
              queryStatePreSelector
            );
            return {
              useQueryState,
              useQuerySubscription,
              useLazyQuerySubscription,
              useLazyQuery(options) {
                const [trigger, arg, { reset }] =
                  useLazyQuerySubscription(options);
                const queryStateResults = useQueryState(arg, {
                  ...options,
                  skip: arg === UNINITIALIZED_VALUE,
                });
                const info = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ])(
                  {
                    'buildHooks.buildQueryHooks.useMemo2[info]': () => ({
                      lastArg: arg,
                    }),
                  }['buildHooks.buildQueryHooks.useMemo2[info]'],
                  [arg]
                );
                return (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ])(
                  {
                    'buildHooks.buildQueryHooks.useMemo2': () => [
                      trigger,
                      {
                        ...queryStateResults,
                        reset,
                      },
                      info,
                    ],
                  }['buildHooks.buildQueryHooks.useMemo2'],
                  [trigger, queryStateResults, reset, info]
                );
              },
              useQuery(arg, options) {
                const querySubscriptionResults = useQuerySubscription(
                  arg,
                  options
                );
                const queryStateResults = useQueryState(arg, {
                  selectFromResult:
                    arg ===
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'skipToken'
                      ] ||
                    (options === null || options === void 0
                      ? void 0
                      : options.skip)
                      ? void 0
                      : noPendingQueryStateSelector,
                  ...options,
                });
                const debugValue = pick(
                  queryStateResults,
                  ...COMMON_HOOK_DEBUG_FIELDS
                );
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useDebugValue'
                ])(debugValue);
                return (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ])(
                  {
                    'buildHooks.buildQueryHooks.useMemo2': () => ({
                      ...queryStateResults,
                      ...querySubscriptionResults,
                    }),
                  }['buildHooks.buildQueryHooks.useMemo2'],
                  [queryStateResults, querySubscriptionResults]
                );
              },
            };
          }
          function buildInfiniteQueryHooks(endpointName) {
            const useInfiniteQuerySubscription = function (arg) {
              let options =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              const [
                promiseRef,
                dispatch,
                initiate,
                stableSubscriptionOptions,
              ] = useQuerySubscriptionCommonImpl(endpointName, arg, options);
              const subscriptionOptionsRef = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ])(stableSubscriptionOptions);
              usePossiblyImmediateEffect(
                {
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.usePossiblyImmediateEffect':
                    () => {
                      subscriptionOptionsRef.current =
                        stableSubscriptionOptions;
                    },
                }[
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.usePossiblyImmediateEffect'
                ],
                [stableSubscriptionOptions]
              );
              const trigger = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[trigger]':
                    function (arg2, direction) {
                      let promise;
                      batch(
                        {
                          'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[trigger]':
                            () => {
                              var _promiseRef_current;
                              (_promiseRef_current = promiseRef.current) ===
                                null || _promiseRef_current === void 0
                                ? void 0
                                : _promiseRef_current.unsubscribe();
                              promiseRef.current = promise = dispatch(
                                initiate(arg2, {
                                  subscriptionOptions:
                                    subscriptionOptionsRef.current,
                                  direction,
                                })
                              );
                            },
                        }[
                          'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[trigger]'
                        ]
                      );
                      return promise;
                    },
                }[
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[trigger]'
                ],
                [promiseRef, dispatch, initiate]
              );
              usePromiseRefUnsubscribeOnUnmount(promiseRef);
              const stableArg = useStableQueryArgs(
                options.skip
                  ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'skipToken'
                    ]
                  : arg, // Even if the user provided a per-endpoint `serializeQueryArgs` with
                // a consistent return value, _here_ we want to use the default behavior
                // so we can tell if _anything_ actually changed. Otherwise, we can end up
                // with a case where the query args did change but the serialization doesn't,
                // and then we never try to initiate a refetch.
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'defaultSerializeQueryArgs'
                ],
                context.endpointDefinitions[endpointName],
                endpointName
              );
              const refetch = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[refetch]':
                    () => refetchOrErrorIfUnmounted(promiseRef),
                }[
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[refetch]'
                ],
                [promiseRef]
              );
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2':
                    () => {
                      const fetchNextPage = {
                        'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2.fetchNextPage':
                          () => {
                            return trigger(stableArg, 'forward');
                          },
                      }[
                        'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2.fetchNextPage'
                      ];
                      const fetchPreviousPage = {
                        'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2.fetchPreviousPage':
                          () => {
                            return trigger(stableArg, 'backward');
                          },
                      }[
                        'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2.fetchPreviousPage'
                      ];
                      return {
                        trigger,
                        /**
                         * A method to manually refetch data for the query
                         */ refetch,
                        fetchNextPage,
                        fetchPreviousPage,
                      };
                    },
                }[
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2'
                ],
                [refetch, trigger, stableArg]
              );
            };
            const useInfiniteQueryState = buildUseQueryState(
              endpointName,
              infiniteQueryStatePreSelector
            );
            return {
              useInfiniteQueryState,
              useInfiniteQuerySubscription,
              useInfiniteQuery(arg, options) {
                const { refetch, fetchNextPage, fetchPreviousPage } =
                  useInfiniteQuerySubscription(arg, options);
                const queryStateResults = useInfiniteQueryState(arg, {
                  selectFromResult:
                    arg ===
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'skipToken'
                      ] ||
                    (options === null || options === void 0
                      ? void 0
                      : options.skip)
                      ? void 0
                      : noPendingQueryStateSelector,
                  ...options,
                });
                const debugValue = pick(
                  queryStateResults,
                  ...COMMON_HOOK_DEBUG_FIELDS,
                  'hasNextPage',
                  'hasPreviousPage'
                );
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useDebugValue'
                ])(debugValue);
                return (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ])(
                  {
                    'buildHooks.buildInfiniteQueryHooks.useMemo2': () => ({
                      ...queryStateResults,
                      fetchNextPage,
                      fetchPreviousPage,
                      refetch,
                    }),
                  }['buildHooks.buildInfiniteQueryHooks.useMemo2'],
                  [queryStateResults, fetchNextPage, fetchPreviousPage, refetch]
                );
              },
            };
          }
          function buildMutationHook(name) {
            return function () {
              let { selectFromResult, fixedCacheKey } =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {};
              const { select, initiate } = api.endpoints[name];
              const dispatch = useDispatch();
              const [promise, setPromise] = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useState'
              ])();
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ])(
                {
                  'buildHooks.buildMutationHook.useEffect3': () =>
                    ({
                      'buildHooks.buildMutationHook.useEffect3': () => {
                        if (
                          !(promise === null || promise === void 0
                            ? void 0
                            : promise.arg.fixedCacheKey)
                        ) {
                          promise === null || promise === void 0
                            ? void 0
                            : promise.reset();
                        }
                      },
                    })['buildHooks.buildMutationHook.useEffect3'],
                }['buildHooks.buildMutationHook.useEffect3'],
                [promise]
              );
              const triggerMutation = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildMutationHook.useCallback[triggerMutation]':
                    function (arg) {
                      const promise2 = dispatch(
                        initiate(arg, {
                          fixedCacheKey,
                        })
                      );
                      setPromise(promise2);
                      return promise2;
                    },
                }['buildHooks.buildMutationHook.useCallback[triggerMutation]'],
                [dispatch, initiate, fixedCacheKey]
              );
              const { requestId } = promise || {};
              const selectDefaultResult = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildMutationHook.useMemo2[selectDefaultResult]':
                    () =>
                      select({
                        fixedCacheKey,
                        requestId:
                          promise === null || promise === void 0
                            ? void 0
                            : promise.requestId,
                      }),
                }['buildHooks.buildMutationHook.useMemo2[selectDefaultResult]'],
                [fixedCacheKey, promise, select]
              );
              const mutationSelector = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildMutationHook.useMemo2[mutationSelector]':
                    () =>
                      selectFromResult
                        ? createSelector(
                            [selectDefaultResult],
                            selectFromResult
                          )
                        : selectDefaultResult,
                }['buildHooks.buildMutationHook.useMemo2[mutationSelector]'],
                [selectFromResult, selectDefaultResult]
              );
              const currentState = useSelector(
                mutationSelector,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'shallowEqual'
                ]
              );
              const originalArgs =
                fixedCacheKey == null
                  ? promise === null || promise === void 0
                    ? void 0
                    : promise.arg.originalArgs
                  : void 0;
              const reset = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildMutationHook.useCallback[reset]': () => {
                    batch(
                      {
                        'buildHooks.buildMutationHook.useCallback[reset]':
                          () => {
                            if (promise) {
                              setPromise(void 0);
                            }
                            if (fixedCacheKey) {
                              dispatch(
                                api.internalActions.removeMutationResult({
                                  requestId,
                                  fixedCacheKey,
                                })
                              );
                            }
                          },
                      }['buildHooks.buildMutationHook.useCallback[reset]']
                    );
                  },
                }['buildHooks.buildMutationHook.useCallback[reset]'],
                [dispatch, fixedCacheKey, promise, requestId]
              );
              const debugValue = pick(
                currentState,
                ...COMMON_HOOK_DEBUG_FIELDS,
                'endpointName'
              );
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useDebugValue'
              ])(debugValue);
              const finalState = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildMutationHook.useMemo2[finalState]': () => ({
                    ...currentState,
                    originalArgs,
                    reset,
                  }),
                }['buildHooks.buildMutationHook.useMemo2[finalState]'],
                [currentState, originalArgs, reset]
              );
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildMutationHook.useMemo2': () => [
                    triggerMutation,
                    finalState,
                  ],
                }['buildHooks.buildMutationHook.useMemo2'],
                [triggerMutation, finalState]
              );
            };
          }
        }
        // src/query/react/module.ts
        var reactHooksModuleName = /* @__PURE__ */ Symbol();
        var reactHooksModule = function () {
          let {
            batch = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'batch'
            ],
            hooks = {
              useDispatch:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useDispatch'
                ],
              useSelector:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useSelector'
                ],
              useStore:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useStore'
                ],
            },
            createSelector = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createSelector'
            ],
            unstable__sideEffectsInRender = false,
            ...rest
          } = arguments.length > 0 && arguments[0] !== void 0
            ? arguments[0]
            : {};
          if (('TURBOPACK compile-time truthy', 1)) {
            const hookNames = ['useDispatch', 'useSelector', 'useStore'];
            let warned = false;
            for (const hookName of hookNames) {
              if (countObjectKeys(rest) > 0) {
                if (rest[hookName]) {
                  if (!warned) {
                    console.warn(
                      'As of RTK 2.0, the hooks now need to be specified as one object, provided under a `hooks` key:\n`reactHooksModule({ hooks: { useDispatch, useSelector, useStore } })`'
                    );
                    warned = true;
                  }
                }
                hooks[hookName] = rest[hookName];
              }
              if (typeof hooks[hookName] !== 'function') {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'When using custom hooks for context, all '
                        .concat(
                          hookNames.length,
                          ' hooks need to be provided: '
                        )
                        .concat(hookNames.join(', '), '.\nHook ')
                        .concat(
                          hookName,
                          ' was either not provided or not a function.'
                        )
                );
              }
            }
          }
          return {
            name: reactHooksModuleName,
            init(api, param, context) {
              let { serializeQueryArgs } = param;
              const anyApi = api;
              const {
                buildQueryHooks,
                buildInfiniteQueryHooks,
                buildMutationHook,
                usePrefetch,
              } = buildHooks({
                api,
                moduleOptions: {
                  batch,
                  hooks,
                  unstable__sideEffectsInRender,
                  createSelector,
                },
                serializeQueryArgs,
                context,
              });
              safeAssign(anyApi, {
                usePrefetch,
              });
              safeAssign(context, {
                batch,
              });
              return {
                injectEndpoint(endpointName, definition) {
                  if (isQueryDefinition(definition)) {
                    const {
                      useQuery,
                      useLazyQuery,
                      useLazyQuerySubscription,
                      useQueryState,
                      useQuerySubscription,
                    } = buildQueryHooks(endpointName);
                    safeAssign(anyApi.endpoints[endpointName], {
                      useQuery,
                      useLazyQuery,
                      useLazyQuerySubscription,
                      useQueryState,
                      useQuerySubscription,
                    });
                    api['use'.concat(capitalize(endpointName), 'Query')] =
                      useQuery;
                    api['useLazy'.concat(capitalize(endpointName), 'Query')] =
                      useLazyQuery;
                  }
                  if (isMutationDefinition(definition)) {
                    const useMutation = buildMutationHook(endpointName);
                    safeAssign(anyApi.endpoints[endpointName], {
                      useMutation,
                    });
                    api['use'.concat(capitalize(endpointName), 'Mutation')] =
                      useMutation;
                  } else if (isInfiniteQueryDefinition(definition)) {
                    const {
                      useInfiniteQuery,
                      useInfiniteQuerySubscription,
                      useInfiniteQueryState,
                    } = buildInfiniteQueryHooks(endpointName);
                    safeAssign(anyApi.endpoints[endpointName], {
                      useInfiniteQuery,
                      useInfiniteQuerySubscription,
                      useInfiniteQueryState,
                    });
                    api[
                      'use'.concat(capitalize(endpointName), 'InfiniteQuery')
                    ] = useInfiniteQuery;
                  }
                },
              };
            },
          };
        };
        function ApiProvider(props) {
          const context =
            props.context ||
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'ReactReduxContext'
            ];
          const existingContext = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useContext'
          ])(context);
          if (existingContext) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Existing Redux context detected. If you already have a store set up, please use the traditional Redux setup.'
            );
          }
          const [store] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ](
              {
                'ApiProvider.useState': () =>
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    'configureStore'
                  ])({
                    reducer: {
                      [props.api.reducerPath]: props.api.reducer,
                    },
                    middleware: {
                      'ApiProvider.useState': (gDM) =>
                        gDM().concat(props.api.middleware),
                    }['ApiProvider.useState'],
                  }),
              }['ApiProvider.useState']
            );
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ])(
            {
              'ApiProvider.useEffect4': () =>
                props.setupListeners === false
                  ? void 0
                  : (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'setupListeners'
                    ])(store.dispatch, props.setupListeners),
            }['ApiProvider.useEffect4'],
            [props.setupListeners, store.dispatch]
          );
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Provider'
            ],
            {
              store,
              context,
            },
            props.children
          );
        }
        // src/query/react/index.ts
        var createApi = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
          'buildCreateApi'
        ])(
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'coreModule'
          ])(),
          reactHooksModule()
        );
        //# sourceMappingURL=rtk-query-react.modern.mjs.map
      },
  },
]);

//# sourceMappingURL=node_modules_%40reduxjs_toolkit_dist_3b8977d5._.js.map
