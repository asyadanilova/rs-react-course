{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Asya_Danilova/Desktop/rs-react-course/node_modules/next-intl/dist/esm/development/react-client/index.js"],"sourcesContent":["import { useFormatter as useFormatter$1, useTranslations as useTranslations$1 } from 'use-intl';\nexport * from 'use-intl';\n\n/**\n * This is the main entry file when non-'react-server'\n * environments import from 'next-intl'.\n *\n * Maintainer notes:\n * - Make sure this mirrors the API from 'react-server'.\n * - Make sure everything exported from this module is\n *   supported in all Next.js versions that are supported.\n */\n\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nfunction callHook(name, hook) {\n  return (...args) => {\n    try {\n      return hook(...args);\n    } catch {\n      throw new Error(`Failed to call \\`${name}\\` because the context from \\`NextIntlClientProvider\\` was not found.\n\nThis can happen because:\n1) You intended to render this component as a Server Component, the render\n   failed, and therefore React attempted to render the component on the client\n   instead. If this is the case, check the console for server errors.\n2) You intended to render this component on the client side, but no context was found.\n   Learn more about this error here: https://next-intl.dev/docs/environments/server-client-components#missing-context` );\n    }\n  };\n}\nconst useTranslations = callHook('useTranslations', useTranslations$1);\nconst useFormatter = callHook('useFormatter', useFormatter$1);\n\nexport { useFormatter, useTranslations };\n"],"names":[],"mappings":";;;;AAAA;;;AAGA;;;;;;;;CAQC,GAGD,sEAAsE;AACtE,SAAS,SAAS,IAAI,EAAE,IAAI;IAC1B,OAAO;yCAAI;YAAA;;QACT,IAAI;YACF,OAAO,QAAQ;QACjB,EAAE,UAAM;YACN,MAAM,IAAI,MAAM,AAAC,mBAAwB,OAAL,MAAK;QAQ3C;IACF;AACF;AACA,MAAM,kBAAkB,SAAS,mBAAmB,qKAAA,CAAA,kBAAiB;AACrE,MAAM,eAAe,SAAS,gBAAgB,qKAAA,CAAA,eAAc","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Asya_Danilova/Desktop/rs-react-course/node_modules/use-intl/dist/esm/development/core.js"],"sourcesContent":["import { r as resolveNamespace, e as createBaseTranslator, f as defaultGetMessageFallback, b as createIntlFormatters, d as createCache, g as defaultOnError } from './initializeConfig-DPFnvsUO.js';\nexport { I as IntlError, a as IntlErrorCode, c as createFormatter, i as initializeConfig } from './initializeConfig-DPFnvsUO.js';\n\n\n\n\nfunction createTranslatorImpl({\n  messages,\n  namespace,\n  ...rest\n}, namespacePrefix) {\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the function invocation.\n  messages = messages[namespacePrefix];\n  namespace = resolveNamespace(namespace, namespacePrefix);\n  return createBaseTranslator({\n    ...rest,\n    messages,\n    namespace\n  });\n}\n\n// This type is slightly more loose than `AbstractIntlMessages`\n// in order to avoid a type error.\n\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */\nfunction createTranslator({\n  _cache = createCache(),\n  _formatters = createIntlFormatters(_cache),\n  getMessageFallback = defaultGetMessageFallback,\n  messages,\n  namespace,\n  onError = defaultOnError,\n  ...rest\n}) {\n  // We have to wrap the actual function so the type inference for the optional\n  // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n  // The prefix (\"!\") is arbitrary.\n  // @ts-expect-error Use the explicit annotation instead\n  return createTranslatorImpl({\n    ...rest,\n    onError,\n    cache: _cache,\n    formatters: _formatters,\n    getMessageFallback,\n    // @ts-expect-error `messages` is allowed to be `undefined` here and will be handled internally\n    messages: {\n      '!': messages\n    },\n    namespace: namespace ? `!.${namespace}` : '!'\n  }, '!');\n}\n\n/**\n * Checks if a locale exists in a list of locales.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale\n */\nfunction hasLocale(locales, candidate) {\n  return locales.includes(candidate);\n}\n\nexport { createCache as _createCache, createIntlFormatters as _createIntlFormatters, createTranslator, hasLocale };\n"],"names":[],"mappings":";;;;AAAA;;;AAMA,SAAS,qBAAqB,KAI7B,EAAE,eAAe;QAJY,EAC5B,QAAQ,EACR,SAAS,EACT,GAAG,MACJ,GAJ6B;IAK5B,oDAAoD;IACpD,8CAA8C;IAC9C,WAAW,QAAQ,CAAC,gBAAgB;IACpC,YAAY,CAAA,GAAA,4LAAA,CAAA,IAAgB,AAAD,EAAE,WAAW;IACxC,OAAO,CAAA,GAAA,4LAAA,CAAA,IAAoB,AAAD,EAAE;QAC1B,GAAG,IAAI;QACP;QACA;IACF;AACF;AAEA,+DAA+D;AAC/D,kCAAkC;AAElC;;;;;;;CAOC,GACD,SAAS,iBAAiB,KAQzB;QARyB,EACxB,SAAS,CAAA,GAAA,4LAAA,CAAA,IAAW,AAAD,GAAG,EACtB,cAAc,CAAA,GAAA,4LAAA,CAAA,IAAoB,AAAD,EAAE,OAAO,EAC1C,qBAAqB,4LAAA,CAAA,IAAyB,EAC9C,QAAQ,EACR,SAAS,EACT,UAAU,4LAAA,CAAA,IAAc,EACxB,GAAG,MACJ,GARyB;IASxB,6EAA6E;IAC7E,6EAA6E;IAC7E,iCAAiC;IACjC,uDAAuD;IACvD,OAAO,qBAAqB;QAC1B,GAAG,IAAI;QACP;QACA,OAAO;QACP,YAAY;QACZ;QACA,+FAA+F;QAC/F,UAAU;YACR,KAAK;QACP;QACA,WAAW,YAAY,AAAC,KAAc,OAAV,aAAc;IAC5C,GAAG;AACL;AAEA;;;;CAIC,GACD,SAAS,UAAU,OAAO,EAAE,SAAS;IACnC,OAAO,QAAQ,QAAQ,CAAC;AAC1B","ignoreList":[0],"debugId":null}}]
}