(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([
  typeof document === 'object' ? document.currentScript : undefined,
  {
    '[project]/node_modules/next-intl/dist/esm/development/react-client/index.js [app-client] (ecmascript) <locals>':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          useFormatter: () => useFormatter,
          useTranslations: () => useTranslations,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/use-intl/dist/esm/development/react.js [app-client] (ecmascript)'
          );
        /**
         * This is the main entry file when non-'react-server'
         * environments import from 'next-intl'.
         *
         * Maintainer notes:
         * - Make sure this mirrors the API from 'react-server'.
         * - Make sure everything exported from this module is
         *   supported in all Next.js versions that are supported.
         */ // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
        function callHook(name, hook) {
          return function () {
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }
            try {
              return hook(...args);
            } catch (e) {
              throw new Error(
                'Failed to call `'.concat(
                  name,
                  '` because the context from `NextIntlClientProvider` was not found.\n\nThis can happen because:\n1) You intended to render this component as a Server Component, the render\n   failed, and therefore React attempted to render the component on the client\n   instead. If this is the case, check the console for server errors.\n2) You intended to render this component on the client side, but no context was found.\n   Learn more about this error here: https://next-intl.dev/docs/environments/server-client-components#missing-context'
                )
              );
            }
          };
        }
        const useTranslations = callHook(
          'useTranslations',
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useTranslations'
          ]
        );
        const useFormatter = callHook(
          'useFormatter',
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useFormatter'
          ]
        );
      },
    '[project]/node_modules/next/navigation.js [app-client] (ecmascript)': (
      __turbopack_context__
    ) => {
      var { m: module, e: exports } = __turbopack_context__;
      {
        module.exports = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/navigation.js [app-client] (ecmascript)'
        );
      }
    },
    '[project]/node_modules/next-intl/dist/esm/development/routing/config.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          receiveRoutingConfig: () => receiveRoutingConfig,
        });
        function receiveRoutingConfig(input) {
          var _input_localeDetection, _input_alternateLinks;
          return {
            ...input,
            localePrefix: receiveLocalePrefixConfig(input.localePrefix),
            localeCookie: receiveLocaleCookie(input.localeCookie),
            localeDetection:
              (_input_localeDetection = input.localeDetection) !== null &&
              _input_localeDetection !== void 0
                ? _input_localeDetection
                : true,
            alternateLinks:
              (_input_alternateLinks = input.alternateLinks) !== null &&
              _input_alternateLinks !== void 0
                ? _input_alternateLinks
                : true,
          };
        }
        function receiveLocaleCookie(localeCookie) {
          return (
            localeCookie !== null && localeCookie !== void 0
              ? localeCookie
              : true
          )
            ? {
                name: 'NEXT_LOCALE',
                sameSite: 'lax',
                ...(typeof localeCookie === 'object' && localeCookie),
              }
            : false;
        }
        function receiveLocalePrefixConfig(localePrefix) {
          return typeof localePrefix === 'object'
            ? localePrefix
            : {
                mode: localePrefix || 'always',
              };
        }
      },
    '[project]/node_modules/next-intl/dist/esm/development/shared/use.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          default: () => use,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        // @ts-expect-error -- Ooof, Next.js doesn't make this easy.
        // `use` is only available in React 19 canary, but we can
        // use it in Next.js already as Next.js "vendors" a fixed
        // version of React. However, if we'd simply put `use` in
        // ESM code, then the build doesn't work since React does
        // not export `use` officially. Therefore, we have to use
        // something that is not statically analyzable. Once React
        // 19 is out, we can remove this in the next major version.
        var use =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'use'.trim()
          ];
      },
    '[project]/node_modules/next-intl/dist/esm/development/shared/utils.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          getLocaleAsPrefix: () => getLocaleAsPrefix,
          getLocalePrefix: () => getLocalePrefix,
          getLocalizedTemplate: () => getLocalizedTemplate,
          getSortedPathnames: () => getSortedPathnames,
          hasPathnamePrefixed: () => hasPathnamePrefixed,
          isLocalizableHref: () => isLocalizableHref,
          isPromise: () => isPromise,
          matchesPathname: () => matchesPathname,
          normalizeTrailingSlash: () => normalizeTrailingSlash,
          prefixPathname: () => prefixPathname,
          templateToRegex: () => templateToRegex,
          unprefixPathname: () => unprefixPathname,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          /*#__PURE__*/ __turbopack_context__.i(
            '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
          );
        function isRelativeHref(href) {
          const pathname = typeof href === 'object' ? href.pathname : href;
          return pathname != null && !pathname.startsWith('/');
        }
        function isLocalHref(href) {
          if (typeof href === 'object') {
            return href.host == null && href.hostname == null;
          } else {
            const hasProtocol = /^[a-z]+:/i.test(href);
            return !hasProtocol;
          }
        }
        function isLocalizableHref(href) {
          return isLocalHref(href) && !isRelativeHref(href);
        }
        function unprefixPathname(pathname, prefix) {
          return pathname.replace(new RegExp('^'.concat(prefix)), '') || '/';
        }
        function prefixPathname(prefix, pathname) {
          let localizedHref = prefix;
          // Avoid trailing slashes
          if (/^\/(\?.*)?$/.test(pathname)) {
            pathname = pathname.slice(1);
          }
          localizedHref += pathname;
          return localizedHref;
        }
        function hasPathnamePrefixed(prefix, pathname) {
          return (
            pathname === prefix || pathname.startsWith(''.concat(prefix, '/'))
          );
        }
        function hasTrailingSlash() {
          try {
            // Provided via `env` setting in `next.config.js` via the plugin
            return (
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'default'
              ].env._next_intl_trailing_slash === 'true'
            );
          } catch (e) {
            return false;
          }
        }
        function getLocalizedTemplate(
          pathnameConfig,
          locale,
          internalTemplate
        ) {
          return typeof pathnameConfig === 'string'
            ? pathnameConfig
            : pathnameConfig[locale] || internalTemplate;
        }
        function normalizeTrailingSlash(pathname) {
          const trailingSlash = hasTrailingSlash();
          const [path, ...hashParts] = pathname.split('#');
          const hash = hashParts.join('#');
          let normalizedPath = path;
          if (normalizedPath !== '/') {
            const pathnameEndsWithSlash = normalizedPath.endsWith('/');
            if (trailingSlash && !pathnameEndsWithSlash) {
              normalizedPath += '/';
            } else if (!trailingSlash && pathnameEndsWithSlash) {
              normalizedPath = normalizedPath.slice(0, -1);
            }
          }
          if (hash) {
            normalizedPath += '#' + hash;
          }
          return normalizedPath;
        }
        function matchesPathname(
          /** E.g. `/users/[userId]-[userName]` */ template,
          /** E.g. `/users/23-jane` */ pathname
        ) {
          const normalizedTemplate = normalizeTrailingSlash(template);
          const normalizedPathname = normalizeTrailingSlash(pathname);
          const regex = templateToRegex(normalizedTemplate);
          return regex.test(normalizedPathname);
        }
        function getLocalePrefix(locale, localePrefix) {
          var _localePrefix_prefixes;
          return (
            (localePrefix.mode !== 'never' &&
              ((_localePrefix_prefixes = localePrefix.prefixes) === null ||
              _localePrefix_prefixes === void 0
                ? void 0
                : _localePrefix_prefixes[locale])) || // We return a prefix even if `mode: 'never'`. It's up to the consumer
            // to decide to use it or not.
            getLocaleAsPrefix(locale)
          );
        }
        function getLocaleAsPrefix(locale) {
          return '/' + locale;
        }
        function templateToRegex(template) {
          const regexPattern = template // Replace optional catchall ('[[...slug]]')
            .replace(/\[\[(\.\.\.[^\]]+)\]\]/g, '?(.*)') // Replace catchall ('[...slug]')
            .replace(/\[(\.\.\.[^\]]+)\]/g, '(.+)') // Replace regular parameter ('[slug]')
            .replace(/\[([^\]]+)\]/g, '([^/]+)');
          return new RegExp('^'.concat(regexPattern, '$'));
        }
        function isOptionalCatchAllSegment(pathname) {
          return pathname.includes('[[...');
        }
        function isCatchAllSegment(pathname) {
          return pathname.includes('[...');
        }
        function isDynamicSegment(pathname) {
          return pathname.includes('[');
        }
        function comparePathnamePairs(a, b) {
          const pathA = a.split('/');
          const pathB = b.split('/');
          const maxLength = Math.max(pathA.length, pathB.length);
          for (let i = 0; i < maxLength; i++) {
            const segmentA = pathA[i];
            const segmentB = pathB[i];
            // If one of the paths ends, prioritize the shorter path
            if (!segmentA && segmentB) return -1;
            if (segmentA && !segmentB) return 1;
            if (!segmentA && !segmentB) continue;
            // Prioritize static segments over dynamic segments
            if (!isDynamicSegment(segmentA) && isDynamicSegment(segmentB))
              return -1;
            if (isDynamicSegment(segmentA) && !isDynamicSegment(segmentB))
              return 1;
            // Prioritize non-catch-all segments over catch-all segments
            if (!isCatchAllSegment(segmentA) && isCatchAllSegment(segmentB))
              return -1;
            if (isCatchAllSegment(segmentA) && !isCatchAllSegment(segmentB))
              return 1;
            // Prioritize non-optional catch-all segments over optional catch-all segments
            if (
              !isOptionalCatchAllSegment(segmentA) &&
              isOptionalCatchAllSegment(segmentB)
            ) {
              return -1;
            }
            if (
              isOptionalCatchAllSegment(segmentA) &&
              !isOptionalCatchAllSegment(segmentB)
            ) {
              return 1;
            }
            if (segmentA === segmentB) continue;
          }
          // Both pathnames are completely static
          return 0;
        }
        function getSortedPathnames(pathnames) {
          return pathnames.sort(comparePathnamePairs);
        }
        function isPromise(value) {
          // https://github.com/amannn/next-intl/issues/1711
          return typeof value.then === 'function';
        }
      },
    '[project]/node_modules/next/dist/shared/lib/router/utils/querystring.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              assign: null,
              searchParamsToUrlQuery: null,
              urlQueryToSearchParams: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            assign: function () {
              return assign;
            },
            searchParamsToUrlQuery: function () {
              return searchParamsToUrlQuery;
            },
            urlQueryToSearchParams: function () {
              return urlQueryToSearchParams;
            },
          });
          function searchParamsToUrlQuery(searchParams) {
            const query = {};
            for (const [key, value] of searchParams.entries()) {
              const existing = query[key];
              if (typeof existing === 'undefined') {
                query[key] = value;
              } else if (Array.isArray(existing)) {
                existing.push(value);
              } else {
                query[key] = [existing, value];
              }
            }
            return query;
          }
          function stringifyUrlQueryParam(param) {
            if (typeof param === 'string') {
              return param;
            }
            if (
              (typeof param === 'number' && !isNaN(param)) ||
              typeof param === 'boolean'
            ) {
              return String(param);
            } else {
              return '';
            }
          }
          function urlQueryToSearchParams(query) {
            const searchParams = new URLSearchParams();
            for (const [key, value] of Object.entries(query)) {
              if (Array.isArray(value)) {
                for (const item of value) {
                  searchParams.append(key, stringifyUrlQueryParam(item));
                }
              } else {
                searchParams.set(key, stringifyUrlQueryParam(value));
              }
            }
            return searchParams;
          }
          function assign(target) {
            for (
              var _len = arguments.length,
                searchParamsList = new Array(_len > 1 ? _len - 1 : 0),
                _key = 1;
              _key < _len;
              _key++
            ) {
              searchParamsList[_key - 1] = arguments[_key];
            }
            for (const searchParams of searchParamsList) {
              for (const key of searchParams.keys()) {
                target.delete(key);
              }
              for (const [key, value] of searchParams.entries()) {
                target.append(key, value);
              }
            }
            return target;
          } //# sourceMappingURL=querystring.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/router/utils/format-url.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          // Format function modified from nodejs
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              formatUrl: null,
              formatWithValidation: null,
              urlObjectKeys: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            formatUrl: function () {
              return formatUrl;
            },
            formatWithValidation: function () {
              return formatWithValidation;
            },
            urlObjectKeys: function () {
              return urlObjectKeys;
            },
          });
          const _interop_require_wildcard = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)'
          );
          const _querystring = /*#__PURE__*/ _interop_require_wildcard._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/shared/lib/router/utils/querystring.js [app-client] (ecmascript)'
            )
          );
          const slashedProtocols = /https?|ftp|gopher|file/;
          function formatUrl(urlObj) {
            let { auth, hostname } = urlObj;
            let protocol = urlObj.protocol || '';
            let pathname = urlObj.pathname || '';
            let hash = urlObj.hash || '';
            let query = urlObj.query || '';
            let host = false;
            auth = auth
              ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@'
              : '';
            if (urlObj.host) {
              host = auth + urlObj.host;
            } else if (hostname) {
              host =
                auth +
                (~hostname.indexOf(':') ? '[' + hostname + ']' : hostname);
              if (urlObj.port) {
                host += ':' + urlObj.port;
              }
            }
            if (query && typeof query === 'object') {
              query = String(_querystring.urlQueryToSearchParams(query));
            }
            let search = urlObj.search || (query && '?' + query) || '';
            if (protocol && !protocol.endsWith(':')) protocol += ':';
            if (
              urlObj.slashes ||
              ((!protocol || slashedProtocols.test(protocol)) && host !== false)
            ) {
              host = '//' + (host || '');
              if (pathname && pathname[0] !== '/') pathname = '/' + pathname;
            } else if (!host) {
              host = '';
            }
            if (hash && hash[0] !== '#') hash = '#' + hash;
            if (search && search[0] !== '?') search = '?' + search;
            pathname = pathname.replace(/[?#]/g, encodeURIComponent);
            search = search.replace('#', '%23');
            return '' + protocol + host + pathname + search + hash;
          }
          const urlObjectKeys = [
            'auth',
            'hash',
            'host',
            'hostname',
            'href',
            'path',
            'pathname',
            'port',
            'protocol',
            'query',
            'search',
            'slashes',
          ];
          function formatWithValidation(url) {
            if (('TURBOPACK compile-time truthy', 1)) {
              if (url !== null && typeof url === 'object') {
                Object.keys(url).forEach((key) => {
                  if (!urlObjectKeys.includes(key)) {
                    console.warn(
                      'Unknown key passed via urlObject into url.format: ' + key
                    );
                  }
                });
              }
            }
            return formatUrl(url);
          } //# sourceMappingURL=format-url.js.map
        }
      },
    '[project]/node_modules/next/dist/client/use-merged-ref.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'useMergedRef', {
            enumerable: true,
            get: function () {
              return useMergedRef;
            },
          });
          const _react = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
          function useMergedRef(refA, refB) {
            const cleanupA = (0, _react.useRef)(null);
            const cleanupB = (0, _react.useRef)(null);
            // NOTE: In theory, we could skip the wrapping if only one of the refs is non-null.
            // (this happens often if the user doesn't pass a ref to Link/Form/Image)
            // But this can cause us to leak a cleanup-ref into user code (e.g. via `<Link legacyBehavior>`),
            // and the user might pass that ref into ref-merging library that doesn't support cleanup refs
            // (because it hasn't been updated for React 19)
            // which can then cause things to blow up, because a cleanup-returning ref gets called with `null`.
            // So in practice, it's safer to be defensive and always wrap the ref, even on React 19.
            return (0, _react.useCallback)(
              (current) => {
                if (current === null) {
                  const cleanupFnA = cleanupA.current;
                  if (cleanupFnA) {
                    cleanupA.current = null;
                    cleanupFnA();
                  }
                  const cleanupFnB = cleanupB.current;
                  if (cleanupFnB) {
                    cleanupB.current = null;
                    cleanupFnB();
                  }
                } else {
                  if (refA) {
                    cleanupA.current = applyRef(refA, current);
                  }
                  if (refB) {
                    cleanupB.current = applyRef(refB, current);
                  }
                }
              },
              [refA, refB]
            );
          }
          function applyRef(refA, current) {
            if (typeof refA === 'function') {
              const cleanup = refA(current);
              if (typeof cleanup === 'function') {
                return cleanup;
              } else {
                return () => refA(null);
              }
            } else {
              refA.current = current;
              return () => {
                refA.current = null;
              };
            }
          }
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=use-merged-ref.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/utils.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              DecodeError: null,
              MiddlewareNotFoundError: null,
              MissingStaticPage: null,
              NormalizeError: null,
              PageNotFoundError: null,
              SP: null,
              ST: null,
              WEB_VITALS: null,
              execOnce: null,
              getDisplayName: null,
              getLocationOrigin: null,
              getURL: null,
              isAbsoluteUrl: null,
              isResSent: null,
              loadGetInitialProps: null,
              normalizeRepeatedSlashes: null,
              stringifyError: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            DecodeError: function () {
              return DecodeError;
            },
            MiddlewareNotFoundError: function () {
              return MiddlewareNotFoundError;
            },
            MissingStaticPage: function () {
              return MissingStaticPage;
            },
            NormalizeError: function () {
              return NormalizeError;
            },
            PageNotFoundError: function () {
              return PageNotFoundError;
            },
            SP: function () {
              return SP;
            },
            ST: function () {
              return ST;
            },
            WEB_VITALS: function () {
              return WEB_VITALS;
            },
            execOnce: function () {
              return execOnce;
            },
            getDisplayName: function () {
              return getDisplayName;
            },
            getLocationOrigin: function () {
              return getLocationOrigin;
            },
            getURL: function () {
              return getURL;
            },
            isAbsoluteUrl: function () {
              return isAbsoluteUrl;
            },
            isResSent: function () {
              return isResSent;
            },
            loadGetInitialProps: function () {
              return loadGetInitialProps;
            },
            normalizeRepeatedSlashes: function () {
              return normalizeRepeatedSlashes;
            },
            stringifyError: function () {
              return stringifyError;
            },
          });
          const WEB_VITALS = ['CLS', 'FCP', 'FID', 'INP', 'LCP', 'TTFB'];
          function execOnce(fn) {
            let used = false;
            let result;
            return function () {
              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }
              if (!used) {
                used = true;
                result = fn(...args);
              }
              return result;
            };
          }
          // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
          // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
          const ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\d+\-.]*?:/;
          const isAbsoluteUrl = (url) => ABSOLUTE_URL_REGEX.test(url);
          function getLocationOrigin() {
            const { protocol, hostname, port } = window.location;
            return protocol + '//' + hostname + (port ? ':' + port : '');
          }
          function getURL() {
            const { href } = window.location;
            const origin = getLocationOrigin();
            return href.substring(origin.length);
          }
          function getDisplayName(Component) {
            return typeof Component === 'string'
              ? Component
              : Component.displayName || Component.name || 'Unknown';
          }
          function isResSent(res) {
            return res.finished || res.headersSent;
          }
          function normalizeRepeatedSlashes(url) {
            const urlParts = url.split('?');
            const urlNoQuery = urlParts[0];
            return (
              urlNoQuery // first we replace any non-encoded backslashes with forward
                // then normalize repeated forward slashes
                .replace(/\\/g, '/')
                .replace(/\/\/+/g, '/') +
              (urlParts[1] ? '?' + urlParts.slice(1).join('?') : '')
            );
          }
          async function loadGetInitialProps(App, ctx) {
            if (('TURBOPACK compile-time truthy', 1)) {
              var _App_prototype;
              if (
                (_App_prototype = App.prototype) == null
                  ? void 0
                  : _App_prototype.getInitialProps
              ) {
                const message =
                  '"' +
                  getDisplayName(App) +
                  '.getInitialProps()" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
                throw Object.defineProperty(
                  new Error(message),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E394',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
            }
            // when called from _app `ctx` is nested in `ctx`
            const res = ctx.res || (ctx.ctx && ctx.ctx.res);
            if (!App.getInitialProps) {
              if (ctx.ctx && ctx.Component) {
                // @ts-ignore pageProps default
                return {
                  pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx),
                };
              }
              return {};
            }
            const props = await App.getInitialProps(ctx);
            if (res && isResSent(res)) {
              return props;
            }
            if (!props) {
              const message =
                '"' +
                getDisplayName(App) +
                '.getInitialProps()" should resolve to an object. But found "' +
                props +
                '" instead.';
              throw Object.defineProperty(
                new Error(message),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E394',
                  enumerable: false,
                  configurable: true,
                }
              );
            }
            if (('TURBOPACK compile-time truthy', 1)) {
              if (Object.keys(props).length === 0 && !ctx.ctx) {
                console.warn(
                  '' +
                    getDisplayName(App) +
                    ' returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps'
                );
              }
            }
            return props;
          }
          const SP = typeof performance !== 'undefined';
          const ST =
            SP &&
            ['mark', 'measure', 'getEntriesByName'].every(
              (method) => typeof performance[method] === 'function'
            );
          class DecodeError extends Error {}
          class NormalizeError extends Error {}
          class PageNotFoundError extends Error {
            constructor(page) {
              super();
              this.code = 'ENOENT';
              this.name = 'PageNotFoundError';
              this.message = 'Cannot find module for page: ' + page;
            }
          }
          class MissingStaticPage extends Error {
            constructor(page, message) {
              super();
              this.message =
                'Failed to load static file for page: ' + page + ' ' + message;
            }
          }
          class MiddlewareNotFoundError extends Error {
            constructor() {
              super();
              this.code = 'ENOENT';
              this.message = 'Cannot find the middleware module';
            }
          }
          function stringifyError(error) {
            return JSON.stringify({
              message: error.message,
              stack: error.stack,
            });
          } //# sourceMappingURL=utils.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/router/utils/is-local-url.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'isLocalURL', {
            enumerable: true,
            get: function () {
              return isLocalURL;
            },
          });
          const _utils = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils.js [app-client] (ecmascript)'
          );
          const _hasbasepath = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/has-base-path.js [app-client] (ecmascript)'
          );
          function isLocalURL(url) {
            // prevent a hydration mismatch on href for url with anchor refs
            if (!(0, _utils.isAbsoluteUrl)(url)) return true;
            try {
              // absolute urls can be local if they are on the same origin
              const locationOrigin = (0, _utils.getLocationOrigin)();
              const resolved = new URL(url, locationOrigin);
              return (
                resolved.origin === locationOrigin &&
                (0, _hasbasepath.hasBasePath)(resolved.pathname)
              );
            } catch (_) {
              return false;
            }
          } //# sourceMappingURL=is-local-url.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/utils/error-once.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'errorOnce', {
            enumerable: true,
            get: function () {
              return errorOnce;
            },
          });
          let errorOnce = (_) => {};
          if (('TURBOPACK compile-time truthy', 1)) {
            const errors = new Set();
            errorOnce = (msg) => {
              if (!errors.has(msg)) {
                console.error(msg);
              }
              errors.add(msg);
            };
          } //# sourceMappingURL=error-once.js.map
        }
      },
    '[project]/node_modules/next/dist/client/app-dir/link.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use client');
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              default: null,
              useLinkStatus: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            /**
             * A React component that extends the HTML `<a>` element to provide
             * [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)
             * and client-side navigation. This is the primary way to navigate between routes in Next.js.
             *
             * @remarks
             * - Prefetching is only enabled in production.
             *
             * @see https://nextjs.org/docs/app/api-reference/components/link
             */ default: function () {
              return LinkComponent;
            },
            useLinkStatus: function () {
              return useLinkStatus;
            },
          });
          const _interop_require_wildcard = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)'
          );
          const _jsxruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
          const _react = /*#__PURE__*/ _interop_require_wildcard._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
            )
          );
          const _formaturl = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/router/utils/format-url.js [app-client] (ecmascript)'
          );
          const _approutercontextsharedruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/app-router-context.shared-runtime.js [app-client] (ecmascript)'
          );
          const _routerreducertypes = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/router-reducer/router-reducer-types.js [app-client] (ecmascript)'
          );
          const _usemergedref = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/use-merged-ref.js [app-client] (ecmascript)'
          );
          const _utils = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils.js [app-client] (ecmascript)'
          );
          const _addbasepath = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/add-base-path.js [app-client] (ecmascript)'
          );
          const _warnonce = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils/warn-once.js [app-client] (ecmascript)'
          );
          const _links = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/links.js [app-client] (ecmascript)'
          );
          const _islocalurl = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/router/utils/is-local-url.js [app-client] (ecmascript)'
          );
          const _approuterinstance = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/app-router-instance.js [app-client] (ecmascript)'
          );
          const _erroronce = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils/error-once.js [app-client] (ecmascript)'
          );
          function isModifiedEvent(event) {
            const eventTarget = event.currentTarget;
            const target = eventTarget.getAttribute('target');
            return (
              (target && target !== '_self') ||
              event.metaKey ||
              event.ctrlKey ||
              event.shiftKey ||
              event.altKey || // triggers resource download
              (event.nativeEvent && event.nativeEvent.which === 2)
            );
          }
          function linkClicked(
            e,
            href,
            as,
            linkInstanceRef,
            replace,
            scroll,
            onNavigate
          ) {
            const { nodeName } = e.currentTarget;
            // anchors inside an svg have a lowercase nodeName
            const isAnchorNodeName = nodeName.toUpperCase() === 'A';
            if (
              (isAnchorNodeName && isModifiedEvent(e)) ||
              e.currentTarget.hasAttribute('download')
            ) {
              // ignore click for browser’s default behavior
              return;
            }
            if (!(0, _islocalurl.isLocalURL)(href)) {
              if (replace) {
                // browser default behavior does not replace the history state
                // so we need to do it manually
                e.preventDefault();
                location.replace(href);
              }
              // ignore click for browser’s default behavior
              return;
            }
            e.preventDefault();
            if (onNavigate) {
              let isDefaultPrevented = false;
              onNavigate({
                preventDefault: () => {
                  isDefaultPrevented = true;
                },
              });
              if (isDefaultPrevented) {
                return;
              }
            }
            _react.default.startTransition(() => {
              (0, _approuterinstance.dispatchNavigateAction)(
                as || href,
                replace ? 'replace' : 'push',
                scroll != null ? scroll : true,
                linkInstanceRef.current
              );
            });
          }
          function formatStringOrUrl(urlObjOrString) {
            if (typeof urlObjOrString === 'string') {
              return urlObjOrString;
            }
            return (0, _formaturl.formatUrl)(urlObjOrString);
          }
          function LinkComponent(props) {
            const [linkStatus, setOptimisticLinkStatus] = (0,
            _react.useOptimistic)(_links.IDLE_LINK_STATUS);
            let children;
            const linkInstanceRef = (0, _react.useRef)(null);
            const {
              href: hrefProp,
              as: asProp,
              children: childrenProp,
              prefetch: prefetchProp = null,
              passHref,
              replace,
              shallow,
              scroll,
              onClick,
              onMouseEnter: onMouseEnterProp,
              onTouchStart: onTouchStartProp,
              legacyBehavior = false,
              onNavigate,
              ref: forwardedRef,
              unstable_dynamicOnHover,
              ...restProps
            } = props;
            children = childrenProp;
            if (
              legacyBehavior &&
              (typeof children === 'string' || typeof children === 'number')
            ) {
              children = /*#__PURE__*/ (0, _jsxruntime.jsx)('a', {
                children: children,
              });
            }
            const router = _react.default.useContext(
              _approutercontextsharedruntime.AppRouterContext
            );
            const prefetchEnabled = prefetchProp !== false;
            /**
             * The possible states for prefetch are:
             * - null: this is the default "auto" mode, where we will prefetch partially if the link is in the viewport
             * - true: we will prefetch if the link is visible and prefetch the full page, not just partially
             * - false: we will not prefetch if in the viewport at all
             * - 'unstable_dynamicOnHover': this starts in "auto" mode, but switches to "full" when the link is hovered
             */ const appPrefetchKind =
              prefetchProp === null || prefetchProp === 'auto'
                ? _routerreducertypes.PrefetchKind.AUTO
                : _routerreducertypes.PrefetchKind.FULL;
            if (('TURBOPACK compile-time truthy', 1)) {
              function createPropError(args) {
                return Object.defineProperty(
                  new Error(
                    'Failed prop type: The prop `' +
                      args.key +
                      '` expects a ' +
                      args.expected +
                      ' in `<Link>`, but got `' +
                      args.actual +
                      '` instead.' +
                      (typeof window !== 'undefined'
                        ? "\nOpen your browser's console to view the Component stack trace."
                        : '')
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E319',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              // TypeScript trick for type-guarding:
              const requiredPropsGuard = {
                href: true,
              };
              const requiredProps = Object.keys(requiredPropsGuard);
              requiredProps.forEach((key) => {
                if (key === 'href') {
                  if (
                    props[key] == null ||
                    (typeof props[key] !== 'string' &&
                      typeof props[key] !== 'object')
                  ) {
                    throw createPropError({
                      key,
                      expected: '`string` or `object`',
                      actual: props[key] === null ? 'null' : typeof props[key],
                    });
                  }
                } else {
                  // TypeScript trick for type-guarding:
                  // eslint-disable-next-line @typescript-eslint/no-unused-vars
                  const _ = key;
                }
              });
              // TypeScript trick for type-guarding:
              const optionalPropsGuard = {
                as: true,
                replace: true,
                scroll: true,
                shallow: true,
                passHref: true,
                prefetch: true,
                unstable_dynamicOnHover: true,
                onClick: true,
                onMouseEnter: true,
                onTouchStart: true,
                legacyBehavior: true,
                onNavigate: true,
              };
              const optionalProps = Object.keys(optionalPropsGuard);
              optionalProps.forEach((key) => {
                const valType = typeof props[key];
                if (key === 'as') {
                  if (
                    props[key] &&
                    valType !== 'string' &&
                    valType !== 'object'
                  ) {
                    throw createPropError({
                      key,
                      expected: '`string` or `object`',
                      actual: valType,
                    });
                  }
                } else if (
                  key === 'onClick' ||
                  key === 'onMouseEnter' ||
                  key === 'onTouchStart' ||
                  key === 'onNavigate'
                ) {
                  if (props[key] && valType !== 'function') {
                    throw createPropError({
                      key,
                      expected: '`function`',
                      actual: valType,
                    });
                  }
                } else if (
                  key === 'replace' ||
                  key === 'scroll' ||
                  key === 'shallow' ||
                  key === 'passHref' ||
                  key === 'legacyBehavior' ||
                  key === 'unstable_dynamicOnHover'
                ) {
                  if (props[key] != null && valType !== 'boolean') {
                    throw createPropError({
                      key,
                      expected: '`boolean`',
                      actual: valType,
                    });
                  }
                } else if (key === 'prefetch') {
                  if (
                    props[key] != null &&
                    valType !== 'boolean' &&
                    props[key] !== 'auto'
                  ) {
                    throw createPropError({
                      key,
                      expected: '`boolean | "auto"`',
                      actual: valType,
                    });
                  }
                } else {
                  // TypeScript trick for type-guarding:
                  // eslint-disable-next-line @typescript-eslint/no-unused-vars
                  const _ = key;
                }
              });
            }
            if (('TURBOPACK compile-time truthy', 1)) {
              if (props.locale) {
                (0, _warnonce.warnOnce)(
                  'The `locale` prop is not supported in `next/link` while using the `app` router. Read more about app router internalization: https://nextjs.org/docs/app/building-your-application/routing/internationalization'
                );
              }
              if (!asProp) {
                let href;
                if (typeof hrefProp === 'string') {
                  href = hrefProp;
                } else if (
                  typeof hrefProp === 'object' &&
                  typeof hrefProp.pathname === 'string'
                ) {
                  href = hrefProp.pathname;
                }
                if (href) {
                  const hasDynamicSegment = href
                    .split('/')
                    .some(
                      (segment) =>
                        segment.startsWith('[') && segment.endsWith(']')
                    );
                  if (hasDynamicSegment) {
                    throw Object.defineProperty(
                      new Error(
                        'Dynamic href `' +
                          href +
                          '` found in <Link> while using the `/app` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E267',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                }
              }
            }
            const { href, as } = _react.default.useMemo(
              {
                'LinkComponent.useMemo': () => {
                  const resolvedHref = formatStringOrUrl(hrefProp);
                  return {
                    href: resolvedHref,
                    as: asProp ? formatStringOrUrl(asProp) : resolvedHref,
                  };
                },
              }['LinkComponent.useMemo'],
              [hrefProp, asProp]
            );
            // This will return the first child, if multiple are provided it will throw an error
            let child;
            if (legacyBehavior) {
              if (('TURBOPACK compile-time truthy', 1)) {
                if (onClick) {
                  console.warn(
                    '"onClick" was passed to <Link> with `href` of `' +
                      hrefProp +
                      '` but "legacyBehavior" was set. The legacy behavior requires onClick be set on the child of next/link'
                  );
                }
                if (onMouseEnterProp) {
                  console.warn(
                    '"onMouseEnter" was passed to <Link> with `href` of `' +
                      hrefProp +
                      '` but "legacyBehavior" was set. The legacy behavior requires onMouseEnter be set on the child of next/link'
                  );
                }
                try {
                  child = _react.default.Children.only(children);
                } catch (err) {
                  if (!children) {
                    throw Object.defineProperty(
                      new Error(
                        'No children were passed to <Link> with `href` of `' +
                          hrefProp +
                          '` but one child is required https://nextjs.org/docs/messages/link-no-children'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E320',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                  throw Object.defineProperty(
                    new Error(
                      'Multiple children were passed to <Link> with `href` of `' +
                        hrefProp +
                        '` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children' +
                        (typeof window !== 'undefined'
                          ? " \nOpen your browser's console to view the Component stack trace."
                          : '')
                    ),
                    '__NEXT_ERROR_CODE',
                    {
                      value: 'E266',
                      enumerable: false,
                      configurable: true,
                    }
                  );
                }
              } //TURBOPACK unreachable
              else;
            } else {
              if (('TURBOPACK compile-time truthy', 1)) {
                if ((children == null ? void 0 : children.type) === 'a') {
                  throw Object.defineProperty(
                    new Error(
                      'Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor'
                    ),
                    '__NEXT_ERROR_CODE',
                    {
                      value: 'E209',
                      enumerable: false,
                      configurable: true,
                    }
                  );
                }
              }
            }
            const childRef = legacyBehavior
              ? child && typeof child === 'object' && child.ref
              : forwardedRef;
            // Use a callback ref to attach an IntersectionObserver to the anchor tag on
            // mount. In the future we will also use this to keep track of all the
            // currently mounted <Link> instances, e.g. so we can re-prefetch them after
            // a revalidation or refresh.
            const observeLinkVisibilityOnMount = _react.default.useCallback(
              {
                'LinkComponent.useCallback[observeLinkVisibilityOnMount]': (
                  element
                ) => {
                  if (router !== null) {
                    linkInstanceRef.current = (0, _links.mountLinkInstance)(
                      element,
                      href,
                      router,
                      appPrefetchKind,
                      prefetchEnabled,
                      setOptimisticLinkStatus
                    );
                  }
                  return {
                    'LinkComponent.useCallback[observeLinkVisibilityOnMount]':
                      () => {
                        if (linkInstanceRef.current) {
                          (0, _links.unmountLinkForCurrentNavigation)(
                            linkInstanceRef.current
                          );
                          linkInstanceRef.current = null;
                        }
                        (0, _links.unmountPrefetchableInstance)(element);
                      },
                  }['LinkComponent.useCallback[observeLinkVisibilityOnMount]'];
                },
              }['LinkComponent.useCallback[observeLinkVisibilityOnMount]'],
              [
                prefetchEnabled,
                href,
                router,
                appPrefetchKind,
                setOptimisticLinkStatus,
              ]
            );
            const mergedRef = (0, _usemergedref.useMergedRef)(
              observeLinkVisibilityOnMount,
              childRef
            );
            const childProps = {
              ref: mergedRef,
              onClick(e) {
                if (('TURBOPACK compile-time truthy', 1)) {
                  if (!e) {
                    throw Object.defineProperty(
                      new Error(
                        'Component rendered inside next/link has to pass click event to "onClick" prop.'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E312',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                }
                if (!legacyBehavior && typeof onClick === 'function') {
                  onClick(e);
                }
                if (
                  legacyBehavior &&
                  child.props &&
                  typeof child.props.onClick === 'function'
                ) {
                  child.props.onClick(e);
                }
                if (!router) {
                  return;
                }
                if (e.defaultPrevented) {
                  return;
                }
                linkClicked(
                  e,
                  href,
                  as,
                  linkInstanceRef,
                  replace,
                  scroll,
                  onNavigate
                );
              },
              onMouseEnter(e) {
                if (!legacyBehavior && typeof onMouseEnterProp === 'function') {
                  onMouseEnterProp(e);
                }
                if (
                  legacyBehavior &&
                  child.props &&
                  typeof child.props.onMouseEnter === 'function'
                ) {
                  child.props.onMouseEnter(e);
                }
                if (!router) {
                  return;
                }
                if (('TURBOPACK compile-time truthy', 1)) {
                  return;
                }
                //TURBOPACK unreachable
                const upgradeToDynamicPrefetch = undefined;
              },
              onTouchStart: ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : function onTouchStart(e) {
                    if (
                      !legacyBehavior &&
                      typeof onTouchStartProp === 'function'
                    ) {
                      onTouchStartProp(e);
                    }
                    if (
                      legacyBehavior &&
                      child.props &&
                      typeof child.props.onTouchStart === 'function'
                    ) {
                      child.props.onTouchStart(e);
                    }
                    if (!router) {
                      return;
                    }
                    if (!prefetchEnabled) {
                      return;
                    }
                    const upgradeToDynamicPrefetch =
                      unstable_dynamicOnHover === true;
                    (0, _links.onNavigationIntent)(
                      e.currentTarget,
                      upgradeToDynamicPrefetch
                    );
                  },
            };
            // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is
            // defined, we specify the current 'href', so that repetition is not needed by the user.
            // If the url is absolute, we can bypass the logic to prepend the basePath.
            if ((0, _utils.isAbsoluteUrl)(as)) {
              childProps.href = as;
            } else if (
              !legacyBehavior ||
              passHref ||
              (child.type === 'a' && !('href' in child.props))
            ) {
              childProps.href = (0, _addbasepath.addBasePath)(as);
            }
            let link;
            if (legacyBehavior) {
              if (('TURBOPACK compile-time truthy', 1)) {
                (0, _erroronce.errorOnce)(
                  '`legacyBehavior` is deprecated and will be removed in a future ' +
                    'release. A codemod is available to upgrade your components:\n\n' +
                    'npx @next/codemod@latest new-link .\n\n' +
                    'Learn more: https://nextjs.org/docs/app/building-your-application/upgrading/codemods#remove-a-tags-from-link-components'
                );
              }
              link = /*#__PURE__*/ _react.default.cloneElement(
                child,
                childProps
              );
            } else {
              link = /*#__PURE__*/ (0, _jsxruntime.jsx)('a', {
                ...restProps,
                ...childProps,
                children: children,
              });
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(
              LinkStatusContext.Provider,
              {
                value: linkStatus,
                children: link,
              }
            );
          }
          const LinkStatusContext = /*#__PURE__*/ (0, _react.createContext)(
            _links.IDLE_LINK_STATUS
          );
          const useLinkStatus = () => {
            return (0, _react.useContext)(LinkStatusContext);
          };
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=link.js.map
        }
      },
    '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/utils.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          applyPathnamePrefix: () => applyPathnamePrefix,
          compileLocalizedPathname: () => compileLocalizedPathname,
          getBasePath: () => getBasePath,
          getRoute: () => getRoute,
          normalizeNameOrNameWithParams: () => normalizeNameOrNameWithParams,
          serializeSearchParams: () => serializeSearchParams,
          validateReceivedConfig: () => validateReceivedConfig,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/shared/utils.js [app-client] (ecmascript)'
          );
        // Minor false positive: A route that has both optional and
        // required params will allow optional params.
        // For `Link`
        // For `getPathname` (hence also its consumers: `redirect`, `useRouter`, …)
        function normalizeNameOrNameWithParams(href) {
          return typeof href === 'string'
            ? {
                pathname: href,
              }
            : href;
        }
        function serializeSearchParams(searchParams) {
          function serializeValue(value) {
            return String(value);
          }
          const urlSearchParams = new URLSearchParams();
          for (const [key, value] of Object.entries(searchParams)) {
            if (Array.isArray(value)) {
              value.forEach((cur) => {
                urlSearchParams.append(key, serializeValue(cur));
              });
            } else {
              urlSearchParams.set(key, serializeValue(value));
            }
          }
          return '?' + urlSearchParams.toString();
        }
        function compileLocalizedPathname(param) {
          let { pathname, locale, params, pathnames, query } = param;
          function compilePath(value) {
            const pathnameConfig = pathnames[value];
            let compiled;
            if (pathnameConfig) {
              const template = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'getLocalizedTemplate'
              ])(pathnameConfig, locale, value);
              compiled = template;
              if (params) {
                Object.entries(params).forEach((param) => {
                  let [key, paramValue] = param;
                  let regexp, replacer;
                  if (Array.isArray(paramValue)) {
                    regexp = '(\\[)?\\[...'.concat(key, '\\](\\])?');
                    replacer = paramValue.map((v) => String(v)).join('/');
                  } else {
                    regexp = '\\['.concat(key, '\\]');
                    replacer = String(paramValue);
                  }
                  compiled = compiled.replace(
                    new RegExp(regexp, 'g'),
                    replacer
                  );
                });
              }
              // Clean up optional catch-all segments that were not replaced
              compiled = compiled.replace(/\[\[\.\.\..+\]\]/g, '');
              if (compiled.includes('[')) {
                // Next.js throws anyway, therefore better provide a more helpful error message
                throw new Error(
                  'Insufficient params provided for localized pathname.\nTemplate: '
                    .concat(template, '\nParams: ')
                    .concat(JSON.stringify(params))
                );
              }
              compiled = encodePathname(compiled);
            } else {
              // Unknown pathnames
              compiled = value;
            }
            compiled = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'normalizeTrailingSlash'
            ])(compiled);
            if (query) {
              // This also encodes non-ASCII characters by
              // using `new URLSearchParams()` internally
              compiled += serializeSearchParams(query);
            }
            return compiled;
          }
          if (typeof pathname === 'string') {
            return compilePath(pathname);
          } else {
            const { pathname: internalPathname, ...rest } = pathname;
            const compiled = compilePath(internalPathname);
            const result = {
              ...rest,
              pathname: compiled,
            };
            return result;
          }
        }
        function encodePathname(pathname) {
          // Generally, to comply with RFC 3986 and Google's best practices for URL structures
          // (https://developers.google.com/search/docs/crawling-indexing/url-structure),
          // we should always encode non-ASCII characters.
          //
          // There are two places where next-intl interacts with potentially non-ASCII URLs:
          // 1. Middleware: When mapping a localized pathname to a non-localized pathname internally
          // 2. Navigation APIs: When generating a URLs to be used for <Link /> & friends
          //
          // Next.js normalizes incoming pathnames to always be encoded, therefore we can safely
          // decode them there (see middleware.tsx). On the other hand, Next.js doesn't consistently
          // encode non-ASCII characters that are passed to navigation APIs:
          // 1. <Link /> doesn't encode non-ASCII characters
          // 2. useRouter() uses `new URL()` internally, which will encode—but only if necessary
          // 3. redirect() uses useRouter() on the client, but on the server side only
          //    assigns the location header without encoding.
          //
          // In addition to this, for getPathname() we need to encode non-ASCII characters.
          //
          // Therefore, the bottom line is that next-intl should take care of encoding non-ASCII
          // characters in all cases, but can rely on `new URL()` to not double-encode characters.
          return pathname
            .split('/')
            .map((segment) => encodeURIComponent(segment))
            .join('/');
        }
        function getRoute(locale, pathname, pathnames) {
          const sortedPathnames = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'getSortedPathnames'
          ])(Object.keys(pathnames));
          const decoded = decodeURI(pathname);
          for (const internalPathname of sortedPathnames) {
            const localizedPathnamesOrPathname = pathnames[internalPathname];
            if (typeof localizedPathnamesOrPathname === 'string') {
              const localizedPathname = localizedPathnamesOrPathname;
              if (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'matchesPathname'
                ])(localizedPathname, decoded)
              ) {
                return internalPathname;
              }
            } else {
              if (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'matchesPathname'
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'getLocalizedTemplate'
                  ])(localizedPathnamesOrPathname, locale, internalPathname),
                  decoded
                )
              ) {
                return internalPathname;
              }
            }
          }
          return pathname;
        }
        function getBasePath(pathname) {
          let windowPathname =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : window.location.pathname;
          if (pathname === '/') {
            return windowPathname;
          } else {
            return windowPathname.replace(pathname, '');
          }
        }
        function applyPathnamePrefix(pathname, locale, routing, force) {
          const { mode } = routing.localePrefix;
          let shouldPrefix;
          if (force !== undefined) {
            shouldPrefix = force;
          } else if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isLocalizableHref'
            ])(pathname)
          ) {
            if (mode === 'always') {
              shouldPrefix = true;
            } else if (mode === 'as-needed') {
              shouldPrefix = routing.domains // Since locales are unique per domain, any locale that is a
                ? // default locale of a domain doesn't require a prefix
                  !routing.domains.some((cur) => cur.defaultLocale === locale)
                : locale !== routing.defaultLocale;
            }
          }
          return shouldPrefix
            ? (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'prefixPathname'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'getLocalePrefix'
                ])(locale, routing.localePrefix),
                pathname
              )
            : pathname;
        }
        function validateReceivedConfig(config) {
          var _config_localePrefix;
          if (
            ((_config_localePrefix = config.localePrefix) === null ||
            _config_localePrefix === void 0
              ? void 0
              : _config_localePrefix.mode) === 'as-needed' &&
            !('defaultLocale' in config)
          ) {
            throw new Error(
              "`localePrefix: 'as-needed' requires a `defaultLocale`."
            );
          }
        }
      },
    '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/syncLocaleCookie.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          default: () => syncLocaleCookie,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/utils.js [app-client] (ecmascript)'
          );
        /**
         * We have to keep the cookie value in sync as Next.js might
         * skip a request to the server due to its router cache.
         * See https://github.com/amannn/next-intl/issues/786.
         */ function syncLocaleCookie(
          localeCookie,
          pathname,
          locale,
          nextLocale
        ) {
          const isSwitchingLocale = nextLocale !== locale && nextLocale != null;
          if (
            !localeCookie ||
            !isSwitchingLocale || // Theoretical case, we always have a pathname in a real app,
            // only not when running e.g. in a simulated test environment
            !pathname
          ) {
            return;
          }
          const basePath = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'getBasePath'
          ])(pathname);
          const hasBasePath = basePath !== '';
          const defaultPath = hasBasePath ? basePath : '/';
          const { name, ...rest } = localeCookie;
          if (!rest.path) {
            rest.path = defaultPath;
          }
          let localeCookieString = ''.concat(name, '=').concat(nextLocale, ';');
          for (const [key, value] of Object.entries(rest)) {
            // Map object properties to cookie properties.
            // Interestingly, `maxAge` corresponds to `max-age`,
            // while `sameSite` corresponds to `SameSite`.
            // Also, keys are case-insensitive.
            const targetKey = key === 'maxAge' ? 'max-age' : key;
            localeCookieString += ''.concat(targetKey);
            if (typeof value !== 'boolean') {
              localeCookieString += '=' + value;
            }
            // A trailing ";" is allowed by browsers
            localeCookieString += ';';
          }
          // Note that writing to `document.cookie` doesn't overwrite all
          // cookies, but only the ones referenced via the name here.
          document.cookie = localeCookieString;
        }
      },
    '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/BaseLink.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          default: () => BaseLink$1,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$app$2d$dir$2f$link$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/client/app-dir/link.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/navigation.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/use-intl/dist/esm/development/react.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$syncLocaleCookie$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/syncLocaleCookie.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
        ('use client');
        function BaseLink(param, ref) {
          let { href, locale, localeCookie, onClick, prefetch, ...rest } =
            param;
          const curLocale = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useLocale'
          ])();
          const isChangingLocale = locale != null && locale !== curLocale;
          // The types aren't entirely correct here. Outside of Next.js
          // `useParams` can be called, but the return type is `null`.
          const pathname = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'usePathname'
          ])();
          function onLinkClick(event) {
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$syncLocaleCookie$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'default'
            ])(localeCookie, pathname, curLocale, locale);
            if (onClick) onClick(event);
          }
          if (isChangingLocale) {
            if (prefetch && 'development' !== 'production') {
              console.error(
                'The `prefetch` prop is currently not supported when using the `locale` prop on `Link` to switch the locale.`'
              );
            }
            prefetch = false;
          }
          // Somehow the types for `next/link` don't work as expected
          // when `moduleResolution: "nodenext"` is used.
          const Link =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$app$2d$dir$2f$link$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'default'
            ];
          return /*#__PURE__*/ (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'jsx'
          ])(Link, {
            ref: ref,
            href: href,
            hrefLang: isChangingLocale ? locale : undefined,
            onClick: onLinkClick,
            prefetch: prefetch,
            ...rest,
          });
        }
        var BaseLink$1 = /*#__PURE__*/ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
          'forwardRef'
        ])(BaseLink);
      },
    '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/createSharedNavigationFns.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          default: () => createSharedNavigationFns,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/navigation.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$routing$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/routing/config.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$use$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/shared/use.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/shared/utils.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$BaseLink$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/BaseLink.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/utils.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
        /**
         * Shared implementations for `react-server` and `react-client`
         */ function createSharedNavigationFns(getLocale, routing) {
          const config = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$routing$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'receiveRoutingConfig'
          ])(routing || {});
          {
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'validateReceivedConfig'
            ])(config);
          }
          const pathnames = config.pathnames;
          function Link(param, ref) {
            let { href, locale, ...rest } = param;
            let pathname, params;
            if (typeof href === 'object') {
              pathname = href.pathname;
              // @ts-expect-error -- This is ok
              params = href.params;
            } else {
              pathname = href;
            }
            // @ts-expect-error -- This is ok
            const isLocalizable = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isLocalizableHref'
            ])(href);
            const localePromiseOrValue = getLocale();
            const curLocale = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isPromise'
            ])(localePromiseOrValue)
              ? (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$use$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'default'
                ])(localePromiseOrValue)
              : localePromiseOrValue;
            const finalPathname = isLocalizable
              ? getPathname({
                  locale: locale || curLocale,
                  // @ts-expect-error -- This is ok
                  href:
                    pathnames == null
                      ? pathname
                      : {
                          pathname,
                          params,
                        },
                  // Always include a prefix when changing locales
                  forcePrefix: locale != null || undefined,
                })
              : pathname;
            return /*#__PURE__*/ (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'jsx'
            ])(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$BaseLink$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'default'
              ],
              {
                ref: ref,
                href:
                  typeof href === 'object'
                    ? {
                        ...href,
                        pathname: finalPathname,
                      }
                    : finalPathname,
                locale: locale,
                localeCookie: config.localeCookie,
                ...rest,
              }
            );
          }
          const LinkWithRef = /*#__PURE__*/ (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'forwardRef'
          ])(Link);
          function getPathname(args) {
            const { forcePrefix, href, locale } = args;
            let pathname;
            if (pathnames == null) {
              if (typeof href === 'object') {
                pathname = href.pathname;
                if (href.query) {
                  pathname += (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'serializeSearchParams'
                  ])(href.query);
                }
              } else {
                pathname = href;
              }
            } else {
              pathname = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'compileLocalizedPathname'
              ])({
                locale,
                // @ts-expect-error -- This is ok
                ...(0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'normalizeNameOrNameWithParams'
                ])(href),
                // @ts-expect-error -- This is ok
                pathnames: config.pathnames,
              });
            }
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'applyPathnamePrefix'
            ])(pathname, locale, config, forcePrefix);
          }
          function getRedirectFn(fn) {
            /** @see https://next-intl.dev/docs/routing/navigation#redirect */ return function redirectFn(
              args
            ) {
              for (
                var _len = arguments.length,
                  rest = new Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                rest[_key - 1] = arguments[_key];
              }
              return fn(getPathname(args), ...rest);
            };
          }
          const redirect$1 = getRedirectFn(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'redirect'
            ]
          );
          const permanentRedirect$1 = getRedirectFn(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'permanentRedirect'
            ]
          );
          return {
            config,
            Link: LinkWithRef,
            redirect: redirect$1,
            permanentRedirect: permanentRedirect$1,
            getPathname,
          };
        }
      },
    '[project]/node_modules/next-intl/dist/esm/development/navigation/react-client/useBasePathname.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          default: () => useBasePathname,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/navigation.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/use-intl/dist/esm/development/react.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/shared/utils.js [app-client] (ecmascript)'
          );
        function useBasePathname(config) {
          // The types aren't entirely correct here. Outside of Next.js
          // `useParams` can be called, but the return type is `null`.
          // Notes on `useNextPathname`:
          // - Types aren't entirely correct. Outside of Next.js the
          //   hook will return `null` (e.g. unit tests)
          // - A base path is stripped from the result
          // - Rewrites *are* taken into account (i.e. the pathname
          //   that the user sees in the browser is returned)
          const pathname = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'usePathname'
          ])();
          const locale = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useLocale'
          ])();
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ])(
            {
              'useBasePathname.useMemo': () => {
                if (!pathname) return pathname;
                let unlocalizedPathname = pathname;
                const prefix = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'getLocalePrefix'
                ])(locale, config.localePrefix);
                const isPathnamePrefixed = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'hasPathnamePrefixed'
                ])(prefix, pathname);
                if (isPathnamePrefixed) {
                  unlocalizedPathname = (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'unprefixPathname'
                  ])(pathname, prefix);
                } else if (
                  config.localePrefix.mode === 'as-needed' &&
                  config.localePrefix.prefixes
                ) {
                  // Workaround for https://github.com/vercel/next.js/issues/73085
                  const localeAsPrefix = (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'getLocaleAsPrefix'
                  ])(locale);
                  if (
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'hasPathnamePrefixed'
                    ])(localeAsPrefix, pathname)
                  ) {
                    unlocalizedPathname = (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'unprefixPathname'
                    ])(pathname, localeAsPrefix);
                  }
                }
                return unlocalizedPathname;
              },
            }['useBasePathname.useMemo'],
            [config.localePrefix, locale, pathname]
          );
        }
      },
    '[project]/node_modules/next-intl/dist/esm/development/navigation/react-client/createNavigation.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          default: () => createNavigation,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/navigation.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/use-intl/dist/esm/development/react.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$createSharedNavigationFns$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/createSharedNavigationFns.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$syncLocaleCookie$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/syncLocaleCookie.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/navigation/shared/utils.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$react$2d$client$2f$useBasePathname$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/navigation/react-client/useBasePathname.js [app-client] (ecmascript)'
          );
        function createNavigation(routing) {
          const { Link, config, getPathname, ...redirects } = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$createSharedNavigationFns$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'default'
          ])(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useLocale'
            ],
            routing
          );
          /** @see https://next-intl.dev/docs/routing/navigation#usepathname */ function usePathname$1() {
            const pathname = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$react$2d$client$2f$useBasePathname$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'default'
            ])(config);
            const locale = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useLocale'
            ])();
            // @ts-expect-error -- Mirror the behavior from Next.js, where `null` is returned when `usePathname` is used outside of Next, but the types indicate that a string is always returned.
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(
              {
                'createNavigation.usePathname$1.useMemo': () =>
                  pathname && // @ts-expect-error -- This is fine
                  config.pathnames
                    ? (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'getRoute'
                      ])(
                        locale,
                        pathname, // @ts-expect-error -- This is fine
                        config.pathnames
                      )
                    : pathname,
              }['createNavigation.usePathname$1.useMemo'],
              [locale, pathname]
            );
          }
          function useRouter$1() {
            const router = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRouter'
            ])();
            const curLocale = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useLocale'
            ])();
            const nextPathname = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$navigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'usePathname'
            ])();
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(
              {
                'createNavigation.useRouter$1.useMemo': () => {
                  function createHandler(fn) {
                    return function handler(href, options) {
                      const { locale: nextLocale, ...rest } = options || {};
                      const pathname = getPathname({
                        href,
                        locale: nextLocale || curLocale,
                      });
                      const args = [pathname];
                      if (Object.keys(rest).length > 0) {
                        // @ts-expect-error -- This is fine
                        args.push(rest);
                      }
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$shared$2f$syncLocaleCookie$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'default'
                      ])(
                        config.localeCookie,
                        nextPathname,
                        curLocale,
                        nextLocale
                      );
                      fn(...args);
                    };
                  }
                  return {
                    ...router,
                    /** @see https://next-intl.dev/docs/routing/navigation#userouter */ push: createHandler(
                      router.push
                    ),
                    /** @see https://next-intl.dev/docs/routing/navigation#userouter */ replace:
                      createHandler(router.replace),
                    /** @see https://next-intl.dev/docs/routing/navigation#userouter */ prefetch:
                      createHandler(router.prefetch),
                  };
                },
              }['createNavigation.useRouter$1.useMemo'],
              [curLocale, nextPathname, router]
            );
          }
          return {
            ...redirects,
            Link,
            usePathname: usePathname$1,
            useRouter: useRouter$1,
            getPathname,
          };
        }
      },
    '[project]/node_modules/next-intl/dist/esm/development/navigation/react-client/createNavigation.js [app-client] (ecmascript) <export default as createNavigation>':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          createNavigation: () =>
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$react$2d$client$2f$createNavigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'default'
            ],
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$navigation$2f$react$2d$client$2f$createNavigation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/navigation/react-client/createNavigation.js [app-client] (ecmascript)'
          );
      },
    '[project]/node_modules/next/dist/shared/lib/image-blur-svg.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          /**
           * A shared function, used on both client and server, to generate a SVG blur placeholder.
           */ Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'getImageBlurSvg', {
            enumerable: true,
            get: function () {
              return getImageBlurSvg;
            },
          });
          function getImageBlurSvg(param) {
            let {
              widthInt,
              heightInt,
              blurWidth,
              blurHeight,
              blurDataURL,
              objectFit,
            } = param;
            const std = 20;
            const svgWidth = blurWidth ? blurWidth * 40 : widthInt;
            const svgHeight = blurHeight ? blurHeight * 40 : heightInt;
            const viewBox =
              svgWidth && svgHeight
                ? "viewBox='0 0 " + svgWidth + ' ' + svgHeight + "'"
                : '';
            const preserveAspectRatio = viewBox
              ? 'none'
              : objectFit === 'contain'
                ? 'xMidYMid'
                : objectFit === 'cover'
                  ? 'xMidYMid slice'
                  : 'none';
            return (
              "%3Csvg xmlns='http://www.w3.org/2000/svg' " +
              viewBox +
              "%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='" +
              std +
              "'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='" +
              std +
              "'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='" +
              preserveAspectRatio +
              "' style='filter: url(%23b);' href='" +
              blurDataURL +
              "'/%3E%3C/svg%3E"
            );
          } //# sourceMappingURL=image-blur-svg.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/image-config.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              VALID_LOADERS: null,
              imageConfigDefault: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            VALID_LOADERS: function () {
              return VALID_LOADERS;
            },
            imageConfigDefault: function () {
              return imageConfigDefault;
            },
          });
          const VALID_LOADERS = [
            'default',
            'imgix',
            'cloudinary',
            'akamai',
            'custom',
          ];
          const imageConfigDefault = {
            deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
            imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
            path: '/_next/image',
            loader: 'default',
            loaderFile: '',
            domains: [],
            disableStaticImages: false,
            minimumCacheTTL: 60,
            formats: ['image/webp'],
            dangerouslyAllowSVG: false,
            contentSecurityPolicy:
              "script-src 'none'; frame-src 'none'; sandbox;",
            contentDispositionType: 'attachment',
            localPatterns: undefined,
            remotePatterns: [],
            qualities: undefined,
            unoptimized: false,
          }; //# sourceMappingURL=image-config.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/get-img-props.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'getImgProps', {
            enumerable: true,
            get: function () {
              return getImgProps;
            },
          });
          const _warnonce = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils/warn-once.js [app-client] (ecmascript)'
          );
          const _imageblursvg = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/image-blur-svg.js [app-client] (ecmascript)'
          );
          const _imageconfig = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/image-config.js [app-client] (ecmascript)'
          );
          const VALID_LOADING_VALUES = ['lazy', 'eager', undefined];
          // Object-fit values that are not valid background-size values
          const INVALID_BACKGROUND_SIZE_VALUES = [
            '-moz-initial',
            'fill',
            'none',
            'scale-down',
            undefined,
          ];
          function isStaticRequire(src) {
            return src.default !== undefined;
          }
          function isStaticImageData(src) {
            return src.src !== undefined;
          }
          function isStaticImport(src) {
            return (
              !!src &&
              typeof src === 'object' &&
              (isStaticRequire(src) || isStaticImageData(src))
            );
          }
          const allImgs = new Map();
          let perfObserver;
          function getInt(x) {
            if (typeof x === 'undefined') {
              return x;
            }
            if (typeof x === 'number') {
              return Number.isFinite(x) ? x : NaN;
            }
            if (typeof x === 'string' && /^[0-9]+$/.test(x)) {
              return parseInt(x, 10);
            }
            return NaN;
          }
          function getWidths(param, width, sizes) {
            let { deviceSizes, allSizes } = param;
            if (sizes) {
              // Find all the "vw" percent sizes used in the sizes prop
              const viewportWidthRe = /(^|\s)(1?\d?\d)vw/g;
              const percentSizes = [];
              for (let match; (match = viewportWidthRe.exec(sizes)); match) {
                percentSizes.push(parseInt(match[2]));
              }
              if (percentSizes.length) {
                const smallestRatio = Math.min(...percentSizes) * 0.01;
                return {
                  widths: allSizes.filter(
                    (s) => s >= deviceSizes[0] * smallestRatio
                  ),
                  kind: 'w',
                };
              }
              return {
                widths: allSizes,
                kind: 'w',
              };
            }
            if (typeof width !== 'number') {
              return {
                widths: deviceSizes,
                kind: 'w',
              };
            }
            const widths = [
              ...new Set( // > are actually 3x in the green color, but only 1.5x in the red and
                // > blue colors. Showing a 3x resolution image in the app vs a 2x
                // > resolution image will be visually the same, though the 3x image
                // > takes significantly more data. Even true 3x resolution screens are
                // > wasteful as the human eye cannot see that level of detail without
                // > something like a magnifying glass.
                // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html
                [width, width * 2 /*, width * 3*/].map(
                  (w) =>
                    allSizes.find((p) => p >= w) ||
                    allSizes[allSizes.length - 1]
                )
              ),
            ];
            return {
              widths,
              kind: 'x',
            };
          }
          function generateImgAttrs(param) {
            let { config, src, unoptimized, width, quality, sizes, loader } =
              param;
            if (unoptimized) {
              return {
                src,
                srcSet: undefined,
                sizes: undefined,
              };
            }
            const { widths, kind } = getWidths(config, width, sizes);
            const last = widths.length - 1;
            return {
              sizes: !sizes && kind === 'w' ? '100vw' : sizes,
              srcSet: widths
                .map(
                  (w, i) =>
                    loader({
                      config,
                      src,
                      quality,
                      width: w,
                    }) +
                    ' ' +
                    (kind === 'w' ? w : i + 1) +
                    kind
                )
                .join(', '),
              // It's intended to keep `src` the last attribute because React updates
              // attributes in order. If we keep `src` the first one, Safari will
              // immediately start to fetch `src`, before `sizes` and `srcSet` are even
              // updated by React. That causes multiple unnecessary requests if `srcSet`
              // and `sizes` are defined.
              // This bug cannot be reproduced in Chrome or Firefox.
              src: loader({
                config,
                src,
                quality,
                width: widths[last],
              }),
            };
          }
          function getImgProps(param, _state) {
            let {
              src,
              sizes,
              unoptimized = false,
              priority = false,
              loading,
              className,
              quality,
              width,
              height,
              fill = false,
              style,
              overrideSrc,
              onLoad,
              onLoadingComplete,
              placeholder = 'empty',
              blurDataURL,
              fetchPriority,
              decoding = 'async',
              layout,
              objectFit,
              objectPosition,
              lazyBoundary,
              lazyRoot,
              ...rest
            } = param;
            const { imgConf, showAltText, blurComplete, defaultLoader } =
              _state;
            let config;
            let c = imgConf || _imageconfig.imageConfigDefault;
            if ('allSizes' in c) {
              config = c;
            } else {
              var _c_qualities;
              const allSizes = [...c.deviceSizes, ...c.imageSizes].sort(
                (a, b) => a - b
              );
              const deviceSizes = c.deviceSizes.sort((a, b) => a - b);
              const qualities =
                (_c_qualities = c.qualities) == null
                  ? void 0
                  : _c_qualities.sort((a, b) => a - b);
              config = {
                ...c,
                allSizes,
                deviceSizes,
                qualities,
              };
            }
            if (typeof defaultLoader === 'undefined') {
              throw Object.defineProperty(
                new Error(
                  'images.loaderFile detected but the file is missing default export.\nRead more: https://nextjs.org/docs/messages/invalid-images-config'
                ),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E163',
                  enumerable: false,
                  configurable: true,
                }
              );
            }
            let loader = rest.loader || defaultLoader;
            // Remove property so it's not spread on <img> element
            delete rest.loader;
            delete rest.srcSet;
            // This special value indicates that the user
            // didn't define a "loader" prop or "loader" config.
            const isDefaultLoader = '__next_img_default' in loader;
            if (isDefaultLoader) {
              if (config.loader === 'custom') {
                throw Object.defineProperty(
                  new Error(
                    'Image with src "' +
                      src +
                      '" is missing "loader" prop.' +
                      '\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E252',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
            } else {
              // The user defined a "loader" prop or config.
              // Since the config object is internal only, we
              // must not pass it to the user-defined "loader".
              const customImageLoader = loader;
              loader = (obj) => {
                const { config: _, ...opts } = obj;
                return customImageLoader(opts);
              };
            }
            if (layout) {
              if (layout === 'fill') {
                fill = true;
              }
              const layoutToStyle = {
                intrinsic: {
                  maxWidth: '100%',
                  height: 'auto',
                },
                responsive: {
                  width: '100%',
                  height: 'auto',
                },
              };
              const layoutToSizes = {
                responsive: '100vw',
                fill: '100vw',
              };
              const layoutStyle = layoutToStyle[layout];
              if (layoutStyle) {
                style = {
                  ...style,
                  ...layoutStyle,
                };
              }
              const layoutSizes = layoutToSizes[layout];
              if (layoutSizes && !sizes) {
                sizes = layoutSizes;
              }
            }
            let staticSrc = '';
            let widthInt = getInt(width);
            let heightInt = getInt(height);
            let blurWidth;
            let blurHeight;
            if (isStaticImport(src)) {
              const staticImageData = isStaticRequire(src) ? src.default : src;
              if (!staticImageData.src) {
                throw Object.defineProperty(
                  new Error(
                    'An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received ' +
                      JSON.stringify(staticImageData)
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E460',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              if (!staticImageData.height || !staticImageData.width) {
                throw Object.defineProperty(
                  new Error(
                    'An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received ' +
                      JSON.stringify(staticImageData)
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E48',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              blurWidth = staticImageData.blurWidth;
              blurHeight = staticImageData.blurHeight;
              blurDataURL = blurDataURL || staticImageData.blurDataURL;
              staticSrc = staticImageData.src;
              if (!fill) {
                if (!widthInt && !heightInt) {
                  widthInt = staticImageData.width;
                  heightInt = staticImageData.height;
                } else if (widthInt && !heightInt) {
                  const ratio = widthInt / staticImageData.width;
                  heightInt = Math.round(staticImageData.height * ratio);
                } else if (!widthInt && heightInt) {
                  const ratio = heightInt / staticImageData.height;
                  widthInt = Math.round(staticImageData.width * ratio);
                }
              }
            }
            src = typeof src === 'string' ? src : staticSrc;
            let isLazy =
              !priority &&
              (loading === 'lazy' || typeof loading === 'undefined');
            if (!src || src.startsWith('data:') || src.startsWith('blob:')) {
              // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
              unoptimized = true;
              isLazy = false;
            }
            if (config.unoptimized) {
              unoptimized = true;
            }
            if (
              isDefaultLoader &&
              !config.dangerouslyAllowSVG &&
              src.split('?', 1)[0].endsWith('.svg')
            ) {
              // Special case to make svg serve as-is to avoid proxying
              // through the built-in Image Optimization API.
              unoptimized = true;
            }
            const qualityInt = getInt(quality);
            if (('TURBOPACK compile-time truthy', 1)) {
              if (
                config.output === 'export' &&
                isDefaultLoader &&
                !unoptimized
              ) {
                throw Object.defineProperty(
                  new Error(
                    "Image Optimization using the default loader is not compatible with `{ output: 'export' }`.\n  Possible solutions:\n    - Remove `{ output: 'export' }` and run \"next start\" to run server mode including the Image Optimization API.\n    - Configure `{ images: { unoptimized: true } }` in `next.config.js` to disable the Image Optimization API.\n  Read more: https://nextjs.org/docs/messages/export-image-api"
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E500',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              if (!src) {
                // React doesn't show the stack trace and there's
                // no `src` to help identify which image, so we
                // instead console.error(ref) during mount.
                unoptimized = true;
              } else {
                if (fill) {
                  if (width) {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" has both "width" and "fill" properties. Only one should be used.'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E96',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                  if (height) {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" has both "height" and "fill" properties. Only one should be used.'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E115',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                  if (
                    (style == null ? void 0 : style.position) &&
                    style.position !== 'absolute'
                  ) {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" has both "fill" and "style.position" properties. Images with "fill" always use position absolute - it cannot be modified.'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E216',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                  if (
                    (style == null ? void 0 : style.width) &&
                    style.width !== '100%'
                  ) {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" has both "fill" and "style.width" properties. Images with "fill" always use width 100% - it cannot be modified.'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E73',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                  if (
                    (style == null ? void 0 : style.height) &&
                    style.height !== '100%'
                  ) {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" has both "fill" and "style.height" properties. Images with "fill" always use height 100% - it cannot be modified.'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E404',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                } else {
                  if (typeof widthInt === 'undefined') {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" is missing required "width" property.'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E451',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  } else if (isNaN(widthInt)) {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" has invalid "width" property. Expected a numeric value in pixels but received "' +
                          width +
                          '".'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E66',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                  if (typeof heightInt === 'undefined') {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" is missing required "height" property.'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E397',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  } else if (isNaN(heightInt)) {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" has invalid "height" property. Expected a numeric value in pixels but received "' +
                          height +
                          '".'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E444',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                  // eslint-disable-next-line no-control-regex
                  if (/^[\x00-\x20]/.test(src)) {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" cannot start with a space or control character. Use src.trimStart() to remove it or encodeURIComponent(src) to keep it.'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E176',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                  // eslint-disable-next-line no-control-regex
                  if (/[\x00-\x20]$/.test(src)) {
                    throw Object.defineProperty(
                      new Error(
                        'Image with src "' +
                          src +
                          '" cannot end with a space or control character. Use src.trimEnd() to remove it or encodeURIComponent(src) to keep it.'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E21',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                }
              }
              if (!VALID_LOADING_VALUES.includes(loading)) {
                throw Object.defineProperty(
                  new Error(
                    'Image with src "' +
                      src +
                      '" has invalid "loading" property. Provided "' +
                      loading +
                      '" should be one of ' +
                      VALID_LOADING_VALUES.map(String).join(',') +
                      '.'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E357',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              if (priority && loading === 'lazy') {
                throw Object.defineProperty(
                  new Error(
                    'Image with src "' +
                      src +
                      '" has both "priority" and "loading=\'lazy\'" properties. Only one should be used.'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E218',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              if (
                placeholder !== 'empty' &&
                placeholder !== 'blur' &&
                !placeholder.startsWith('data:image/')
              ) {
                throw Object.defineProperty(
                  new Error(
                    'Image with src "' +
                      src +
                      '" has invalid "placeholder" property "' +
                      placeholder +
                      '".'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E431',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              if (placeholder !== 'empty') {
                if (widthInt && heightInt && widthInt * heightInt < 1600) {
                  (0, _warnonce.warnOnce)(
                    'Image with src "' +
                      src +
                      '" is smaller than 40x40. Consider removing the "placeholder" property to improve performance.'
                  );
                }
              }
              if (placeholder === 'blur' && !blurDataURL) {
                const VALID_BLUR_EXT = ['jpeg', 'png', 'webp', 'avif']; // should match next-image-loader
                throw Object.defineProperty(
                  new Error(
                    'Image with src "' +
                      src +
                      '" has "placeholder=\'blur\'" property but is missing the "blurDataURL" property.\n        Possible solutions:\n          - Add a "blurDataURL" property, the contents should be a small Data URL to represent the image\n          - Change the "src" property to a static import with one of the supported file types: ' +
                      VALID_BLUR_EXT.join(',') +
                      ' (animated images not supported)\n          - Remove the "placeholder" property, effectively no blur effect\n        Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E371',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              if ('ref' in rest) {
                (0, _warnonce.warnOnce)(
                  'Image with src "' +
                    src +
                    '" is using unsupported "ref" property. Consider using the "onLoad" property instead.'
                );
              }
              if (!unoptimized && !isDefaultLoader) {
                const urlStr = loader({
                  config,
                  src,
                  width: widthInt || 400,
                  quality: qualityInt || 75,
                });
                let url;
                try {
                  url = new URL(urlStr);
                } catch (err) {}
                if (
                  urlStr === src ||
                  (url && url.pathname === src && !url.search)
                ) {
                  (0, _warnonce.warnOnce)(
                    'Image with src "' +
                      src +
                      '" has a "loader" property that does not implement width. Please implement it or use the "unoptimized" property instead.' +
                      '\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width'
                  );
                }
              }
              if (onLoadingComplete) {
                (0, _warnonce.warnOnce)(
                  'Image with src "' +
                    src +
                    '" is using deprecated "onLoadingComplete" property. Please use the "onLoad" property instead.'
                );
              }
              for (const [legacyKey, legacyValue] of Object.entries({
                layout,
                objectFit,
                objectPosition,
                lazyBoundary,
                lazyRoot,
              })) {
                if (legacyValue) {
                  (0, _warnonce.warnOnce)(
                    'Image with src "' +
                      src +
                      '" has legacy prop "' +
                      legacyKey +
                      '". Did you forget to run the codemod?' +
                      '\nRead more: https://nextjs.org/docs/messages/next-image-upgrade-to-13'
                  );
                }
              }
              if (
                typeof window !== 'undefined' &&
                !perfObserver &&
                window.PerformanceObserver
              ) {
                perfObserver = new PerformanceObserver((entryList) => {
                  for (const entry of entryList.getEntries()) {
                    var _entry_element;
                    // @ts-ignore - missing "LargestContentfulPaint" class with "element" prop
                    const imgSrc =
                      (entry == null
                        ? void 0
                        : (_entry_element = entry.element) == null
                          ? void 0
                          : _entry_element.src) || '';
                    const lcpImage = allImgs.get(imgSrc);
                    if (
                      lcpImage &&
                      !lcpImage.priority &&
                      lcpImage.placeholder === 'empty' &&
                      !lcpImage.src.startsWith('data:') &&
                      !lcpImage.src.startsWith('blob:')
                    ) {
                      // https://web.dev/lcp/#measure-lcp-in-javascript
                      (0, _warnonce.warnOnce)(
                        'Image with src "' +
                          lcpImage.src +
                          '" was detected as the Largest Contentful Paint (LCP). Please add the "priority" property if this image is above the fold.' +
                          '\nRead more: https://nextjs.org/docs/api-reference/next/image#priority'
                      );
                    }
                  }
                });
                try {
                  perfObserver.observe({
                    type: 'largest-contentful-paint',
                    buffered: true,
                  });
                } catch (err) {
                  // Log error but don't crash the app
                  console.error(err);
                }
              }
            }
            const imgStyle = Object.assign(
              fill
                ? {
                    position: 'absolute',
                    height: '100%',
                    width: '100%',
                    left: 0,
                    top: 0,
                    right: 0,
                    bottom: 0,
                    objectFit,
                    objectPosition,
                  }
                : {},
              showAltText
                ? {}
                : {
                    color: 'transparent',
                  },
              style
            );
            const backgroundImage =
              !blurComplete && placeholder !== 'empty'
                ? placeholder === 'blur'
                  ? 'url("data:image/svg+xml;charset=utf-8,' +
                    (0, _imageblursvg.getImageBlurSvg)({
                      widthInt,
                      heightInt,
                      blurWidth,
                      blurHeight,
                      blurDataURL: blurDataURL || '',
                      objectFit: imgStyle.objectFit,
                    }) +
                    '")'
                  : 'url("' + placeholder + '")' // assume `data:image/`
                : null;
            const backgroundSize = !INVALID_BACKGROUND_SIZE_VALUES.includes(
              imgStyle.objectFit
            )
              ? imgStyle.objectFit
              : imgStyle.objectFit === 'fill'
                ? '100% 100%' // the background-size equivalent of `fill`
                : 'cover';
            let placeholderStyle = backgroundImage
              ? {
                  backgroundSize,
                  backgroundPosition: imgStyle.objectPosition || '50% 50%',
                  backgroundRepeat: 'no-repeat',
                  backgroundImage,
                }
              : {};
            if (('TURBOPACK compile-time truthy', 1)) {
              if (
                placeholderStyle.backgroundImage &&
                placeholder === 'blur' &&
                (blurDataURL == null ? void 0 : blurDataURL.startsWith('/'))
              ) {
                // During `next dev`, we don't want to generate blur placeholders with webpack
                // because it can delay starting the dev server. Instead, `next-image-loader.js`
                // will inline a special url to lazily generate the blur placeholder at request time.
                placeholderStyle.backgroundImage = 'url("' + blurDataURL + '")';
              }
            }
            const imgAttributes = generateImgAttrs({
              config,
              src,
              unoptimized,
              width: widthInt,
              quality: qualityInt,
              sizes,
              loader,
            });
            if (('TURBOPACK compile-time truthy', 1)) {
              if (typeof window !== 'undefined') {
                let fullUrl;
                try {
                  fullUrl = new URL(imgAttributes.src);
                } catch (e) {
                  fullUrl = new URL(imgAttributes.src, window.location.href);
                }
                allImgs.set(fullUrl.href, {
                  src,
                  priority,
                  placeholder,
                });
              }
            }
            const props = {
              ...rest,
              loading: isLazy ? 'lazy' : loading,
              fetchPriority,
              width: widthInt,
              height: heightInt,
              decoding,
              className,
              style: {
                ...imgStyle,
                ...placeholderStyle,
              },
              sizes: imgAttributes.sizes,
              srcSet: imgAttributes.srcSet,
              src: overrideSrc || imgAttributes.src,
            };
            const meta = {
              unoptimized,
              priority,
              placeholder,
              fill,
            };
            return {
              props,
              meta,
            };
          } //# sourceMappingURL=get-img-props.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/side-effect.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'default', {
            enumerable: true,
            get: function () {
              return SideEffect;
            },
          });
          const _react = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
          const isServer = typeof window === 'undefined';
          const useClientOnlyLayoutEffect = isServer
            ? () => {}
            : _react.useLayoutEffect;
          const useClientOnlyEffect = isServer ? () => {} : _react.useEffect;
          function SideEffect(props) {
            const { headManager, reduceComponentsToState } = props;
            function emitChange() {
              if (headManager && headManager.mountedInstances) {
                const headElements = _react.Children.toArray(
                  Array.from(headManager.mountedInstances).filter(Boolean)
                );
                headManager.updateHead(
                  reduceComponentsToState(headElements, props)
                );
              }
            }
            if (isServer) {
              var _headManager_mountedInstances;
              headManager == null
                ? void 0
                : (_headManager_mountedInstances =
                      headManager.mountedInstances) == null
                  ? void 0
                  : _headManager_mountedInstances.add(props.children);
              emitChange();
            }
            useClientOnlyLayoutEffect(
              {
                'SideEffect.useClientOnlyLayoutEffect': () => {
                  var _headManager_mountedInstances;
                  headManager == null
                    ? void 0
                    : (_headManager_mountedInstances =
                          headManager.mountedInstances) == null
                      ? void 0
                      : _headManager_mountedInstances.add(props.children);
                  return {
                    'SideEffect.useClientOnlyLayoutEffect': () => {
                      var _headManager_mountedInstances;
                      headManager == null
                        ? void 0
                        : (_headManager_mountedInstances =
                              headManager.mountedInstances) == null
                          ? void 0
                          : _headManager_mountedInstances.delete(
                              props.children
                            );
                    },
                  }['SideEffect.useClientOnlyLayoutEffect'];
                },
              }['SideEffect.useClientOnlyLayoutEffect']
            );
            // We need to call `updateHead` method whenever the `SideEffect` is trigger in all
            // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s
            // being rendered, we only trigger the method from the last one.
            // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`
            // singleton in the layout effect pass, and actually trigger it in the effect pass.
            useClientOnlyLayoutEffect(
              {
                'SideEffect.useClientOnlyLayoutEffect': () => {
                  if (headManager) {
                    headManager._pendingUpdate = emitChange;
                  }
                  return {
                    'SideEffect.useClientOnlyLayoutEffect': () => {
                      if (headManager) {
                        headManager._pendingUpdate = emitChange;
                      }
                    },
                  }['SideEffect.useClientOnlyLayoutEffect'];
                },
              }['SideEffect.useClientOnlyLayoutEffect']
            );
            useClientOnlyEffect(
              {
                'SideEffect.useClientOnlyEffect': () => {
                  if (headManager && headManager._pendingUpdate) {
                    headManager._pendingUpdate();
                    headManager._pendingUpdate = null;
                  }
                  return {
                    'SideEffect.useClientOnlyEffect': () => {
                      if (headManager && headManager._pendingUpdate) {
                        headManager._pendingUpdate();
                        headManager._pendingUpdate = null;
                      }
                    },
                  }['SideEffect.useClientOnlyEffect'];
                },
              }['SideEffect.useClientOnlyEffect']
            );
            return null;
          } //# sourceMappingURL=side-effect.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/amp-context.shared-runtime.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'AmpStateContext', {
            enumerable: true,
            get: function () {
              return AmpStateContext;
            },
          });
          const _interop_require_default = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)'
          );
          const _react = /*#__PURE__*/ _interop_require_default._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
            )
          );
          const AmpStateContext = _react.default.createContext({});
          if (('TURBOPACK compile-time truthy', 1)) {
            AmpStateContext.displayName = 'AmpStateContext';
          } //# sourceMappingURL=amp-context.shared-runtime.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/amp-mode.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'isInAmpMode', {
            enumerable: true,
            get: function () {
              return isInAmpMode;
            },
          });
          function isInAmpMode(param) {
            let {
              ampFirst = false,
              hybrid = false,
              hasQuery = false,
            } = param === void 0 ? {} : param;
            return ampFirst || (hybrid && hasQuery);
          } //# sourceMappingURL=amp-mode.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/head.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use client');
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              default: null,
              defaultHead: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            default: function () {
              return _default;
            },
            defaultHead: function () {
              return defaultHead;
            },
          });
          const _interop_require_default = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)'
          );
          const _interop_require_wildcard = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)'
          );
          const _jsxruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
          const _react = /*#__PURE__*/ _interop_require_wildcard._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
            )
          );
          const _sideeffect = /*#__PURE__*/ _interop_require_default._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/shared/lib/side-effect.js [app-client] (ecmascript)'
            )
          );
          const _ampcontextsharedruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/amp-context.shared-runtime.js [app-client] (ecmascript)'
          );
          const _headmanagercontextsharedruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.js [app-client] (ecmascript)'
          );
          const _ampmode = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/amp-mode.js [app-client] (ecmascript)'
          );
          const _warnonce = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils/warn-once.js [app-client] (ecmascript)'
          );
          function defaultHead(inAmpMode) {
            if (inAmpMode === void 0) inAmpMode = false;
            const head = [
              /*#__PURE__*/ (0, _jsxruntime.jsx)(
                'meta',
                {
                  charSet: 'utf-8',
                },
                'charset'
              ),
            ];
            if (!inAmpMode) {
              head.push(
                /*#__PURE__*/ (0, _jsxruntime.jsx)(
                  'meta',
                  {
                    name: 'viewport',
                    content: 'width=device-width',
                  },
                  'viewport'
                )
              );
            }
            return head;
          }
          function onlyReactElement(list, child) {
            // React children can be "string" or "number" in this case we ignore them for backwards compat
            if (typeof child === 'string' || typeof child === 'number') {
              return list;
            }
            // Adds support for React.Fragment
            if (child.type === _react.default.Fragment) {
              return list.concat(
                _react.default.Children.toArray(child.props.children).reduce(
                  (fragmentList, fragmentChild) => {
                    if (
                      typeof fragmentChild === 'string' ||
                      typeof fragmentChild === 'number'
                    ) {
                      return fragmentList;
                    }
                    return fragmentList.concat(fragmentChild);
                  },
                  []
                )
              );
            }
            return list.concat(child);
          }
          const METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];
          /*
 returns a function for filtering head child elements
 which shouldn't be duplicated, like <title/>
 Also adds support for deduplicated `key` properties
*/ function unique() {
            const keys = new Set();
            const tags = new Set();
            const metaTypes = new Set();
            const metaCategories = {};
            return (h) => {
              let isUnique = true;
              let hasKey = false;
              if (
                h.key &&
                typeof h.key !== 'number' &&
                h.key.indexOf('$') > 0
              ) {
                hasKey = true;
                const key = h.key.slice(h.key.indexOf('$') + 1);
                if (keys.has(key)) {
                  isUnique = false;
                } else {
                  keys.add(key);
                }
              }
              // eslint-disable-next-line default-case
              switch (h.type) {
                case 'title':
                case 'base':
                  if (tags.has(h.type)) {
                    isUnique = false;
                  } else {
                    tags.add(h.type);
                  }
                  break;
                case 'meta':
                  for (let i = 0, len = METATYPES.length; i < len; i++) {
                    const metatype = METATYPES[i];
                    if (!h.props.hasOwnProperty(metatype)) continue;
                    if (metatype === 'charSet') {
                      if (metaTypes.has(metatype)) {
                        isUnique = false;
                      } else {
                        metaTypes.add(metatype);
                      }
                    } else {
                      const category = h.props[metatype];
                      const categories = metaCategories[metatype] || new Set();
                      if (
                        (metatype !== 'name' || !hasKey) &&
                        categories.has(category)
                      ) {
                        isUnique = false;
                      } else {
                        categories.add(category);
                        metaCategories[metatype] = categories;
                      }
                    }
                  }
                  break;
              }
              return isUnique;
            };
          }
          /**
           *
           * @param headChildrenElements List of children of <Head>
           */ function reduceComponents(headChildrenElements, props) {
            const { inAmpMode } = props;
            return headChildrenElements
              .reduce(onlyReactElement, [])
              .reverse()
              .concat(defaultHead(inAmpMode).reverse())
              .filter(unique())
              .reverse()
              .map((c, i) => {
                const key = c.key || i;
                if (('TURBOPACK compile-time truthy', 1)) {
                  // omit JSON-LD structured data snippets from the warning
                  if (
                    c.type === 'script' &&
                    c.props['type'] !== 'application/ld+json'
                  ) {
                    const srcMessage = c.props['src']
                      ? '<script> tag with src="' + c.props['src'] + '"'
                      : 'inline <script>';
                    (0, _warnonce.warnOnce)(
                      'Do not add <script> tags using next/head (see ' +
                        srcMessage +
                        '). Use next/script instead. \nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component'
                    );
                  } else if (
                    c.type === 'link' &&
                    c.props['rel'] === 'stylesheet'
                  ) {
                    (0, _warnonce.warnOnce)(
                      'Do not add stylesheets using next/head (see <link rel="stylesheet"> tag with href="' +
                        c.props['href'] +
                        '"). Use Document instead. \nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component'
                    );
                  }
                }
                return /*#__PURE__*/ _react.default.cloneElement(c, {
                  key,
                });
              });
          }
          /**
           * This component injects elements to `<head>` of your page.
           * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.
           */ function Head(param) {
            let { children } = param;
            const ampState = (0, _react.useContext)(
              _ampcontextsharedruntime.AmpStateContext
            );
            const headManager = (0, _react.useContext)(
              _headmanagercontextsharedruntime.HeadManagerContext
            );
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_sideeffect.default, {
              reduceComponentsToState: reduceComponents,
              headManager: headManager,
              inAmpMode: (0, _ampmode.isInAmpMode)(ampState),
              children: children,
            });
          }
          const _default = Head;
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=head.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'ImageConfigContext', {
            enumerable: true,
            get: function () {
              return ImageConfigContext;
            },
          });
          const _interop_require_default = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)'
          );
          const _react = /*#__PURE__*/ _interop_require_default._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
            )
          );
          const _imageconfig = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/image-config.js [app-client] (ecmascript)'
          );
          const ImageConfigContext = _react.default.createContext(
            _imageconfig.imageConfigDefault
          );
          if (('TURBOPACK compile-time truthy', 1)) {
            ImageConfigContext.displayName = 'ImageConfigContext';
          } //# sourceMappingURL=image-config-context.shared-runtime.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/router-context.shared-runtime.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'RouterContext', {
            enumerable: true,
            get: function () {
              return RouterContext;
            },
          });
          const _interop_require_default = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)'
          );
          const _react = /*#__PURE__*/ _interop_require_default._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
            )
          );
          const RouterContext = _react.default.createContext(null);
          if (('TURBOPACK compile-time truthy', 1)) {
            RouterContext.displayName = 'RouterContext';
          } //# sourceMappingURL=router-context.shared-runtime.js.map
        }
      },
    '[project]/node_modules/next/dist/compiled/picomatch/index.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          (() => {
            'use strict';
            var t = {
              170: (t, e, u) => {
                const n = u(510);
                const isWindows = () => {
                  if (typeof navigator !== 'undefined' && navigator.platform) {
                    const t = navigator.platform.toLowerCase();
                    return t === 'win32' || t === 'windows';
                  }
                  if (
                    typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'default'
                    ] !== 'undefined' &&
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'default'
                    ].platform
                  ) {
                    return (
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'default'
                      ].platform === 'win32'
                    );
                  }
                  return false;
                };
                function picomatch(t, e) {
                  let u =
                    arguments.length > 2 && arguments[2] !== void 0
                      ? arguments[2]
                      : false;
                  if (e && (e.windows === null || e.windows === undefined)) {
                    e = {
                      ...e,
                      windows: isWindows(),
                    };
                  }
                  return n(t, e, u);
                }
                Object.assign(picomatch, n);
                t.exports = picomatch;
              },
              154: (t) => {
                const e = '\\\\/';
                const u = '[^'.concat(e, ']');
                const n = '\\.';
                const o = '\\+';
                const s = '\\?';
                const r = '\\/';
                const a = '(?=.)';
                const i = '[^/]';
                const c = '(?:'.concat(r, '|$)');
                const p = '(?:^|'.concat(r, ')');
                const l = ''.concat(n, '{1,2}').concat(c);
                const f = '(?!'.concat(n, ')');
                const A = '(?!'.concat(p).concat(l, ')');
                const _ = '(?!'.concat(n, '{0,1}').concat(c, ')');
                const R = '(?!'.concat(l, ')');
                const E = '[^.'.concat(r, ']');
                const h = ''.concat(i, '*?');
                const g = '/';
                const b = {
                  DOT_LITERAL: n,
                  PLUS_LITERAL: o,
                  QMARK_LITERAL: s,
                  SLASH_LITERAL: r,
                  ONE_CHAR: a,
                  QMARK: i,
                  END_ANCHOR: c,
                  DOTS_SLASH: l,
                  NO_DOT: f,
                  NO_DOTS: A,
                  NO_DOT_SLASH: _,
                  NO_DOTS_SLASH: R,
                  QMARK_NO_DOT: E,
                  STAR: h,
                  START_ANCHOR: p,
                  SEP: g,
                };
                const C = {
                  ...b,
                  SLASH_LITERAL: '['.concat(e, ']'),
                  QMARK: u,
                  STAR: ''.concat(u, '*?'),
                  DOTS_SLASH: ''.concat(n, '{1,2}(?:[').concat(e, ']|$)'),
                  NO_DOT: '(?!'.concat(n, ')'),
                  NO_DOTS: '(?!(?:^|['
                    .concat(e, '])')
                    .concat(n, '{1,2}(?:[')
                    .concat(e, ']|$))'),
                  NO_DOT_SLASH: '(?!'.concat(n, '{0,1}(?:[').concat(e, ']|$))'),
                  NO_DOTS_SLASH: '(?!'
                    .concat(n, '{1,2}(?:[')
                    .concat(e, ']|$))'),
                  QMARK_NO_DOT: '[^.'.concat(e, ']'),
                  START_ANCHOR: '(?:^|['.concat(e, '])'),
                  END_ANCHOR: '(?:['.concat(e, ']|$)'),
                  SEP: '\\',
                };
                const y = {
                  alnum: 'a-zA-Z0-9',
                  alpha: 'a-zA-Z',
                  ascii: '\\x00-\\x7F',
                  blank: ' \\t',
                  cntrl: '\\x00-\\x1F\\x7F',
                  digit: '0-9',
                  graph: '\\x21-\\x7E',
                  lower: 'a-z',
                  print: '\\x20-\\x7E ',
                  punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
                  space: ' \\t\\r\\n\\v\\f',
                  upper: 'A-Z',
                  word: 'A-Za-z0-9_',
                  xdigit: 'A-Fa-f0-9',
                };
                t.exports = {
                  MAX_LENGTH: 1024 * 64,
                  POSIX_REGEX_SOURCE: y,
                  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
                  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
                  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
                  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
                  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
                  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
                  REPLACEMENTS: {
                    '***': '*',
                    '**/**': '**',
                    '**/**/**': '**',
                  },
                  CHAR_0: 48,
                  CHAR_9: 57,
                  CHAR_UPPERCASE_A: 65,
                  CHAR_LOWERCASE_A: 97,
                  CHAR_UPPERCASE_Z: 90,
                  CHAR_LOWERCASE_Z: 122,
                  CHAR_LEFT_PARENTHESES: 40,
                  CHAR_RIGHT_PARENTHESES: 41,
                  CHAR_ASTERISK: 42,
                  CHAR_AMPERSAND: 38,
                  CHAR_AT: 64,
                  CHAR_BACKWARD_SLASH: 92,
                  CHAR_CARRIAGE_RETURN: 13,
                  CHAR_CIRCUMFLEX_ACCENT: 94,
                  CHAR_COLON: 58,
                  CHAR_COMMA: 44,
                  CHAR_DOT: 46,
                  CHAR_DOUBLE_QUOTE: 34,
                  CHAR_EQUAL: 61,
                  CHAR_EXCLAMATION_MARK: 33,
                  CHAR_FORM_FEED: 12,
                  CHAR_FORWARD_SLASH: 47,
                  CHAR_GRAVE_ACCENT: 96,
                  CHAR_HASH: 35,
                  CHAR_HYPHEN_MINUS: 45,
                  CHAR_LEFT_ANGLE_BRACKET: 60,
                  CHAR_LEFT_CURLY_BRACE: 123,
                  CHAR_LEFT_SQUARE_BRACKET: 91,
                  CHAR_LINE_FEED: 10,
                  CHAR_NO_BREAK_SPACE: 160,
                  CHAR_PERCENT: 37,
                  CHAR_PLUS: 43,
                  CHAR_QUESTION_MARK: 63,
                  CHAR_RIGHT_ANGLE_BRACKET: 62,
                  CHAR_RIGHT_CURLY_BRACE: 125,
                  CHAR_RIGHT_SQUARE_BRACKET: 93,
                  CHAR_SEMICOLON: 59,
                  CHAR_SINGLE_QUOTE: 39,
                  CHAR_SPACE: 32,
                  CHAR_TAB: 9,
                  CHAR_UNDERSCORE: 95,
                  CHAR_VERTICAL_LINE: 124,
                  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
                  extglobChars(t) {
                    return {
                      '!': {
                        type: 'negate',
                        open: '(?:(?!(?:',
                        close: '))'.concat(t.STAR, ')'),
                      },
                      '?': {
                        type: 'qmark',
                        open: '(?:',
                        close: ')?',
                      },
                      '+': {
                        type: 'plus',
                        open: '(?:',
                        close: ')+',
                      },
                      '*': {
                        type: 'star',
                        open: '(?:',
                        close: ')*',
                      },
                      '@': {
                        type: 'at',
                        open: '(?:',
                        close: ')',
                      },
                    };
                  },
                  globChars(t) {
                    return t === true ? C : b;
                  },
                };
              },
              697: (t, e, u) => {
                const n = u(154);
                const o = u(96);
                const {
                  MAX_LENGTH: s,
                  POSIX_REGEX_SOURCE: r,
                  REGEX_NON_SPECIAL_CHARS: a,
                  REGEX_SPECIAL_CHARS_BACKREF: i,
                  REPLACEMENTS: c,
                } = n;
                const expandRange = (t, e) => {
                  if (typeof e.expandRange === 'function') {
                    return e.expandRange(...t, e);
                  }
                  t.sort();
                  const u = '['.concat(t.join('-'), ']');
                  try {
                    new RegExp(u);
                  } catch (e) {
                    return t.map((t) => o.escapeRegex(t)).join('..');
                  }
                  return u;
                };
                const syntaxError = (t, e) =>
                  'Missing '
                    .concat(t, ': "')
                    .concat(e, '" - use "\\\\')
                    .concat(e, '" to match literal characters');
                const parse = (t, e) => {
                  if (typeof t !== 'string') {
                    throw new TypeError('Expected a string');
                  }
                  t = c[t] || t;
                  const u = {
                    ...e,
                  };
                  const p =
                    typeof u.maxLength === 'number'
                      ? Math.min(s, u.maxLength)
                      : s;
                  let l = t.length;
                  if (l > p) {
                    throw new SyntaxError(
                      'Input length: '
                        .concat(l, ', exceeds maximum allowed length: ')
                        .concat(p)
                    );
                  }
                  const f = {
                    type: 'bos',
                    value: '',
                    output: u.prepend || '',
                  };
                  const A = [f];
                  const _ = u.capture ? '' : '?:';
                  const R = n.globChars(u.windows);
                  const E = n.extglobChars(R);
                  const {
                    DOT_LITERAL: h,
                    PLUS_LITERAL: g,
                    SLASH_LITERAL: b,
                    ONE_CHAR: C,
                    DOTS_SLASH: y,
                    NO_DOT: $,
                    NO_DOT_SLASH: x,
                    NO_DOTS_SLASH: S,
                    QMARK: H,
                    QMARK_NO_DOT: v,
                    STAR: d,
                    START_ANCHOR: L,
                  } = R;
                  const globstar = (t) =>
                    '('
                      .concat(_, '(?:(?!')
                      .concat(L)
                      .concat(t.dot ? y : h, ').)*?)');
                  const T = u.dot ? '' : $;
                  const O = u.dot ? H : v;
                  let k = u.bash === true ? globstar(u) : d;
                  if (u.capture) {
                    k = '('.concat(k, ')');
                  }
                  if (typeof u.noext === 'boolean') {
                    u.noextglob = u.noext;
                  }
                  const m = {
                    input: t,
                    index: -1,
                    start: 0,
                    dot: u.dot === true,
                    consumed: '',
                    output: '',
                    prefix: '',
                    backtrack: false,
                    negated: false,
                    brackets: 0,
                    braces: 0,
                    parens: 0,
                    quotes: 0,
                    globstar: false,
                    tokens: A,
                  };
                  t = o.removePrefix(t, m);
                  l = t.length;
                  const w = [];
                  const N = [];
                  const I = [];
                  let B = f;
                  let G;
                  const eos = () => m.index === l - 1;
                  const D = (m.peek = function () {
                    let e =
                      arguments.length > 0 && arguments[0] !== void 0
                        ? arguments[0]
                        : 1;
                    return t[m.index + e];
                  });
                  const M = (m.advance = () => t[++m.index] || '');
                  const remaining = () => t.slice(m.index + 1);
                  const consume = function () {
                    let t =
                        arguments.length > 0 && arguments[0] !== void 0
                          ? arguments[0]
                          : '',
                      e =
                        arguments.length > 1 && arguments[1] !== void 0
                          ? arguments[1]
                          : 0;
                    m.consumed += t;
                    m.index += e;
                  };
                  const append = (t) => {
                    m.output += t.output != null ? t.output : t.value;
                    consume(t.value);
                  };
                  const negate = () => {
                    let t = 1;
                    while (D() === '!' && (D(2) !== '(' || D(3) === '?')) {
                      M();
                      m.start++;
                      t++;
                    }
                    if (t % 2 === 0) {
                      return false;
                    }
                    m.negated = true;
                    m.start++;
                    return true;
                  };
                  const increment = (t) => {
                    m[t]++;
                    I.push(t);
                  };
                  const decrement = (t) => {
                    m[t]--;
                    I.pop();
                  };
                  const push = (t) => {
                    if (B.type === 'globstar') {
                      const e =
                        m.braces > 0 &&
                        (t.type === 'comma' || t.type === 'brace');
                      const u =
                        t.extglob === true ||
                        (w.length && (t.type === 'pipe' || t.type === 'paren'));
                      if (
                        t.type !== 'slash' &&
                        t.type !== 'paren' &&
                        !e &&
                        !u
                      ) {
                        m.output = m.output.slice(0, -B.output.length);
                        B.type = 'star';
                        B.value = '*';
                        B.output = k;
                        m.output += B.output;
                      }
                    }
                    if (w.length && t.type !== 'paren') {
                      w[w.length - 1].inner += t.value;
                    }
                    if (t.value || t.output) append(t);
                    if (B && B.type === 'text' && t.type === 'text') {
                      B.output = (B.output || B.value) + t.value;
                      B.value += t.value;
                      return;
                    }
                    t.prev = B;
                    A.push(t);
                    B = t;
                  };
                  const extglobOpen = (t, e) => {
                    const n = {
                      ...E[e],
                      conditions: 1,
                      inner: '',
                    };
                    n.prev = B;
                    n.parens = m.parens;
                    n.output = m.output;
                    const o = (u.capture ? '(' : '') + n.open;
                    increment('parens');
                    push({
                      type: t,
                      value: e,
                      output: m.output ? '' : C,
                    });
                    push({
                      type: 'paren',
                      extglob: true,
                      value: M(),
                      output: o,
                    });
                    w.push(n);
                  };
                  const extglobClose = (t) => {
                    let n = t.close + (u.capture ? ')' : '');
                    let o;
                    if (t.type === 'negate') {
                      let s = k;
                      if (
                        t.inner &&
                        t.inner.length > 1 &&
                        t.inner.includes('/')
                      ) {
                        s = globstar(u);
                      }
                      if (s !== k || eos() || /^\)+$/.test(remaining())) {
                        n = t.close = ')$))'.concat(s);
                      }
                      if (
                        t.inner.includes('*') &&
                        (o = remaining()) &&
                        /^\.[^\\/.]+$/.test(o)
                      ) {
                        const u = parse(o, {
                          ...e,
                          fastpaths: false,
                        }).output;
                        n = t.close = ')'.concat(u, ')').concat(s, ')');
                      }
                      if (t.prev.type === 'bos') {
                        m.negatedExtglob = true;
                      }
                    }
                    push({
                      type: 'paren',
                      extglob: true,
                      value: G,
                      output: n,
                    });
                    decrement('parens');
                  };
                  if (u.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(t)) {
                    let n = false;
                    let s = t.replace(i, (t, e, u, o, s, r) => {
                      if (o === '\\') {
                        n = true;
                        return t;
                      }
                      if (o === '?') {
                        if (e) {
                          return e + o + (s ? H.repeat(s.length) : '');
                        }
                        if (r === 0) {
                          return O + (s ? H.repeat(s.length) : '');
                        }
                        return H.repeat(u.length);
                      }
                      if (o === '.') {
                        return h.repeat(u.length);
                      }
                      if (o === '*') {
                        if (e) {
                          return e + o + (s ? k : '');
                        }
                        return k;
                      }
                      return e ? t : '\\'.concat(t);
                    });
                    if (n === true) {
                      if (u.unescape === true) {
                        s = s.replace(/\\/g, '');
                      } else {
                        s = s.replace(/\\+/g, (t) =>
                          t.length % 2 === 0 ? '\\\\' : t ? '\\' : ''
                        );
                      }
                    }
                    if (s === t && u.contains === true) {
                      m.output = t;
                      return m;
                    }
                    m.output = o.wrapOutput(s, m, e);
                    return m;
                  }
                  while (!eos()) {
                    G = M();
                    if (G === '\0') {
                      continue;
                    }
                    if (G === '\\') {
                      const t = D();
                      if (t === '/' && u.bash !== true) {
                        continue;
                      }
                      if (t === '.' || t === ';') {
                        continue;
                      }
                      if (!t) {
                        G += '\\';
                        push({
                          type: 'text',
                          value: G,
                        });
                        continue;
                      }
                      const e = /^\\+/.exec(remaining());
                      let n = 0;
                      if (e && e[0].length > 2) {
                        n = e[0].length;
                        m.index += n;
                        if (n % 2 !== 0) {
                          G += '\\';
                        }
                      }
                      if (u.unescape === true) {
                        G = M();
                      } else {
                        G += M();
                      }
                      if (m.brackets === 0) {
                        push({
                          type: 'text',
                          value: G,
                        });
                        continue;
                      }
                    }
                    if (
                      m.brackets > 0 &&
                      (G !== ']' || B.value === '[' || B.value === '[^')
                    ) {
                      if (u.posix !== false && G === ':') {
                        const t = B.value.slice(1);
                        if (t.includes('[')) {
                          B.posix = true;
                          if (t.includes(':')) {
                            const t = B.value.lastIndexOf('[');
                            const e = B.value.slice(0, t);
                            const u = B.value.slice(t + 2);
                            const n = r[u];
                            if (n) {
                              B.value = e + n;
                              m.backtrack = true;
                              M();
                              if (!f.output && A.indexOf(B) === 1) {
                                f.output = C;
                              }
                              continue;
                            }
                          }
                        }
                      }
                      if (
                        (G === '[' && D() !== ':') ||
                        (G === '-' && D() === ']')
                      ) {
                        G = '\\'.concat(G);
                      }
                      if (G === ']' && (B.value === '[' || B.value === '[^')) {
                        G = '\\'.concat(G);
                      }
                      if (u.posix === true && G === '!' && B.value === '[') {
                        G = '^';
                      }
                      B.value += G;
                      append({
                        value: G,
                      });
                      continue;
                    }
                    if (m.quotes === 1 && G !== '"') {
                      G = o.escapeRegex(G);
                      B.value += G;
                      append({
                        value: G,
                      });
                      continue;
                    }
                    if (G === '"') {
                      m.quotes = m.quotes === 1 ? 0 : 1;
                      if (u.keepQuotes === true) {
                        push({
                          type: 'text',
                          value: G,
                        });
                      }
                      continue;
                    }
                    if (G === '(') {
                      increment('parens');
                      push({
                        type: 'paren',
                        value: G,
                      });
                      continue;
                    }
                    if (G === ')') {
                      if (m.parens === 0 && u.strictBrackets === true) {
                        throw new SyntaxError(syntaxError('opening', '('));
                      }
                      const t = w[w.length - 1];
                      if (t && m.parens === t.parens + 1) {
                        extglobClose(w.pop());
                        continue;
                      }
                      push({
                        type: 'paren',
                        value: G,
                        output: m.parens ? ')' : '\\)',
                      });
                      decrement('parens');
                      continue;
                    }
                    if (G === '[') {
                      if (u.nobracket === true || !remaining().includes(']')) {
                        if (u.nobracket !== true && u.strictBrackets === true) {
                          throw new SyntaxError(syntaxError('closing', ']'));
                        }
                        G = '\\'.concat(G);
                      } else {
                        increment('brackets');
                      }
                      push({
                        type: 'bracket',
                        value: G,
                      });
                      continue;
                    }
                    if (G === ']') {
                      if (
                        u.nobracket === true ||
                        (B && B.type === 'bracket' && B.value.length === 1)
                      ) {
                        push({
                          type: 'text',
                          value: G,
                          output: '\\'.concat(G),
                        });
                        continue;
                      }
                      if (m.brackets === 0) {
                        if (u.strictBrackets === true) {
                          throw new SyntaxError(syntaxError('opening', '['));
                        }
                        push({
                          type: 'text',
                          value: G,
                          output: '\\'.concat(G),
                        });
                        continue;
                      }
                      decrement('brackets');
                      const t = B.value.slice(1);
                      if (
                        B.posix !== true &&
                        t[0] === '^' &&
                        !t.includes('/')
                      ) {
                        G = '/'.concat(G);
                      }
                      B.value += G;
                      append({
                        value: G,
                      });
                      if (u.literalBrackets === false || o.hasRegexChars(t)) {
                        continue;
                      }
                      const e = o.escapeRegex(B.value);
                      m.output = m.output.slice(0, -B.value.length);
                      if (u.literalBrackets === true) {
                        m.output += e;
                        B.value = e;
                        continue;
                      }
                      B.value = '('
                        .concat(_)
                        .concat(e, '|')
                        .concat(B.value, ')');
                      m.output += B.value;
                      continue;
                    }
                    if (G === '{' && u.nobrace !== true) {
                      increment('braces');
                      const t = {
                        type: 'brace',
                        value: G,
                        output: '(',
                        outputIndex: m.output.length,
                        tokensIndex: m.tokens.length,
                      };
                      N.push(t);
                      push(t);
                      continue;
                    }
                    if (G === '}') {
                      const t = N[N.length - 1];
                      if (u.nobrace === true || !t) {
                        push({
                          type: 'text',
                          value: G,
                          output: G,
                        });
                        continue;
                      }
                      let e = ')';
                      if (t.dots === true) {
                        const t = A.slice();
                        const n = [];
                        for (let e = t.length - 1; e >= 0; e--) {
                          A.pop();
                          if (t[e].type === 'brace') {
                            break;
                          }
                          if (t[e].type !== 'dots') {
                            n.unshift(t[e].value);
                          }
                        }
                        e = expandRange(n, u);
                        m.backtrack = true;
                      }
                      if (t.comma !== true && t.dots !== true) {
                        const u = m.output.slice(0, t.outputIndex);
                        const n = m.tokens.slice(t.tokensIndex);
                        t.value = t.output = '\\{';
                        G = e = '\\}';
                        m.output = u;
                        for (const t of n) {
                          m.output += t.output || t.value;
                        }
                      }
                      push({
                        type: 'brace',
                        value: G,
                        output: e,
                      });
                      decrement('braces');
                      N.pop();
                      continue;
                    }
                    if (G === '|') {
                      if (w.length > 0) {
                        w[w.length - 1].conditions++;
                      }
                      push({
                        type: 'text',
                        value: G,
                      });
                      continue;
                    }
                    if (G === ',') {
                      let t = G;
                      const e = N[N.length - 1];
                      if (e && I[I.length - 1] === 'braces') {
                        e.comma = true;
                        t = '|';
                      }
                      push({
                        type: 'comma',
                        value: G,
                        output: t,
                      });
                      continue;
                    }
                    if (G === '/') {
                      if (B.type === 'dot' && m.index === m.start + 1) {
                        m.start = m.index + 1;
                        m.consumed = '';
                        m.output = '';
                        A.pop();
                        B = f;
                        continue;
                      }
                      push({
                        type: 'slash',
                        value: G,
                        output: b,
                      });
                      continue;
                    }
                    if (G === '.') {
                      if (m.braces > 0 && B.type === 'dot') {
                        if (B.value === '.') B.output = h;
                        const t = N[N.length - 1];
                        B.type = 'dots';
                        B.output += G;
                        B.value += G;
                        t.dots = true;
                        continue;
                      }
                      if (
                        m.braces + m.parens === 0 &&
                        B.type !== 'bos' &&
                        B.type !== 'slash'
                      ) {
                        push({
                          type: 'text',
                          value: G,
                          output: h,
                        });
                        continue;
                      }
                      push({
                        type: 'dot',
                        value: G,
                        output: h,
                      });
                      continue;
                    }
                    if (G === '?') {
                      const t = B && B.value === '(';
                      if (
                        !t &&
                        u.noextglob !== true &&
                        D() === '(' &&
                        D(2) !== '?'
                      ) {
                        extglobOpen('qmark', G);
                        continue;
                      }
                      if (B && B.type === 'paren') {
                        const t = D();
                        let e = G;
                        if (
                          (B.value === '(' && !/[!=<:]/.test(t)) ||
                          (t === '<' && !/<([!=]|\w+>)/.test(remaining()))
                        ) {
                          e = '\\'.concat(G);
                        }
                        push({
                          type: 'text',
                          value: G,
                          output: e,
                        });
                        continue;
                      }
                      if (
                        u.dot !== true &&
                        (B.type === 'slash' || B.type === 'bos')
                      ) {
                        push({
                          type: 'qmark',
                          value: G,
                          output: v,
                        });
                        continue;
                      }
                      push({
                        type: 'qmark',
                        value: G,
                        output: H,
                      });
                      continue;
                    }
                    if (G === '!') {
                      if (u.noextglob !== true && D() === '(') {
                        if (D(2) !== '?' || !/[!=<:]/.test(D(3))) {
                          extglobOpen('negate', G);
                          continue;
                        }
                      }
                      if (u.nonegate !== true && m.index === 0) {
                        negate();
                        continue;
                      }
                    }
                    if (G === '+') {
                      if (u.noextglob !== true && D() === '(' && D(2) !== '?') {
                        extglobOpen('plus', G);
                        continue;
                      }
                      if ((B && B.value === '(') || u.regex === false) {
                        push({
                          type: 'plus',
                          value: G,
                          output: g,
                        });
                        continue;
                      }
                      if (
                        (B &&
                          (B.type === 'bracket' ||
                            B.type === 'paren' ||
                            B.type === 'brace')) ||
                        m.parens > 0
                      ) {
                        push({
                          type: 'plus',
                          value: G,
                        });
                        continue;
                      }
                      push({
                        type: 'plus',
                        value: g,
                      });
                      continue;
                    }
                    if (G === '@') {
                      if (u.noextglob !== true && D() === '(' && D(2) !== '?') {
                        push({
                          type: 'at',
                          extglob: true,
                          value: G,
                          output: '',
                        });
                        continue;
                      }
                      push({
                        type: 'text',
                        value: G,
                      });
                      continue;
                    }
                    if (G !== '*') {
                      if (G === '$' || G === '^') {
                        G = '\\'.concat(G);
                      }
                      const t = a.exec(remaining());
                      if (t) {
                        G += t[0];
                        m.index += t[0].length;
                      }
                      push({
                        type: 'text',
                        value: G,
                      });
                      continue;
                    }
                    if (B && (B.type === 'globstar' || B.star === true)) {
                      B.type = 'star';
                      B.star = true;
                      B.value += G;
                      B.output = k;
                      m.backtrack = true;
                      m.globstar = true;
                      consume(G);
                      continue;
                    }
                    let e = remaining();
                    if (u.noextglob !== true && /^\([^?]/.test(e)) {
                      extglobOpen('star', G);
                      continue;
                    }
                    if (B.type === 'star') {
                      if (u.noglobstar === true) {
                        consume(G);
                        continue;
                      }
                      const n = B.prev;
                      const o = n.prev;
                      const s = n.type === 'slash' || n.type === 'bos';
                      const r =
                        o && (o.type === 'star' || o.type === 'globstar');
                      if (u.bash === true && (!s || (e[0] && e[0] !== '/'))) {
                        push({
                          type: 'star',
                          value: G,
                          output: '',
                        });
                        continue;
                      }
                      const a =
                        m.braces > 0 &&
                        (n.type === 'comma' || n.type === 'brace');
                      const i =
                        w.length && (n.type === 'pipe' || n.type === 'paren');
                      if (!s && n.type !== 'paren' && !a && !i) {
                        push({
                          type: 'star',
                          value: G,
                          output: '',
                        });
                        continue;
                      }
                      while (e.slice(0, 3) === '/**') {
                        const u = t[m.index + 4];
                        if (u && u !== '/') {
                          break;
                        }
                        e = e.slice(3);
                        consume('/**', 3);
                      }
                      if (n.type === 'bos' && eos()) {
                        B.type = 'globstar';
                        B.value += G;
                        B.output = globstar(u);
                        m.output = B.output;
                        m.globstar = true;
                        consume(G);
                        continue;
                      }
                      if (
                        n.type === 'slash' &&
                        n.prev.type !== 'bos' &&
                        !r &&
                        eos()
                      ) {
                        m.output = m.output.slice(
                          0,
                          -(n.output + B.output).length
                        );
                        n.output = '(?:'.concat(n.output);
                        B.type = 'globstar';
                        B.output =
                          globstar(u) + (u.strictSlashes ? ')' : '|$)');
                        B.value += G;
                        m.globstar = true;
                        m.output += n.output + B.output;
                        consume(G);
                        continue;
                      }
                      if (
                        n.type === 'slash' &&
                        n.prev.type !== 'bos' &&
                        e[0] === '/'
                      ) {
                        const t = e[1] !== void 0 ? '|$' : '';
                        m.output = m.output.slice(
                          0,
                          -(n.output + B.output).length
                        );
                        n.output = '(?:'.concat(n.output);
                        B.type = 'globstar';
                        B.output = ''
                          .concat(globstar(u))
                          .concat(b, '|')
                          .concat(b)
                          .concat(t, ')');
                        B.value += G;
                        m.output += n.output + B.output;
                        m.globstar = true;
                        consume(G + M());
                        push({
                          type: 'slash',
                          value: '/',
                          output: '',
                        });
                        continue;
                      }
                      if (n.type === 'bos' && e[0] === '/') {
                        B.type = 'globstar';
                        B.value += G;
                        B.output = '(?:^|'
                          .concat(b, '|')
                          .concat(globstar(u))
                          .concat(b, ')');
                        m.output = B.output;
                        m.globstar = true;
                        consume(G + M());
                        push({
                          type: 'slash',
                          value: '/',
                          output: '',
                        });
                        continue;
                      }
                      m.output = m.output.slice(0, -B.output.length);
                      B.type = 'globstar';
                      B.output = globstar(u);
                      B.value += G;
                      m.output += B.output;
                      m.globstar = true;
                      consume(G);
                      continue;
                    }
                    const n = {
                      type: 'star',
                      value: G,
                      output: k,
                    };
                    if (u.bash === true) {
                      n.output = '.*?';
                      if (B.type === 'bos' || B.type === 'slash') {
                        n.output = T + n.output;
                      }
                      push(n);
                      continue;
                    }
                    if (
                      B &&
                      (B.type === 'bracket' || B.type === 'paren') &&
                      u.regex === true
                    ) {
                      n.output = G;
                      push(n);
                      continue;
                    }
                    if (
                      m.index === m.start ||
                      B.type === 'slash' ||
                      B.type === 'dot'
                    ) {
                      if (B.type === 'dot') {
                        m.output += x;
                        B.output += x;
                      } else if (u.dot === true) {
                        m.output += S;
                        B.output += S;
                      } else {
                        m.output += T;
                        B.output += T;
                      }
                      if (D() !== '*') {
                        m.output += C;
                        B.output += C;
                      }
                    }
                    push(n);
                  }
                  while (m.brackets > 0) {
                    if (u.strictBrackets === true)
                      throw new SyntaxError(syntaxError('closing', ']'));
                    m.output = o.escapeLast(m.output, '[');
                    decrement('brackets');
                  }
                  while (m.parens > 0) {
                    if (u.strictBrackets === true)
                      throw new SyntaxError(syntaxError('closing', ')'));
                    m.output = o.escapeLast(m.output, '(');
                    decrement('parens');
                  }
                  while (m.braces > 0) {
                    if (u.strictBrackets === true)
                      throw new SyntaxError(syntaxError('closing', '}'));
                    m.output = o.escapeLast(m.output, '{');
                    decrement('braces');
                  }
                  if (
                    u.strictSlashes !== true &&
                    (B.type === 'star' || B.type === 'bracket')
                  ) {
                    push({
                      type: 'maybe_slash',
                      value: '',
                      output: ''.concat(b, '?'),
                    });
                  }
                  if (m.backtrack === true) {
                    m.output = '';
                    for (const t of m.tokens) {
                      m.output += t.output != null ? t.output : t.value;
                      if (t.suffix) {
                        m.output += t.suffix;
                      }
                    }
                  }
                  return m;
                };
                parse.fastpaths = (t, e) => {
                  const u = {
                    ...e,
                  };
                  const r =
                    typeof u.maxLength === 'number'
                      ? Math.min(s, u.maxLength)
                      : s;
                  const a = t.length;
                  if (a > r) {
                    throw new SyntaxError(
                      'Input length: '
                        .concat(a, ', exceeds maximum allowed length: ')
                        .concat(r)
                    );
                  }
                  t = c[t] || t;
                  const {
                    DOT_LITERAL: i,
                    SLASH_LITERAL: p,
                    ONE_CHAR: l,
                    DOTS_SLASH: f,
                    NO_DOT: A,
                    NO_DOTS: _,
                    NO_DOTS_SLASH: R,
                    STAR: E,
                    START_ANCHOR: h,
                  } = n.globChars(u.windows);
                  const g = u.dot ? _ : A;
                  const b = u.dot ? R : A;
                  const C = u.capture ? '' : '?:';
                  const y = {
                    negated: false,
                    prefix: '',
                  };
                  let $ = u.bash === true ? '.*?' : E;
                  if (u.capture) {
                    $ = '('.concat($, ')');
                  }
                  const globstar = (t) => {
                    if (t.noglobstar === true) return $;
                    return '('
                      .concat(C, '(?:(?!')
                      .concat(h)
                      .concat(t.dot ? f : i, ').)*?)');
                  };
                  const create = (t) => {
                    switch (t) {
                      case '*':
                        return ''.concat(g).concat(l).concat($);
                      case '.*':
                        return ''.concat(i).concat(l).concat($);
                      case '*.*':
                        return ''
                          .concat(g)
                          .concat($)
                          .concat(i)
                          .concat(l)
                          .concat($);
                      case '*/*':
                        return ''
                          .concat(g)
                          .concat($)
                          .concat(p)
                          .concat(l)
                          .concat(b)
                          .concat($);
                      case '**':
                        return g + globstar(u);
                      case '**/*':
                        return '(?:'
                          .concat(g)
                          .concat(globstar(u))
                          .concat(p, ')?')
                          .concat(b)
                          .concat(l)
                          .concat($);
                      case '**/*.*':
                        return '(?:'
                          .concat(g)
                          .concat(globstar(u))
                          .concat(p, ')?')
                          .concat(b)
                          .concat($)
                          .concat(i)
                          .concat(l)
                          .concat($);
                      case '**/.*':
                        return '(?:'
                          .concat(g)
                          .concat(globstar(u))
                          .concat(p, ')?')
                          .concat(i)
                          .concat(l)
                          .concat($);
                      default: {
                        const e = /^(.*?)\.(\w+)$/.exec(t);
                        if (!e) return;
                        const u = create(e[1]);
                        if (!u) return;
                        return u + i + e[2];
                      }
                    }
                  };
                  const x = o.removePrefix(t, y);
                  let S = create(x);
                  if (S && u.strictSlashes !== true) {
                    S += ''.concat(p, '?');
                  }
                  return S;
                };
                t.exports = parse;
              },
              510: (t, e, u) => {
                const n = u(716);
                const o = u(697);
                const s = u(96);
                const r = u(154);
                const isObject = (t) =>
                  t && typeof t === 'object' && !Array.isArray(t);
                const picomatch = function (t, e) {
                  let u =
                    arguments.length > 2 && arguments[2] !== void 0
                      ? arguments[2]
                      : false;
                  if (Array.isArray(t)) {
                    const n = t.map((t) => picomatch(t, e, u));
                    const arrayMatcher = (t) => {
                      for (const e of n) {
                        const u = e(t);
                        if (u) return u;
                      }
                      return false;
                    };
                    return arrayMatcher;
                  }
                  const n = isObject(t) && t.tokens && t.input;
                  if (t === '' || (typeof t !== 'string' && !n)) {
                    throw new TypeError(
                      'Expected pattern to be a non-empty string'
                    );
                  }
                  const o = e || {};
                  const s = o.windows;
                  const r = n
                    ? picomatch.compileRe(t, e)
                    : picomatch.makeRe(t, e, false, true);
                  const a = r.state;
                  delete r.state;
                  let isIgnored = () => false;
                  if (o.ignore) {
                    const t = {
                      ...e,
                      ignore: null,
                      onMatch: null,
                      onResult: null,
                    };
                    isIgnored = picomatch(o.ignore, t, u);
                  }
                  const matcher = function (u) {
                    let n =
                      arguments.length > 1 && arguments[1] !== void 0
                        ? arguments[1]
                        : false;
                    const {
                      isMatch: i,
                      match: c,
                      output: p,
                    } = picomatch.test(u, r, e, {
                      glob: t,
                      posix: s,
                    });
                    const l = {
                      glob: t,
                      state: a,
                      regex: r,
                      posix: s,
                      input: u,
                      output: p,
                      match: c,
                      isMatch: i,
                    };
                    if (typeof o.onResult === 'function') {
                      o.onResult(l);
                    }
                    if (i === false) {
                      l.isMatch = false;
                      return n ? l : false;
                    }
                    if (isIgnored(u)) {
                      if (typeof o.onIgnore === 'function') {
                        o.onIgnore(l);
                      }
                      l.isMatch = false;
                      return n ? l : false;
                    }
                    if (typeof o.onMatch === 'function') {
                      o.onMatch(l);
                    }
                    return n ? l : true;
                  };
                  if (u) {
                    matcher.state = a;
                  }
                  return matcher;
                };
                picomatch.test = function (t, e, u) {
                  let { glob: n, posix: o } =
                    arguments.length > 3 && arguments[3] !== void 0
                      ? arguments[3]
                      : {};
                  if (typeof t !== 'string') {
                    throw new TypeError('Expected input to be a string');
                  }
                  if (t === '') {
                    return {
                      isMatch: false,
                      output: '',
                    };
                  }
                  const r = u || {};
                  const a = r.format || (o ? s.toPosixSlashes : null);
                  let i = t === n;
                  let c = i && a ? a(t) : t;
                  if (i === false) {
                    c = a ? a(t) : t;
                    i = c === n;
                  }
                  if (i === false || r.capture === true) {
                    if (r.matchBase === true || r.basename === true) {
                      i = picomatch.matchBase(t, e, u, o);
                    } else {
                      i = e.exec(c);
                    }
                  }
                  return {
                    isMatch: Boolean(i),
                    match: i,
                    output: c,
                  };
                };
                picomatch.matchBase = (t, e, u) => {
                  const n = e instanceof RegExp ? e : picomatch.makeRe(e, u);
                  return n.test(s.basename(t));
                };
                picomatch.isMatch = (t, e, u) => picomatch(e, u)(t);
                picomatch.parse = (t, e) => {
                  if (Array.isArray(t))
                    return t.map((t) => picomatch.parse(t, e));
                  return o(t, {
                    ...e,
                    fastpaths: false,
                  });
                };
                picomatch.scan = (t, e) => n(t, e);
                picomatch.compileRe = function (t, e) {
                  let u =
                      arguments.length > 2 && arguments[2] !== void 0
                        ? arguments[2]
                        : false,
                    n =
                      arguments.length > 3 && arguments[3] !== void 0
                        ? arguments[3]
                        : false;
                  if (u === true) {
                    return t.output;
                  }
                  const o = e || {};
                  const s = o.contains ? '' : '^';
                  const r = o.contains ? '' : '$';
                  let a = ''.concat(s, '(?:').concat(t.output, ')').concat(r);
                  if (t && t.negated === true) {
                    a = '^(?!'.concat(a, ').*$');
                  }
                  const i = picomatch.toRegex(a, e);
                  if (n === true) {
                    i.state = t;
                  }
                  return i;
                };
                picomatch.makeRe = function (t) {
                  let e =
                      arguments.length > 1 && arguments[1] !== void 0
                        ? arguments[1]
                        : {},
                    u =
                      arguments.length > 2 && arguments[2] !== void 0
                        ? arguments[2]
                        : false,
                    n =
                      arguments.length > 3 && arguments[3] !== void 0
                        ? arguments[3]
                        : false;
                  if (!t || typeof t !== 'string') {
                    throw new TypeError('Expected a non-empty string');
                  }
                  let s = {
                    negated: false,
                    fastpaths: true,
                  };
                  if (e.fastpaths !== false && (t[0] === '.' || t[0] === '*')) {
                    s.output = o.fastpaths(t, e);
                  }
                  if (!s.output) {
                    s = o(t, e);
                  }
                  return picomatch.compileRe(s, e, u, n);
                };
                picomatch.toRegex = (t, e) => {
                  try {
                    const u = e || {};
                    return new RegExp(t, u.flags || (u.nocase ? 'i' : ''));
                  } catch (t) {
                    if (e && e.debug === true) throw t;
                    return /$^/;
                  }
                };
                picomatch.constants = r;
                t.exports = picomatch;
              },
              716: (t, e, u) => {
                const n = u(96);
                const {
                  CHAR_ASTERISK: o,
                  CHAR_AT: s,
                  CHAR_BACKWARD_SLASH: r,
                  CHAR_COMMA: a,
                  CHAR_DOT: i,
                  CHAR_EXCLAMATION_MARK: c,
                  CHAR_FORWARD_SLASH: p,
                  CHAR_LEFT_CURLY_BRACE: l,
                  CHAR_LEFT_PARENTHESES: f,
                  CHAR_LEFT_SQUARE_BRACKET: A,
                  CHAR_PLUS: _,
                  CHAR_QUESTION_MARK: R,
                  CHAR_RIGHT_CURLY_BRACE: E,
                  CHAR_RIGHT_PARENTHESES: h,
                  CHAR_RIGHT_SQUARE_BRACKET: g,
                } = u(154);
                const isPathSeparator = (t) => t === p || t === r;
                const depth = (t) => {
                  if (t.isPrefix !== true) {
                    t.depth = t.isGlobstar ? Infinity : 1;
                  }
                };
                const scan = (t, e) => {
                  const u = e || {};
                  const b = t.length - 1;
                  const C = u.parts === true || u.scanToEnd === true;
                  const y = [];
                  const $ = [];
                  const x = [];
                  let S = t;
                  let H = -1;
                  let v = 0;
                  let d = 0;
                  let L = false;
                  let T = false;
                  let O = false;
                  let k = false;
                  let m = false;
                  let w = false;
                  let N = false;
                  let I = false;
                  let B = false;
                  let G = false;
                  let D = 0;
                  let M;
                  let P;
                  let K = {
                    value: '',
                    depth: 0,
                    isGlob: false,
                  };
                  const eos = () => H >= b;
                  const peek = () => S.charCodeAt(H + 1);
                  const advance = () => {
                    M = P;
                    return S.charCodeAt(++H);
                  };
                  while (H < b) {
                    P = advance();
                    let t;
                    if (P === r) {
                      N = K.backslashes = true;
                      P = advance();
                      if (P === l) {
                        w = true;
                      }
                      continue;
                    }
                    if (w === true || P === l) {
                      D++;
                      while (eos() !== true && (P = advance())) {
                        if (P === r) {
                          N = K.backslashes = true;
                          advance();
                          continue;
                        }
                        if (P === l) {
                          D++;
                          continue;
                        }
                        if (w !== true && P === i && (P = advance()) === i) {
                          L = K.isBrace = true;
                          O = K.isGlob = true;
                          G = true;
                          if (C === true) {
                            continue;
                          }
                          break;
                        }
                        if (w !== true && P === a) {
                          L = K.isBrace = true;
                          O = K.isGlob = true;
                          G = true;
                          if (C === true) {
                            continue;
                          }
                          break;
                        }
                        if (P === E) {
                          D--;
                          if (D === 0) {
                            w = false;
                            L = K.isBrace = true;
                            G = true;
                            break;
                          }
                        }
                      }
                      if (C === true) {
                        continue;
                      }
                      break;
                    }
                    if (P === p) {
                      y.push(H);
                      $.push(K);
                      K = {
                        value: '',
                        depth: 0,
                        isGlob: false,
                      };
                      if (G === true) continue;
                      if (M === i && H === v + 1) {
                        v += 2;
                        continue;
                      }
                      d = H + 1;
                      continue;
                    }
                    if (u.noext !== true) {
                      const t =
                        P === _ || P === s || P === o || P === R || P === c;
                      if (t === true && peek() === f) {
                        O = K.isGlob = true;
                        k = K.isExtglob = true;
                        G = true;
                        if (P === c && H === v) {
                          B = true;
                        }
                        if (C === true) {
                          while (eos() !== true && (P = advance())) {
                            if (P === r) {
                              N = K.backslashes = true;
                              P = advance();
                              continue;
                            }
                            if (P === h) {
                              O = K.isGlob = true;
                              G = true;
                              break;
                            }
                          }
                          continue;
                        }
                        break;
                      }
                    }
                    if (P === o) {
                      if (M === o) m = K.isGlobstar = true;
                      O = K.isGlob = true;
                      G = true;
                      if (C === true) {
                        continue;
                      }
                      break;
                    }
                    if (P === R) {
                      O = K.isGlob = true;
                      G = true;
                      if (C === true) {
                        continue;
                      }
                      break;
                    }
                    if (P === A) {
                      while (eos() !== true && (t = advance())) {
                        if (t === r) {
                          N = K.backslashes = true;
                          advance();
                          continue;
                        }
                        if (t === g) {
                          T = K.isBracket = true;
                          O = K.isGlob = true;
                          G = true;
                          break;
                        }
                      }
                      if (C === true) {
                        continue;
                      }
                      break;
                    }
                    if (u.nonegate !== true && P === c && H === v) {
                      I = K.negated = true;
                      v++;
                      continue;
                    }
                    if (u.noparen !== true && P === f) {
                      O = K.isGlob = true;
                      if (C === true) {
                        while (eos() !== true && (P = advance())) {
                          if (P === f) {
                            N = K.backslashes = true;
                            P = advance();
                            continue;
                          }
                          if (P === h) {
                            G = true;
                            break;
                          }
                        }
                        continue;
                      }
                      break;
                    }
                    if (O === true) {
                      G = true;
                      if (C === true) {
                        continue;
                      }
                      break;
                    }
                  }
                  if (u.noext === true) {
                    k = false;
                    O = false;
                  }
                  let U = S;
                  let X = '';
                  let F = '';
                  if (v > 0) {
                    X = S.slice(0, v);
                    S = S.slice(v);
                    d -= v;
                  }
                  if (U && O === true && d > 0) {
                    U = S.slice(0, d);
                    F = S.slice(d);
                  } else if (O === true) {
                    U = '';
                    F = S;
                  } else {
                    U = S;
                  }
                  if (U && U !== '' && U !== '/' && U !== S) {
                    if (isPathSeparator(U.charCodeAt(U.length - 1))) {
                      U = U.slice(0, -1);
                    }
                  }
                  if (u.unescape === true) {
                    if (F) F = n.removeBackslashes(F);
                    if (U && N === true) {
                      U = n.removeBackslashes(U);
                    }
                  }
                  const Q = {
                    prefix: X,
                    input: t,
                    start: v,
                    base: U,
                    glob: F,
                    isBrace: L,
                    isBracket: T,
                    isGlob: O,
                    isExtglob: k,
                    isGlobstar: m,
                    negated: I,
                    negatedExtglob: B,
                  };
                  if (u.tokens === true) {
                    Q.maxDepth = 0;
                    if (!isPathSeparator(P)) {
                      $.push(K);
                    }
                    Q.tokens = $;
                  }
                  if (u.parts === true || u.tokens === true) {
                    let e;
                    for (let n = 0; n < y.length; n++) {
                      const o = e ? e + 1 : v;
                      const s = y[n];
                      const r = t.slice(o, s);
                      if (u.tokens) {
                        if (n === 0 && v !== 0) {
                          $[n].isPrefix = true;
                          $[n].value = X;
                        } else {
                          $[n].value = r;
                        }
                        depth($[n]);
                        Q.maxDepth += $[n].depth;
                      }
                      if (n !== 0 || r !== '') {
                        x.push(r);
                      }
                      e = s;
                    }
                    if (e && e + 1 < t.length) {
                      const n = t.slice(e + 1);
                      x.push(n);
                      if (u.tokens) {
                        $[$.length - 1].value = n;
                        depth($[$.length - 1]);
                        Q.maxDepth += $[$.length - 1].depth;
                      }
                    }
                    Q.slashes = y;
                    Q.parts = x;
                  }
                  return Q;
                };
                t.exports = scan;
              },
              96: (t, e, u) => {
                const {
                  REGEX_BACKSLASH: n,
                  REGEX_REMOVE_BACKSLASH: o,
                  REGEX_SPECIAL_CHARS: s,
                  REGEX_SPECIAL_CHARS_GLOBAL: r,
                } = u(154);
                e.isObject = (t) =>
                  t !== null && typeof t === 'object' && !Array.isArray(t);
                e.hasRegexChars = (t) => s.test(t);
                e.isRegexChar = (t) => t.length === 1 && e.hasRegexChars(t);
                e.escapeRegex = (t) => t.replace(r, '\\$1');
                e.toPosixSlashes = (t) => t.replace(n, '/');
                e.removeBackslashes = (t) =>
                  t.replace(o, (t) => (t === '\\' ? '' : t));
                e.escapeLast = (t, u, n) => {
                  const o = t.lastIndexOf(u, n);
                  if (o === -1) return t;
                  if (t[o - 1] === '\\') return e.escapeLast(t, u, o - 1);
                  return ''.concat(t.slice(0, o), '\\').concat(t.slice(o));
                };
                e.removePrefix = function (t) {
                  let e =
                    arguments.length > 1 && arguments[1] !== void 0
                      ? arguments[1]
                      : {};
                  let u = t;
                  if (u.startsWith('./')) {
                    u = u.slice(2);
                    e.prefix = './';
                  }
                  return u;
                };
                e.wrapOutput = function (t) {
                  let e =
                      arguments.length > 1 && arguments[1] !== void 0
                        ? arguments[1]
                        : {},
                    u =
                      arguments.length > 2 && arguments[2] !== void 0
                        ? arguments[2]
                        : {};
                  const n = u.contains ? '' : '^';
                  const o = u.contains ? '' : '$';
                  let s = ''.concat(n, '(?:').concat(t, ')').concat(o);
                  if (e.negated === true) {
                    s = '(?:^(?!'.concat(s, ').*$)');
                  }
                  return s;
                };
                e.basename = function (t) {
                  let { windows: e } =
                    arguments.length > 1 && arguments[1] !== void 0
                      ? arguments[1]
                      : {};
                  const u = t.split(e ? /[\\/]/ : '/');
                  const n = u[u.length - 1];
                  if (n === '') {
                    return u[u.length - 2];
                  }
                  return n;
                };
              },
            };
            var e = {};
            function __nccwpck_require__(u) {
              var n = e[u];
              if (n !== undefined) {
                return n.exports;
              }
              var o = (e[u] = {
                exports: {},
              });
              var s = true;
              try {
                t[u](o, o.exports, __nccwpck_require__);
                s = false;
              } finally {
                if (s) delete e[u];
              }
              return o.exports;
            }
            if (typeof __nccwpck_require__ !== 'undefined')
              __nccwpck_require__.ab =
                ('TURBOPACK compile-time value',
                '/ROOT/node_modules/next/dist/compiled/picomatch') + '/';
            var u = __nccwpck_require__(170);
            module.exports = u;
          })();
        }
      },
    '[project]/node_modules/next/dist/shared/lib/match-local-pattern.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              hasLocalMatch: null,
              matchLocalPattern: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            hasLocalMatch: function () {
              return hasLocalMatch;
            },
            matchLocalPattern: function () {
              return matchLocalPattern;
            },
          });
          const _picomatch = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/picomatch/index.js [app-client] (ecmascript)'
          );
          function matchLocalPattern(pattern, url) {
            if (pattern.search !== undefined) {
              if (pattern.search !== url.search) {
                return false;
              }
            }
            var _pattern_pathname;
            if (
              !(0, _picomatch.makeRe)(
                (_pattern_pathname = pattern.pathname) != null
                  ? _pattern_pathname
                  : '**',
                {
                  dot: true,
                }
              ).test(url.pathname)
            ) {
              return false;
            }
            return true;
          }
          function hasLocalMatch(localPatterns, urlPathAndQuery) {
            if (!localPatterns) {
              // if the user didn't define "localPatterns", we allow all local images
              return true;
            }
            const url = new URL(urlPathAndQuery, 'http://n');
            return localPatterns.some((p) => matchLocalPattern(p, url));
          } //# sourceMappingURL=match-local-pattern.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/match-remote-pattern.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              hasRemoteMatch: null,
              matchRemotePattern: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            hasRemoteMatch: function () {
              return hasRemoteMatch;
            },
            matchRemotePattern: function () {
              return matchRemotePattern;
            },
          });
          const _picomatch = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/picomatch/index.js [app-client] (ecmascript)'
          );
          function matchRemotePattern(pattern, url) {
            if (pattern.protocol !== undefined) {
              if (
                pattern.protocol.replace(/:$/, '') !==
                url.protocol.replace(/:$/, '')
              ) {
                return false;
              }
            }
            if (pattern.port !== undefined) {
              if (pattern.port !== url.port) {
                return false;
              }
            }
            if (pattern.hostname === undefined) {
              throw Object.defineProperty(
                new Error(
                  'Pattern should define hostname but found\n' +
                    JSON.stringify(pattern)
                ),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E410',
                  enumerable: false,
                  configurable: true,
                }
              );
            } else {
              if (
                !(0, _picomatch.makeRe)(pattern.hostname).test(url.hostname)
              ) {
                return false;
              }
            }
            if (pattern.search !== undefined) {
              if (pattern.search !== url.search) {
                return false;
              }
            }
            var _pattern_pathname;
            // Should be the same as writeImagesManifest()
            if (
              !(0, _picomatch.makeRe)(
                (_pattern_pathname = pattern.pathname) != null
                  ? _pattern_pathname
                  : '**',
                {
                  dot: true,
                }
              ).test(url.pathname)
            ) {
              return false;
            }
            return true;
          }
          function hasRemoteMatch(domains, remotePatterns, url) {
            return (
              domains.some((domain) => url.hostname === domain) ||
              remotePatterns.some((p) => matchRemotePattern(p, url))
            );
          } //# sourceMappingURL=match-remote-pattern.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/image-loader.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'default', {
            enumerable: true,
            get: function () {
              return _default;
            },
          });
          const DEFAULT_Q = 75;
          function defaultLoader(param) {
            let { config, src, width, quality } = param;
            var _config_qualities;
            if (('TURBOPACK compile-time truthy', 1)) {
              const missingValues = [];
              // these should always be provided but make sure they are
              if (!src) missingValues.push('src');
              if (!width) missingValues.push('width');
              if (missingValues.length > 0) {
                throw Object.defineProperty(
                  new Error(
                    'Next Image Optimization requires ' +
                      missingValues.join(', ') +
                      ' to be provided. Make sure you pass them as props to the `next/image` component. Received: ' +
                      JSON.stringify({
                        src,
                        width,
                        quality,
                      })
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E188',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              if (src.startsWith('//')) {
                throw Object.defineProperty(
                  new Error(
                    'Failed to parse src "' +
                      src +
                      '" on `next/image`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E360',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              if (src.startsWith('/') && config.localPatterns) {
                if (('TURBOPACK compile-time truthy', 1)) {
                  // We use dynamic require because this should only error in development
                  const { hasLocalMatch } = __turbopack_context__.r(
                    '[project]/node_modules/next/dist/shared/lib/match-local-pattern.js [app-client] (ecmascript)'
                  );
                  if (!hasLocalMatch(config.localPatterns, src)) {
                    throw Object.defineProperty(
                      new Error(
                        'Invalid src prop (' +
                          src +
                          ') on `next/image` does not match `images.localPatterns` configured in your `next.config.js`\n' +
                          'See more info: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E426',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                }
              }
              if (
                !src.startsWith('/') &&
                (config.domains || config.remotePatterns)
              ) {
                let parsedSrc;
                try {
                  parsedSrc = new URL(src);
                } catch (err) {
                  console.error(err);
                  throw Object.defineProperty(
                    new Error(
                      'Failed to parse src "' +
                        src +
                        '" on `next/image`, if using relative image it must start with a leading slash "/" or be an absolute URL (http:// or https://)'
                    ),
                    '__NEXT_ERROR_CODE',
                    {
                      value: 'E63',
                      enumerable: false,
                      configurable: true,
                    }
                  );
                }
                if (('TURBOPACK compile-time truthy', 1)) {
                  // We use dynamic require because this should only error in development
                  const { hasRemoteMatch } = __turbopack_context__.r(
                    '[project]/node_modules/next/dist/shared/lib/match-remote-pattern.js [app-client] (ecmascript)'
                  );
                  if (
                    !hasRemoteMatch(
                      config.domains,
                      config.remotePatterns,
                      parsedSrc
                    )
                  ) {
                    throw Object.defineProperty(
                      new Error(
                        'Invalid src prop (' +
                          src +
                          ') on `next/image`, hostname "' +
                          parsedSrc.hostname +
                          '" is not configured under images in your `next.config.js`\n' +
                          'See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host'
                      ),
                      '__NEXT_ERROR_CODE',
                      {
                        value: 'E231',
                        enumerable: false,
                        configurable: true,
                      }
                    );
                  }
                }
              }
              if (
                quality &&
                config.qualities &&
                !config.qualities.includes(quality)
              ) {
                throw Object.defineProperty(
                  new Error(
                    'Invalid quality prop (' +
                      quality +
                      ') on `next/image` does not match `images.qualities` configured in your `next.config.js`\n' +
                      'See more info: https://nextjs.org/docs/messages/next-image-unconfigured-qualities'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E623',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
            }
            const q =
              quality ||
              ((_config_qualities = config.qualities) == null
                ? void 0
                : _config_qualities.reduce((prev, cur) =>
                    Math.abs(cur - DEFAULT_Q) < Math.abs(prev - DEFAULT_Q)
                      ? cur
                      : prev
                  )) ||
              DEFAULT_Q;
            return (
              config.path +
              '?url=' +
              encodeURIComponent(src) +
              '&w=' +
              width +
              '&q=' +
              q +
              (src.startsWith('/_next/static/media/') &&
              ('TURBOPACK compile-time value', false)
                ? 'TURBOPACK unreachable'
                : '')
            );
          }
          // We use this to determine if the import is the default loader
          // or a custom loader defined by the user in next.config.js
          defaultLoader.__next_img_default = true;
          const _default = defaultLoader; //# sourceMappingURL=image-loader.js.map
        }
      },
    '[project]/node_modules/next/dist/client/image-component.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use client');
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'Image', {
            enumerable: true,
            get: function () {
              return Image;
            },
          });
          const _interop_require_default = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)'
          );
          const _interop_require_wildcard = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)'
          );
          const _jsxruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
          const _react = /*#__PURE__*/ _interop_require_wildcard._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
            )
          );
          const _reactdom = /*#__PURE__*/ _interop_require_default._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)'
            )
          );
          const _head = /*#__PURE__*/ _interop_require_default._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/shared/lib/head.js [app-client] (ecmascript)'
            )
          );
          const _getimgprops = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/get-img-props.js [app-client] (ecmascript)'
          );
          const _imageconfig = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/image-config.js [app-client] (ecmascript)'
          );
          const _imageconfigcontextsharedruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js [app-client] (ecmascript)'
          );
          const _warnonce = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils/warn-once.js [app-client] (ecmascript)'
          );
          const _routercontextsharedruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/router-context.shared-runtime.js [app-client] (ecmascript)'
          );
          const _imageloader = /*#__PURE__*/ _interop_require_default._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/shared/lib/image-loader.js [app-client] (ecmascript)'
            )
          );
          const _usemergedref = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/use-merged-ref.js [app-client] (ecmascript)'
          );
          // This is replaced by webpack define plugin
          const configEnv =
            ('TURBOPACK compile-time value',
            JSON.parse(
              '{"deviceSizes":[640,750,828,1080,1200,1920,2048,3840],"imageSizes":[16,32,48,64,96,128,256,384],"path":"/_next/image","loader":"default","dangerouslyAllowSVG":false,"unoptimized":false,"domains":[],"remotePatterns":[]}'
            ));
          if (typeof window === 'undefined') {
            globalThis.__NEXT_IMAGE_IMPORTED = true;
          }
          // See https://stackoverflow.com/q/39777833/266535 for why we use this ref
          // handler instead of the img's onLoad attribute.
          function handleLoading(
            img,
            placeholder,
            onLoadRef,
            onLoadingCompleteRef,
            setBlurComplete,
            unoptimized,
            sizesInput
          ) {
            const src = img == null ? void 0 : img.src;
            if (!img || img['data-loaded-src'] === src) {
              return;
            }
            img['data-loaded-src'] = src;
            const p = 'decode' in img ? img.decode() : Promise.resolve();
            p.catch(() => {}).then(() => {
              if (!img.parentElement || !img.isConnected) {
                // Exit early in case of race condition:
                // - onload() is called
                // - decode() is called but incomplete
                // - unmount is called
                // - decode() completes
                return;
              }
              if (placeholder !== 'empty') {
                setBlurComplete(true);
              }
              if (onLoadRef == null ? void 0 : onLoadRef.current) {
                // Since we don't have the SyntheticEvent here,
                // we must create one with the same shape.
                // See https://reactjs.org/docs/events.html
                const event = new Event('load');
                Object.defineProperty(event, 'target', {
                  writable: false,
                  value: img,
                });
                let prevented = false;
                let stopped = false;
                onLoadRef.current({
                  ...event,
                  nativeEvent: event,
                  currentTarget: img,
                  target: img,
                  isDefaultPrevented: () => prevented,
                  isPropagationStopped: () => stopped,
                  persist: () => {},
                  preventDefault: () => {
                    prevented = true;
                    event.preventDefault();
                  },
                  stopPropagation: () => {
                    stopped = true;
                    event.stopPropagation();
                  },
                });
              }
              if (
                onLoadingCompleteRef == null
                  ? void 0
                  : onLoadingCompleteRef.current
              ) {
                onLoadingCompleteRef.current(img);
              }
              if (('TURBOPACK compile-time truthy', 1)) {
                const origSrc =
                  new URL(src, 'http://n').searchParams.get('url') || src;
                if (img.getAttribute('data-nimg') === 'fill') {
                  if (!unoptimized && (!sizesInput || sizesInput === '100vw')) {
                    let widthViewportRatio =
                      img.getBoundingClientRect().width / window.innerWidth;
                    if (widthViewportRatio < 0.6) {
                      if (sizesInput === '100vw') {
                        (0, _warnonce.warnOnce)(
                          'Image with src "' +
                            origSrc +
                            '" has "fill" prop and "sizes" prop of "100vw", but image is not rendered at full viewport width. Please adjust "sizes" to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes'
                        );
                      } else {
                        (0, _warnonce.warnOnce)(
                          'Image with src "' +
                            origSrc +
                            '" has "fill" but is missing "sizes" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes'
                        );
                      }
                    }
                  }
                  if (img.parentElement) {
                    const { position } = window.getComputedStyle(
                      img.parentElement
                    );
                    const valid = ['absolute', 'fixed', 'relative'];
                    if (!valid.includes(position)) {
                      (0, _warnonce.warnOnce)(
                        'Image with src "' +
                          origSrc +
                          '" has "fill" and parent element with invalid "position". Provided "' +
                          position +
                          '" should be one of ' +
                          valid.map(String).join(',') +
                          '.'
                      );
                    }
                  }
                  if (img.height === 0) {
                    (0, _warnonce.warnOnce)(
                      'Image with src "' +
                        origSrc +
                        '" has "fill" and a height value of 0. This is likely because the parent element of the image has not been styled to have a set height.'
                    );
                  }
                }
                const heightModified =
                  img.height.toString() !== img.getAttribute('height');
                const widthModified =
                  img.width.toString() !== img.getAttribute('width');
                if (
                  (heightModified && !widthModified) ||
                  (!heightModified && widthModified)
                ) {
                  (0, _warnonce.warnOnce)(
                    'Image with src "' +
                      origSrc +
                      '" has either width or height modified, but not the other. If you use CSS to change the size of your image, also include the styles \'width: "auto"\' or \'height: "auto"\' to maintain the aspect ratio.'
                  );
                }
              }
            });
          }
          function getDynamicProps(fetchPriority) {
            if (Boolean(_react.use)) {
              // In React 19.0.0 or newer, we must use camelCase
              // prop to avoid "Warning: Invalid DOM property".
              // See https://github.com/facebook/react/pull/25927
              return {
                fetchPriority,
              };
            }
            // In React 18.2.0 or older, we must use lowercase prop
            // to avoid "Warning: Invalid DOM property".
            return {
              fetchpriority: fetchPriority,
            };
          }
          const ImageElement = /*#__PURE__*/ (0, _react.forwardRef)(
            (param, forwardedRef) => {
              let {
                src,
                srcSet,
                sizes,
                height,
                width,
                decoding,
                className,
                style,
                fetchPriority,
                placeholder,
                loading,
                unoptimized,
                fill,
                onLoadRef,
                onLoadingCompleteRef,
                setBlurComplete,
                setShowAltText,
                sizesInput,
                onLoad,
                onError,
                ...rest
              } = param;
              const ownRef = (0, _react.useCallback)(
                (img) => {
                  if (!img) {
                    return;
                  }
                  if (onError) {
                    // If the image has an error before react hydrates, then the error is lost.
                    // The workaround is to wait until the image is mounted which is after hydration,
                    // then we set the src again to trigger the error handler (if there was an error).
                    // eslint-disable-next-line no-self-assign
                    img.src = img.src;
                  }
                  if (('TURBOPACK compile-time truthy', 1)) {
                    if (!src) {
                      console.error(
                        'Image is missing required "src" property:',
                        img
                      );
                    }
                    if (img.getAttribute('alt') === null) {
                      console.error(
                        'Image is missing required "alt" property. Please add Alternative Text to describe the image for screen readers and search engines.'
                      );
                    }
                  }
                  if (img.complete) {
                    handleLoading(
                      img,
                      placeholder,
                      onLoadRef,
                      onLoadingCompleteRef,
                      setBlurComplete,
                      unoptimized,
                      sizesInput
                    );
                  }
                },
                [
                  src,
                  placeholder,
                  onLoadRef,
                  onLoadingCompleteRef,
                  setBlurComplete,
                  onError,
                  unoptimized,
                  sizesInput,
                ]
              );
              const ref = (0, _usemergedref.useMergedRef)(forwardedRef, ownRef);
              return /*#__PURE__*/ (0, _jsxruntime.jsx)('img', {
                ...rest,
                ...getDynamicProps(fetchPriority),
                // It's intended to keep `loading` before `src` because React updates
                // props in order which causes Safari/Firefox to not lazy load properly.
                // See https://github.com/facebook/react/issues/25883
                loading: loading,
                width: width,
                height: height,
                decoding: decoding,
                'data-nimg': fill ? 'fill' : '1',
                className: className,
                style: style,
                // It's intended to keep `src` the last attribute because React updates
                // attributes in order. If we keep `src` the first one, Safari will
                // immediately start to fetch `src`, before `sizes` and `srcSet` are even
                // updated by React. That causes multiple unnecessary requests if `srcSet`
                // and `sizes` are defined.
                // This bug cannot be reproduced in Chrome or Firefox.
                sizes: sizes,
                srcSet: srcSet,
                src: src,
                ref: ref,
                onLoad: (event) => {
                  const img = event.currentTarget;
                  handleLoading(
                    img,
                    placeholder,
                    onLoadRef,
                    onLoadingCompleteRef,
                    setBlurComplete,
                    unoptimized,
                    sizesInput
                  );
                },
                onError: (event) => {
                  // if the real image fails to load, this will ensure "alt" is visible
                  setShowAltText(true);
                  if (placeholder !== 'empty') {
                    // If the real image fails to load, this will still remove the placeholder.
                    setBlurComplete(true);
                  }
                  if (onError) {
                    onError(event);
                  }
                },
              });
            }
          );
          function ImagePreload(param) {
            let { isAppRouter, imgAttributes } = param;
            const opts = {
              as: 'image',
              imageSrcSet: imgAttributes.srcSet,
              imageSizes: imgAttributes.sizes,
              crossOrigin: imgAttributes.crossOrigin,
              referrerPolicy: imgAttributes.referrerPolicy,
              ...getDynamicProps(imgAttributes.fetchPriority),
            };
            if (isAppRouter && _reactdom.default.preload) {
              _reactdom.default.preload(imgAttributes.src, opts);
              return null;
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_head.default, {
              children: /*#__PURE__*/ (0, _jsxruntime.jsx)(
                'link',
                {
                  rel: 'preload',
                  // Note how we omit the `href` attribute, as it would only be relevant
                  // for browsers that do not support `imagesrcset`, and in those cases
                  // it would cause the incorrect image to be preloaded.
                  //
                  // https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset
                  href: imgAttributes.srcSet ? undefined : imgAttributes.src,
                  ...opts,
                },
                '__nimg-' +
                  imgAttributes.src +
                  imgAttributes.srcSet +
                  imgAttributes.sizes
              ),
            });
          }
          const Image = /*#__PURE__*/ (0, _react.forwardRef)(
            (props, forwardedRef) => {
              const pagesRouter = (0, _react.useContext)(
                _routercontextsharedruntime.RouterContext
              );
              // We're in the app directory if there is no pages router.
              const isAppRouter = !pagesRouter;
              const configContext = (0, _react.useContext)(
                _imageconfigcontextsharedruntime.ImageConfigContext
              );
              const config = (0, _react.useMemo)(() => {
                var _c_qualities;
                const c =
                  configEnv || configContext || _imageconfig.imageConfigDefault;
                const allSizes = [...c.deviceSizes, ...c.imageSizes].sort(
                  (a, b) => a - b
                );
                const deviceSizes = c.deviceSizes.sort((a, b) => a - b);
                const qualities =
                  (_c_qualities = c.qualities) == null
                    ? void 0
                    : _c_qualities.sort((a, b) => a - b);
                return {
                  ...c,
                  allSizes,
                  deviceSizes,
                  qualities,
                };
              }, [configContext]);
              const { onLoad, onLoadingComplete } = props;
              const onLoadRef = (0, _react.useRef)(onLoad);
              (0, _react.useEffect)(() => {
                onLoadRef.current = onLoad;
              }, [onLoad]);
              const onLoadingCompleteRef = (0, _react.useRef)(
                onLoadingComplete
              );
              (0, _react.useEffect)(() => {
                onLoadingCompleteRef.current = onLoadingComplete;
              }, [onLoadingComplete]);
              const [blurComplete, setBlurComplete] = (0, _react.useState)(
                false
              );
              const [showAltText, setShowAltText] = (0, _react.useState)(false);
              const { props: imgAttributes, meta: imgMeta } = (0,
              _getimgprops.getImgProps)(props, {
                defaultLoader: _imageloader.default,
                imgConf: config,
                blurComplete,
                showAltText,
              });
              return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                  /*#__PURE__*/ (0, _jsxruntime.jsx)(ImageElement, {
                    ...imgAttributes,
                    unoptimized: imgMeta.unoptimized,
                    placeholder: imgMeta.placeholder,
                    fill: imgMeta.fill,
                    onLoadRef: onLoadRef,
                    onLoadingCompleteRef: onLoadingCompleteRef,
                    setBlurComplete: setBlurComplete,
                    setShowAltText: setShowAltText,
                    sizesInput: props.sizes,
                    ref: forwardedRef,
                  }),
                  imgMeta.priority
                    ? /*#__PURE__*/ (0, _jsxruntime.jsx)(ImagePreload, {
                        isAppRouter: isAppRouter,
                        imgAttributes: imgAttributes,
                      })
                    : null,
                ],
              });
            }
          );
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=image-component.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/image-external.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              default: null,
              getImageProps: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            default: function () {
              return _default;
            },
            getImageProps: function () {
              return getImageProps;
            },
          });
          const _interop_require_default = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)'
          );
          const _getimgprops = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/get-img-props.js [app-client] (ecmascript)'
          );
          const _imagecomponent = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/image-component.js [app-client] (ecmascript)'
          );
          const _imageloader = /*#__PURE__*/ _interop_require_default._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/shared/lib/image-loader.js [app-client] (ecmascript)'
            )
          );
          function getImageProps(imgProps) {
            const { props } = (0, _getimgprops.getImgProps)(imgProps, {
              defaultLoader: _imageloader.default,
              // This is replaced by webpack define plugin
              imgConf:
                ('TURBOPACK compile-time value',
                JSON.parse(
                  '{"deviceSizes":[640,750,828,1080,1200,1920,2048,3840],"imageSizes":[16,32,48,64,96,128,256,384],"path":"/_next/image","loader":"default","dangerouslyAllowSVG":false,"unoptimized":false,"domains":[],"remotePatterns":[]}'
                )),
            });
            // Normally we don't care about undefined props because we pass to JSX,
            // but this exported function could be used by the end user for anything
            // so we delete undefined props to clean it up a little.
            for (const [key, value] of Object.entries(props)) {
              if (value === undefined) {
                delete props[key];
              }
            }
            return {
              props,
            };
          }
          const _default = _imagecomponent.Image; //# sourceMappingURL=image-external.js.map
        }
      },
    '[project]/node_modules/next/image.js [app-client] (ecmascript)': (
      __turbopack_context__
    ) => {
      var { m: module, e: exports } = __turbopack_context__;
      {
        module.exports = __turbopack_context__.r(
          '[project]/node_modules/next/dist/shared/lib/image-external.js [app-client] (ecmascript)'
        );
      }
    },
    '[project]/node_modules/cookie/dist/index.js [app-client] (ecmascript)': (
      __turbopack_context__
    ) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        exports.parse = parse;
        exports.serialize = serialize;
        /**
         * RegExp to match cookie-name in RFC 6265 sec 4.1.1
         * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2
         * which has been replaced by the token definition in RFC 7230 appendix B.
         *
         * cookie-name       = token
         * token             = 1*tchar
         * tchar             = "!" / "#" / "$" / "%" / "&" / "'" /
         *                     "*" / "+" / "-" / "." / "^" / "_" /
         *                     "`" / "|" / "~" / DIGIT / ALPHA
         *
         * Note: Allowing more characters - https://github.com/jshttp/cookie/issues/191
         * Allow same range as cookie value, except `=`, which delimits end of name.
         */ const cookieNameRegExp = /^[\u0021-\u003A\u003C\u003E-\u007E]+$/;
        /**
         * RegExp to match cookie-value in RFC 6265 sec 4.1.1
         *
         * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
         * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
         *                     ; US-ASCII characters excluding CTLs,
         *                     ; whitespace DQUOTE, comma, semicolon,
         *                     ; and backslash
         *
         * Allowing more characters: https://github.com/jshttp/cookie/issues/191
         * Comma, backslash, and DQUOTE are not part of the parsing algorithm.
         */ const cookieValueRegExp = /^[\u0021-\u003A\u003C-\u007E]*$/;
        /**
         * RegExp to match domain-value in RFC 6265 sec 4.1.1
         *
         * domain-value      = <subdomain>
         *                     ; defined in [RFC1034], Section 3.5, as
         *                     ; enhanced by [RFC1123], Section 2.1
         * <subdomain>       = <label> | <subdomain> "." <label>
         * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]
         *                     Labels must be 63 characters or less.
         *                     'let-dig' not 'letter' in the first char, per RFC1123
         * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>
         * <let-dig-hyp>     = <let-dig> | "-"
         * <let-dig>         = <letter> | <digit>
         * <letter>          = any one of the 52 alphabetic characters A through Z in
         *                     upper case and a through z in lower case
         * <digit>           = any one of the ten digits 0 through 9
         *
         * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173
         *
         * > (Note that a leading %x2E ("."), if present, is ignored even though that
         * character is not permitted, but a trailing %x2E ("."), if present, will
         * cause the user agent to ignore the attribute.)
         */ const domainValueRegExp =
          /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
        /**
         * RegExp to match path-value in RFC 6265 sec 4.1.1
         *
         * path-value        = <any CHAR except CTLs or ";">
         * CHAR              = %x01-7F
         *                     ; defined in RFC 5234 appendix B.1
         */ const pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
        const __toString = Object.prototype.toString;
        const NullObject = /* @__PURE__ */ (() => {
          const C = function () {};
          C.prototype = Object.create(null);
          return C;
        })();
        /**
         * Parse a cookie header.
         *
         * Parse the given cookie header string into an object
         * The object has the various cookies as keys(names) => values
         */ function parse(str, options) {
          const obj = new NullObject();
          const len = str.length;
          // RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.
          if (len < 2) return obj;
          const dec =
            (options === null || options === void 0
              ? void 0
              : options.decode) || decode;
          let index = 0;
          do {
            const eqIdx = str.indexOf('=', index);
            if (eqIdx === -1) break; // No more cookie pairs.
            const colonIdx = str.indexOf(';', index);
            const endIdx = colonIdx === -1 ? len : colonIdx;
            if (eqIdx > endIdx) {
              // backtrack on prior semicolon
              index = str.lastIndexOf(';', eqIdx - 1) + 1;
              continue;
            }
            const keyStartIdx = startIndex(str, index, eqIdx);
            const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
            const key = str.slice(keyStartIdx, keyEndIdx);
            // only assign once
            if (obj[key] === undefined) {
              let valStartIdx = startIndex(str, eqIdx + 1, endIdx);
              let valEndIdx = endIndex(str, endIdx, valStartIdx);
              const value = dec(str.slice(valStartIdx, valEndIdx));
              obj[key] = value;
            }
            index = endIdx + 1;
          } while (index < len);
          return obj;
        }
        function startIndex(str, index, max) {
          do {
            const code = str.charCodeAt(index);
            if (code !== 0x20 /*   */ && code !== 0x09 /* \t */) return index;
          } while (++index < max);
          return max;
        }
        function endIndex(str, index, min) {
          while (index > min) {
            const code = str.charCodeAt(--index);
            if (code !== 0x20 /*   */ && code !== 0x09 /* \t */)
              return index + 1;
          }
          return min;
        }
        /**
         * Serialize data into a cookie header.
         *
         * Serialize a name value pair into a cookie string suitable for
         * http headers. An optional options object specifies cookie parameters.
         *
         * serialize('foo', 'bar', { httpOnly: true })
         *   => "foo=bar; httpOnly"
         */ function serialize(name, val, options) {
          const enc =
            (options === null || options === void 0
              ? void 0
              : options.encode) || encodeURIComponent;
          if (!cookieNameRegExp.test(name)) {
            throw new TypeError('argument name is invalid: '.concat(name));
          }
          const value = enc(val);
          if (!cookieValueRegExp.test(value)) {
            throw new TypeError('argument val is invalid: '.concat(val));
          }
          let str = name + '=' + value;
          if (!options) return str;
          if (options.maxAge !== undefined) {
            if (!Number.isInteger(options.maxAge)) {
              throw new TypeError(
                'option maxAge is invalid: '.concat(options.maxAge)
              );
            }
            str += '; Max-Age=' + options.maxAge;
          }
          if (options.domain) {
            if (!domainValueRegExp.test(options.domain)) {
              throw new TypeError(
                'option domain is invalid: '.concat(options.domain)
              );
            }
            str += '; Domain=' + options.domain;
          }
          if (options.path) {
            if (!pathValueRegExp.test(options.path)) {
              throw new TypeError(
                'option path is invalid: '.concat(options.path)
              );
            }
            str += '; Path=' + options.path;
          }
          if (options.expires) {
            if (
              !isDate(options.expires) ||
              !Number.isFinite(options.expires.valueOf())
            ) {
              throw new TypeError(
                'option expires is invalid: '.concat(options.expires)
              );
            }
            str += '; Expires=' + options.expires.toUTCString();
          }
          if (options.httpOnly) {
            str += '; HttpOnly';
          }
          if (options.secure) {
            str += '; Secure';
          }
          if (options.partitioned) {
            str += '; Partitioned';
          }
          if (options.priority) {
            const priority =
              typeof options.priority === 'string'
                ? options.priority.toLowerCase()
                : undefined;
            switch (priority) {
              case 'low':
                str += '; Priority=Low';
                break;
              case 'medium':
                str += '; Priority=Medium';
                break;
              case 'high':
                str += '; Priority=High';
                break;
              default:
                throw new TypeError(
                  'option priority is invalid: '.concat(options.priority)
                );
            }
          }
          if (options.sameSite) {
            const sameSite =
              typeof options.sameSite === 'string'
                ? options.sameSite.toLowerCase()
                : options.sameSite;
            switch (sameSite) {
              case true:
              case 'strict':
                str += '; SameSite=Strict';
                break;
              case 'lax':
                str += '; SameSite=Lax';
                break;
              case 'none':
                str += '; SameSite=None';
                break;
              default:
                throw new TypeError(
                  'option sameSite is invalid: '.concat(options.sameSite)
                );
            }
          }
          return str;
        }
        /**
         * URL-decode string value. Optimized to skip native call when no %.
         */ function decode(str) {
          if (str.indexOf('%') === -1) return str;
          try {
            return decodeURIComponent(str);
          } catch (e) {
            return str;
          }
        }
        /**
         * Determine if value is a Date.
         */ function isDate(val) {
          return __toString.call(val) === '[object Date]';
        } //# sourceMappingURL=index.js.map
      }
    },
    '[project]/node_modules/set-cookie-parser/lib/set-cookie.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var defaultParseOptions = {
            decodeValues: true,
            map: false,
            silent: false,
          };
          function isNonEmptyString(str) {
            return typeof str === 'string' && !!str.trim();
          }
          function parseString(setCookieValue, options) {
            var parts = setCookieValue.split(';').filter(isNonEmptyString);
            var nameValuePairStr = parts.shift();
            var parsed = parseNameValuePair(nameValuePairStr);
            var name = parsed.name;
            var value = parsed.value;
            options = options
              ? Object.assign({}, defaultParseOptions, options)
              : defaultParseOptions;
            try {
              value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value
            } catch (e) {
              console.error(
                "set-cookie-parser encountered an error while decoding a cookie with value '" +
                  value +
                  "'. Set options.decodeValues to false to disable this feature.",
                e
              );
            }
            var cookie = {
              name: name,
              value: value,
            };
            parts.forEach(function (part) {
              var sides = part.split('=');
              var key = sides.shift().trimLeft().toLowerCase();
              var value = sides.join('=');
              if (key === 'expires') {
                cookie.expires = new Date(value);
              } else if (key === 'max-age') {
                cookie.maxAge = parseInt(value, 10);
              } else if (key === 'secure') {
                cookie.secure = true;
              } else if (key === 'httponly') {
                cookie.httpOnly = true;
              } else if (key === 'samesite') {
                cookie.sameSite = value;
              } else if (key === 'partitioned') {
                cookie.partitioned = true;
              } else {
                cookie[key] = value;
              }
            });
            return cookie;
          }
          function parseNameValuePair(nameValuePairStr) {
            // Parses name-value-pair according to rfc6265bis draft
            var name = '';
            var value = '';
            var nameValueArr = nameValuePairStr.split('=');
            if (nameValueArr.length > 1) {
              name = nameValueArr.shift();
              value = nameValueArr.join('='); // everything after the first =, joined by a "=" if there was more than one part
            } else {
              value = nameValuePairStr;
            }
            return {
              name: name,
              value: value,
            };
          }
          function parse(input, options) {
            options = options
              ? Object.assign({}, defaultParseOptions, options)
              : defaultParseOptions;
            if (!input) {
              if (!options.map) {
                return [];
              } else {
                return {};
              }
            }
            if (input.headers) {
              if (typeof input.headers.getSetCookie === 'function') {
                // for fetch responses - they combine headers of the same type in the headers array,
                // but getSetCookie returns an uncombined array
                input = input.headers.getSetCookie();
              } else if (input.headers['set-cookie']) {
                // fast-path for node.js (which automatically normalizes header names to lower-case
                input = input.headers['set-cookie'];
              } else {
                // slow-path for other environments - see #25
                var sch =
                  input.headers[
                    Object.keys(input.headers).find(function (key) {
                      return key.toLowerCase() === 'set-cookie';
                    })
                  ];
                // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36
                if (!sch && input.headers.cookie && !options.silent) {
                  console.warn(
                    'Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.'
                  );
                }
                input = sch;
              }
            }
            if (!Array.isArray(input)) {
              input = [input];
            }
            if (!options.map) {
              return input.filter(isNonEmptyString).map(function (str) {
                return parseString(str, options);
              });
            } else {
              var cookies = {};
              return input.filter(isNonEmptyString).reduce(function (
                cookies,
                str
              ) {
                var cookie = parseString(str, options);
                cookies[cookie.name] = cookie;
                return cookies;
              }, cookies);
            }
          }
          /*
  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas
  that are within a single set-cookie field-value, such as in the Expires portion.

  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2
  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128
  React Native's fetch does this for *every* header, including set-cookie.

  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25
  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation
*/ function splitCookiesString(cookiesString) {
            if (Array.isArray(cookiesString)) {
              return cookiesString;
            }
            if (typeof cookiesString !== 'string') {
              return [];
            }
            var cookiesStrings = [];
            var pos = 0;
            var start;
            var ch;
            var lastComma;
            var nextStart;
            var cookiesSeparatorFound;
            function skipWhitespace() {
              while (
                pos < cookiesString.length &&
                /\s/.test(cookiesString.charAt(pos))
              ) {
                pos += 1;
              }
              return pos < cookiesString.length;
            }
            function notSpecialChar() {
              ch = cookiesString.charAt(pos);
              return ch !== '=' && ch !== ';' && ch !== ',';
            }
            while (pos < cookiesString.length) {
              start = pos;
              cookiesSeparatorFound = false;
              while (skipWhitespace()) {
                ch = cookiesString.charAt(pos);
                if (ch === ',') {
                  // ',' is a cookie separator if we have later first '=', not ';' or ','
                  lastComma = pos;
                  pos += 1;
                  skipWhitespace();
                  nextStart = pos;
                  while (pos < cookiesString.length && notSpecialChar()) {
                    pos += 1;
                  }
                  // currently special character
                  if (
                    pos < cookiesString.length &&
                    cookiesString.charAt(pos) === '='
                  ) {
                    // we found cookies separator
                    cookiesSeparatorFound = true;
                    // pos is inside the next cookie, so back up and return it.
                    pos = nextStart;
                    cookiesStrings.push(
                      cookiesString.substring(start, lastComma)
                    );
                    start = pos;
                  } else {
                    // in param ',' or param separator ';',
                    // we continue from that comma
                    pos = lastComma + 1;
                  }
                } else {
                  pos += 1;
                }
              }
              if (!cookiesSeparatorFound || pos >= cookiesString.length) {
                cookiesStrings.push(
                  cookiesString.substring(start, cookiesString.length)
                );
              }
            }
            return cookiesStrings;
          }
          module.exports = parse;
          module.exports.parse = parse;
          module.exports.parseString = parseString;
          module.exports.splitCookiesString = splitCookiesString;
        }
      },
    '[project]/node_modules/react-router/dist/development/chunk-QMGIS6GS.mjs [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        /**
         * react-router v7.6.3
         *
         * Copyright (c) Remix Software Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.md file in the root directory of this source tree.
         *
         * @license MIT
         */ __turbopack_context__.s({
          Action: () => Action,
          Await: () => Await,
          BrowserRouter: () => BrowserRouter,
          DataRouterContext: () => DataRouterContext,
          DataRouterStateContext: () => DataRouterStateContext,
          ErrorResponseImpl: () => ErrorResponseImpl,
          FetchersContext: () => FetchersContext,
          Form: () => Form,
          FrameworkContext: () => FrameworkContext,
          HashRouter: () => HashRouter,
          HistoryRouter: () => HistoryRouter,
          IDLE_BLOCKER: () => IDLE_BLOCKER,
          IDLE_FETCHER: () => IDLE_FETCHER,
          IDLE_NAVIGATION: () => IDLE_NAVIGATION,
          Link: () => Link,
          Links: () => Links,
          LocationContext: () => LocationContext,
          MemoryRouter: () => MemoryRouter,
          Meta: () => Meta,
          NavLink: () => NavLink,
          Navigate: () => Navigate,
          NavigationContext: () => NavigationContext,
          Outlet: () => Outlet,
          PrefetchPageLinks: () => PrefetchPageLinks,
          RemixErrorBoundary: () => RemixErrorBoundary,
          Route: () => Route,
          RouteContext: () => RouteContext,
          Router: () => Router,
          RouterProvider: () => RouterProvider,
          Routes: () => Routes,
          Scripts: () => Scripts,
          ScrollRestoration: () => ScrollRestoration,
          ServerMode: () => ServerMode,
          ServerRouter: () => ServerRouter,
          SingleFetchRedirectSymbol: () => SingleFetchRedirectSymbol,
          StaticRouter: () => StaticRouter,
          StaticRouterProvider: () => StaticRouterProvider,
          ViewTransitionContext: () => ViewTransitionContext,
          createBrowserHistory: () => createBrowserHistory,
          createBrowserRouter: () => createBrowserRouter,
          createClientRoutes: () => createClientRoutes,
          createClientRoutesWithHMRRevalidationOptOut: () =>
            createClientRoutesWithHMRRevalidationOptOut,
          createCookie: () => createCookie,
          createCookieSessionStorage: () => createCookieSessionStorage,
          createHashRouter: () => createHashRouter,
          createMemoryRouter: () => createMemoryRouter,
          createMemorySessionStorage: () => createMemorySessionStorage,
          createPath: () => createPath,
          createRequestHandler: () => createRequestHandler,
          createRouter: () => createRouter,
          createRoutesFromChildren: () => createRoutesFromChildren,
          createRoutesFromElements: () => createRoutesFromElements,
          createRoutesStub: () => createRoutesStub,
          createSearchParams: () => createSearchParams,
          createSession: () => createSession,
          createSessionStorage: () => createSessionStorage,
          createStaticHandler: () => createStaticHandler2,
          createStaticRouter: () => createStaticRouter,
          data: () => data,
          decodeViaTurboStream: () => decodeViaTurboStream,
          deserializeErrors: () => deserializeErrors2,
          generatePath: () => generatePath,
          getHydrationData: () => getHydrationData,
          getPatchRoutesOnNavigationFunction: () =>
            getPatchRoutesOnNavigationFunction,
          getTurboStreamSingleFetchDataStrategy: () =>
            getTurboStreamSingleFetchDataStrategy,
          href: () => href,
          hydrationRouteProperties: () => hydrationRouteProperties,
          invariant: () => invariant,
          isCookie: () => isCookie,
          isRouteErrorResponse: () => isRouteErrorResponse,
          isSession: () => isSession,
          mapRouteProperties: () => mapRouteProperties,
          matchPath: () => matchPath,
          matchRoutes: () => matchRoutes,
          parsePath: () => parsePath,
          redirect: () => redirect,
          redirectDocument: () => redirectDocument,
          renderMatches: () => renderMatches,
          replace: () => replace,
          resolvePath: () => resolvePath,
          setDevServerHooks: () => setDevServerHooks,
          shouldHydrateRouteLoader: () => shouldHydrateRouteLoader,
          unstable_RouterContextProvider: () => unstable_RouterContextProvider,
          unstable_createContext: () => unstable_createContext,
          useActionData: () => useActionData,
          useAsyncError: () => useAsyncError,
          useAsyncValue: () => useAsyncValue,
          useBeforeUnload: () => useBeforeUnload,
          useBlocker: () => useBlocker,
          useFetcher: () => useFetcher,
          useFetchers: () => useFetchers,
          useFogOFWarDiscovery: () => useFogOFWarDiscovery,
          useFormAction: () => useFormAction,
          useHref: () => useHref,
          useInRouterContext: () => useInRouterContext,
          useLinkClickHandler: () => useLinkClickHandler,
          useLoaderData: () => useLoaderData,
          useLocation: () => useLocation,
          useMatch: () => useMatch,
          useMatches: () => useMatches,
          useNavigate: () => useNavigate,
          useNavigation: () => useNavigation,
          useNavigationType: () => useNavigationType,
          useOutlet: () => useOutlet,
          useOutletContext: () => useOutletContext,
          useParams: () => useParams,
          usePrompt: () => usePrompt,
          useResolvedPath: () => useResolvedPath,
          useRevalidator: () => useRevalidator,
          useRouteError: () => useRouteError,
          useRouteLoaderData: () => useRouteLoaderData,
          useRoutes: () => useRoutes,
          useScrollRestoration: () => useScrollRestoration,
          useSearchParams: () => useSearchParams,
          useSubmit: () => useSubmit,
          useViewTransitionState: () => useViewTransitionState,
          withComponentProps: () => withComponentProps,
          withErrorBoundaryProps: () => withErrorBoundaryProps,
          withHydrateFallbackProps: () => withHydrateFallbackProps,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          /*#__PURE__*/ __turbopack_context__.i(
            '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
          );
        // lib/components.tsx
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        // lib/server-runtime/cookies.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cookie$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/cookie/dist/index.js [app-client] (ecmascript)'
          );
        // lib/server-runtime/headers.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$set$2d$cookie$2d$parser$2f$lib$2f$set$2d$cookie$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/set-cookie-parser/lib/set-cookie.js [app-client] (ecmascript)'
          );
        const __TURBOPACK__import$2e$meta__ = {
          get url() {
            return `file://${__turbopack_context__.P('node_modules/react-router/dist/development/chunk-QMGIS6GS.mjs')}`;
          },
        };
        var __typeError = (msg) => {
          throw TypeError(msg);
        };
        var __accessCheck = (obj, member, msg) =>
          member.has(obj) || __typeError('Cannot ' + msg);
        var __privateGet = (obj, member, getter) => (
          __accessCheck(obj, member, 'read from private field'),
          getter ? getter.call(obj) : member.get(obj)
        );
        var __privateAdd = (obj, member, value) =>
          member.has(obj)
            ? __typeError('Cannot add the same private member more than once')
            : member instanceof WeakSet
              ? member.add(obj)
              : member.set(obj, value);
        // lib/router/history.ts
        var Action = /* @__PURE__ */ ((Action2) => {
          Action2['Pop'] = 'POP';
          Action2['Push'] = 'PUSH';
          Action2['Replace'] = 'REPLACE';
          return Action2;
        })(Action || {});
        var PopStateEventType = 'popstate';
        function createMemoryHistory() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          let {
            initialEntries = ['/'],
            initialIndex,
            v5Compat = false,
          } = options;
          let entries;
          entries = initialEntries.map((entry, index2) =>
            createMemoryLocation(
              entry,
              typeof entry === 'string' ? null : entry.state,
              index2 === 0 ? 'default' : void 0
            )
          );
          let index = clampIndex(
            initialIndex == null ? entries.length - 1 : initialIndex
          );
          let action = 'POP'; /* Pop */
          let listener = null;
          function clampIndex(n) {
            return Math.min(Math.max(n, 0), entries.length - 1);
          }
          function getCurrentLocation() {
            return entries[index];
          }
          function createMemoryLocation(to) {
            let state =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : null,
              key = arguments.length > 2 ? arguments[2] : void 0;
            let location = createLocation(
              entries ? getCurrentLocation().pathname : '/',
              to,
              state,
              key
            );
            warning(
              location.pathname.charAt(0) === '/',
              'relative pathnames are not supported in memory history: '.concat(
                JSON.stringify(to)
              )
            );
            return location;
          }
          function createHref2(to) {
            return typeof to === 'string' ? to : createPath(to);
          }
          let history = {
            get index() {
              return index;
            },
            get action() {
              return action;
            },
            get location() {
              return getCurrentLocation();
            },
            createHref: createHref2,
            createURL(to) {
              return new URL(createHref2(to), 'http://localhost');
            },
            encodeLocation(to) {
              let path = typeof to === 'string' ? parsePath(to) : to;
              return {
                pathname: path.pathname || '',
                search: path.search || '',
                hash: path.hash || '',
              };
            },
            push(to, state) {
              action = 'PUSH' /* Push */;
              let nextLocation = createMemoryLocation(to, state);
              index += 1;
              entries.splice(index, entries.length, nextLocation);
              if (v5Compat && listener) {
                listener({
                  action,
                  location: nextLocation,
                  delta: 1,
                });
              }
            },
            replace(to, state) {
              action = 'REPLACE' /* Replace */;
              let nextLocation = createMemoryLocation(to, state);
              entries[index] = nextLocation;
              if (v5Compat && listener) {
                listener({
                  action,
                  location: nextLocation,
                  delta: 0,
                });
              }
            },
            go(delta) {
              action = 'POP' /* Pop */;
              let nextIndex = clampIndex(index + delta);
              let nextLocation = entries[nextIndex];
              index = nextIndex;
              if (listener) {
                listener({
                  action,
                  location: nextLocation,
                  delta,
                });
              }
            },
            listen(fn) {
              listener = fn;
              return () => {
                listener = null;
              };
            },
          };
          return history;
        }
        function createBrowserHistory() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          function createBrowserLocation(window2, globalHistory) {
            let { pathname, search, hash } = window2.location;
            return createLocation(
              '',
              {
                pathname,
                search,
                hash,
              }, // state defaults to `null` because `window.history.state` does
              (globalHistory.state && globalHistory.state.usr) || null,
              (globalHistory.state && globalHistory.state.key) || 'default'
            );
          }
          function createBrowserHref(window2, to) {
            return typeof to === 'string' ? to : createPath(to);
          }
          return getUrlBasedHistory(
            createBrowserLocation,
            createBrowserHref,
            null,
            options
          );
        }
        function createHashHistory() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          function createHashLocation(window2, globalHistory) {
            let {
              pathname = '/',
              search = '',
              hash = '',
            } = parsePath(window2.location.hash.substring(1));
            if (!pathname.startsWith('/') && !pathname.startsWith('.')) {
              pathname = '/' + pathname;
            }
            return createLocation(
              '',
              {
                pathname,
                search,
                hash,
              }, // state defaults to `null` because `window.history.state` does
              (globalHistory.state && globalHistory.state.usr) || null,
              (globalHistory.state && globalHistory.state.key) || 'default'
            );
          }
          function createHashHref(window2, to) {
            let base = window2.document.querySelector('base');
            let href2 = '';
            if (base && base.getAttribute('href')) {
              let url = window2.location.href;
              let hashIndex = url.indexOf('#');
              href2 = hashIndex === -1 ? url : url.slice(0, hashIndex);
            }
            return href2 + '#' + (typeof to === 'string' ? to : createPath(to));
          }
          function validateHashLocation(location, to) {
            warning(
              location.pathname.charAt(0) === '/',
              'relative pathnames are not supported in hash history.push('.concat(
                JSON.stringify(to),
                ')'
              )
            );
          }
          return getUrlBasedHistory(
            createHashLocation,
            createHashHref,
            validateHashLocation,
            options
          );
        }
        function invariant(value, message) {
          if (
            value === false ||
            value === null ||
            typeof value === 'undefined'
          ) {
            throw new Error(message);
          }
        }
        function warning(cond, message) {
          if (!cond) {
            if (typeof console !== 'undefined') console.warn(message);
            try {
              throw new Error(message);
            } catch (e) {}
          }
        }
        function createKey() {
          return Math.random().toString(36).substring(2, 10);
        }
        function getHistoryState(location, index) {
          return {
            usr: location.state,
            key: location.key,
            idx: index,
          };
        }
        function createLocation(current, to) {
          let state =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : null,
            key = arguments.length > 3 ? arguments[3] : void 0;
          let location = {
            pathname: typeof current === 'string' ? current : current.pathname,
            search: '',
            hash: '',
            ...(typeof to === 'string' ? parsePath(to) : to),
            state,
            // TODO: This could be cleaned up.  push/replace should probably just take
            // full Locations now and avoid the need to run through this flow at all
            // But that's a pretty big refactor to the current test suite so going to
            // keep as is for the time being and just let any incoming keys take precedence
            key: (to && to.key) || key || createKey(),
          };
          return location;
        }
        function createPath(param) {
          let { pathname = '/', search = '', hash = '' } = param;
          if (search && search !== '?')
            pathname += search.charAt(0) === '?' ? search : '?' + search;
          if (hash && hash !== '#')
            pathname += hash.charAt(0) === '#' ? hash : '#' + hash;
          return pathname;
        }
        function parsePath(path) {
          let parsedPath = {};
          if (path) {
            let hashIndex = path.indexOf('#');
            if (hashIndex >= 0) {
              parsedPath.hash = path.substring(hashIndex);
              path = path.substring(0, hashIndex);
            }
            let searchIndex = path.indexOf('?');
            if (searchIndex >= 0) {
              parsedPath.search = path.substring(searchIndex);
              path = path.substring(0, searchIndex);
            }
            if (path) {
              parsedPath.pathname = path;
            }
          }
          return parsedPath;
        }
        function getUrlBasedHistory(
          getLocation,
          createHref2,
          validateLocation
        ) {
          let options =
            arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
          let { window: window2 = document.defaultView, v5Compat = false } =
            options;
          let globalHistory = window2.history;
          let action = 'POP'; /* Pop */
          let listener = null;
          let index = getIndex();
          if (index == null) {
            index = 0;
            globalHistory.replaceState(
              {
                ...globalHistory.state,
                idx: index,
              },
              ''
            );
          }
          function getIndex() {
            let state = globalHistory.state || {
              idx: null,
            };
            return state.idx;
          }
          function handlePop() {
            action = 'POP' /* Pop */;
            let nextIndex = getIndex();
            let delta = nextIndex == null ? null : nextIndex - index;
            index = nextIndex;
            if (listener) {
              listener({
                action,
                location: history.location,
                delta,
              });
            }
          }
          function push(to, state) {
            action = 'PUSH' /* Push */;
            let location = createLocation(history.location, to, state);
            if (validateLocation) validateLocation(location, to);
            index = getIndex() + 1;
            let historyState = getHistoryState(location, index);
            let url = history.createHref(location);
            try {
              globalHistory.pushState(historyState, '', url);
            } catch (error) {
              if (
                error instanceof DOMException &&
                error.name === 'DataCloneError'
              ) {
                throw error;
              }
              window2.location.assign(url);
            }
            if (v5Compat && listener) {
              listener({
                action,
                location: history.location,
                delta: 1,
              });
            }
          }
          function replace2(to, state) {
            action = 'REPLACE' /* Replace */;
            let location = createLocation(history.location, to, state);
            if (validateLocation) validateLocation(location, to);
            index = getIndex();
            let historyState = getHistoryState(location, index);
            let url = history.createHref(location);
            globalHistory.replaceState(historyState, '', url);
            if (v5Compat && listener) {
              listener({
                action,
                location: history.location,
                delta: 0,
              });
            }
          }
          function createURL(to) {
            return createBrowserURLImpl(to);
          }
          let history = {
            get action() {
              return action;
            },
            get location() {
              return getLocation(window2, globalHistory);
            },
            listen(fn) {
              if (listener) {
                throw new Error('A history only accepts one active listener');
              }
              window2.addEventListener(PopStateEventType, handlePop);
              listener = fn;
              return () => {
                window2.removeEventListener(PopStateEventType, handlePop);
                listener = null;
              };
            },
            createHref(to) {
              return createHref2(window2, to);
            },
            createURL,
            encodeLocation(to) {
              let url = createURL(to);
              return {
                pathname: url.pathname,
                search: url.search,
                hash: url.hash,
              };
            },
            push,
            replace: replace2,
            go(n) {
              return globalHistory.go(n);
            },
          };
          return history;
        }
        function createBrowserURLImpl(to) {
          let isAbsolute =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : false;
          let base = 'http://localhost';
          if (typeof window !== 'undefined') {
            base =
              window.location.origin !== 'null'
                ? window.location.origin
                : window.location.href;
          }
          invariant(
            base,
            'No window.location.(origin|href) available to create URL'
          );
          let href2 = typeof to === 'string' ? to : createPath(to);
          href2 = href2.replace(/ $/, '%20');
          if (!isAbsolute && href2.startsWith('//')) {
            href2 = base + href2;
          }
          return new URL(href2, base);
        }
        // lib/router/utils.ts
        function unstable_createContext(defaultValue) {
          return {
            defaultValue,
          };
        }
        var _map;
        var unstable_RouterContextProvider = class {
          get(context) {
            if (__privateGet(this, _map).has(context)) {
              return __privateGet(this, _map).get(context);
            }
            if (context.defaultValue !== void 0) {
              return context.defaultValue;
            }
            throw new Error('No value found for context');
          }
          set(context, value) {
            __privateGet(this, _map).set(context, value);
          }
          constructor(init) {
            __privateAdd(this, _map, /* @__PURE__ */ new Map());
            if (init) {
              for (let [context, value] of init) {
                this.set(context, value);
              }
            }
          }
        };
        _map = new WeakMap();
        var unsupportedLazyRouteObjectKeys = /* @__PURE__ */ new Set([
          'lazy',
          'caseSensitive',
          'path',
          'id',
          'index',
          'children',
        ]);
        function isUnsupportedLazyRouteObjectKey(key) {
          return unsupportedLazyRouteObjectKeys.has(key);
        }
        var unsupportedLazyRouteFunctionKeys = /* @__PURE__ */ new Set([
          'lazy',
          'caseSensitive',
          'path',
          'id',
          'index',
          'unstable_middleware',
          'children',
        ]);
        function isUnsupportedLazyRouteFunctionKey(key) {
          return unsupportedLazyRouteFunctionKeys.has(key);
        }
        function isIndexRoute(route) {
          return route.index === true;
        }
        function convertRoutesToDataRoutes(routes, mapRouteProperties2) {
          let parentPath =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : [],
            manifest =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : {};
          return routes.map((route, index) => {
            let treePath = [...parentPath, String(index)];
            let id =
              typeof route.id === 'string' ? route.id : treePath.join('-');
            invariant(
              route.index !== true || !route.children,
              'Cannot specify children on an index route'
            );
            invariant(
              !manifest[id],
              'Found a route id collision on id "'.concat(
                id,
                '".  Route id\'s must be globally unique within Data Router usages'
              )
            );
            if (isIndexRoute(route)) {
              let indexRoute = {
                ...route,
                ...mapRouteProperties2(route),
                id,
              };
              manifest[id] = indexRoute;
              return indexRoute;
            } else {
              let pathOrLayoutRoute = {
                ...route,
                ...mapRouteProperties2(route),
                id,
                children: void 0,
              };
              manifest[id] = pathOrLayoutRoute;
              if (route.children) {
                pathOrLayoutRoute.children = convertRoutesToDataRoutes(
                  route.children,
                  mapRouteProperties2,
                  treePath,
                  manifest
                );
              }
              return pathOrLayoutRoute;
            }
          });
        }
        function matchRoutes(routes, locationArg) {
          let basename =
            arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : '/';
          return matchRoutesImpl(routes, locationArg, basename, false);
        }
        function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
          let location =
            typeof locationArg === 'string'
              ? parsePath(locationArg)
              : locationArg;
          let pathname = stripBasename(location.pathname || '/', basename);
          if (pathname == null) {
            return null;
          }
          let branches = flattenRoutes(routes);
          rankRouteBranches(branches);
          let matches = null;
          for (let i = 0; matches == null && i < branches.length; ++i) {
            let decoded = decodePath(pathname);
            matches = matchRouteBranch(branches[i], decoded, allowPartial);
          }
          return matches;
        }
        function convertRouteMatchToUiMatch(match, loaderData) {
          let { route, pathname, params } = match;
          return {
            id: route.id,
            pathname,
            params,
            data: loaderData[route.id],
            handle: route.handle,
          };
        }
        function flattenRoutes(routes) {
          let branches =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : [],
            parentsMeta =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : [],
            parentPath =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : '';
          let flattenRoute = (route, index, relativePath) => {
            let meta = {
              relativePath:
                relativePath === void 0 ? route.path || '' : relativePath,
              caseSensitive: route.caseSensitive === true,
              childrenIndex: index,
              route,
            };
            if (meta.relativePath.startsWith('/')) {
              invariant(
                meta.relativePath.startsWith(parentPath),
                'Absolute route path "'
                  .concat(meta.relativePath, '" nested under path "')
                  .concat(
                    parentPath,
                    '" is not valid. An absolute child route path must start with the combined path of all its parent routes.'
                  )
              );
              meta.relativePath = meta.relativePath.slice(parentPath.length);
            }
            let path = joinPaths([parentPath, meta.relativePath]);
            let routesMeta = parentsMeta.concat(meta);
            if (route.children && route.children.length > 0) {
              invariant(
                // Our types know better, but runtime JS may not!
                // @ts-expect-error
                route.index !== true,
                'Index routes must not have child routes. Please remove all child routes from route path "'.concat(
                  path,
                  '".'
                )
              );
              flattenRoutes(route.children, branches, routesMeta, path);
            }
            if (route.path == null && !route.index) {
              return;
            }
            branches.push({
              path,
              score: computeScore(path, route.index),
              routesMeta,
            });
          };
          routes.forEach((route, index) => {
            var _route_path;
            if (
              route.path === '' ||
              !((_route_path = route.path) === null || _route_path === void 0
                ? void 0
                : _route_path.includes('?'))
            ) {
              flattenRoute(route, index);
            } else {
              for (let exploded of explodeOptionalSegments(route.path)) {
                flattenRoute(route, index, exploded);
              }
            }
          });
          return branches;
        }
        function explodeOptionalSegments(path) {
          let segments = path.split('/');
          if (segments.length === 0) return [];
          let [first, ...rest] = segments;
          let isOptional = first.endsWith('?');
          let required = first.replace(/\?$/, '');
          if (rest.length === 0) {
            return isOptional ? [required, ''] : [required];
          }
          let restExploded = explodeOptionalSegments(rest.join('/'));
          let result = [];
          result.push(
            ...restExploded.map((subpath) =>
              subpath === '' ? required : [required, subpath].join('/')
            )
          );
          if (isOptional) {
            result.push(...restExploded);
          }
          return result.map((exploded) =>
            path.startsWith('/') && exploded === '' ? '/' : exploded
          );
        }
        function rankRouteBranches(branches) {
          branches.sort((a, b) =>
            a.score !== b.score
              ? b.score - a.score
              : compareIndexes(
                  a.routesMeta.map((meta) => meta.childrenIndex),
                  b.routesMeta.map((meta) => meta.childrenIndex)
                )
          );
        }
        var paramRe = /^:[\w-]+$/;
        var dynamicSegmentValue = 3;
        var indexRouteValue = 2;
        var emptySegmentValue = 1;
        var staticSegmentValue = 10;
        var splatPenalty = -2;
        var isSplat = (s) => s === '*';
        function computeScore(path, index) {
          let segments = path.split('/');
          let initialScore = segments.length;
          if (segments.some(isSplat)) {
            initialScore += splatPenalty;
          }
          if (index) {
            initialScore += indexRouteValue;
          }
          return segments
            .filter((s) => !isSplat(s))
            .reduce(
              (score, segment) =>
                score +
                (paramRe.test(segment)
                  ? dynamicSegmentValue
                  : segment === ''
                    ? emptySegmentValue
                    : staticSegmentValue),
              initialScore
            );
        }
        function compareIndexes(a, b) {
          let siblings =
            a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
          return siblings // If two routes are siblings, we should try to match the earlier sibling
            ? // first. This allows people to have fine-grained control over the matching
              // behavior by simply putting routes with identical paths in the order they
              // want them tried.
              a[a.length - 1] - b[b.length - 1] // Otherwise, it doesn't really make sense to rank non-siblings by index,
            : // so they sort equally.
              0;
        }
        function matchRouteBranch(branch, pathname) {
          let allowPartial =
            arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : false;
          let { routesMeta } = branch;
          let matchedParams = {};
          let matchedPathname = '/';
          let matches = [];
          for (let i = 0; i < routesMeta.length; ++i) {
            let meta = routesMeta[i];
            let end = i === routesMeta.length - 1;
            let remainingPathname =
              matchedPathname === '/'
                ? pathname
                : pathname.slice(matchedPathname.length) || '/';
            let match = matchPath(
              {
                path: meta.relativePath,
                caseSensitive: meta.caseSensitive,
                end,
              },
              remainingPathname
            );
            let route = meta.route;
            if (
              !match &&
              end &&
              allowPartial &&
              !routesMeta[routesMeta.length - 1].route.index
            ) {
              match = matchPath(
                {
                  path: meta.relativePath,
                  caseSensitive: meta.caseSensitive,
                  end: false,
                },
                remainingPathname
              );
            }
            if (!match) {
              return null;
            }
            Object.assign(matchedParams, match.params);
            matches.push({
              // TODO: Can this as be avoided?
              params: matchedParams,
              pathname: joinPaths([matchedPathname, match.pathname]),
              pathnameBase: normalizePathname(
                joinPaths([matchedPathname, match.pathnameBase])
              ),
              route,
            });
            if (match.pathnameBase !== '/') {
              matchedPathname = joinPaths([
                matchedPathname,
                match.pathnameBase,
              ]);
            }
          }
          return matches;
        }
        function generatePath(originalPath) {
          let params =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          let path = originalPath;
          if (path.endsWith('*') && path !== '*' && !path.endsWith('/*')) {
            warning(
              false,
              'Route path "'
                .concat(path, '" will be treated as if it were "')
                .concat(
                  path.replace(/\*$/, '/*'),
                  '" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'
                )
                .concat(path.replace(/\*$/, '/*'), '".')
            );
            path = path.replace(/\*$/, '/*');
          }
          const prefix = path.startsWith('/') ? '/' : '';
          const stringify2 = (p) =>
            p == null ? '' : typeof p === 'string' ? p : String(p);
          const segments = path
            .split(/\/+/)
            .map((segment, index, array) => {
              const isLastSegment = index === array.length - 1;
              if (isLastSegment && segment === '*') {
                const star = '*';
                return stringify2(params[star]);
              }
              const keyMatch = segment.match(/^:([\w-]+)(\??)$/);
              if (keyMatch) {
                const [, key, optional] = keyMatch;
                let param = params[key];
                invariant(
                  optional === '?' || param != null,
                  'Missing ":'.concat(key, '" param')
                );
                return stringify2(param);
              }
              return segment.replace(/\?$/g, '');
            })
            .filter((segment) => !!segment);
          return prefix + segments.join('/');
        }
        function matchPath(pattern, pathname) {
          if (typeof pattern === 'string') {
            pattern = {
              path: pattern,
              caseSensitive: false,
              end: true,
            };
          }
          let [matcher, compiledParams] = compilePath(
            pattern.path,
            pattern.caseSensitive,
            pattern.end
          );
          let match = pathname.match(matcher);
          if (!match) return null;
          let matchedPathname = match[0];
          let pathnameBase = matchedPathname.replace(/(.)\/+$/, '$1');
          let captureGroups = match.slice(1);
          let params = compiledParams.reduce((memo2, param, index) => {
            let { paramName, isOptional } = param;
            if (paramName === '*') {
              let splatValue = captureGroups[index] || '';
              pathnameBase = matchedPathname
                .slice(0, matchedPathname.length - splatValue.length)
                .replace(/(.)\/+$/, '$1');
            }
            const value = captureGroups[index];
            if (isOptional && !value) {
              memo2[paramName] = void 0;
            } else {
              memo2[paramName] = (value || '').replace(/%2F/g, '/');
            }
            return memo2;
          }, {});
          return {
            params,
            pathname: matchedPathname,
            pathnameBase,
            pattern,
          };
        }
        function compilePath(path) {
          let caseSensitive =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : false,
            end =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : true;
          warning(
            path === '*' || !path.endsWith('*') || path.endsWith('/*'),
            'Route path "'
              .concat(path, '" will be treated as if it were "')
              .concat(
                path.replace(/\*$/, '/*'),
                '" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'
              )
              .concat(path.replace(/\*$/, '/*'), '".')
          );
          let params = [];
          let regexpSource =
            '^' +
            path
              .replace(/\/*\*?$/, '')
              .replace(/^\/*/, '/')
              .replace(/[\\.*+^${}|()[\]]/g, '\\$&')
              .replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
                params.push({
                  paramName,
                  isOptional: isOptional != null,
                });
                return isOptional ? '/?([^\\/]+)?' : '/([^\\/]+)';
              });
          if (path.endsWith('*')) {
            params.push({
              paramName: '*',
            });
            regexpSource +=
              path === '*' || path === '/*' ? '(.*)$' : '(?:\\/(.+)|\\/*)$';
          } else if (end) {
            regexpSource += '\\/*$';
          } else if (path !== '' && path !== '/') {
            regexpSource += '(?:(?=\\/|$))';
          } else {
          }
          let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : 'i');
          return [matcher, params];
        }
        function decodePath(value) {
          try {
            return value
              .split('/')
              .map((v) => decodeURIComponent(v).replace(/\//g, '%2F'))
              .join('/');
          } catch (error) {
            warning(
              false,
              'The URL path "'
                .concat(
                  value,
                  '" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding ('
                )
                .concat(error, ').')
            );
            return value;
          }
        }
        function stripBasename(pathname, basename) {
          if (basename === '/') return pathname;
          if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
            return null;
          }
          let startIndex = basename.endsWith('/')
            ? basename.length - 1
            : basename.length;
          let nextChar = pathname.charAt(startIndex);
          if (nextChar && nextChar !== '/') {
            return null;
          }
          return pathname.slice(startIndex) || '/';
        }
        function resolvePath(to) {
          let fromPathname =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : '/';
          let {
            pathname: toPathname,
            search = '',
            hash = '',
          } = typeof to === 'string' ? parsePath(to) : to;
          let pathname = toPathname
            ? toPathname.startsWith('/')
              ? toPathname
              : resolvePathname(toPathname, fromPathname)
            : fromPathname;
          return {
            pathname,
            search: normalizeSearch(search),
            hash: normalizeHash(hash),
          };
        }
        function resolvePathname(relativePath, fromPathname) {
          let segments = fromPathname.replace(/\/+$/, '').split('/');
          let relativeSegments = relativePath.split('/');
          relativeSegments.forEach((segment) => {
            if (segment === '..') {
              if (segments.length > 1) segments.pop();
            } else if (segment !== '.') {
              segments.push(segment);
            }
          });
          return segments.length > 1 ? segments.join('/') : '/';
        }
        function getInvalidPathError(char, field, dest, path) {
          return "Cannot include a '"
            .concat(char, "' character in a manually specified `to.")
            .concat(field, '` field [')
            .concat(
              JSON.stringify(path),
              '].  Please separate it out to the `to.'
            )
            .concat(
              dest,
              '` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'
            );
        }
        function getPathContributingMatches(matches) {
          return matches.filter(
            (match, index) =>
              index === 0 || (match.route.path && match.route.path.length > 0)
          );
        }
        function getResolveToMatches(matches) {
          let pathMatches = getPathContributingMatches(matches);
          return pathMatches.map((match, idx) =>
            idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase
          );
        }
        function resolveTo(toArg, routePathnames, locationPathname) {
          let isPathRelative =
            arguments.length > 3 && arguments[3] !== void 0
              ? arguments[3]
              : false;
          let to;
          if (typeof toArg === 'string') {
            to = parsePath(toArg);
          } else {
            to = {
              ...toArg,
            };
            invariant(
              !to.pathname || !to.pathname.includes('?'),
              getInvalidPathError('?', 'pathname', 'search', to)
            );
            invariant(
              !to.pathname || !to.pathname.includes('#'),
              getInvalidPathError('#', 'pathname', 'hash', to)
            );
            invariant(
              !to.search || !to.search.includes('#'),
              getInvalidPathError('#', 'search', 'hash', to)
            );
          }
          let isEmptyPath = toArg === '' || to.pathname === '';
          let toPathname = isEmptyPath ? '/' : to.pathname;
          let from;
          if (toPathname == null) {
            from = locationPathname;
          } else {
            let routePathnameIndex = routePathnames.length - 1;
            if (!isPathRelative && toPathname.startsWith('..')) {
              let toSegments = toPathname.split('/');
              while (toSegments[0] === '..') {
                toSegments.shift();
                routePathnameIndex -= 1;
              }
              to.pathname = toSegments.join('/');
            }
            from =
              routePathnameIndex >= 0
                ? routePathnames[routePathnameIndex]
                : '/';
          }
          let path = resolvePath(to, from);
          let hasExplicitTrailingSlash =
            toPathname && toPathname !== '/' && toPathname.endsWith('/');
          let hasCurrentTrailingSlash =
            (isEmptyPath || toPathname === '.') &&
            locationPathname.endsWith('/');
          if (
            !path.pathname.endsWith('/') &&
            (hasExplicitTrailingSlash || hasCurrentTrailingSlash)
          ) {
            path.pathname += '/';
          }
          return path;
        }
        var joinPaths = (paths) => paths.join('/').replace(/\/\/+/g, '/');
        var normalizePathname = (pathname) =>
          pathname.replace(/\/+$/, '').replace(/^\/*/, '/');
        var normalizeSearch = (search) =>
          !search || search === '?'
            ? ''
            : search.startsWith('?')
              ? search
              : '?' + search;
        var normalizeHash = (hash) =>
          !hash || hash === '#' ? '' : hash.startsWith('#') ? hash : '#' + hash;
        var DataWithResponseInit = class {
          constructor(data2, init) {
            this.type = 'DataWithResponseInit';
            this.data = data2;
            this.init = init || null;
          }
        };
        function data(data2, init) {
          return new DataWithResponseInit(
            data2,
            typeof init === 'number'
              ? {
                  status: init,
                }
              : init
          );
        }
        var redirect = function (url) {
          let init =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : 302;
          let responseInit = init;
          if (typeof responseInit === 'number') {
            responseInit = {
              status: responseInit,
            };
          } else if (typeof responseInit.status === 'undefined') {
            responseInit.status = 302;
          }
          let headers = new Headers(responseInit.headers);
          headers.set('Location', url);
          return new Response(null, {
            ...responseInit,
            headers,
          });
        };
        var redirectDocument = (url, init) => {
          let response = redirect(url, init);
          response.headers.set('X-Remix-Reload-Document', 'true');
          return response;
        };
        var replace = (url, init) => {
          let response = redirect(url, init);
          response.headers.set('X-Remix-Replace', 'true');
          return response;
        };
        var ErrorResponseImpl = class {
          constructor(status, statusText, data2, internal = false) {
            this.status = status;
            this.statusText = statusText || '';
            this.internal = internal;
            if (data2 instanceof Error) {
              this.data = data2.toString();
              this.error = data2;
            } else {
              this.data = data2;
            }
          }
        };
        function isRouteErrorResponse(error) {
          return (
            error != null &&
            typeof error.status === 'number' &&
            typeof error.statusText === 'string' &&
            typeof error.internal === 'boolean' &&
            'data' in error
          );
        }
        // lib/router/router.ts
        var validMutationMethodsArr = ['POST', 'PUT', 'PATCH', 'DELETE'];
        var validMutationMethods = new Set(validMutationMethodsArr);
        var validRequestMethodsArr = ['GET', ...validMutationMethodsArr];
        var validRequestMethods = new Set(validRequestMethodsArr);
        var redirectStatusCodes = /* @__PURE__ */ new Set([
          301, 302, 303, 307, 308,
        ]);
        var redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([
          307, 308,
        ]);
        var IDLE_NAVIGATION = {
          state: 'idle',
          location: void 0,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          json: void 0,
          text: void 0,
        };
        var IDLE_FETCHER = {
          state: 'idle',
          data: void 0,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          json: void 0,
          text: void 0,
        };
        var IDLE_BLOCKER = {
          state: 'unblocked',
          proceed: void 0,
          reset: void 0,
          location: void 0,
        };
        var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
        var defaultMapRouteProperties = (route) => ({
          hasErrorBoundary: Boolean(route.hasErrorBoundary),
        });
        var TRANSITIONS_STORAGE_KEY = 'remix-router-transitions';
        var ResetLoaderDataSymbol = Symbol('ResetLoaderData');
        function createRouter(init) {
          const routerWindow = init.window
            ? init.window
            : typeof window !== 'undefined'
              ? window
              : void 0;
          const isBrowser2 =
            typeof routerWindow !== 'undefined' &&
            typeof routerWindow.document !== 'undefined' &&
            typeof routerWindow.document.createElement !== 'undefined';
          invariant(
            init.routes.length > 0,
            'You must provide a non-empty routes array to createRouter'
          );
          let hydrationRouteProperties2 = init.hydrationRouteProperties || [];
          let mapRouteProperties2 =
            init.mapRouteProperties || defaultMapRouteProperties;
          let manifest = {};
          let dataRoutes = convertRoutesToDataRoutes(
            init.routes,
            mapRouteProperties2,
            void 0,
            manifest
          );
          let inFlightDataRoutes;
          let basename = init.basename || '/';
          let dataStrategyImpl =
            init.dataStrategy || defaultDataStrategyWithMiddleware;
          let future = {
            unstable_middleware: false,
            ...init.future,
          };
          let unlistenHistory = null;
          let subscribers = /* @__PURE__ */ new Set();
          let savedScrollPositions2 = null;
          let getScrollRestorationKey2 = null;
          let getScrollPosition = null;
          let initialScrollRestored = init.hydrationData != null;
          let initialMatches = matchRoutes(
            dataRoutes,
            init.history.location,
            basename
          );
          let initialMatchesIsFOW = false;
          let initialErrors = null;
          let initialized;
          if (initialMatches == null && !init.patchRoutesOnNavigation) {
            let error = getInternalRouterError(404, {
              pathname: init.history.location.pathname,
            });
            let { matches, route } = getShortCircuitMatches(dataRoutes);
            initialized = true;
            initialMatches = matches;
            initialErrors = {
              [route.id]: error,
            };
          } else {
            if (initialMatches && !init.hydrationData) {
              let fogOfWar = checkFogOfWar(
                initialMatches,
                dataRoutes,
                init.history.location.pathname
              );
              if (fogOfWar.active) {
                initialMatches = null;
              }
            }
            if (!initialMatches) {
              initialized = false;
              initialMatches = [];
              let fogOfWar = checkFogOfWar(
                null,
                dataRoutes,
                init.history.location.pathname
              );
              if (fogOfWar.active && fogOfWar.matches) {
                initialMatchesIsFOW = true;
                initialMatches = fogOfWar.matches;
              }
            } else if (initialMatches.some((m) => m.route.lazy)) {
              initialized = false;
            } else if (!initialMatches.some((m) => m.route.loader)) {
              initialized = true;
            } else {
              let loaderData = init.hydrationData
                ? init.hydrationData.loaderData
                : null;
              let errors = init.hydrationData
                ? init.hydrationData.errors
                : null;
              if (errors) {
                let idx = initialMatches.findIndex(
                  (m) => errors[m.route.id] !== void 0
                );
                initialized = initialMatches
                  .slice(0, idx + 1)
                  .every(
                    (m) =>
                      !shouldLoadRouteOnHydration(m.route, loaderData, errors)
                  );
              } else {
                initialized = initialMatches.every(
                  (m) =>
                    !shouldLoadRouteOnHydration(m.route, loaderData, errors)
                );
              }
            }
          }
          let router;
          let state = {
            historyAction: init.history.action,
            location: init.history.location,
            matches: initialMatches,
            initialized,
            navigation: IDLE_NAVIGATION,
            // Don't restore on initial updateState() if we were SSR'd
            restoreScrollPosition: init.hydrationData != null ? false : null,
            preventScrollReset: false,
            revalidation: 'idle',
            loaderData:
              (init.hydrationData && init.hydrationData.loaderData) || {},
            actionData:
              (init.hydrationData && init.hydrationData.actionData) || null,
            errors:
              (init.hydrationData && init.hydrationData.errors) ||
              initialErrors,
            fetchers: /* @__PURE__ */ new Map(),
            blockers: /* @__PURE__ */ new Map(),
          };
          let pendingAction = 'POP'; /* Pop */
          let pendingPreventScrollReset = false;
          let pendingNavigationController;
          let pendingViewTransitionEnabled = false;
          let appliedViewTransitions = /* @__PURE__ */ new Map();
          let removePageHideEventListener = null;
          let isUninterruptedRevalidation = false;
          let isRevalidationRequired = false;
          let cancelledFetcherLoads = /* @__PURE__ */ new Set();
          let fetchControllers = /* @__PURE__ */ new Map();
          let incrementingLoadId = 0;
          let pendingNavigationLoadId = -1;
          let fetchReloadIds = /* @__PURE__ */ new Map();
          let fetchRedirectIds = /* @__PURE__ */ new Set();
          let fetchLoadMatches = /* @__PURE__ */ new Map();
          let activeFetchers = /* @__PURE__ */ new Map();
          let fetchersQueuedForDeletion = /* @__PURE__ */ new Set();
          let blockerFunctions = /* @__PURE__ */ new Map();
          let unblockBlockerHistoryUpdate = void 0;
          let pendingRevalidationDfd = null;
          function initialize() {
            unlistenHistory = init.history.listen((param) => {
              let { action: historyAction, location, delta } = param;
              if (unblockBlockerHistoryUpdate) {
                unblockBlockerHistoryUpdate();
                unblockBlockerHistoryUpdate = void 0;
                return;
              }
              warning(
                blockerFunctions.size === 0 || delta != null,
                'You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.'
              );
              let blockerKey = shouldBlockNavigation({
                currentLocation: state.location,
                nextLocation: location,
                historyAction,
              });
              if (blockerKey && delta != null) {
                let nextHistoryUpdatePromise = new Promise((resolve) => {
                  unblockBlockerHistoryUpdate = resolve;
                });
                init.history.go(delta * -1);
                updateBlocker(blockerKey, {
                  state: 'blocked',
                  location,
                  proceed() {
                    updateBlocker(blockerKey, {
                      state: 'proceeding',
                      proceed: void 0,
                      reset: void 0,
                      location,
                    });
                    nextHistoryUpdatePromise.then(() => init.history.go(delta));
                  },
                  reset() {
                    let blockers = new Map(state.blockers);
                    blockers.set(blockerKey, IDLE_BLOCKER);
                    updateState({
                      blockers,
                    });
                  },
                });
                return;
              }
              return startNavigation(historyAction, location);
            });
            if (isBrowser2) {
              restoreAppliedTransitions(routerWindow, appliedViewTransitions);
              let _saveAppliedTransitions = () =>
                persistAppliedTransitions(routerWindow, appliedViewTransitions);
              routerWindow.addEventListener(
                'pagehide',
                _saveAppliedTransitions
              );
              removePageHideEventListener = () =>
                routerWindow.removeEventListener(
                  'pagehide',
                  _saveAppliedTransitions
                );
            }
            if (!state.initialized) {
              startNavigation('POP' /* Pop */, state.location, {
                initialHydration: true,
              });
            }
            return router;
          }
          function dispose() {
            if (unlistenHistory) {
              unlistenHistory();
            }
            if (removePageHideEventListener) {
              removePageHideEventListener();
            }
            subscribers.clear();
            pendingNavigationController && pendingNavigationController.abort();
            state.fetchers.forEach((_, key) => deleteFetcher(key));
            state.blockers.forEach((_, key) => deleteBlocker(key));
          }
          function subscribe(fn) {
            subscribers.add(fn);
            return () => subscribers.delete(fn);
          }
          function updateState(newState) {
            let opts =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
            state = {
              ...state,
              ...newState,
            };
            let unmountedFetchers = [];
            let mountedFetchers = [];
            state.fetchers.forEach((fetcher, key) => {
              if (fetcher.state === 'idle') {
                if (fetchersQueuedForDeletion.has(key)) {
                  unmountedFetchers.push(key);
                } else {
                  mountedFetchers.push(key);
                }
              }
            });
            fetchersQueuedForDeletion.forEach((key) => {
              if (!state.fetchers.has(key) && !fetchControllers.has(key)) {
                unmountedFetchers.push(key);
              }
            });
            [...subscribers].forEach((subscriber) =>
              subscriber(state, {
                deletedFetchers: unmountedFetchers,
                viewTransitionOpts: opts.viewTransitionOpts,
                flushSync: opts.flushSync === true,
              })
            );
            unmountedFetchers.forEach((key) => deleteFetcher(key));
            mountedFetchers.forEach((key) => state.fetchers.delete(key));
          }
          function completeNavigation(location, newState) {
            let { flushSync } =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            var _location_state, _location_state1;
            let isActionReload =
              state.actionData != null &&
              state.navigation.formMethod != null &&
              isMutationMethod(state.navigation.formMethod) &&
              state.navigation.state === 'loading' &&
              ((_location_state = location.state) === null ||
              _location_state === void 0
                ? void 0
                : _location_state._isRedirect) !== true;
            let actionData;
            if (newState.actionData) {
              if (Object.keys(newState.actionData).length > 0) {
                actionData = newState.actionData;
              } else {
                actionData = null;
              }
            } else if (isActionReload) {
              actionData = state.actionData;
            } else {
              actionData = null;
            }
            let loaderData = newState.loaderData
              ? mergeLoaderData(
                  state.loaderData,
                  newState.loaderData,
                  newState.matches || [],
                  newState.errors
                )
              : state.loaderData;
            let blockers = state.blockers;
            if (blockers.size > 0) {
              blockers = new Map(blockers);
              blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));
            }
            let preventScrollReset =
              pendingPreventScrollReset === true ||
              (state.navigation.formMethod != null &&
                isMutationMethod(state.navigation.formMethod) &&
                ((_location_state1 = location.state) === null ||
                _location_state1 === void 0
                  ? void 0
                  : _location_state1._isRedirect) !== true);
            if (inFlightDataRoutes) {
              dataRoutes = inFlightDataRoutes;
              inFlightDataRoutes = void 0;
            }
            if (isUninterruptedRevalidation) {
            } else if (pendingAction === 'POP' /* Pop */) {
            } else if (pendingAction === 'PUSH' /* Push */) {
              init.history.push(location, location.state);
            } else if (pendingAction === 'REPLACE' /* Replace */) {
              init.history.replace(location, location.state);
            }
            let viewTransitionOpts;
            if (pendingAction === 'POP' /* Pop */) {
              let priorPaths = appliedViewTransitions.get(
                state.location.pathname
              );
              if (priorPaths && priorPaths.has(location.pathname)) {
                viewTransitionOpts = {
                  currentLocation: state.location,
                  nextLocation: location,
                };
              } else if (appliedViewTransitions.has(location.pathname)) {
                viewTransitionOpts = {
                  currentLocation: location,
                  nextLocation: state.location,
                };
              }
            } else if (pendingViewTransitionEnabled) {
              let toPaths = appliedViewTransitions.get(state.location.pathname);
              if (toPaths) {
                toPaths.add(location.pathname);
              } else {
                toPaths = /* @__PURE__ */ new Set([location.pathname]);
                appliedViewTransitions.set(state.location.pathname, toPaths);
              }
              viewTransitionOpts = {
                currentLocation: state.location,
                nextLocation: location,
              };
            }
            updateState(
              {
                ...newState,
                // matches, errors, fetchers go through as-is
                actionData,
                loaderData,
                historyAction: pendingAction,
                location,
                initialized: true,
                navigation: IDLE_NAVIGATION,
                revalidation: 'idle',
                restoreScrollPosition: getSavedScrollPosition(
                  location,
                  newState.matches || state.matches
                ),
                preventScrollReset,
                blockers,
              },
              {
                viewTransitionOpts,
                flushSync: flushSync === true,
              }
            );
            pendingAction = 'POP' /* Pop */;
            pendingPreventScrollReset = false;
            pendingViewTransitionEnabled = false;
            isUninterruptedRevalidation = false;
            isRevalidationRequired = false;
            pendingRevalidationDfd === null || pendingRevalidationDfd === void 0
              ? void 0
              : pendingRevalidationDfd.resolve();
            pendingRevalidationDfd = null;
          }
          async function navigate(to, opts) {
            if (typeof to === 'number') {
              init.history.go(to);
              return;
            }
            let normalizedPath = normalizeTo(
              state.location,
              state.matches,
              basename,
              to,
              opts === null || opts === void 0 ? void 0 : opts.fromRouteId,
              opts === null || opts === void 0 ? void 0 : opts.relative
            );
            let { path, submission, error } = normalizeNavigateOptions(
              false,
              normalizedPath,
              opts
            );
            let currentLocation = state.location;
            let nextLocation = createLocation(
              state.location,
              path,
              opts && opts.state
            );
            nextLocation = {
              ...nextLocation,
              ...init.history.encodeLocation(nextLocation),
            };
            let userReplace =
              opts && opts.replace != null ? opts.replace : void 0;
            let historyAction = 'PUSH'; /* Push */
            if (userReplace === true) {
              historyAction = 'REPLACE' /* Replace */;
            } else if (userReplace === false) {
            } else if (
              submission != null &&
              isMutationMethod(submission.formMethod) &&
              submission.formAction ===
                state.location.pathname + state.location.search
            ) {
              historyAction = 'REPLACE' /* Replace */;
            }
            let preventScrollReset =
              opts && 'preventScrollReset' in opts
                ? opts.preventScrollReset === true
                : void 0;
            let flushSync = (opts && opts.flushSync) === true;
            let blockerKey = shouldBlockNavigation({
              currentLocation,
              nextLocation,
              historyAction,
            });
            if (blockerKey) {
              updateBlocker(blockerKey, {
                state: 'blocked',
                location: nextLocation,
                proceed() {
                  updateBlocker(blockerKey, {
                    state: 'proceeding',
                    proceed: void 0,
                    reset: void 0,
                    location: nextLocation,
                  });
                  navigate(to, opts);
                },
                reset() {
                  let blockers = new Map(state.blockers);
                  blockers.set(blockerKey, IDLE_BLOCKER);
                  updateState({
                    blockers,
                  });
                },
              });
              return;
            }
            await startNavigation(historyAction, nextLocation, {
              submission,
              // Send through the formData serialization error if we have one so we can
              // render at the right error boundary after we match routes
              pendingError: error,
              preventScrollReset,
              replace: opts && opts.replace,
              enableViewTransition: opts && opts.viewTransition,
              flushSync,
            });
          }
          function revalidate() {
            if (!pendingRevalidationDfd) {
              pendingRevalidationDfd = createDeferred();
            }
            interruptActiveLoads();
            updateState({
              revalidation: 'loading',
            });
            let promise = pendingRevalidationDfd.promise;
            if (state.navigation.state === 'submitting') {
              return promise;
            }
            if (state.navigation.state === 'idle') {
              startNavigation(state.historyAction, state.location, {
                startUninterruptedRevalidation: true,
              });
              return promise;
            }
            startNavigation(
              pendingAction || state.historyAction,
              state.navigation.location,
              {
                overrideNavigation: state.navigation,
                // Proxy through any rending view transition
                enableViewTransition: pendingViewTransitionEnabled === true,
              }
            );
            return promise;
          }
          async function startNavigation(historyAction, location, opts) {
            pendingNavigationController && pendingNavigationController.abort();
            pendingNavigationController = null;
            pendingAction = historyAction;
            isUninterruptedRevalidation =
              (opts && opts.startUninterruptedRevalidation) === true;
            saveScrollPosition(state.location, state.matches);
            pendingPreventScrollReset =
              (opts && opts.preventScrollReset) === true;
            pendingViewTransitionEnabled =
              (opts && opts.enableViewTransition) === true;
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let loadingNavigation = opts && opts.overrideNavigation;
            let matches =
              (opts === null || opts === void 0
                ? void 0
                : opts.initialHydration) &&
              state.matches &&
              state.matches.length > 0 &&
              !initialMatchesIsFOW // `matchRoutes()` has already been called if we're in here via `router.initialize()`
                ? state.matches
                : matchRoutes(routesToUse, location, basename);
            let flushSync = (opts && opts.flushSync) === true;
            if (
              matches &&
              state.initialized &&
              !isRevalidationRequired &&
              isHashChangeOnly(state.location, location) &&
              !(
                opts &&
                opts.submission &&
                isMutationMethod(opts.submission.formMethod)
              )
            ) {
              completeNavigation(
                location,
                {
                  matches,
                },
                {
                  flushSync,
                }
              );
              return;
            }
            let fogOfWar = checkFogOfWar(
              matches,
              routesToUse,
              location.pathname
            );
            if (fogOfWar.active && fogOfWar.matches) {
              matches = fogOfWar.matches;
            }
            if (!matches) {
              let { error, notFoundMatches, route } = handleNavigational404(
                location.pathname
              );
              completeNavigation(
                location,
                {
                  matches: notFoundMatches,
                  loaderData: {},
                  errors: {
                    [route.id]: error,
                  },
                },
                {
                  flushSync,
                }
              );
              return;
            }
            pendingNavigationController = new AbortController();
            let request = createClientSideRequest(
              init.history,
              location,
              pendingNavigationController.signal,
              opts && opts.submission
            );
            let scopedContext = new unstable_RouterContextProvider(
              init.unstable_getContext
                ? await init.unstable_getContext()
                : void 0
            );
            let pendingActionResult;
            if (opts && opts.pendingError) {
              pendingActionResult = [
                findNearestBoundary(matches).route.id,
                {
                  type: 'error' /* error */,
                  error: opts.pendingError,
                },
              ];
            } else if (
              opts &&
              opts.submission &&
              isMutationMethod(opts.submission.formMethod)
            ) {
              let actionResult = await handleAction(
                request,
                location,
                opts.submission,
                matches,
                scopedContext,
                fogOfWar.active,
                opts && opts.initialHydration === true,
                {
                  replace: opts.replace,
                  flushSync,
                }
              );
              if (actionResult.shortCircuited) {
                return;
              }
              if (actionResult.pendingActionResult) {
                let [routeId, result] = actionResult.pendingActionResult;
                if (
                  isErrorResult(result) &&
                  isRouteErrorResponse(result.error) &&
                  result.error.status === 404
                ) {
                  pendingNavigationController = null;
                  completeNavigation(location, {
                    matches: actionResult.matches,
                    loaderData: {},
                    errors: {
                      [routeId]: result.error,
                    },
                  });
                  return;
                }
              }
              matches = actionResult.matches || matches;
              pendingActionResult = actionResult.pendingActionResult;
              loadingNavigation = getLoadingNavigation(
                location,
                opts.submission
              );
              flushSync = false;
              fogOfWar.active = false;
              request = createClientSideRequest(
                init.history,
                request.url,
                request.signal
              );
            }
            let {
              shortCircuited,
              matches: updatedMatches,
              loaderData,
              errors,
            } = await handleLoaders(
              request,
              location,
              matches,
              scopedContext,
              fogOfWar.active,
              loadingNavigation,
              opts && opts.submission,
              opts && opts.fetcherSubmission,
              opts && opts.replace,
              opts && opts.initialHydration === true,
              flushSync,
              pendingActionResult
            );
            if (shortCircuited) {
              return;
            }
            pendingNavigationController = null;
            completeNavigation(location, {
              matches: updatedMatches || matches,
              ...getActionDataForCommit(pendingActionResult),
              loaderData,
              errors,
            });
          }
          async function handleAction(
            request,
            location,
            submission,
            matches,
            scopedContext,
            isFogOfWar,
            initialHydration
          ) {
            let opts =
              arguments.length > 7 && arguments[7] !== void 0
                ? arguments[7]
                : {};
            interruptActiveLoads();
            let navigation = getSubmittingNavigation(location, submission);
            updateState(
              {
                navigation,
              },
              {
                flushSync: opts.flushSync === true,
              }
            );
            if (isFogOfWar) {
              let discoverResult = await discoverRoutes(
                matches,
                location.pathname,
                request.signal
              );
              if (discoverResult.type === 'aborted') {
                return {
                  shortCircuited: true,
                };
              } else if (discoverResult.type === 'error') {
                let boundaryId = findNearestBoundary(
                  discoverResult.partialMatches
                ).route.id;
                return {
                  matches: discoverResult.partialMatches,
                  pendingActionResult: [
                    boundaryId,
                    {
                      type: 'error' /* error */,
                      error: discoverResult.error,
                    },
                  ],
                };
              } else if (!discoverResult.matches) {
                let { notFoundMatches, error, route } = handleNavigational404(
                  location.pathname
                );
                return {
                  matches: notFoundMatches,
                  pendingActionResult: [
                    route.id,
                    {
                      type: 'error' /* error */,
                      error,
                    },
                  ],
                };
              } else {
                matches = discoverResult.matches;
              }
            }
            let result;
            let actionMatch = getTargetMatch(matches, location);
            if (!actionMatch.route.action && !actionMatch.route.lazy) {
              result = {
                type: 'error' /* error */,
                error: getInternalRouterError(405, {
                  method: request.method,
                  pathname: location.pathname,
                  routeId: actionMatch.route.id,
                }),
              };
            } else {
              let dsMatches = getTargetedDataStrategyMatches(
                mapRouteProperties2,
                manifest,
                request,
                matches,
                actionMatch,
                initialHydration ? [] : hydrationRouteProperties2,
                scopedContext
              );
              let results = await callDataStrategy(
                request,
                dsMatches,
                scopedContext,
                null
              );
              result = results[actionMatch.route.id];
              if (!result) {
                for (let match of matches) {
                  if (results[match.route.id]) {
                    result = results[match.route.id];
                    break;
                  }
                }
              }
              if (request.signal.aborted) {
                return {
                  shortCircuited: true,
                };
              }
            }
            if (isRedirectResult(result)) {
              let replace2;
              if (opts && opts.replace != null) {
                replace2 = opts.replace;
              } else {
                let location2 = normalizeRedirectLocation(
                  result.response.headers.get('Location'),
                  new URL(request.url),
                  basename
                );
                replace2 =
                  location2 === state.location.pathname + state.location.search;
              }
              await startRedirectNavigation(request, result, true, {
                submission,
                replace: replace2,
              });
              return {
                shortCircuited: true,
              };
            }
            if (isErrorResult(result)) {
              let boundaryMatch = findNearestBoundary(
                matches,
                actionMatch.route.id
              );
              if ((opts && opts.replace) !== true) {
                pendingAction = 'PUSH' /* Push */;
              }
              return {
                matches,
                pendingActionResult: [
                  boundaryMatch.route.id,
                  result,
                  actionMatch.route.id,
                ],
              };
            }
            return {
              matches,
              pendingActionResult: [actionMatch.route.id, result],
            };
          }
          async function handleLoaders(
            request,
            location,
            matches,
            scopedContext,
            isFogOfWar,
            overrideNavigation,
            submission,
            fetcherSubmission,
            replace2,
            initialHydration,
            flushSync,
            pendingActionResult
          ) {
            let loadingNavigation =
              overrideNavigation || getLoadingNavigation(location, submission);
            let activeSubmission =
              submission ||
              fetcherSubmission ||
              getSubmissionFromNavigation(loadingNavigation);
            let shouldUpdateNavigationState =
              !isUninterruptedRevalidation && !initialHydration;
            if (isFogOfWar) {
              if (shouldUpdateNavigationState) {
                let actionData = getUpdatedActionData(pendingActionResult);
                updateState(
                  {
                    navigation: loadingNavigation,
                    ...(actionData !== void 0
                      ? {
                          actionData,
                        }
                      : {}),
                  },
                  {
                    flushSync,
                  }
                );
              }
              let discoverResult = await discoverRoutes(
                matches,
                location.pathname,
                request.signal
              );
              if (discoverResult.type === 'aborted') {
                return {
                  shortCircuited: true,
                };
              } else if (discoverResult.type === 'error') {
                let boundaryId = findNearestBoundary(
                  discoverResult.partialMatches
                ).route.id;
                return {
                  matches: discoverResult.partialMatches,
                  loaderData: {},
                  errors: {
                    [boundaryId]: discoverResult.error,
                  },
                };
              } else if (!discoverResult.matches) {
                let { error, notFoundMatches, route } = handleNavigational404(
                  location.pathname
                );
                return {
                  matches: notFoundMatches,
                  loaderData: {},
                  errors: {
                    [route.id]: error,
                  },
                };
              } else {
                matches = discoverResult.matches;
              }
            }
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let { dsMatches, revalidatingFetchers } = getMatchesToLoad(
              request,
              scopedContext,
              mapRouteProperties2,
              manifest,
              init.history,
              state,
              matches,
              activeSubmission,
              location,
              initialHydration ? [] : hydrationRouteProperties2,
              initialHydration === true,
              isRevalidationRequired,
              cancelledFetcherLoads,
              fetchersQueuedForDeletion,
              fetchLoadMatches,
              fetchRedirectIds,
              routesToUse,
              basename,
              init.patchRoutesOnNavigation != null,
              pendingActionResult
            );
            pendingNavigationLoadId = ++incrementingLoadId;
            if (
              !init.dataStrategy &&
              !dsMatches.some((m) => m.shouldLoad) &&
              revalidatingFetchers.length === 0
            ) {
              let updatedFetchers2 = markFetchRedirectsDone();
              completeNavigation(
                location,
                {
                  matches,
                  loaderData: {},
                  // Commit pending error if we're short circuiting
                  errors:
                    pendingActionResult && isErrorResult(pendingActionResult[1])
                      ? {
                          [pendingActionResult[0]]:
                            pendingActionResult[1].error,
                        }
                      : null,
                  ...getActionDataForCommit(pendingActionResult),
                  ...(updatedFetchers2
                    ? {
                        fetchers: new Map(state.fetchers),
                      }
                    : {}),
                },
                {
                  flushSync,
                }
              );
              return {
                shortCircuited: true,
              };
            }
            if (shouldUpdateNavigationState) {
              let updates = {};
              if (!isFogOfWar) {
                updates.navigation = loadingNavigation;
                let actionData = getUpdatedActionData(pendingActionResult);
                if (actionData !== void 0) {
                  updates.actionData = actionData;
                }
              }
              if (revalidatingFetchers.length > 0) {
                updates.fetchers =
                  getUpdatedRevalidatingFetchers(revalidatingFetchers);
              }
              updateState(updates, {
                flushSync,
              });
            }
            revalidatingFetchers.forEach((rf) => {
              abortFetcher(rf.key);
              if (rf.controller) {
                fetchControllers.set(rf.key, rf.controller);
              }
            });
            let abortPendingFetchRevalidations = () =>
              revalidatingFetchers.forEach((f) => abortFetcher(f.key));
            if (pendingNavigationController) {
              pendingNavigationController.signal.addEventListener(
                'abort',
                abortPendingFetchRevalidations
              );
            }
            let { loaderResults, fetcherResults } =
              await callLoadersAndMaybeResolveData(
                dsMatches,
                revalidatingFetchers,
                request,
                scopedContext
              );
            if (request.signal.aborted) {
              return {
                shortCircuited: true,
              };
            }
            if (pendingNavigationController) {
              pendingNavigationController.signal.removeEventListener(
                'abort',
                abortPendingFetchRevalidations
              );
            }
            revalidatingFetchers.forEach((rf) =>
              fetchControllers.delete(rf.key)
            );
            let redirect2 = findRedirect(loaderResults);
            if (redirect2) {
              await startRedirectNavigation(request, redirect2.result, true, {
                replace: replace2,
              });
              return {
                shortCircuited: true,
              };
            }
            redirect2 = findRedirect(fetcherResults);
            if (redirect2) {
              fetchRedirectIds.add(redirect2.key);
              await startRedirectNavigation(request, redirect2.result, true, {
                replace: replace2,
              });
              return {
                shortCircuited: true,
              };
            }
            let { loaderData, errors } = processLoaderData(
              state,
              matches,
              loaderResults,
              pendingActionResult,
              revalidatingFetchers,
              fetcherResults
            );
            if (initialHydration && state.errors) {
              errors = {
                ...state.errors,
                ...errors,
              };
            }
            let updatedFetchers = markFetchRedirectsDone();
            let didAbortFetchLoads = abortStaleFetchLoads(
              pendingNavigationLoadId
            );
            let shouldUpdateFetchers =
              updatedFetchers ||
              didAbortFetchLoads ||
              revalidatingFetchers.length > 0;
            return {
              matches,
              loaderData,
              errors,
              ...(shouldUpdateFetchers
                ? {
                    fetchers: new Map(state.fetchers),
                  }
                : {}),
            };
          }
          function getUpdatedActionData(pendingActionResult) {
            if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {
              return {
                [pendingActionResult[0]]: pendingActionResult[1].data,
              };
            } else if (state.actionData) {
              if (Object.keys(state.actionData).length === 0) {
                return null;
              } else {
                return state.actionData;
              }
            }
          }
          function getUpdatedRevalidatingFetchers(revalidatingFetchers) {
            revalidatingFetchers.forEach((rf) => {
              let fetcher = state.fetchers.get(rf.key);
              let revalidatingFetcher = getLoadingFetcher(
                void 0,
                fetcher ? fetcher.data : void 0
              );
              state.fetchers.set(rf.key, revalidatingFetcher);
            });
            return new Map(state.fetchers);
          }
          async function fetch2(key, routeId, href2, opts) {
            abortFetcher(key);
            let flushSync = (opts && opts.flushSync) === true;
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let normalizedPath = normalizeTo(
              state.location,
              state.matches,
              basename,
              href2,
              routeId,
              opts === null || opts === void 0 ? void 0 : opts.relative
            );
            let matches = matchRoutes(routesToUse, normalizedPath, basename);
            let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);
            if (fogOfWar.active && fogOfWar.matches) {
              matches = fogOfWar.matches;
            }
            if (!matches) {
              setFetcherError(
                key,
                routeId,
                getInternalRouterError(404, {
                  pathname: normalizedPath,
                }),
                {
                  flushSync,
                }
              );
              return;
            }
            let { path, submission, error } = normalizeNavigateOptions(
              true,
              normalizedPath,
              opts
            );
            if (error) {
              setFetcherError(key, routeId, error, {
                flushSync,
              });
              return;
            }
            let match = getTargetMatch(matches, path);
            let scopedContext = new unstable_RouterContextProvider(
              init.unstable_getContext
                ? await init.unstable_getContext()
                : void 0
            );
            let preventScrollReset = (opts && opts.preventScrollReset) === true;
            if (submission && isMutationMethod(submission.formMethod)) {
              await handleFetcherAction(
                key,
                routeId,
                path,
                match,
                matches,
                scopedContext,
                fogOfWar.active,
                flushSync,
                preventScrollReset,
                submission
              );
              return;
            }
            fetchLoadMatches.set(key, {
              routeId,
              path,
            });
            await handleFetcherLoader(
              key,
              routeId,
              path,
              match,
              matches,
              scopedContext,
              fogOfWar.active,
              flushSync,
              preventScrollReset,
              submission
            );
          }
          async function handleFetcherAction(
            key,
            routeId,
            path,
            match,
            requestMatches,
            scopedContext,
            isFogOfWar,
            flushSync,
            preventScrollReset,
            submission
          ) {
            interruptActiveLoads();
            fetchLoadMatches.delete(key);
            function detectAndHandle405Error(m) {
              if (!m.route.action && !m.route.lazy) {
                let error = getInternalRouterError(405, {
                  method: submission.formMethod,
                  pathname: path,
                  routeId,
                });
                setFetcherError(key, routeId, error, {
                  flushSync,
                });
                return true;
              }
              return false;
            }
            if (!isFogOfWar && detectAndHandle405Error(match)) {
              return;
            }
            let existingFetcher = state.fetchers.get(key);
            updateFetcherState(
              key,
              getSubmittingFetcher(submission, existingFetcher),
              {
                flushSync,
              }
            );
            let abortController = new AbortController();
            let fetchRequest = createClientSideRequest(
              init.history,
              path,
              abortController.signal,
              submission
            );
            if (isFogOfWar) {
              let discoverResult = await discoverRoutes(
                requestMatches,
                path,
                fetchRequest.signal,
                key
              );
              if (discoverResult.type === 'aborted') {
                return;
              } else if (discoverResult.type === 'error') {
                setFetcherError(key, routeId, discoverResult.error, {
                  flushSync,
                });
                return;
              } else if (!discoverResult.matches) {
                setFetcherError(
                  key,
                  routeId,
                  getInternalRouterError(404, {
                    pathname: path,
                  }),
                  {
                    flushSync,
                  }
                );
                return;
              } else {
                requestMatches = discoverResult.matches;
                match = getTargetMatch(requestMatches, path);
                if (detectAndHandle405Error(match)) {
                  return;
                }
              }
            }
            fetchControllers.set(key, abortController);
            let originatingLoadId = incrementingLoadId;
            let fetchMatches = getTargetedDataStrategyMatches(
              mapRouteProperties2,
              manifest,
              fetchRequest,
              requestMatches,
              match,
              hydrationRouteProperties2,
              scopedContext
            );
            let actionResults = await callDataStrategy(
              fetchRequest,
              fetchMatches,
              scopedContext,
              key
            );
            let actionResult = actionResults[match.route.id];
            if (fetchRequest.signal.aborted) {
              if (fetchControllers.get(key) === abortController) {
                fetchControllers.delete(key);
              }
              return;
            }
            if (fetchersQueuedForDeletion.has(key)) {
              if (
                isRedirectResult(actionResult) ||
                isErrorResult(actionResult)
              ) {
                updateFetcherState(key, getDoneFetcher(void 0));
                return;
              }
            } else {
              if (isRedirectResult(actionResult)) {
                fetchControllers.delete(key);
                if (pendingNavigationLoadId > originatingLoadId) {
                  updateFetcherState(key, getDoneFetcher(void 0));
                  return;
                } else {
                  fetchRedirectIds.add(key);
                  updateFetcherState(key, getLoadingFetcher(submission));
                  return startRedirectNavigation(
                    fetchRequest,
                    actionResult,
                    false,
                    {
                      fetcherSubmission: submission,
                      preventScrollReset,
                    }
                  );
                }
              }
              if (isErrorResult(actionResult)) {
                setFetcherError(key, routeId, actionResult.error);
                return;
              }
            }
            let nextLocation = state.navigation.location || state.location;
            let revalidationRequest = createClientSideRequest(
              init.history,
              nextLocation,
              abortController.signal
            );
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let matches =
              state.navigation.state !== 'idle'
                ? matchRoutes(routesToUse, state.navigation.location, basename)
                : state.matches;
            invariant(matches, "Didn't find any matches after fetcher action");
            let loadId = ++incrementingLoadId;
            fetchReloadIds.set(key, loadId);
            let loadFetcher = getLoadingFetcher(submission, actionResult.data);
            state.fetchers.set(key, loadFetcher);
            let { dsMatches, revalidatingFetchers } = getMatchesToLoad(
              revalidationRequest,
              scopedContext,
              mapRouteProperties2,
              manifest,
              init.history,
              state,
              matches,
              submission,
              nextLocation,
              hydrationRouteProperties2,
              false,
              isRevalidationRequired,
              cancelledFetcherLoads,
              fetchersQueuedForDeletion,
              fetchLoadMatches,
              fetchRedirectIds,
              routesToUse,
              basename,
              init.patchRoutesOnNavigation != null,
              [match.route.id, actionResult]
            );
            revalidatingFetchers
              .filter((rf) => rf.key !== key)
              .forEach((rf) => {
                let staleKey = rf.key;
                let existingFetcher2 = state.fetchers.get(staleKey);
                let revalidatingFetcher = getLoadingFetcher(
                  void 0,
                  existingFetcher2 ? existingFetcher2.data : void 0
                );
                state.fetchers.set(staleKey, revalidatingFetcher);
                abortFetcher(staleKey);
                if (rf.controller) {
                  fetchControllers.set(staleKey, rf.controller);
                }
              });
            updateState({
              fetchers: new Map(state.fetchers),
            });
            let abortPendingFetchRevalidations = () =>
              revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
            abortController.signal.addEventListener(
              'abort',
              abortPendingFetchRevalidations
            );
            let { loaderResults, fetcherResults } =
              await callLoadersAndMaybeResolveData(
                dsMatches,
                revalidatingFetchers,
                revalidationRequest,
                scopedContext
              );
            if (abortController.signal.aborted) {
              return;
            }
            abortController.signal.removeEventListener(
              'abort',
              abortPendingFetchRevalidations
            );
            fetchReloadIds.delete(key);
            fetchControllers.delete(key);
            revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));
            if (state.fetchers.has(key)) {
              let doneFetcher = getDoneFetcher(actionResult.data);
              state.fetchers.set(key, doneFetcher);
            }
            let redirect2 = findRedirect(loaderResults);
            if (redirect2) {
              return startRedirectNavigation(
                revalidationRequest,
                redirect2.result,
                false,
                {
                  preventScrollReset,
                }
              );
            }
            redirect2 = findRedirect(fetcherResults);
            if (redirect2) {
              fetchRedirectIds.add(redirect2.key);
              return startRedirectNavigation(
                revalidationRequest,
                redirect2.result,
                false,
                {
                  preventScrollReset,
                }
              );
            }
            let { loaderData, errors } = processLoaderData(
              state,
              matches,
              loaderResults,
              void 0,
              revalidatingFetchers,
              fetcherResults
            );
            abortStaleFetchLoads(loadId);
            if (
              state.navigation.state === 'loading' &&
              loadId > pendingNavigationLoadId
            ) {
              invariant(pendingAction, 'Expected pending action');
              pendingNavigationController &&
                pendingNavigationController.abort();
              completeNavigation(state.navigation.location, {
                matches,
                loaderData,
                errors,
                fetchers: new Map(state.fetchers),
              });
            } else {
              updateState({
                errors,
                loaderData: mergeLoaderData(
                  state.loaderData,
                  loaderData,
                  matches,
                  errors
                ),
                fetchers: new Map(state.fetchers),
              });
              isRevalidationRequired = false;
            }
          }
          async function handleFetcherLoader(
            key,
            routeId,
            path,
            match,
            matches,
            scopedContext,
            isFogOfWar,
            flushSync,
            preventScrollReset,
            submission
          ) {
            let existingFetcher = state.fetchers.get(key);
            updateFetcherState(
              key,
              getLoadingFetcher(
                submission,
                existingFetcher ? existingFetcher.data : void 0
              ),
              {
                flushSync,
              }
            );
            let abortController = new AbortController();
            let fetchRequest = createClientSideRequest(
              init.history,
              path,
              abortController.signal
            );
            if (isFogOfWar) {
              let discoverResult = await discoverRoutes(
                matches,
                path,
                fetchRequest.signal,
                key
              );
              if (discoverResult.type === 'aborted') {
                return;
              } else if (discoverResult.type === 'error') {
                setFetcherError(key, routeId, discoverResult.error, {
                  flushSync,
                });
                return;
              } else if (!discoverResult.matches) {
                setFetcherError(
                  key,
                  routeId,
                  getInternalRouterError(404, {
                    pathname: path,
                  }),
                  {
                    flushSync,
                  }
                );
                return;
              } else {
                matches = discoverResult.matches;
                match = getTargetMatch(matches, path);
              }
            }
            fetchControllers.set(key, abortController);
            let originatingLoadId = incrementingLoadId;
            let dsMatches = getTargetedDataStrategyMatches(
              mapRouteProperties2,
              manifest,
              fetchRequest,
              matches,
              match,
              hydrationRouteProperties2,
              scopedContext
            );
            let results = await callDataStrategy(
              fetchRequest,
              dsMatches,
              scopedContext,
              key
            );
            let result = results[match.route.id];
            if (fetchControllers.get(key) === abortController) {
              fetchControllers.delete(key);
            }
            if (fetchRequest.signal.aborted) {
              return;
            }
            if (fetchersQueuedForDeletion.has(key)) {
              updateFetcherState(key, getDoneFetcher(void 0));
              return;
            }
            if (isRedirectResult(result)) {
              if (pendingNavigationLoadId > originatingLoadId) {
                updateFetcherState(key, getDoneFetcher(void 0));
                return;
              } else {
                fetchRedirectIds.add(key);
                await startRedirectNavigation(fetchRequest, result, false, {
                  preventScrollReset,
                });
                return;
              }
            }
            if (isErrorResult(result)) {
              setFetcherError(key, routeId, result.error);
              return;
            }
            updateFetcherState(key, getDoneFetcher(result.data));
          }
          async function startRedirectNavigation(
            request,
            redirect2,
            isNavigation
          ) {
            let {
              submission,
              fetcherSubmission,
              preventScrollReset,
              replace: replace2,
            } = arguments.length > 3 && arguments[3] !== void 0
              ? arguments[3]
              : {};
            if (redirect2.response.headers.has('X-Remix-Revalidate')) {
              isRevalidationRequired = true;
            }
            let location = redirect2.response.headers.get('Location');
            invariant(
              location,
              'Expected a Location header on the redirect Response'
            );
            location = normalizeRedirectLocation(
              location,
              new URL(request.url),
              basename
            );
            let redirectLocation = createLocation(state.location, location, {
              _isRedirect: true,
            });
            if (isBrowser2) {
              let isDocumentReload = false;
              if (redirect2.response.headers.has('X-Remix-Reload-Document')) {
                isDocumentReload = true;
              } else if (ABSOLUTE_URL_REGEX.test(location)) {
                const url = createBrowserURLImpl(location, true);
                isDocumentReload =
                  url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
                  stripBasename(url.pathname, basename) == null;
              }
              if (isDocumentReload) {
                if (replace2) {
                  routerWindow.location.replace(location);
                } else {
                  routerWindow.location.assign(location);
                }
                return;
              }
            }
            pendingNavigationController = null;
            let redirectNavigationType =
              replace2 === true ||
              redirect2.response.headers.has('X-Remix-Replace')
                ? 'REPLACE' /* Replace */
                : 'PUSH'; /* Push */
            let { formMethod, formAction, formEncType } = state.navigation;
            if (
              !submission &&
              !fetcherSubmission &&
              formMethod &&
              formAction &&
              formEncType
            ) {
              submission = getSubmissionFromNavigation(state.navigation);
            }
            let activeSubmission = submission || fetcherSubmission;
            if (
              redirectPreserveMethodStatusCodes.has(
                redirect2.response.status
              ) &&
              activeSubmission &&
              isMutationMethod(activeSubmission.formMethod)
            ) {
              await startNavigation(redirectNavigationType, redirectLocation, {
                submission: {
                  ...activeSubmission,
                  formAction: location,
                },
                // Preserve these flags across redirects
                preventScrollReset:
                  preventScrollReset || pendingPreventScrollReset,
                enableViewTransition: isNavigation
                  ? pendingViewTransitionEnabled
                  : void 0,
              });
            } else {
              let overrideNavigation = getLoadingNavigation(
                redirectLocation,
                submission
              );
              await startNavigation(redirectNavigationType, redirectLocation, {
                overrideNavigation,
                // Send fetcher submissions through for shouldRevalidate
                fetcherSubmission,
                // Preserve these flags across redirects
                preventScrollReset:
                  preventScrollReset || pendingPreventScrollReset,
                enableViewTransition: isNavigation
                  ? pendingViewTransitionEnabled
                  : void 0,
              });
            }
          }
          async function callDataStrategy(
            request,
            matches,
            scopedContext,
            fetcherKey
          ) {
            let results;
            let dataResults = {};
            try {
              results = await callDataStrategyImpl(
                dataStrategyImpl,
                request,
                matches,
                fetcherKey,
                scopedContext,
                false
              );
            } catch (e) {
              matches
                .filter((m) => m.shouldLoad)
                .forEach((m) => {
                  dataResults[m.route.id] = {
                    type: 'error' /* error */,
                    error: e,
                  };
                });
              return dataResults;
            }
            if (request.signal.aborted) {
              return dataResults;
            }
            for (let [routeId, result] of Object.entries(results)) {
              if (isRedirectDataStrategyResult(result)) {
                let response = result.result;
                dataResults[routeId] = {
                  type: 'redirect' /* redirect */,
                  response: normalizeRelativeRoutingRedirectResponse(
                    response,
                    request,
                    routeId,
                    matches,
                    basename
                  ),
                };
              } else {
                dataResults[routeId] =
                  await convertDataStrategyResultToDataResult(result);
              }
            }
            return dataResults;
          }
          async function callLoadersAndMaybeResolveData(
            matches,
            fetchersToLoad,
            request,
            scopedContext
          ) {
            let loaderResultsPromise = callDataStrategy(
              request,
              matches,
              scopedContext,
              null
            );
            let fetcherResultsPromise = Promise.all(
              fetchersToLoad.map(async (f) => {
                if (f.matches && f.match && f.request && f.controller) {
                  let results = await callDataStrategy(
                    f.request,
                    f.matches,
                    scopedContext,
                    f.key
                  );
                  let result = results[f.match.route.id];
                  return {
                    [f.key]: result,
                  };
                } else {
                  return Promise.resolve({
                    [f.key]: {
                      type: 'error' /* error */,
                      error: getInternalRouterError(404, {
                        pathname: f.path,
                      }),
                    },
                  });
                }
              })
            );
            let loaderResults = await loaderResultsPromise;
            let fetcherResults = (await fetcherResultsPromise).reduce(
              (acc, r) => Object.assign(acc, r),
              {}
            );
            return {
              loaderResults,
              fetcherResults,
            };
          }
          function interruptActiveLoads() {
            isRevalidationRequired = true;
            fetchLoadMatches.forEach((_, key) => {
              if (fetchControllers.has(key)) {
                cancelledFetcherLoads.add(key);
              }
              abortFetcher(key);
            });
          }
          function updateFetcherState(key, fetcher) {
            let opts =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : {};
            state.fetchers.set(key, fetcher);
            updateState(
              {
                fetchers: new Map(state.fetchers),
              },
              {
                flushSync: (opts && opts.flushSync) === true,
              }
            );
          }
          function setFetcherError(key, routeId, error) {
            let opts =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : {};
            let boundaryMatch = findNearestBoundary(state.matches, routeId);
            deleteFetcher(key);
            updateState(
              {
                errors: {
                  [boundaryMatch.route.id]: error,
                },
                fetchers: new Map(state.fetchers),
              },
              {
                flushSync: (opts && opts.flushSync) === true,
              }
            );
          }
          function getFetcher(key) {
            activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);
            if (fetchersQueuedForDeletion.has(key)) {
              fetchersQueuedForDeletion.delete(key);
            }
            return state.fetchers.get(key) || IDLE_FETCHER;
          }
          function deleteFetcher(key) {
            let fetcher = state.fetchers.get(key);
            if (
              fetchControllers.has(key) &&
              !(
                fetcher &&
                fetcher.state === 'loading' &&
                fetchReloadIds.has(key)
              )
            ) {
              abortFetcher(key);
            }
            fetchLoadMatches.delete(key);
            fetchReloadIds.delete(key);
            fetchRedirectIds.delete(key);
            fetchersQueuedForDeletion.delete(key);
            cancelledFetcherLoads.delete(key);
            state.fetchers.delete(key);
          }
          function queueFetcherForDeletion(key) {
            let count = (activeFetchers.get(key) || 0) - 1;
            if (count <= 0) {
              activeFetchers.delete(key);
              fetchersQueuedForDeletion.add(key);
            } else {
              activeFetchers.set(key, count);
            }
            updateState({
              fetchers: new Map(state.fetchers),
            });
          }
          function abortFetcher(key) {
            let controller = fetchControllers.get(key);
            if (controller) {
              controller.abort();
              fetchControllers.delete(key);
            }
          }
          function markFetchersDone(keys) {
            for (let key of keys) {
              let fetcher = getFetcher(key);
              let doneFetcher = getDoneFetcher(fetcher.data);
              state.fetchers.set(key, doneFetcher);
            }
          }
          function markFetchRedirectsDone() {
            let doneKeys = [];
            let updatedFetchers = false;
            for (let key of fetchRedirectIds) {
              let fetcher = state.fetchers.get(key);
              invariant(fetcher, 'Expected fetcher: '.concat(key));
              if (fetcher.state === 'loading') {
                fetchRedirectIds.delete(key);
                doneKeys.push(key);
                updatedFetchers = true;
              }
            }
            markFetchersDone(doneKeys);
            return updatedFetchers;
          }
          function abortStaleFetchLoads(landedId) {
            let yeetedKeys = [];
            for (let [key, id] of fetchReloadIds) {
              if (id < landedId) {
                let fetcher = state.fetchers.get(key);
                invariant(fetcher, 'Expected fetcher: '.concat(key));
                if (fetcher.state === 'loading') {
                  abortFetcher(key);
                  fetchReloadIds.delete(key);
                  yeetedKeys.push(key);
                }
              }
            }
            markFetchersDone(yeetedKeys);
            return yeetedKeys.length > 0;
          }
          function getBlocker(key, fn) {
            let blocker = state.blockers.get(key) || IDLE_BLOCKER;
            if (blockerFunctions.get(key) !== fn) {
              blockerFunctions.set(key, fn);
            }
            return blocker;
          }
          function deleteBlocker(key) {
            state.blockers.delete(key);
            blockerFunctions.delete(key);
          }
          function updateBlocker(key, newBlocker) {
            let blocker = state.blockers.get(key) || IDLE_BLOCKER;
            invariant(
              (blocker.state === 'unblocked' &&
                newBlocker.state === 'blocked') ||
                (blocker.state === 'blocked' &&
                  newBlocker.state === 'blocked') ||
                (blocker.state === 'blocked' &&
                  newBlocker.state === 'proceeding') ||
                (blocker.state === 'blocked' &&
                  newBlocker.state === 'unblocked') ||
                (blocker.state === 'proceeding' &&
                  newBlocker.state === 'unblocked'),
              'Invalid blocker state transition: '
                .concat(blocker.state, ' -> ')
                .concat(newBlocker.state)
            );
            let blockers = new Map(state.blockers);
            blockers.set(key, newBlocker);
            updateState({
              blockers,
            });
          }
          function shouldBlockNavigation(param) {
            let { currentLocation, nextLocation, historyAction } = param;
            if (blockerFunctions.size === 0) {
              return;
            }
            if (blockerFunctions.size > 1) {
              warning(false, 'A router only supports one blocker at a time');
            }
            let entries = Array.from(blockerFunctions.entries());
            let [blockerKey, blockerFunction] = entries[entries.length - 1];
            let blocker = state.blockers.get(blockerKey);
            if (blocker && blocker.state === 'proceeding') {
              return;
            }
            if (
              blockerFunction({
                currentLocation,
                nextLocation,
                historyAction,
              })
            ) {
              return blockerKey;
            }
          }
          function handleNavigational404(pathname) {
            let error = getInternalRouterError(404, {
              pathname,
            });
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let { matches, route } = getShortCircuitMatches(routesToUse);
            return {
              notFoundMatches: matches,
              route,
              error,
            };
          }
          function enableScrollRestoration(positions, getPosition, getKey) {
            savedScrollPositions2 = positions;
            getScrollPosition = getPosition;
            getScrollRestorationKey2 = getKey || null;
            if (
              !initialScrollRestored &&
              state.navigation === IDLE_NAVIGATION
            ) {
              initialScrollRestored = true;
              let y = getSavedScrollPosition(state.location, state.matches);
              if (y != null) {
                updateState({
                  restoreScrollPosition: y,
                });
              }
            }
            return () => {
              savedScrollPositions2 = null;
              getScrollPosition = null;
              getScrollRestorationKey2 = null;
            };
          }
          function getScrollKey(location, matches) {
            if (getScrollRestorationKey2) {
              let key = getScrollRestorationKey2(
                location,
                matches.map((m) =>
                  convertRouteMatchToUiMatch(m, state.loaderData)
                )
              );
              return key || location.key;
            }
            return location.key;
          }
          function saveScrollPosition(location, matches) {
            if (savedScrollPositions2 && getScrollPosition) {
              let key = getScrollKey(location, matches);
              savedScrollPositions2[key] = getScrollPosition();
            }
          }
          function getSavedScrollPosition(location, matches) {
            if (savedScrollPositions2) {
              let key = getScrollKey(location, matches);
              let y = savedScrollPositions2[key];
              if (typeof y === 'number') {
                return y;
              }
            }
            return null;
          }
          function checkFogOfWar(matches, routesToUse, pathname) {
            if (init.patchRoutesOnNavigation) {
              if (!matches) {
                let fogMatches = matchRoutesImpl(
                  routesToUse,
                  pathname,
                  basename,
                  true
                );
                return {
                  active: true,
                  matches: fogMatches || [],
                };
              } else {
                if (Object.keys(matches[0].params).length > 0) {
                  let partialMatches = matchRoutesImpl(
                    routesToUse,
                    pathname,
                    basename,
                    true
                  );
                  return {
                    active: true,
                    matches: partialMatches,
                  };
                }
              }
            }
            return {
              active: false,
              matches: null,
            };
          }
          async function discoverRoutes(matches, pathname, signal, fetcherKey) {
            if (!init.patchRoutesOnNavigation) {
              return {
                type: 'success',
                matches,
              };
            }
            let partialMatches = matches;
            while (true) {
              let isNonHMR = inFlightDataRoutes == null;
              let routesToUse = inFlightDataRoutes || dataRoutes;
              let localManifest = manifest;
              try {
                await init.patchRoutesOnNavigation({
                  signal,
                  path: pathname,
                  matches: partialMatches,
                  fetcherKey,
                  patch: (routeId, children) => {
                    if (signal.aborted) return;
                    patchRoutesImpl(
                      routeId,
                      children,
                      routesToUse,
                      localManifest,
                      mapRouteProperties2
                    );
                  },
                });
              } catch (e) {
                return {
                  type: 'error',
                  error: e,
                  partialMatches,
                };
              } finally {
                if (isNonHMR && !signal.aborted) {
                  dataRoutes = [...dataRoutes];
                }
              }
              if (signal.aborted) {
                return {
                  type: 'aborted',
                };
              }
              let newMatches = matchRoutes(routesToUse, pathname, basename);
              if (newMatches) {
                return {
                  type: 'success',
                  matches: newMatches,
                };
              }
              let newPartialMatches = matchRoutesImpl(
                routesToUse,
                pathname,
                basename,
                true
              );
              if (
                !newPartialMatches ||
                (partialMatches.length === newPartialMatches.length &&
                  partialMatches.every(
                    (m, i) => m.route.id === newPartialMatches[i].route.id
                  ))
              ) {
                return {
                  type: 'success',
                  matches: null,
                };
              }
              partialMatches = newPartialMatches;
            }
          }
          function _internalSetRoutes(newRoutes) {
            manifest = {};
            inFlightDataRoutes = convertRoutesToDataRoutes(
              newRoutes,
              mapRouteProperties2,
              void 0,
              manifest
            );
          }
          function patchRoutes(routeId, children) {
            let isNonHMR = inFlightDataRoutes == null;
            let routesToUse = inFlightDataRoutes || dataRoutes;
            patchRoutesImpl(
              routeId,
              children,
              routesToUse,
              manifest,
              mapRouteProperties2
            );
            if (isNonHMR) {
              dataRoutes = [...dataRoutes];
              updateState({});
            }
          }
          router = {
            get basename() {
              return basename;
            },
            get future() {
              return future;
            },
            get state() {
              return state;
            },
            get routes() {
              return dataRoutes;
            },
            get window() {
              return routerWindow;
            },
            initialize,
            subscribe,
            enableScrollRestoration,
            navigate,
            fetch: fetch2,
            revalidate,
            // Passthrough to history-aware createHref used by useHref so we get proper
            // hash-aware URLs in DOM paths
            createHref: (to) => init.history.createHref(to),
            encodeLocation: (to) => init.history.encodeLocation(to),
            getFetcher,
            deleteFetcher: queueFetcherForDeletion,
            dispose,
            getBlocker,
            deleteBlocker,
            patchRoutes,
            _internalFetchControllers: fetchControllers,
            // TODO: Remove setRoutes, it's temporary to avoid dealing with
            // updating the tree while validating the update algorithm.
            _internalSetRoutes,
          };
          return router;
        }
        function createStaticHandler(routes, opts) {
          invariant(
            routes.length > 0,
            'You must provide a non-empty routes array to createStaticHandler'
          );
          let manifest = {};
          let basename = (opts ? opts.basename : null) || '/';
          let mapRouteProperties2 =
            (opts === null || opts === void 0
              ? void 0
              : opts.mapRouteProperties) || defaultMapRouteProperties;
          let dataRoutes = convertRoutesToDataRoutes(
            routes,
            mapRouteProperties2,
            void 0,
            manifest
          );
          async function query(request) {
            let {
              requestContext,
              filterMatchesToLoad,
              skipLoaderErrorBubbling,
              skipRevalidation,
              dataStrategy,
              unstable_respond: respond,
            } = arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : {};
            let url = new URL(request.url);
            let method = request.method;
            let location = createLocation('', createPath(url), null, 'default');
            let matches = matchRoutes(dataRoutes, location, basename);
            requestContext =
              requestContext != null
                ? requestContext
                : new unstable_RouterContextProvider();
            if (!isValidMethod(method) && method !== 'HEAD') {
              let error = getInternalRouterError(405, {
                method,
              });
              let { matches: methodNotAllowedMatches, route } =
                getShortCircuitMatches(dataRoutes);
              let staticContext = {
                basename,
                location,
                matches: methodNotAllowedMatches,
                loaderData: {},
                actionData: null,
                errors: {
                  [route.id]: error,
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
              };
              return respond ? respond(staticContext) : staticContext;
            } else if (!matches) {
              let error = getInternalRouterError(404, {
                pathname: location.pathname,
              });
              let { matches: notFoundMatches, route } =
                getShortCircuitMatches(dataRoutes);
              let staticContext = {
                basename,
                location,
                matches: notFoundMatches,
                loaderData: {},
                actionData: null,
                errors: {
                  [route.id]: error,
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
              };
              return respond ? respond(staticContext) : staticContext;
            }
            if (
              respond &&
              matches.some(
                (m) =>
                  m.route.unstable_middleware ||
                  (typeof m.route.lazy === 'object' &&
                    m.route.lazy.unstable_middleware)
              )
            ) {
              invariant(
                requestContext instanceof unstable_RouterContextProvider,
                'When using middleware in `staticHandler.query()`, any provided `requestContext` must be an instance of `unstable_RouterContextProvider`'
              );
              try {
                await loadLazyMiddlewareForMatches(
                  matches,
                  manifest,
                  mapRouteProperties2
                );
                let renderedStaticContext;
                let response = await runMiddlewarePipeline(
                  {
                    request,
                    matches,
                    params: matches[0].params,
                    // If we're calling middleware then it must be enabled so we can cast
                    // this to the proper type knowing it's not an `AppLoadContext`
                    context: requestContext,
                  },
                  true,
                  async () => {
                    let result2 = await queryImpl(
                      request,
                      location,
                      matches,
                      requestContext,
                      dataStrategy || null,
                      skipLoaderErrorBubbling === true,
                      null,
                      filterMatchesToLoad || null,
                      skipRevalidation === true
                    );
                    if (isResponse(result2)) {
                      return result2;
                    }
                    renderedStaticContext = {
                      location,
                      basename,
                      ...result2,
                    };
                    let res = await respond(renderedStaticContext);
                    return res;
                  },
                  async (error, routeId) => {
                    if (isResponse(error)) {
                      return error;
                    }
                    if (renderedStaticContext) {
                      if (routeId in renderedStaticContext.loaderData) {
                        renderedStaticContext.loaderData[routeId] = void 0;
                      }
                      return respond(
                        getStaticContextFromError(
                          dataRoutes,
                          renderedStaticContext,
                          error,
                          skipLoaderErrorBubbling
                            ? routeId
                            : findNearestBoundary(matches, routeId).route.id
                        )
                      );
                    } else {
                      var _matches_find;
                      let boundaryRouteId = skipLoaderErrorBubbling
                        ? routeId
                        : findNearestBoundary(
                            matches,
                            ((_matches_find = matches.find(
                              (m) => m.route.id === routeId || m.route.loader
                            )) === null || _matches_find === void 0
                              ? void 0
                              : _matches_find.route.id) || routeId
                          ).route.id;
                      return respond({
                        matches,
                        location,
                        basename,
                        loaderData: {},
                        actionData: null,
                        errors: {
                          [boundaryRouteId]: error,
                        },
                        statusCode: isRouteErrorResponse(error)
                          ? error.status
                          : 500,
                        actionHeaders: {},
                        loaderHeaders: {},
                      });
                    }
                  }
                );
                invariant(
                  isResponse(response),
                  'Expected a response in query()'
                );
                return response;
              } catch (e) {
                if (isResponse(e)) {
                  return e;
                }
                throw e;
              }
            }
            let result = await queryImpl(
              request,
              location,
              matches,
              requestContext,
              dataStrategy || null,
              skipLoaderErrorBubbling === true,
              null,
              filterMatchesToLoad || null,
              skipRevalidation === true
            );
            if (isResponse(result)) {
              return result;
            }
            return {
              location,
              basename,
              ...result,
            };
          }
          async function queryRoute(request) {
            let {
              routeId,
              requestContext,
              dataStrategy,
              unstable_respond: respond,
            } = arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : {};
            let url = new URL(request.url);
            let method = request.method;
            let location = createLocation('', createPath(url), null, 'default');
            let matches = matchRoutes(dataRoutes, location, basename);
            requestContext =
              requestContext != null
                ? requestContext
                : new unstable_RouterContextProvider();
            if (
              !isValidMethod(method) &&
              method !== 'HEAD' &&
              method !== 'OPTIONS'
            ) {
              throw getInternalRouterError(405, {
                method,
              });
            } else if (!matches) {
              throw getInternalRouterError(404, {
                pathname: location.pathname,
              });
            }
            let match = routeId
              ? matches.find((m) => m.route.id === routeId)
              : getTargetMatch(matches, location);
            if (routeId && !match) {
              throw getInternalRouterError(403, {
                pathname: location.pathname,
                routeId,
              });
            } else if (!match) {
              throw getInternalRouterError(404, {
                pathname: location.pathname,
              });
            }
            if (
              respond &&
              matches.some(
                (m) =>
                  m.route.unstable_middleware ||
                  (typeof m.route.lazy === 'object' &&
                    m.route.lazy.unstable_middleware)
              )
            ) {
              invariant(
                requestContext instanceof unstable_RouterContextProvider,
                'When using middleware in `staticHandler.queryRoute()`, any provided `requestContext` must be an instance of `unstable_RouterContextProvider`'
              );
              await loadLazyMiddlewareForMatches(
                matches,
                manifest,
                mapRouteProperties2
              );
              let response = await runMiddlewarePipeline(
                {
                  request,
                  matches,
                  params: matches[0].params,
                  // If we're calling middleware then it must be enabled so we can cast
                  // this to the proper type knowing it's not an `AppLoadContext`
                  context: requestContext,
                },
                true,
                async () => {
                  let result2 = await queryImpl(
                    request,
                    location,
                    matches,
                    requestContext,
                    dataStrategy || null,
                    false,
                    match,
                    null,
                    false
                  );
                  if (isResponse(result2)) {
                    return respond(result2);
                  }
                  let error2 = result2.errors
                    ? Object.values(result2.errors)[0]
                    : void 0;
                  if (error2 !== void 0) {
                    throw error2;
                  }
                  let value = result2.actionData
                    ? Object.values(result2.actionData)[0]
                    : Object.values(result2.loaderData)[0];
                  return typeof value === 'string'
                    ? new Response(value)
                    : Response.json(value);
                },
                (error2) => {
                  if (isResponse(error2)) {
                    return respond(error2);
                  }
                  return new Response(String(error2), {
                    status: 500,
                    statusText: 'Unexpected Server Error',
                  });
                }
              );
              return response;
            }
            let result = await queryImpl(
              request,
              location,
              matches,
              requestContext,
              dataStrategy || null,
              false,
              match,
              null,
              false
            );
            if (isResponse(result)) {
              return result;
            }
            let error = result.errors
              ? Object.values(result.errors)[0]
              : void 0;
            if (error !== void 0) {
              throw error;
            }
            if (result.actionData) {
              return Object.values(result.actionData)[0];
            }
            if (result.loaderData) {
              return Object.values(result.loaderData)[0];
            }
            return void 0;
          }
          async function queryImpl(
            request,
            location,
            matches,
            requestContext,
            dataStrategy,
            skipLoaderErrorBubbling,
            routeMatch,
            filterMatchesToLoad,
            skipRevalidation
          ) {
            invariant(
              request.signal,
              'query()/queryRoute() requests must contain an AbortController signal'
            );
            try {
              if (isMutationMethod(request.method)) {
                let result2 = await submit(
                  request,
                  matches,
                  routeMatch || getTargetMatch(matches, location),
                  requestContext,
                  dataStrategy,
                  skipLoaderErrorBubbling,
                  routeMatch != null,
                  filterMatchesToLoad,
                  skipRevalidation
                );
                return result2;
              }
              let result = await loadRouteData(
                request,
                matches,
                requestContext,
                dataStrategy,
                skipLoaderErrorBubbling,
                routeMatch,
                filterMatchesToLoad
              );
              return isResponse(result)
                ? result
                : {
                    ...result,
                    actionData: null,
                    actionHeaders: {},
                  };
            } catch (e) {
              if (isDataStrategyResult(e) && isResponse(e.result)) {
                if (e.type === 'error' /* error */) {
                  throw e.result;
                }
                return e.result;
              }
              if (isRedirectResponse(e)) {
                return e;
              }
              throw e;
            }
          }
          async function submit(
            request,
            matches,
            actionMatch,
            requestContext,
            dataStrategy,
            skipLoaderErrorBubbling,
            isRouteRequest,
            filterMatchesToLoad,
            skipRevalidation
          ) {
            let result;
            if (!actionMatch.route.action && !actionMatch.route.lazy) {
              let error = getInternalRouterError(405, {
                method: request.method,
                pathname: new URL(request.url).pathname,
                routeId: actionMatch.route.id,
              });
              if (isRouteRequest) {
                throw error;
              }
              result = {
                type: 'error' /* error */,
                error,
              };
            } else {
              let dsMatches = getTargetedDataStrategyMatches(
                mapRouteProperties2,
                manifest,
                request,
                matches,
                actionMatch,
                [],
                requestContext
              );
              let results = await callDataStrategy(
                request,
                dsMatches,
                isRouteRequest,
                requestContext,
                dataStrategy
              );
              result = results[actionMatch.route.id];
              if (request.signal.aborted) {
                throwStaticHandlerAbortedError(request, isRouteRequest);
              }
            }
            if (isRedirectResult(result)) {
              throw new Response(null, {
                status: result.response.status,
                headers: {
                  Location: result.response.headers.get('Location'),
                },
              });
            }
            if (isRouteRequest) {
              if (isErrorResult(result)) {
                throw result.error;
              }
              return {
                matches: [actionMatch],
                loaderData: {},
                actionData: {
                  [actionMatch.route.id]: result.data,
                },
                errors: null,
                // Note: statusCode + headers are unused here since queryRoute will
                // return the raw Response or value
                statusCode: 200,
                loaderHeaders: {},
                actionHeaders: {},
              };
            }
            if (skipRevalidation) {
              if (isErrorResult(result)) {
                let boundaryMatch = skipLoaderErrorBubbling
                  ? actionMatch
                  : findNearestBoundary(matches, actionMatch.route.id);
                return {
                  statusCode: isRouteErrorResponse(result.error)
                    ? result.error.status
                    : result.statusCode != null
                      ? result.statusCode
                      : 500,
                  actionData: null,
                  actionHeaders: {
                    ...(result.headers
                      ? {
                          [actionMatch.route.id]: result.headers,
                        }
                      : {}),
                  },
                  matches,
                  loaderData: {},
                  errors: {
                    [boundaryMatch.route.id]: result.error,
                  },
                  loaderHeaders: {},
                };
              } else {
                return {
                  actionData: {
                    [actionMatch.route.id]: result.data,
                  },
                  actionHeaders: result.headers
                    ? {
                        [actionMatch.route.id]: result.headers,
                      }
                    : {},
                  matches,
                  loaderData: {},
                  errors: null,
                  statusCode: result.statusCode || 200,
                  loaderHeaders: {},
                };
              }
            }
            let loaderRequest = new Request(request.url, {
              headers: request.headers,
              redirect: request.redirect,
              signal: request.signal,
            });
            if (isErrorResult(result)) {
              let boundaryMatch = skipLoaderErrorBubbling
                ? actionMatch
                : findNearestBoundary(matches, actionMatch.route.id);
              let handlerContext2 = await loadRouteData(
                loaderRequest,
                matches,
                requestContext,
                dataStrategy,
                skipLoaderErrorBubbling,
                null,
                filterMatchesToLoad,
                [boundaryMatch.route.id, result]
              );
              return {
                ...handlerContext2,
                statusCode: isRouteErrorResponse(result.error)
                  ? result.error.status
                  : result.statusCode != null
                    ? result.statusCode
                    : 500,
                actionData: null,
                actionHeaders: {
                  ...(result.headers
                    ? {
                        [actionMatch.route.id]: result.headers,
                      }
                    : {}),
                },
              };
            }
            let handlerContext = await loadRouteData(
              loaderRequest,
              matches,
              requestContext,
              dataStrategy,
              skipLoaderErrorBubbling,
              null,
              filterMatchesToLoad
            );
            return {
              ...handlerContext,
              actionData: {
                [actionMatch.route.id]: result.data,
              },
              // action status codes take precedence over loader status codes
              ...(result.statusCode
                ? {
                    statusCode: result.statusCode,
                  }
                : {}),
              actionHeaders: result.headers
                ? {
                    [actionMatch.route.id]: result.headers,
                  }
                : {},
            };
          }
          async function loadRouteData(
            request,
            matches,
            requestContext,
            dataStrategy,
            skipLoaderErrorBubbling,
            routeMatch,
            filterMatchesToLoad,
            pendingActionResult
          ) {
            let isRouteRequest = routeMatch != null;
            if (
              isRouteRequest &&
              !(routeMatch === null || routeMatch === void 0
                ? void 0
                : routeMatch.route.loader) &&
              !(routeMatch === null || routeMatch === void 0
                ? void 0
                : routeMatch.route.lazy)
            ) {
              throw getInternalRouterError(400, {
                method: request.method,
                pathname: new URL(request.url).pathname,
                routeId:
                  routeMatch === null || routeMatch === void 0
                    ? void 0
                    : routeMatch.route.id,
              });
            }
            let dsMatches;
            if (routeMatch) {
              dsMatches = getTargetedDataStrategyMatches(
                mapRouteProperties2,
                manifest,
                request,
                matches,
                routeMatch,
                [],
                requestContext
              );
            } else {
              let maxIdx =
                pendingActionResult && isErrorResult(pendingActionResult[1]) // Up to but not including the boundary
                  ? matches.findIndex(
                      (m) => m.route.id === pendingActionResult[0]
                    ) - 1
                  : void 0;
              dsMatches = matches.map((match, index) => {
                if (maxIdx != null && index > maxIdx) {
                  return getDataStrategyMatch(
                    mapRouteProperties2,
                    manifest,
                    request,
                    match,
                    [],
                    requestContext,
                    false
                  );
                }
                return getDataStrategyMatch(
                  mapRouteProperties2,
                  manifest,
                  request,
                  match,
                  [],
                  requestContext,
                  (match.route.loader || match.route.lazy) != null &&
                    (!filterMatchesToLoad || filterMatchesToLoad(match))
                );
              });
            }
            if (!dataStrategy && !dsMatches.some((m) => m.shouldLoad)) {
              return {
                matches,
                loaderData: {},
                errors:
                  pendingActionResult && isErrorResult(pendingActionResult[1])
                    ? {
                        [pendingActionResult[0]]: pendingActionResult[1].error,
                      }
                    : null,
                statusCode: 200,
                loaderHeaders: {},
              };
            }
            let results = await callDataStrategy(
              request,
              dsMatches,
              isRouteRequest,
              requestContext,
              dataStrategy
            );
            if (request.signal.aborted) {
              throwStaticHandlerAbortedError(request, isRouteRequest);
            }
            let handlerContext = processRouteLoaderData(
              matches,
              results,
              pendingActionResult,
              true,
              skipLoaderErrorBubbling
            );
            return {
              ...handlerContext,
              matches,
            };
          }
          async function callDataStrategy(
            request,
            matches,
            isRouteRequest,
            requestContext,
            dataStrategy
          ) {
            let results = await callDataStrategyImpl(
              dataStrategy || defaultDataStrategy,
              request,
              matches,
              null,
              requestContext,
              true
            );
            let dataResults = {};
            await Promise.all(
              matches.map(async (match) => {
                if (!(match.route.id in results)) {
                  return;
                }
                let result = results[match.route.id];
                if (isRedirectDataStrategyResult(result)) {
                  let response = result.result;
                  throw normalizeRelativeRoutingRedirectResponse(
                    response,
                    request,
                    match.route.id,
                    matches,
                    basename
                  );
                }
                if (isResponse(result.result) && isRouteRequest) {
                  throw result;
                }
                dataResults[match.route.id] =
                  await convertDataStrategyResultToDataResult(result);
              })
            );
            return dataResults;
          }
          return {
            dataRoutes,
            query,
            queryRoute,
          };
        }
        function getStaticContextFromError(
          routes,
          handlerContext,
          error,
          boundaryId
        ) {
          let errorBoundaryId =
            boundaryId ||
            handlerContext._deepestRenderedBoundaryId ||
            routes[0].id;
          return {
            ...handlerContext,
            statusCode: isRouteErrorResponse(error) ? error.status : 500,
            errors: {
              [errorBoundaryId]: error,
            },
          };
        }
        function throwStaticHandlerAbortedError(request, isRouteRequest) {
          if (request.signal.reason !== void 0) {
            throw request.signal.reason;
          }
          let method = isRouteRequest ? 'queryRoute' : 'query';
          throw new Error(
            ''
              .concat(
                method,
                '() call aborted without an `AbortSignal.reason`: '
              )
              .concat(request.method, ' ')
              .concat(request.url)
          );
        }
        function isSubmissionNavigation(opts) {
          return (
            opts != null &&
            (('formData' in opts && opts.formData != null) ||
              ('body' in opts && opts.body !== void 0))
          );
        }
        function normalizeTo(
          location,
          matches,
          basename,
          to,
          fromRouteId,
          relative
        ) {
          let contextualMatches;
          let activeRouteMatch;
          if (fromRouteId) {
            contextualMatches = [];
            for (let match of matches) {
              contextualMatches.push(match);
              if (match.route.id === fromRouteId) {
                activeRouteMatch = match;
                break;
              }
            }
          } else {
            contextualMatches = matches;
            activeRouteMatch = matches[matches.length - 1];
          }
          let path = resolveTo(
            to ? to : '.',
            getResolveToMatches(contextualMatches),
            stripBasename(location.pathname, basename) || location.pathname,
            relative === 'path'
          );
          if (to == null) {
            path.search = location.search;
            path.hash = location.hash;
          }
          if ((to == null || to === '' || to === '.') && activeRouteMatch) {
            let nakedIndex = hasNakedIndexQuery(path.search);
            if (activeRouteMatch.route.index && !nakedIndex) {
              path.search = path.search
                ? path.search.replace(/^\?/, '?index&')
                : '?index';
            } else if (!activeRouteMatch.route.index && nakedIndex) {
              let params = new URLSearchParams(path.search);
              let indexValues = params.getAll('index');
              params.delete('index');
              indexValues
                .filter((v) => v)
                .forEach((v) => params.append('index', v));
              let qs = params.toString();
              path.search = qs ? '?'.concat(qs) : '';
            }
          }
          if (basename !== '/') {
            path.pathname =
              path.pathname === '/'
                ? basename
                : joinPaths([basename, path.pathname]);
          }
          return createPath(path);
        }
        function normalizeNavigateOptions(isFetcher, path, opts) {
          if (!opts || !isSubmissionNavigation(opts)) {
            return {
              path,
            };
          }
          if (opts.formMethod && !isValidMethod(opts.formMethod)) {
            return {
              path,
              error: getInternalRouterError(405, {
                method: opts.formMethod,
              }),
            };
          }
          let getInvalidBodyError = () => ({
            path,
            error: getInternalRouterError(400, {
              type: 'invalid-body',
            }),
          });
          let rawFormMethod = opts.formMethod || 'get';
          let formMethod = rawFormMethod.toUpperCase();
          let formAction = stripHashFromPath(path);
          if (opts.body !== void 0) {
            if (opts.formEncType === 'text/plain') {
              if (!isMutationMethod(formMethod)) {
                return getInvalidBodyError();
              }
              let text =
                typeof opts.body === 'string'
                  ? opts.body
                  : opts.body instanceof FormData ||
                      opts.body instanceof URLSearchParams // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
                    ? Array.from(opts.body.entries()).reduce((acc, param) => {
                        let [name, value] = param;
                        return ''
                          .concat(acc)
                          .concat(name, '=')
                          .concat(value, '\n');
                      }, '')
                    : String(opts.body);
              return {
                path,
                submission: {
                  formMethod,
                  formAction,
                  formEncType: opts.formEncType,
                  formData: void 0,
                  json: void 0,
                  text,
                },
              };
            } else if (opts.formEncType === 'application/json') {
              if (!isMutationMethod(formMethod)) {
                return getInvalidBodyError();
              }
              try {
                let json =
                  typeof opts.body === 'string'
                    ? JSON.parse(opts.body)
                    : opts.body;
                return {
                  path,
                  submission: {
                    formMethod,
                    formAction,
                    formEncType: opts.formEncType,
                    formData: void 0,
                    json,
                    text: void 0,
                  },
                };
              } catch (e) {
                return getInvalidBodyError();
              }
            }
          }
          invariant(
            typeof FormData === 'function',
            'FormData is not available in this environment'
          );
          let searchParams;
          let formData;
          if (opts.formData) {
            searchParams = convertFormDataToSearchParams(opts.formData);
            formData = opts.formData;
          } else if (opts.body instanceof FormData) {
            searchParams = convertFormDataToSearchParams(opts.body);
            formData = opts.body;
          } else if (opts.body instanceof URLSearchParams) {
            searchParams = opts.body;
            formData = convertSearchParamsToFormData(searchParams);
          } else if (opts.body == null) {
            searchParams = new URLSearchParams();
            formData = new FormData();
          } else {
            try {
              searchParams = new URLSearchParams(opts.body);
              formData = convertSearchParamsToFormData(searchParams);
            } catch (e) {
              return getInvalidBodyError();
            }
          }
          let submission = {
            formMethod,
            formAction,
            formEncType:
              (opts && opts.formEncType) || 'application/x-www-form-urlencoded',
            formData,
            json: void 0,
            text: void 0,
          };
          if (isMutationMethod(submission.formMethod)) {
            return {
              path,
              submission,
            };
          }
          let parsedPath = parsePath(path);
          if (
            isFetcher &&
            parsedPath.search &&
            hasNakedIndexQuery(parsedPath.search)
          ) {
            searchParams.append('index', '');
          }
          parsedPath.search = '?'.concat(searchParams);
          return {
            path: createPath(parsedPath),
            submission,
          };
        }
        function getMatchesToLoad(
          request,
          scopedContext,
          mapRouteProperties2,
          manifest,
          history,
          state,
          matches,
          submission,
          location,
          lazyRoutePropertiesToSkip,
          initialHydration,
          isRevalidationRequired,
          cancelledFetcherLoads,
          fetchersQueuedForDeletion,
          fetchLoadMatches,
          fetchRedirectIds,
          routesToUse,
          basename,
          hasPatchRoutesOnNavigation,
          pendingActionResult
        ) {
          var _state_matches_;
          let actionResult = pendingActionResult
            ? isErrorResult(pendingActionResult[1])
              ? pendingActionResult[1].error
              : pendingActionResult[1].data
            : void 0;
          let currentUrl = history.createURL(state.location);
          let nextUrl = history.createURL(location);
          let maxIdx;
          if (initialHydration && state.errors) {
            let boundaryId = Object.keys(state.errors)[0];
            maxIdx = matches.findIndex((m) => m.route.id === boundaryId);
          } else if (
            pendingActionResult &&
            isErrorResult(pendingActionResult[1])
          ) {
            let boundaryId = pendingActionResult[0];
            maxIdx = matches.findIndex((m) => m.route.id === boundaryId) - 1;
          }
          let actionStatus = pendingActionResult
            ? pendingActionResult[1].statusCode
            : void 0;
          let shouldSkipRevalidation = actionStatus && actionStatus >= 400;
          let baseShouldRevalidateArgs = {
            currentUrl,
            currentParams:
              ((_state_matches_ = state.matches[0]) === null ||
              _state_matches_ === void 0
                ? void 0
                : _state_matches_.params) || {},
            nextUrl,
            nextParams: matches[0].params,
            ...submission,
            actionResult,
            actionStatus,
          };
          let dsMatches = matches.map((match, index) => {
            let { route } = match;
            let forceShouldLoad = null;
            if (maxIdx != null && index > maxIdx) {
              forceShouldLoad = false;
            } else if (route.lazy) {
              forceShouldLoad = true;
            } else if (route.loader == null) {
              forceShouldLoad = false;
            } else if (initialHydration) {
              forceShouldLoad = shouldLoadRouteOnHydration(
                route,
                state.loaderData,
                state.errors
              );
            } else if (
              isNewLoader(state.loaderData, state.matches[index], match)
            ) {
              forceShouldLoad = true;
            }
            if (forceShouldLoad !== null) {
              return getDataStrategyMatch(
                mapRouteProperties2,
                manifest,
                request,
                match,
                lazyRoutePropertiesToSkip,
                scopedContext,
                forceShouldLoad
              );
            }
            let defaultShouldRevalidate = shouldSkipRevalidation
              ? false // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
              : isRevalidationRequired ||
                currentUrl.pathname + currentUrl.search ===
                  nextUrl.pathname + nextUrl.search || // Search params affect all loaders
                currentUrl.search !== nextUrl.search ||
                isNewRouteInstance(state.matches[index], match);
            let shouldRevalidateArgs = {
              ...baseShouldRevalidateArgs,
              defaultShouldRevalidate,
            };
            let shouldLoad = shouldRevalidateLoader(
              match,
              shouldRevalidateArgs
            );
            return getDataStrategyMatch(
              mapRouteProperties2,
              manifest,
              request,
              match,
              lazyRoutePropertiesToSkip,
              scopedContext,
              shouldLoad,
              shouldRevalidateArgs
            );
          });
          let revalidatingFetchers = [];
          fetchLoadMatches.forEach((f, key) => {
            if (
              initialHydration ||
              !matches.some((m) => m.route.id === f.routeId) ||
              fetchersQueuedForDeletion.has(key)
            ) {
              return;
            }
            let fetcher = state.fetchers.get(key);
            let isMidInitialLoad =
              fetcher && fetcher.state !== 'idle' && fetcher.data === void 0;
            let fetcherMatches = matchRoutes(routesToUse, f.path, basename);
            if (!fetcherMatches) {
              if (hasPatchRoutesOnNavigation && isMidInitialLoad) {
                return;
              }
              revalidatingFetchers.push({
                key,
                routeId: f.routeId,
                path: f.path,
                matches: null,
                match: null,
                request: null,
                controller: null,
              });
              return;
            }
            if (fetchRedirectIds.has(key)) {
              return;
            }
            let fetcherMatch = getTargetMatch(fetcherMatches, f.path);
            let fetchController = new AbortController();
            let fetchRequest = createClientSideRequest(
              history,
              f.path,
              fetchController.signal
            );
            let fetcherDsMatches = null;
            if (cancelledFetcherLoads.has(key)) {
              cancelledFetcherLoads.delete(key);
              fetcherDsMatches = getTargetedDataStrategyMatches(
                mapRouteProperties2,
                manifest,
                fetchRequest,
                fetcherMatches,
                fetcherMatch,
                lazyRoutePropertiesToSkip,
                scopedContext
              );
            } else if (isMidInitialLoad) {
              if (isRevalidationRequired) {
                fetcherDsMatches = getTargetedDataStrategyMatches(
                  mapRouteProperties2,
                  manifest,
                  fetchRequest,
                  fetcherMatches,
                  fetcherMatch,
                  lazyRoutePropertiesToSkip,
                  scopedContext
                );
              }
            } else {
              let shouldRevalidateArgs = {
                ...baseShouldRevalidateArgs,
                defaultShouldRevalidate: shouldSkipRevalidation
                  ? false
                  : isRevalidationRequired,
              };
              if (shouldRevalidateLoader(fetcherMatch, shouldRevalidateArgs)) {
                fetcherDsMatches = getTargetedDataStrategyMatches(
                  mapRouteProperties2,
                  manifest,
                  fetchRequest,
                  fetcherMatches,
                  fetcherMatch,
                  lazyRoutePropertiesToSkip,
                  scopedContext,
                  shouldRevalidateArgs
                );
              }
            }
            if (fetcherDsMatches) {
              revalidatingFetchers.push({
                key,
                routeId: f.routeId,
                path: f.path,
                matches: fetcherDsMatches,
                match: fetcherMatch,
                request: fetchRequest,
                controller: fetchController,
              });
            }
          });
          return {
            dsMatches,
            revalidatingFetchers,
          };
        }
        function shouldLoadRouteOnHydration(route, loaderData, errors) {
          if (route.lazy) {
            return true;
          }
          if (!route.loader) {
            return false;
          }
          let hasData = loaderData != null && route.id in loaderData;
          let hasError = errors != null && errors[route.id] !== void 0;
          if (!hasData && hasError) {
            return false;
          }
          if (
            typeof route.loader === 'function' &&
            route.loader.hydrate === true
          ) {
            return true;
          }
          return !hasData && !hasError;
        }
        function isNewLoader(currentLoaderData, currentMatch, match) {
          let isNew = // [a] -> [a, b]
            !currentMatch || // [a, b] -> [a, c]
            match.route.id !== currentMatch.route.id;
          let isMissingData = !currentLoaderData.hasOwnProperty(match.route.id);
          return isNew || isMissingData;
        }
        function isNewRouteInstance(currentMatch, match) {
          let currentPath = currentMatch.route.path;
          return (
            // param change for this match, /users/123 -> /users/456
            currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
            // e.g. /files/images/avatar.jpg -> files/finances.xls
            (currentPath != null &&
              currentPath.endsWith('*') &&
              currentMatch.params['*'] !== match.params['*'])
          );
        }
        function shouldRevalidateLoader(loaderMatch, arg) {
          if (loaderMatch.route.shouldRevalidate) {
            let routeChoice = loaderMatch.route.shouldRevalidate(arg);
            if (typeof routeChoice === 'boolean') {
              return routeChoice;
            }
          }
          return arg.defaultShouldRevalidate;
        }
        function patchRoutesImpl(
          routeId,
          children,
          routesToUse,
          manifest,
          mapRouteProperties2
        ) {
          let childrenToPatch;
          if (routeId) {
            let route = manifest[routeId];
            invariant(
              route,
              'No route found to patch children into: routeId = '.concat(
                routeId
              )
            );
            if (!route.children) {
              route.children = [];
            }
            childrenToPatch = route.children;
          } else {
            childrenToPatch = routesToUse;
          }
          let uniqueChildren = children.filter(
            (newRoute) =>
              !childrenToPatch.some((existingRoute) =>
                isSameRoute(newRoute, existingRoute)
              )
          );
          let newRoutes = convertRoutesToDataRoutes(
            uniqueChildren,
            mapRouteProperties2,
            [
              routeId || '_',
              'patch',
              String(
                (childrenToPatch === null || childrenToPatch === void 0
                  ? void 0
                  : childrenToPatch.length) || '0'
              ),
            ],
            manifest
          );
          childrenToPatch.push(...newRoutes);
        }
        function isSameRoute(newRoute, existingRoute) {
          if (
            'id' in newRoute &&
            'id' in existingRoute &&
            newRoute.id === existingRoute.id
          ) {
            return true;
          }
          if (
            !(
              newRoute.index === existingRoute.index &&
              newRoute.path === existingRoute.path &&
              newRoute.caseSensitive === existingRoute.caseSensitive
            )
          ) {
            return false;
          }
          if (
            (!newRoute.children || newRoute.children.length === 0) &&
            (!existingRoute.children || existingRoute.children.length === 0)
          ) {
            return true;
          }
          return newRoute.children.every((aChild, i) => {
            var _existingRoute_children;
            return (_existingRoute_children = existingRoute.children) ===
              null || _existingRoute_children === void 0
              ? void 0
              : _existingRoute_children.some((bChild) =>
                  isSameRoute(aChild, bChild)
                );
          });
        }
        var lazyRoutePropertyCache = /* @__PURE__ */ new WeakMap();
        var loadLazyRouteProperty = (param) => {
          let {
            key,
            route,
            manifest,
            mapRouteProperties: mapRouteProperties2,
          } = param;
          let routeToUpdate = manifest[route.id];
          invariant(routeToUpdate, 'No route found in manifest');
          if (!routeToUpdate.lazy || typeof routeToUpdate.lazy !== 'object') {
            return;
          }
          let lazyFn = routeToUpdate.lazy[key];
          if (!lazyFn) {
            return;
          }
          let cache = lazyRoutePropertyCache.get(routeToUpdate);
          if (!cache) {
            cache = {};
            lazyRoutePropertyCache.set(routeToUpdate, cache);
          }
          let cachedPromise = cache[key];
          if (cachedPromise) {
            return cachedPromise;
          }
          let propertyPromise = (async () => {
            let isUnsupported = isUnsupportedLazyRouteObjectKey(key);
            let staticRouteValue = routeToUpdate[key];
            let isStaticallyDefined =
              staticRouteValue !== void 0 && key !== 'hasErrorBoundary';
            if (isUnsupported) {
              warning(
                !isUnsupported,
                'Route property ' +
                  key +
                  ' is not a supported lazy route property. This property will be ignored.'
              );
              cache[key] = Promise.resolve();
            } else if (isStaticallyDefined) {
              warning(
                false,
                'Route "'
                  .concat(routeToUpdate.id, '" has a static property "')
                  .concat(key, '" defined. The lazy property will be ignored.')
              );
            } else {
              let value = await lazyFn();
              if (value != null) {
                Object.assign(routeToUpdate, {
                  [key]: value,
                });
                Object.assign(
                  routeToUpdate,
                  mapRouteProperties2(routeToUpdate)
                );
              }
            }
            if (typeof routeToUpdate.lazy === 'object') {
              routeToUpdate.lazy[key] = void 0;
              if (
                Object.values(routeToUpdate.lazy).every(
                  (value) => value === void 0
                )
              ) {
                routeToUpdate.lazy = void 0;
              }
            }
          })();
          cache[key] = propertyPromise;
          return propertyPromise;
        };
        var lazyRouteFunctionCache = /* @__PURE__ */ new WeakMap();
        function loadLazyRoute(
          route,
          type,
          manifest,
          mapRouteProperties2,
          lazyRoutePropertiesToSkip
        ) {
          let routeToUpdate = manifest[route.id];
          invariant(routeToUpdate, 'No route found in manifest');
          if (!route.lazy) {
            return {
              lazyRoutePromise: void 0,
              lazyHandlerPromise: void 0,
            };
          }
          if (typeof route.lazy === 'function') {
            let cachedPromise = lazyRouteFunctionCache.get(routeToUpdate);
            if (cachedPromise) {
              return {
                lazyRoutePromise: cachedPromise,
                lazyHandlerPromise: cachedPromise,
              };
            }
            let lazyRoutePromise2 = (async () => {
              invariant(
                typeof route.lazy === 'function',
                'No lazy route function found'
              );
              let lazyRoute = await route.lazy();
              let routeUpdates = {};
              for (let lazyRouteProperty in lazyRoute) {
                let lazyValue = lazyRoute[lazyRouteProperty];
                if (lazyValue === void 0) {
                  continue;
                }
                let isUnsupported =
                  isUnsupportedLazyRouteFunctionKey(lazyRouteProperty);
                let staticRouteValue = routeToUpdate[lazyRouteProperty];
                let isStaticallyDefined =
                  staticRouteValue !== void 0 && // This property isn't static since it should always be updated based
                  // on the route updates
                  lazyRouteProperty !== 'hasErrorBoundary';
                if (isUnsupported) {
                  warning(
                    !isUnsupported,
                    'Route property ' +
                      lazyRouteProperty +
                      ' is not a supported property to be returned from a lazy route function. This property will be ignored.'
                  );
                } else if (isStaticallyDefined) {
                  warning(
                    !isStaticallyDefined,
                    'Route "'
                      .concat(routeToUpdate.id, '" has a static property "')
                      .concat(
                        lazyRouteProperty,
                        '" defined but its lazy function is also returning a value for this property. The lazy route property "'
                      )
                      .concat(lazyRouteProperty, '" will be ignored.')
                  );
                } else {
                  routeUpdates[lazyRouteProperty] = lazyValue;
                }
              }
              Object.assign(routeToUpdate, routeUpdates);
              Object.assign(routeToUpdate, {
                // To keep things framework agnostic, we use the provided `mapRouteProperties`
                // function to set the framework-aware properties (`element`/`hasErrorBoundary`)
                // since the logic will differ between frameworks.
                ...mapRouteProperties2(routeToUpdate),
                lazy: void 0,
              });
            })();
            lazyRouteFunctionCache.set(routeToUpdate, lazyRoutePromise2);
            lazyRoutePromise2.catch(() => {});
            return {
              lazyRoutePromise: lazyRoutePromise2,
              lazyHandlerPromise: lazyRoutePromise2,
            };
          }
          let lazyKeys = Object.keys(route.lazy);
          let lazyPropertyPromises = [];
          let lazyHandlerPromise = void 0;
          for (let key of lazyKeys) {
            if (
              lazyRoutePropertiesToSkip &&
              lazyRoutePropertiesToSkip.includes(key)
            ) {
              continue;
            }
            let promise = loadLazyRouteProperty({
              key,
              route,
              manifest,
              mapRouteProperties: mapRouteProperties2,
            });
            if (promise) {
              lazyPropertyPromises.push(promise);
              if (key === type) {
                lazyHandlerPromise = promise;
              }
            }
          }
          let lazyRoutePromise =
            lazyPropertyPromises.length > 0
              ? Promise.all(lazyPropertyPromises).then(() => {})
              : void 0;
          lazyRoutePromise === null || lazyRoutePromise === void 0
            ? void 0
            : lazyRoutePromise.catch(() => {});
          lazyHandlerPromise === null || lazyHandlerPromise === void 0
            ? void 0
            : lazyHandlerPromise.catch(() => {});
          return {
            lazyRoutePromise,
            lazyHandlerPromise,
          };
        }
        function isNonNullable(value) {
          return value !== void 0;
        }
        function loadLazyMiddlewareForMatches(
          matches,
          manifest,
          mapRouteProperties2
        ) {
          let promises = matches
            .map((param) => {
              let { route } = param;
              if (
                typeof route.lazy !== 'object' ||
                !route.lazy.unstable_middleware
              ) {
                return void 0;
              }
              return loadLazyRouteProperty({
                key: 'unstable_middleware',
                route,
                manifest,
                mapRouteProperties: mapRouteProperties2,
              });
            })
            .filter(isNonNullable);
          return promises.length > 0 ? Promise.all(promises) : void 0;
        }
        async function defaultDataStrategy(args) {
          let matchesToLoad = args.matches.filter((m) => m.shouldLoad);
          let keyedResults = {};
          let results = await Promise.all(
            matchesToLoad.map((m) => m.resolve())
          );
          results.forEach((result, i) => {
            keyedResults[matchesToLoad[i].route.id] = result;
          });
          return keyedResults;
        }
        async function defaultDataStrategyWithMiddleware(args) {
          if (!args.matches.some((m) => m.route.unstable_middleware)) {
            return defaultDataStrategy(args);
          }
          return runMiddlewarePipeline(
            args,
            false,
            () => defaultDataStrategy(args),
            (error, routeId) => ({
              [routeId]: {
                type: 'error',
                result: error,
              },
            })
          );
        }
        async function runMiddlewarePipeline(
          args,
          propagateResult,
          handler,
          errorHandler
        ) {
          let { matches, request, params, context } = args;
          let middlewareState = {
            handlerResult: void 0,
          };
          try {
            let tuples = matches.flatMap((m) =>
              m.route.unstable_middleware
                ? m.route.unstable_middleware.map((fn) => [m.route.id, fn])
                : []
            );
            let result = await callRouteMiddleware(
              {
                request,
                params,
                context,
              },
              tuples,
              propagateResult,
              middlewareState,
              handler
            );
            return propagateResult ? result : middlewareState.handlerResult;
          } catch (e) {
            if (!middlewareState.middlewareError) {
              throw e;
            }
            let result = await errorHandler(
              middlewareState.middlewareError.error,
              middlewareState.middlewareError.routeId
            );
            if (propagateResult || !middlewareState.handlerResult) {
              return result;
            }
            return Object.assign(middlewareState.handlerResult, result);
          }
        }
        async function callRouteMiddleware(
          args,
          middlewares,
          propagateResult,
          middlewareState,
          handler
        ) {
          let idx =
            arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0;
          let { request } = args;
          if (request.signal.aborted) {
            if (request.signal.reason) {
              throw request.signal.reason;
            }
            throw new Error(
              'Request aborted without an `AbortSignal.reason`: '
                .concat(request.method, ' ')
                .concat(request.url)
            );
          }
          let tuple = middlewares[idx];
          if (!tuple) {
            middlewareState.handlerResult = await handler();
            return middlewareState.handlerResult;
          }
          let [routeId, middleware] = tuple;
          let nextCalled = false;
          let nextResult = void 0;
          let next = async () => {
            if (nextCalled) {
              throw new Error('You may only call `next()` once per middleware');
            }
            nextCalled = true;
            let result = await callRouteMiddleware(
              args,
              middlewares,
              propagateResult,
              middlewareState,
              handler,
              idx + 1
            );
            if (propagateResult) {
              nextResult = result;
              return nextResult;
            }
          };
          try {
            let result = await middleware(
              {
                request: args.request,
                params: args.params,
                context: args.context,
              },
              next
            );
            if (nextCalled) {
              if (result === void 0) {
                return nextResult;
              } else {
                return result;
              }
            } else {
              return next();
            }
          } catch (error) {
            if (!middlewareState.middlewareError) {
              middlewareState.middlewareError = {
                routeId,
                error,
              };
            } else if (middlewareState.middlewareError.error !== error) {
              middlewareState.middlewareError = {
                routeId,
                error,
              };
            }
            throw error;
          }
        }
        function getDataStrategyMatchLazyPromises(
          mapRouteProperties2,
          manifest,
          request,
          match,
          lazyRoutePropertiesToSkip
        ) {
          let lazyMiddlewarePromise = loadLazyRouteProperty({
            key: 'unstable_middleware',
            route: match.route,
            manifest,
            mapRouteProperties: mapRouteProperties2,
          });
          let lazyRoutePromises = loadLazyRoute(
            match.route,
            isMutationMethod(request.method) ? 'action' : 'loader',
            manifest,
            mapRouteProperties2,
            lazyRoutePropertiesToSkip
          );
          return {
            middleware: lazyMiddlewarePromise,
            route: lazyRoutePromises.lazyRoutePromise,
            handler: lazyRoutePromises.lazyHandlerPromise,
          };
        }
        function getDataStrategyMatch(
          mapRouteProperties2,
          manifest,
          request,
          match,
          lazyRoutePropertiesToSkip,
          scopedContext,
          shouldLoad
        ) {
          let unstable_shouldRevalidateArgs =
            arguments.length > 7 && arguments[7] !== void 0
              ? arguments[7]
              : null;
          let isUsingNewApi = false;
          let _lazyPromises = getDataStrategyMatchLazyPromises(
            mapRouteProperties2,
            manifest,
            request,
            match,
            lazyRoutePropertiesToSkip
          );
          return {
            ...match,
            _lazyPromises,
            shouldLoad,
            unstable_shouldRevalidateArgs,
            unstable_shouldCallHandler(defaultShouldRevalidate) {
              isUsingNewApi = true;
              if (!unstable_shouldRevalidateArgs) {
                return shouldLoad;
              }
              if (typeof defaultShouldRevalidate === 'boolean') {
                return shouldRevalidateLoader(match, {
                  ...unstable_shouldRevalidateArgs,
                  defaultShouldRevalidate,
                });
              }
              return shouldRevalidateLoader(
                match,
                unstable_shouldRevalidateArgs
              );
            },
            resolve(handlerOverride) {
              if (
                isUsingNewApi ||
                shouldLoad ||
                (handlerOverride &&
                  request.method === 'GET' &&
                  (match.route.lazy || match.route.loader))
              ) {
                return callLoaderOrAction({
                  request,
                  match,
                  lazyHandlerPromise:
                    _lazyPromises === null || _lazyPromises === void 0
                      ? void 0
                      : _lazyPromises.handler,
                  lazyRoutePromise:
                    _lazyPromises === null || _lazyPromises === void 0
                      ? void 0
                      : _lazyPromises.route,
                  handlerOverride,
                  scopedContext,
                });
              }
              return Promise.resolve({
                type: 'data' /* data */,
                result: void 0,
              });
            },
          };
        }
        function getTargetedDataStrategyMatches(
          mapRouteProperties2,
          manifest,
          request,
          matches,
          targetMatch,
          lazyRoutePropertiesToSkip,
          scopedContext
        ) {
          let shouldRevalidateArgs =
            arguments.length > 7 && arguments[7] !== void 0
              ? arguments[7]
              : null;
          return matches.map((match) => {
            if (match.route.id !== targetMatch.route.id) {
              return {
                ...match,
                shouldLoad: false,
                unstable_shouldRevalidateArgs: shouldRevalidateArgs,
                unstable_shouldCallHandler: () => false,
                _lazyPromises: getDataStrategyMatchLazyPromises(
                  mapRouteProperties2,
                  manifest,
                  request,
                  match,
                  lazyRoutePropertiesToSkip
                ),
                resolve: () =>
                  Promise.resolve({
                    type: 'data',
                    result: void 0,
                  }),
              };
            }
            return getDataStrategyMatch(
              mapRouteProperties2,
              manifest,
              request,
              match,
              lazyRoutePropertiesToSkip,
              scopedContext,
              true,
              shouldRevalidateArgs
            );
          });
        }
        async function callDataStrategyImpl(
          dataStrategyImpl,
          request,
          matches,
          fetcherKey,
          scopedContext,
          isStaticHandler
        ) {
          if (
            matches.some((m) => {
              var _m__lazyPromises;
              return (_m__lazyPromises = m._lazyPromises) === null ||
                _m__lazyPromises === void 0
                ? void 0
                : _m__lazyPromises.middleware;
            })
          ) {
            await Promise.all(
              matches.map((m) => {
                var _m__lazyPromises;
                return (_m__lazyPromises = m._lazyPromises) === null ||
                  _m__lazyPromises === void 0
                  ? void 0
                  : _m__lazyPromises.middleware;
              })
            );
          }
          let dataStrategyArgs = {
            request,
            params: matches[0].params,
            context: scopedContext,
            matches,
          };
          let unstable_runClientMiddleware = isStaticHandler
            ? () => {
                throw new Error(
                  'You cannot call `unstable_runClientMiddleware()` from a static handler `dataStrategy`. Middleware is run outside of `dataStrategy` during SSR in order to bubble up the Response.  You can enable middleware via the `respond` API in `query`/`queryRoute`'
                );
              }
            : (cb) => {
                let typedDataStrategyArgs = dataStrategyArgs;
                return runMiddlewarePipeline(
                  typedDataStrategyArgs,
                  false,
                  () =>
                    cb({
                      ...typedDataStrategyArgs,
                      fetcherKey,
                      unstable_runClientMiddleware: () => {
                        throw new Error(
                          'Cannot call `unstable_runClientMiddleware()` from within an `unstable_runClientMiddleware` handler'
                        );
                      },
                    }),
                  (error, routeId) => ({
                    [routeId]: {
                      type: 'error',
                      result: error,
                    },
                  })
                );
              };
          let results = await dataStrategyImpl({
            ...dataStrategyArgs,
            fetcherKey,
            unstable_runClientMiddleware,
          });
          try {
            await Promise.all(
              matches.flatMap((m) => {
                var _m__lazyPromises, _m__lazyPromises1;
                return [
                  (_m__lazyPromises = m._lazyPromises) === null ||
                  _m__lazyPromises === void 0
                    ? void 0
                    : _m__lazyPromises.handler,
                  (_m__lazyPromises1 = m._lazyPromises) === null ||
                  _m__lazyPromises1 === void 0
                    ? void 0
                    : _m__lazyPromises1.route,
                ];
              })
            );
          } catch (e) {}
          return results;
        }
        async function callLoaderOrAction(param) {
          let {
            request,
            match,
            lazyHandlerPromise,
            lazyRoutePromise,
            handlerOverride,
            scopedContext,
          } = param;
          let result;
          let onReject;
          let isAction = isMutationMethod(request.method);
          let type = isAction ? 'action' : 'loader';
          let runHandler = (handler) => {
            let reject;
            let abortPromise = new Promise((_, r) => (reject = r));
            onReject = () => reject();
            request.signal.addEventListener('abort', onReject);
            let actualHandler = (ctx) => {
              if (typeof handler !== 'function') {
                return Promise.reject(
                  new Error(
                    'You cannot call the handler for a route which defines a boolean "'
                      .concat(type, '" [routeId: ')
                      .concat(match.route.id, ']')
                  )
                );
              }
              return handler(
                {
                  request,
                  params: match.params,
                  context: scopedContext,
                },
                ...(ctx !== void 0 ? [ctx] : [])
              );
            };
            let handlerPromise = (async () => {
              try {
                let val = await (handlerOverride
                  ? handlerOverride((ctx) => actualHandler(ctx))
                  : actualHandler());
                return {
                  type: 'data',
                  result: val,
                };
              } catch (e) {
                return {
                  type: 'error',
                  result: e,
                };
              }
            })();
            return Promise.race([handlerPromise, abortPromise]);
          };
          try {
            let handler = isAction ? match.route.action : match.route.loader;
            if (lazyHandlerPromise || lazyRoutePromise) {
              if (handler) {
                let handlerError;
                let [value] = await Promise.all([
                  // If the handler throws, don't let it immediately bubble out,
                  // since we need to let the lazy() execution finish so we know if this
                  // route has a boundary that can handle the error
                  runHandler(handler).catch((e) => {
                    handlerError = e;
                  }),
                  // Ensure all lazy route promises are resolved before continuing
                  lazyHandlerPromise,
                  lazyRoutePromise,
                ]);
                if (handlerError !== void 0) {
                  throw handlerError;
                }
                result = value;
              } else {
                await lazyHandlerPromise;
                let handler2 = isAction
                  ? match.route.action
                  : match.route.loader;
                if (handler2) {
                  [result] = await Promise.all([
                    runHandler(handler2),
                    lazyRoutePromise,
                  ]);
                } else if (type === 'action') {
                  let url = new URL(request.url);
                  let pathname = url.pathname + url.search;
                  throw getInternalRouterError(405, {
                    method: request.method,
                    pathname,
                    routeId: match.route.id,
                  });
                } else {
                  return {
                    type: 'data' /* data */,
                    result: void 0,
                  };
                }
              }
            } else if (!handler) {
              let url = new URL(request.url);
              let pathname = url.pathname + url.search;
              throw getInternalRouterError(404, {
                pathname,
              });
            } else {
              result = await runHandler(handler);
            }
          } catch (e) {
            return {
              type: 'error' /* error */,
              result: e,
            };
          } finally {
            if (onReject) {
              request.signal.removeEventListener('abort', onReject);
            }
          }
          return result;
        }
        async function convertDataStrategyResultToDataResult(
          dataStrategyResult
        ) {
          let { result, type } = dataStrategyResult;
          if (isResponse(result)) {
            let data2;
            try {
              let contentType = result.headers.get('Content-Type');
              if (contentType && /\bapplication\/json\b/.test(contentType)) {
                if (result.body == null) {
                  data2 = null;
                } else {
                  data2 = await result.json();
                }
              } else {
                data2 = await result.text();
              }
            } catch (e) {
              return {
                type: 'error' /* error */,
                error: e,
              };
            }
            if (type === 'error' /* error */) {
              return {
                type: 'error' /* error */,
                error: new ErrorResponseImpl(
                  result.status,
                  result.statusText,
                  data2
                ),
                statusCode: result.status,
                headers: result.headers,
              };
            }
            return {
              type: 'data' /* data */,
              data: data2,
              statusCode: result.status,
              headers: result.headers,
            };
          }
          if (type === 'error' /* error */) {
            if (isDataWithResponseInit(result)) {
              var _result_init, _result_init1;
              if (result.data instanceof Error) {
                var _result_init2, _result_init3;
                return {
                  type: 'error' /* error */,
                  error: result.data,
                  statusCode:
                    (_result_init2 = result.init) === null ||
                    _result_init2 === void 0
                      ? void 0
                      : _result_init2.status,
                  headers: (
                    (_result_init3 = result.init) === null ||
                    _result_init3 === void 0
                      ? void 0
                      : _result_init3.headers
                  )
                    ? new Headers(result.init.headers)
                    : void 0,
                };
              }
              return {
                type: 'error' /* error */,
                error: new ErrorResponseImpl(
                  ((_result_init = result.init) === null ||
                  _result_init === void 0
                    ? void 0
                    : _result_init.status) || 500,
                  void 0,
                  result.data
                ),
                statusCode: isRouteErrorResponse(result)
                  ? result.status
                  : void 0,
                headers: (
                  (_result_init1 = result.init) === null ||
                  _result_init1 === void 0
                    ? void 0
                    : _result_init1.headers
                )
                  ? new Headers(result.init.headers)
                  : void 0,
              };
            }
            return {
              type: 'error' /* error */,
              error: result,
              statusCode: isRouteErrorResponse(result) ? result.status : void 0,
            };
          }
          if (isDataWithResponseInit(result)) {
            var _result_init4, _result_init5;
            return {
              type: 'data' /* data */,
              data: result.data,
              statusCode:
                (_result_init4 = result.init) === null ||
                _result_init4 === void 0
                  ? void 0
                  : _result_init4.status,
              headers: (
                (_result_init5 = result.init) === null ||
                _result_init5 === void 0
                  ? void 0
                  : _result_init5.headers
              )
                ? new Headers(result.init.headers)
                : void 0,
            };
          }
          return {
            type: 'data' /* data */,
            data: result,
          };
        }
        function normalizeRelativeRoutingRedirectResponse(
          response,
          request,
          routeId,
          matches,
          basename
        ) {
          let location = response.headers.get('Location');
          invariant(
            location,
            'Redirects returned/thrown from loaders/actions must have a Location header'
          );
          if (!ABSOLUTE_URL_REGEX.test(location)) {
            let trimmedMatches = matches.slice(
              0,
              matches.findIndex((m) => m.route.id === routeId) + 1
            );
            location = normalizeTo(
              new URL(request.url),
              trimmedMatches,
              basename,
              location
            );
            response.headers.set('Location', location);
          }
          return response;
        }
        function normalizeRedirectLocation(location, currentUrl, basename) {
          if (ABSOLUTE_URL_REGEX.test(location)) {
            let normalizedLocation = location;
            let url = normalizedLocation.startsWith('//')
              ? new URL(currentUrl.protocol + normalizedLocation)
              : new URL(normalizedLocation);
            let isSameBasename = stripBasename(url.pathname, basename) != null;
            if (url.origin === currentUrl.origin && isSameBasename) {
              return url.pathname + url.search + url.hash;
            }
          }
          return location;
        }
        function createClientSideRequest(
          history,
          location,
          signal,
          submission
        ) {
          let url = history.createURL(stripHashFromPath(location)).toString();
          let init = {
            signal,
          };
          if (submission && isMutationMethod(submission.formMethod)) {
            let { formMethod, formEncType } = submission;
            init.method = formMethod.toUpperCase();
            if (formEncType === 'application/json') {
              init.headers = new Headers({
                'Content-Type': formEncType,
              });
              init.body = JSON.stringify(submission.json);
            } else if (formEncType === 'text/plain') {
              init.body = submission.text;
            } else if (
              formEncType === 'application/x-www-form-urlencoded' &&
              submission.formData
            ) {
              init.body = convertFormDataToSearchParams(submission.formData);
            } else {
              init.body = submission.formData;
            }
          }
          return new Request(url, init);
        }
        function convertFormDataToSearchParams(formData) {
          let searchParams = new URLSearchParams();
          for (let [key, value] of formData.entries()) {
            searchParams.append(
              key,
              typeof value === 'string' ? value : value.name
            );
          }
          return searchParams;
        }
        function convertSearchParamsToFormData(searchParams) {
          let formData = new FormData();
          for (let [key, value] of searchParams.entries()) {
            formData.append(key, value);
          }
          return formData;
        }
        function processRouteLoaderData(matches, results, pendingActionResult) {
          let isStaticHandler =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : false,
            skipLoaderErrorBubbling =
              arguments.length > 4 && arguments[4] !== void 0
                ? arguments[4]
                : false;
          let loaderData = {};
          let errors = null;
          let statusCode;
          let foundError = false;
          let loaderHeaders = {};
          let pendingError =
            pendingActionResult && isErrorResult(pendingActionResult[1])
              ? pendingActionResult[1].error
              : void 0;
          matches.forEach((match) => {
            if (!(match.route.id in results)) {
              return;
            }
            let id = match.route.id;
            let result = results[id];
            invariant(
              !isRedirectResult(result),
              'Cannot handle redirect results in processLoaderData'
            );
            if (isErrorResult(result)) {
              let error = result.error;
              if (pendingError !== void 0) {
                error = pendingError;
                pendingError = void 0;
              }
              errors = errors || {};
              if (skipLoaderErrorBubbling) {
                errors[id] = error;
              } else {
                let boundaryMatch = findNearestBoundary(matches, id);
                if (errors[boundaryMatch.route.id] == null) {
                  errors[boundaryMatch.route.id] = error;
                }
              }
              if (!isStaticHandler) {
                loaderData[id] = ResetLoaderDataSymbol;
              }
              if (!foundError) {
                foundError = true;
                statusCode = isRouteErrorResponse(result.error)
                  ? result.error.status
                  : 500;
              }
              if (result.headers) {
                loaderHeaders[id] = result.headers;
              }
            } else {
              loaderData[id] = result.data;
              if (
                result.statusCode &&
                result.statusCode !== 200 &&
                !foundError
              ) {
                statusCode = result.statusCode;
              }
              if (result.headers) {
                loaderHeaders[id] = result.headers;
              }
            }
          });
          if (pendingError !== void 0 && pendingActionResult) {
            errors = {
              [pendingActionResult[0]]: pendingError,
            };
            if (pendingActionResult[2]) {
              loaderData[pendingActionResult[2]] = void 0;
            }
          }
          return {
            loaderData,
            errors,
            statusCode: statusCode || 200,
            loaderHeaders,
          };
        }
        function processLoaderData(
          state,
          matches,
          results,
          pendingActionResult,
          revalidatingFetchers,
          fetcherResults
        ) {
          let { loaderData, errors } = processRouteLoaderData(
            matches,
            results,
            pendingActionResult
          );
          revalidatingFetchers
            .filter((f) => !f.matches || f.matches.some((m) => m.shouldLoad))
            .forEach((rf) => {
              let { key, match, controller } = rf;
              let result = fetcherResults[key];
              invariant(result, 'Did not find corresponding fetcher result');
              if (controller && controller.signal.aborted) {
                return;
              } else if (isErrorResult(result)) {
                let boundaryMatch = findNearestBoundary(
                  state.matches,
                  match === null || match === void 0 ? void 0 : match.route.id
                );
                if (!(errors && errors[boundaryMatch.route.id])) {
                  errors = {
                    ...errors,
                    [boundaryMatch.route.id]: result.error,
                  };
                }
                state.fetchers.delete(key);
              } else if (isRedirectResult(result)) {
                invariant(false, 'Unhandled fetcher revalidation redirect');
              } else {
                let doneFetcher = getDoneFetcher(result.data);
                state.fetchers.set(key, doneFetcher);
              }
            });
          return {
            loaderData,
            errors,
          };
        }
        function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
          let mergedLoaderData = Object.entries(newLoaderData)
            .filter((param) => {
              let [, v] = param;
              return v !== ResetLoaderDataSymbol;
            })
            .reduce((merged, param) => {
              let [k, v] = param;
              merged[k] = v;
              return merged;
            }, {});
          for (let match of matches) {
            let id = match.route.id;
            if (
              !newLoaderData.hasOwnProperty(id) &&
              loaderData.hasOwnProperty(id) &&
              match.route.loader
            ) {
              mergedLoaderData[id] = loaderData[id];
            }
            if (errors && errors.hasOwnProperty(id)) {
              break;
            }
          }
          return mergedLoaderData;
        }
        function getActionDataForCommit(pendingActionResult) {
          if (!pendingActionResult) {
            return {};
          }
          return isErrorResult(pendingActionResult[1])
            ? {
                // Clear out prior actionData on errors
                actionData: {},
              }
            : {
                actionData: {
                  [pendingActionResult[0]]: pendingActionResult[1].data,
                },
              };
        }
        function findNearestBoundary(matches, routeId) {
          let eligibleMatches = routeId
            ? matches.slice(
                0,
                matches.findIndex((m) => m.route.id === routeId) + 1
              )
            : [...matches];
          return (
            eligibleMatches
              .reverse()
              .find((m) => m.route.hasErrorBoundary === true) || matches[0]
          );
        }
        function getShortCircuitMatches(routes) {
          let route =
            routes.length === 1
              ? routes[0]
              : routes.find((r) => r.index || !r.path || r.path === '/') || {
                  id: '__shim-error-route__',
                };
          return {
            matches: [
              {
                params: {},
                pathname: '',
                pathnameBase: '',
                route,
              },
            ],
            route,
          };
        }
        function getInternalRouterError(status) {
          let { pathname, routeId, method, type, message } =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          let statusText = 'Unknown Server Error';
          let errorMessage = 'Unknown @remix-run/router error';
          if (status === 400) {
            statusText = 'Bad Request';
            if (method && pathname && routeId) {
              errorMessage = 'You made a '
                .concat(method, ' request to "')
                .concat(
                  pathname,
                  '" but did not provide a `loader` for route "'
                )
                .concat(
                  routeId,
                  '", so there is no way to handle the request.'
                );
            } else if (type === 'invalid-body') {
              errorMessage = 'Unable to encode submission body';
            }
          } else if (status === 403) {
            statusText = 'Forbidden';
            errorMessage = 'Route "'
              .concat(routeId, '" does not match URL "')
              .concat(pathname, '"');
          } else if (status === 404) {
            statusText = 'Not Found';
            errorMessage = 'No route matches URL "'.concat(pathname, '"');
          } else if (status === 405) {
            statusText = 'Method Not Allowed';
            if (method && pathname && routeId) {
              errorMessage = 'You made a '
                .concat(method.toUpperCase(), ' request to "')
                .concat(
                  pathname,
                  '" but did not provide an `action` for route "'
                )
                .concat(
                  routeId,
                  '", so there is no way to handle the request.'
                );
            } else if (method) {
              errorMessage = 'Invalid request method "'.concat(
                method.toUpperCase(),
                '"'
              );
            }
          }
          return new ErrorResponseImpl(
            status || 500,
            statusText,
            new Error(errorMessage),
            true
          );
        }
        function findRedirect(results) {
          let entries = Object.entries(results);
          for (let i = entries.length - 1; i >= 0; i--) {
            let [key, result] = entries[i];
            if (isRedirectResult(result)) {
              return {
                key,
                result,
              };
            }
          }
        }
        function stripHashFromPath(path) {
          let parsedPath = typeof path === 'string' ? parsePath(path) : path;
          return createPath({
            ...parsedPath,
            hash: '',
          });
        }
        function isHashChangeOnly(a, b) {
          if (a.pathname !== b.pathname || a.search !== b.search) {
            return false;
          }
          if (a.hash === '') {
            return b.hash !== '';
          } else if (a.hash === b.hash) {
            return true;
          } else if (b.hash !== '') {
            return true;
          }
          return false;
        }
        function isDataStrategyResult(result) {
          return (
            result != null &&
            typeof result === 'object' &&
            'type' in result &&
            'result' in result &&
            (result.type === 'data' /* data */ ||
              result.type === 'error') /* error */
          );
        }
        function isRedirectDataStrategyResult(result) {
          return (
            isResponse(result.result) &&
            redirectStatusCodes.has(result.result.status)
          );
        }
        function isErrorResult(result) {
          return result.type === 'error' /* error */;
        }
        function isRedirectResult(result) {
          return (result && result.type) === 'redirect' /* redirect */;
        }
        function isDataWithResponseInit(value) {
          return (
            typeof value === 'object' &&
            value != null &&
            'type' in value &&
            'data' in value &&
            'init' in value &&
            value.type === 'DataWithResponseInit'
          );
        }
        function isResponse(value) {
          return (
            value != null &&
            typeof value.status === 'number' &&
            typeof value.statusText === 'string' &&
            typeof value.headers === 'object' &&
            typeof value.body !== 'undefined'
          );
        }
        function isRedirectStatusCode(statusCode) {
          return redirectStatusCodes.has(statusCode);
        }
        function isRedirectResponse(result) {
          return (
            isResponse(result) &&
            isRedirectStatusCode(result.status) &&
            result.headers.has('Location')
          );
        }
        function isValidMethod(method) {
          return validRequestMethods.has(method.toUpperCase());
        }
        function isMutationMethod(method) {
          return validMutationMethods.has(method.toUpperCase());
        }
        function hasNakedIndexQuery(search) {
          return new URLSearchParams(search)
            .getAll('index')
            .some((v) => v === '');
        }
        function getTargetMatch(matches, location) {
          let search =
            typeof location === 'string'
              ? parsePath(location).search
              : location.search;
          if (
            matches[matches.length - 1].route.index &&
            hasNakedIndexQuery(search || '')
          ) {
            return matches[matches.length - 1];
          }
          let pathMatches = getPathContributingMatches(matches);
          return pathMatches[pathMatches.length - 1];
        }
        function getSubmissionFromNavigation(navigation) {
          let { formMethod, formAction, formEncType, text, formData, json } =
            navigation;
          if (!formMethod || !formAction || !formEncType) {
            return;
          }
          if (text != null) {
            return {
              formMethod,
              formAction,
              formEncType,
              formData: void 0,
              json: void 0,
              text,
            };
          } else if (formData != null) {
            return {
              formMethod,
              formAction,
              formEncType,
              formData,
              json: void 0,
              text: void 0,
            };
          } else if (json !== void 0) {
            return {
              formMethod,
              formAction,
              formEncType,
              formData: void 0,
              json,
              text: void 0,
            };
          }
        }
        function getLoadingNavigation(location, submission) {
          if (submission) {
            let navigation = {
              state: 'loading',
              location,
              formMethod: submission.formMethod,
              formAction: submission.formAction,
              formEncType: submission.formEncType,
              formData: submission.formData,
              json: submission.json,
              text: submission.text,
            };
            return navigation;
          } else {
            let navigation = {
              state: 'loading',
              location,
              formMethod: void 0,
              formAction: void 0,
              formEncType: void 0,
              formData: void 0,
              json: void 0,
              text: void 0,
            };
            return navigation;
          }
        }
        function getSubmittingNavigation(location, submission) {
          let navigation = {
            state: 'submitting',
            location,
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text,
          };
          return navigation;
        }
        function getLoadingFetcher(submission, data2) {
          if (submission) {
            let fetcher = {
              state: 'loading',
              formMethod: submission.formMethod,
              formAction: submission.formAction,
              formEncType: submission.formEncType,
              formData: submission.formData,
              json: submission.json,
              text: submission.text,
              data: data2,
            };
            return fetcher;
          } else {
            let fetcher = {
              state: 'loading',
              formMethod: void 0,
              formAction: void 0,
              formEncType: void 0,
              formData: void 0,
              json: void 0,
              text: void 0,
              data: data2,
            };
            return fetcher;
          }
        }
        function getSubmittingFetcher(submission, existingFetcher) {
          let fetcher = {
            state: 'submitting',
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text,
            data: existingFetcher ? existingFetcher.data : void 0,
          };
          return fetcher;
        }
        function getDoneFetcher(data2) {
          let fetcher = {
            state: 'idle',
            formMethod: void 0,
            formAction: void 0,
            formEncType: void 0,
            formData: void 0,
            json: void 0,
            text: void 0,
            data: data2,
          };
          return fetcher;
        }
        function restoreAppliedTransitions(_window, transitions) {
          try {
            let sessionPositions = _window.sessionStorage.getItem(
              TRANSITIONS_STORAGE_KEY
            );
            if (sessionPositions) {
              let json = JSON.parse(sessionPositions);
              for (let [k, v] of Object.entries(json || {})) {
                if (v && Array.isArray(v)) {
                  transitions.set(k, new Set(v || []));
                }
              }
            }
          } catch (e) {}
        }
        function persistAppliedTransitions(_window, transitions) {
          if (transitions.size > 0) {
            let json = {};
            for (let [k, v] of transitions) {
              json[k] = [...v];
            }
            try {
              _window.sessionStorage.setItem(
                TRANSITIONS_STORAGE_KEY,
                JSON.stringify(json)
              );
            } catch (error) {
              warning(
                false,
                'Failed to save applied view transitions in sessionStorage ('.concat(
                  error,
                  ').'
                )
              );
            }
          }
        }
        function createDeferred() {
          let resolve;
          let reject;
          let promise = new Promise((res, rej) => {
            resolve = async (val) => {
              res(val);
              try {
                await promise;
              } catch (e) {}
            };
            reject = async (error) => {
              rej(error);
              try {
                await promise;
              } catch (e) {}
            };
          });
          return {
            promise,
            //@ts-ignore
            resolve,
            //@ts-ignore
            reject,
          };
        }
        var DataRouterContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ](null);
        DataRouterContext.displayName = 'DataRouter';
        var DataRouterStateContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ](null);
        DataRouterStateContext.displayName = 'DataRouterState';
        var ViewTransitionContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ]({
            isTransitioning: false,
          });
        ViewTransitionContext.displayName = 'ViewTransition';
        var FetchersContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ](/* @__PURE__ */ new Map());
        FetchersContext.displayName = 'Fetchers';
        var AwaitContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ](null);
        AwaitContext.displayName = 'Await';
        var NavigationContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ](null);
        NavigationContext.displayName = 'Navigation';
        var LocationContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ](null);
        LocationContext.displayName = 'Location';
        var RouteContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ]({
            outlet: null,
            matches: [],
            isDataRoute: false,
          });
        RouteContext.displayName = 'Route';
        var RouteErrorContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ](null);
        RouteErrorContext.displayName = 'RouteError';
        var ENABLE_DEV_WARNINGS = true;
        function useHref(to) {
          let { relative } =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          invariant(
            useInRouterContext(),
            'useHref() may be used only in the context of a <Router> component.'
          );
          let { basename, navigator } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](NavigationContext);
          let { hash, pathname, search } = useResolvedPath(to, {
            relative,
          });
          let joinedPathname = pathname;
          if (basename !== '/') {
            joinedPathname =
              pathname === '/' ? basename : joinPaths([basename, pathname]);
          }
          return navigator.createHref({
            pathname: joinedPathname,
            search,
            hash,
          });
        }
        function useInRouterContext() {
          return (
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](LocationContext) != null
          );
        }
        function useLocation() {
          invariant(
            useInRouterContext(),
            'useLocation() may be used only in the context of a <Router> component.'
          );
          return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useContext'
          ](LocationContext).location;
        }
        function useNavigationType() {
          return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useContext'
          ](LocationContext).navigationType;
        }
        function useMatch(pattern) {
          invariant(
            useInRouterContext(),
            'useMatch() may be used only in the context of a <Router> component.'
          );
          let { pathname } = useLocation();
          return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ](
            {
              'useMatch.useMemo': () =>
                matchPath(pattern, decodePath(pathname)),
            }['useMatch.useMemo'],
            [pathname, pattern]
          );
        }
        var navigateEffectWarning =
          'You should call navigate() in a React.useEffect(), not when your component is first rendered.';
        function useIsomorphicLayoutEffect(cb) {
          let isStatic =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](NavigationContext).static;
          if (!isStatic) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useLayoutEffect'
            ](cb);
          }
        }
        function useNavigate() {
          let { isDataRoute } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteContext);
          return isDataRoute ? useNavigateStable() : useNavigateUnstable();
        }
        function useNavigateUnstable() {
          invariant(
            useInRouterContext(),
            'useNavigate() may be used only in the context of a <Router> component.'
          );
          let dataRouterContext =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](DataRouterContext);
          let { basename, navigator } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](NavigationContext);
          let { matches } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteContext);
          let { pathname: locationPathname } = useLocation();
          let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
          let activeRef =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ](false);
          useIsomorphicLayoutEffect(
            {
              'useNavigateUnstable.useIsomorphicLayoutEffect': () => {
                activeRef.current = true;
              },
            }['useNavigateUnstable.useIsomorphicLayoutEffect']
          );
          let navigate =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'useNavigateUnstable.useCallback[navigate]': function (to) {
                  let options =
                    arguments.length > 1 && arguments[1] !== void 0
                      ? arguments[1]
                      : {};
                  warning(activeRef.current, navigateEffectWarning);
                  if (!activeRef.current) return;
                  if (typeof to === 'number') {
                    navigator.go(to);
                    return;
                  }
                  let path = resolveTo(
                    to,
                    JSON.parse(routePathnamesJson),
                    locationPathname,
                    options.relative === 'path'
                  );
                  if (dataRouterContext == null && basename !== '/') {
                    path.pathname =
                      path.pathname === '/'
                        ? basename
                        : joinPaths([basename, path.pathname]);
                  }
                  (!!options.replace ? navigator.replace : navigator.push)(
                    path,
                    options.state,
                    options
                  );
                },
              }['useNavigateUnstable.useCallback[navigate]'],
              [
                basename,
                navigator,
                routePathnamesJson,
                locationPathname,
                dataRouterContext,
              ]
            );
          return navigate;
        }
        var OutletContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ](null);
        function useOutletContext() {
          return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useContext'
          ](OutletContext);
        }
        function useOutlet(context) {
          let outlet =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteContext).outlet;
          if (outlet) {
            return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              OutletContext.Provider,
              {
                value: context,
              },
              outlet
            );
          }
          return outlet;
        }
        function useParams() {
          let { matches } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteContext);
          let routeMatch = matches[matches.length - 1];
          return routeMatch ? routeMatch.params : {};
        }
        function useResolvedPath(to) {
          let { relative } =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          let { matches } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteContext);
          let { pathname: locationPathname } = useLocation();
          let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
          return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ](
            {
              'useResolvedPath.useMemo': () =>
                resolveTo(
                  to,
                  JSON.parse(routePathnamesJson),
                  locationPathname,
                  relative === 'path'
                ),
            }['useResolvedPath.useMemo'],
            [to, routePathnamesJson, locationPathname, relative]
          );
        }
        function useRoutes(routes, locationArg) {
          return useRoutesImpl(routes, locationArg);
        }
        function useRoutesImpl(routes, locationArg, dataRouterState, future) {
          invariant(
            useInRouterContext(),
            'useRoutes() may be used only in the context of a <Router> component.'
          );
          let { navigator } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](NavigationContext);
          let { matches: parentMatches } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteContext);
          let routeMatch = parentMatches[parentMatches.length - 1];
          let parentParams = routeMatch ? routeMatch.params : {};
          let parentPathname = routeMatch ? routeMatch.pathname : '/';
          let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : '/';
          let parentRoute = routeMatch && routeMatch.route;
          if (('TURBOPACK compile-time truthy', 1)) {
            let parentPath = (parentRoute && parentRoute.path) || '';
            warningOnce(
              parentPathname,
              !parentRoute ||
                parentPath.endsWith('*') ||
                parentPath.endsWith('*?'),
              'You rendered descendant <Routes> (or called `useRoutes()`) at "'
                .concat(parentPathname, '" (under <Route path="')
                .concat(
                  parentPath,
                  '">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won\'t match anymore and therefore the child routes will never render.\n\nPlease change the parent <Route path="'
                )
                .concat(parentPath, '"> to <Route path="')
                .concat(
                  parentPath === '/' ? '*' : ''.concat(parentPath, '/*'),
                  '">.'
                )
            );
          }
          let locationFromContext = useLocation();
          let location;
          if (locationArg) {
            var _parsedLocationArg_pathname;
            let parsedLocationArg =
              typeof locationArg === 'string'
                ? parsePath(locationArg)
                : locationArg;
            invariant(
              parentPathnameBase === '/' ||
                ((_parsedLocationArg_pathname = parsedLocationArg.pathname) ===
                  null || _parsedLocationArg_pathname === void 0
                  ? void 0
                  : _parsedLocationArg_pathname.startsWith(parentPathnameBase)),
              'When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "'
                .concat(parentPathnameBase, '" but pathname "')
                .concat(
                  parsedLocationArg.pathname,
                  '" was given in the `location` prop.'
                )
            );
            location = parsedLocationArg;
          } else {
            location = locationFromContext;
          }
          let pathname = location.pathname || '/';
          let remainingPathname = pathname;
          if (parentPathnameBase !== '/') {
            let parentSegments = parentPathnameBase
              .replace(/^\//, '')
              .split('/');
            let segments = pathname.replace(/^\//, '').split('/');
            remainingPathname =
              '/' + segments.slice(parentSegments.length).join('/');
          }
          let matches = matchRoutes(routes, {
            pathname: remainingPathname,
          });
          if (('TURBOPACK compile-time truthy', 1)) {
            warning(
              parentRoute || matches != null,
              'No routes matched location "'
                .concat(location.pathname)
                .concat(location.search)
                .concat(location.hash, '" ')
            );
            warning(
              matches == null ||
                matches[matches.length - 1].route.element !== void 0 ||
                matches[matches.length - 1].route.Component !== void 0 ||
                matches[matches.length - 1].route.lazy !== void 0,
              'Matched leaf route at location "'
                .concat(location.pathname)
                .concat(location.search)
                .concat(
                  location.hash,
                  '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.'
                )
            );
          }
          let renderedMatches = _renderMatches(
            matches &&
              matches.map((match) =>
                Object.assign({}, match, {
                  params: Object.assign({}, parentParams, match.params),
                  pathname: joinPaths([
                    parentPathnameBase,
                    // Re-encode pathnames that were decoded inside matchRoutes
                    navigator.encodeLocation
                      ? navigator.encodeLocation(match.pathname).pathname
                      : match.pathname,
                  ]),
                  pathnameBase:
                    match.pathnameBase === '/'
                      ? parentPathnameBase
                      : joinPaths([
                          parentPathnameBase,
                          // Re-encode pathnames that were decoded inside matchRoutes
                          navigator.encodeLocation
                            ? navigator.encodeLocation(match.pathnameBase)
                                .pathname
                            : match.pathnameBase,
                        ]),
                })
              ),
            parentMatches,
            dataRouterState,
            future
          );
          if (locationArg && renderedMatches) {
            return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              LocationContext.Provider,
              {
                value: {
                  location: {
                    pathname: '/',
                    search: '',
                    hash: '',
                    state: null,
                    key: 'default',
                    ...location,
                  },
                  navigationType: 'POP' /* Pop */,
                },
              },
              renderedMatches
            );
          }
          return renderedMatches;
        }
        function DefaultErrorComponent() {
          let error = useRouteError();
          let message = isRouteErrorResponse(error)
            ? ''.concat(error.status, ' ').concat(error.statusText)
            : error instanceof Error
              ? error.message
              : JSON.stringify(error);
          let stack = error instanceof Error ? error.stack : null;
          let lightgrey = 'rgba(200,200,200, 0.5)';
          let preStyles = {
            padding: '0.5rem',
            backgroundColor: lightgrey,
          };
          let codeStyles = {
            padding: '2px 4px',
            backgroundColor: lightgrey,
          };
          let devInfo = null;
          if (('TURBOPACK compile-time truthy', 1)) {
            console.error(
              'Error handled by React Router default ErrorBoundary:',
              error
            );
            devInfo =
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'Fragment'
                ],
                null,
                /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ]('p', null, '\u{1F4BF} Hey developer \u{1F44B}'),
                /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](
                  'p',
                  null,
                  'You can provide a way better UX than this when your app throws errors by providing your own ',
                  /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](
                    'code',
                    {
                      style: codeStyles,
                    },
                    'ErrorBoundary'
                  ),
                  ' or',
                  ' ',
                  /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](
                    'code',
                    {
                      style: codeStyles,
                    },
                    'errorElement'
                  ),
                  ' prop on your route.'
                )
              );
          }
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Fragment'
            ],
            null,
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ]('h2', null, 'Unexpected Application Error!'),
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              'h3',
              {
                style: {
                  fontStyle: 'italic',
                },
              },
              message
            ),
            stack
              ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](
                  'pre',
                  {
                    style: preStyles,
                  },
                  stack
                )
              : null,
            devInfo
          );
        }
        var defaultErrorElement =
          /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](DefaultErrorComponent, null);
        var RenderErrorBoundary = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
          'Component'
        ] {
          static getDerivedStateFromError(error) {
            return {
              error,
            };
          }
          static getDerivedStateFromProps(props, state) {
            if (
              state.location !== props.location ||
              (state.revalidation !== 'idle' && props.revalidation === 'idle')
            ) {
              return {
                error: props.error,
                location: props.location,
                revalidation: props.revalidation,
              };
            }
            return {
              error: props.error !== void 0 ? props.error : state.error,
              location: state.location,
              revalidation: props.revalidation || state.revalidation,
            };
          }
          componentDidCatch(error, errorInfo) {
            console.error(
              'React Router caught the following error during render',
              error,
              errorInfo
            );
          }
          render() {
            return this.state.error !== void 0
              ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](
                  RouteContext.Provider,
                  {
                    value: this.props.routeContext,
                  },
                  /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](RouteErrorContext.Provider, {
                    value: this.state.error,
                    children: this.props.component,
                  })
                )
              : this.props.children;
          }
          constructor(props) {
            super(props);
            this.state = {
              location: props.location,
              revalidation: props.revalidation,
              error: props.error,
            };
          }
        };
        function RenderedRoute(param) {
          let { routeContext, match, children } = param;
          let dataRouterContext =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](DataRouterContext);
          if (
            dataRouterContext &&
            dataRouterContext.static &&
            dataRouterContext.staticContext &&
            (match.route.errorElement || match.route.ErrorBoundary)
          ) {
            dataRouterContext.staticContext._deepestRenderedBoundaryId =
              match.route.id;
          }
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            RouteContext.Provider,
            {
              value: routeContext,
            },
            children
          );
        }
        function _renderMatches(matches) {
          let parentMatches =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : [],
            dataRouterState =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : null,
            future =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : null;
          if (matches == null) {
            if (!dataRouterState) {
              return null;
            }
            if (dataRouterState.errors) {
              matches = dataRouterState.matches;
            } else if (
              parentMatches.length === 0 &&
              !dataRouterState.initialized &&
              dataRouterState.matches.length > 0
            ) {
              matches = dataRouterState.matches;
            } else {
              return null;
            }
          }
          let renderedMatches = matches;
          let errors =
            dataRouterState === null || dataRouterState === void 0
              ? void 0
              : dataRouterState.errors;
          if (errors != null) {
            let errorIndex = renderedMatches.findIndex(
              (m) =>
                m.route.id &&
                (errors === null || errors === void 0
                  ? void 0
                  : errors[m.route.id]) !== void 0
            );
            invariant(
              errorIndex >= 0,
              'Could not find a matching route for errors on route IDs: '.concat(
                Object.keys(errors).join(',')
              )
            );
            renderedMatches = renderedMatches.slice(
              0,
              Math.min(renderedMatches.length, errorIndex + 1)
            );
          }
          let renderFallback = false;
          let fallbackIndex = -1;
          if (dataRouterState) {
            for (let i = 0; i < renderedMatches.length; i++) {
              let match = renderedMatches[i];
              if (
                match.route.HydrateFallback ||
                match.route.hydrateFallbackElement
              ) {
                fallbackIndex = i;
              }
              if (match.route.id) {
                let { loaderData, errors: errors2 } = dataRouterState;
                let needsToRunLoader =
                  match.route.loader &&
                  !loaderData.hasOwnProperty(match.route.id) &&
                  (!errors2 || errors2[match.route.id] === void 0);
                if (match.route.lazy || needsToRunLoader) {
                  renderFallback = true;
                  if (fallbackIndex >= 0) {
                    renderedMatches = renderedMatches.slice(
                      0,
                      fallbackIndex + 1
                    );
                  } else {
                    renderedMatches = [renderedMatches[0]];
                  }
                  break;
                }
              }
            }
          }
          return renderedMatches.reduceRight((outlet, match, index) => {
            let error;
            let shouldRenderHydrateFallback = false;
            let errorElement = null;
            let hydrateFallbackElement = null;
            if (dataRouterState) {
              error =
                errors && match.route.id ? errors[match.route.id] : void 0;
              errorElement = match.route.errorElement || defaultErrorElement;
              if (renderFallback) {
                if (fallbackIndex < 0 && index === 0) {
                  warningOnce(
                    'route-fallback',
                    false,
                    'No `HydrateFallback` element provided to render during initial hydration'
                  );
                  shouldRenderHydrateFallback = true;
                  hydrateFallbackElement = null;
                } else if (fallbackIndex === index) {
                  shouldRenderHydrateFallback = true;
                  hydrateFallbackElement =
                    match.route.hydrateFallbackElement || null;
                }
              }
            }
            let matches2 = parentMatches.concat(
              renderedMatches.slice(0, index + 1)
            );
            let getChildren = () => {
              let children;
              if (error) {
                children = errorElement;
              } else if (shouldRenderHydrateFallback) {
                children = hydrateFallbackElement;
              } else if (match.route.Component) {
                children =
                  /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](match.route.Component, null);
              } else if (match.route.element) {
                children = match.route.element;
              } else {
                children = outlet;
              }
              return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](RenderedRoute, {
                match,
                routeContext: {
                  outlet,
                  matches: matches2,
                  isDataRoute: dataRouterState != null,
                },
                children,
              });
            };
            return dataRouterState &&
              (match.route.ErrorBoundary ||
                match.route.errorElement ||
                index === 0)
              ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](RenderErrorBoundary, {
                  location: dataRouterState.location,
                  revalidation: dataRouterState.revalidation,
                  component: errorElement,
                  error,
                  children: getChildren(),
                  routeContext: {
                    outlet: null,
                    matches: matches2,
                    isDataRoute: true,
                  },
                })
              : getChildren();
          }, null);
        }
        function getDataRouterConsoleError(hookName) {
          return ''.concat(
            hookName,
            ' must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.'
          );
        }
        function useDataRouterContext(hookName) {
          let ctx =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](DataRouterContext);
          invariant(ctx, getDataRouterConsoleError(hookName));
          return ctx;
        }
        function useDataRouterState(hookName) {
          let state =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](DataRouterStateContext);
          invariant(state, getDataRouterConsoleError(hookName));
          return state;
        }
        function useRouteContext(hookName) {
          let route =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteContext);
          invariant(route, getDataRouterConsoleError(hookName));
          return route;
        }
        function useCurrentRouteId(hookName) {
          let route = useRouteContext(hookName);
          let thisRoute = route.matches[route.matches.length - 1];
          invariant(
            thisRoute.route.id,
            ''.concat(
              hookName,
              ' can only be used on routes that contain a unique "id"'
            )
          );
          return thisRoute.route.id;
        }
        function useRouteId() {
          return useCurrentRouteId('useRouteId' /* UseRouteId */);
        }
        function useNavigation() {
          let state = useDataRouterState('useNavigation' /* UseNavigation */);
          return state.navigation;
        }
        function useRevalidator() {
          let dataRouterContext = useDataRouterContext(
            'useRevalidator' /* UseRevalidator */
          );
          let state = useDataRouterState('useRevalidator' /* UseRevalidator */);
          let revalidate =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'useRevalidator.useCallback[revalidate]': async () => {
                  await dataRouterContext.router.revalidate();
                },
              }['useRevalidator.useCallback[revalidate]'],
              [dataRouterContext.router]
            );
          return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ](
            {
              'useRevalidator.useMemo': () => ({
                revalidate,
                state: state.revalidation,
              }),
            }['useRevalidator.useMemo'],
            [revalidate, state.revalidation]
          );
        }
        function useMatches() {
          let { matches, loaderData } = useDataRouterState(
            'useMatches' /* UseMatches */
          );
          return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ](
            {
              'useMatches.useMemo': () =>
                matches.map(
                  {
                    'useMatches.useMemo': (m) =>
                      convertRouteMatchToUiMatch(m, loaderData),
                  }['useMatches.useMemo']
                ),
            }['useMatches.useMemo'],
            [matches, loaderData]
          );
        }
        function useLoaderData() {
          let state = useDataRouterState('useLoaderData' /* UseLoaderData */);
          let routeId = useCurrentRouteId('useLoaderData' /* UseLoaderData */);
          return state.loaderData[routeId];
        }
        function useRouteLoaderData(routeId) {
          let state = useDataRouterState(
            'useRouteLoaderData' /* UseRouteLoaderData */
          );
          return state.loaderData[routeId];
        }
        function useActionData() {
          let state = useDataRouterState('useActionData' /* UseActionData */);
          let routeId = useCurrentRouteId('useLoaderData' /* UseLoaderData */);
          return state.actionData ? state.actionData[routeId] : void 0;
        }
        function useRouteError() {
          var _state_errors;
          let error =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteErrorContext);
          let state = useDataRouterState('useRouteError' /* UseRouteError */);
          let routeId = useCurrentRouteId('useRouteError' /* UseRouteError */);
          if (error !== void 0) {
            return error;
          }
          return (_state_errors = state.errors) === null ||
            _state_errors === void 0
            ? void 0
            : _state_errors[routeId];
        }
        function useAsyncValue() {
          let value =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](AwaitContext);
          return value === null || value === void 0 ? void 0 : value._data;
        }
        function useAsyncError() {
          let value =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](AwaitContext);
          return value === null || value === void 0 ? void 0 : value._error;
        }
        var blockerId = 0;
        function useBlocker(shouldBlock) {
          let { router, basename } = useDataRouterContext(
            'useBlocker' /* UseBlocker */
          );
          let state = useDataRouterState('useBlocker' /* UseBlocker */);
          let [blockerKey, setBlockerKey] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]('');
          let blockerFunction =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'useBlocker.useCallback[blockerFunction]': (arg) => {
                  if (typeof shouldBlock !== 'function') {
                    return !!shouldBlock;
                  }
                  if (basename === '/') {
                    return shouldBlock(arg);
                  }
                  let { currentLocation, nextLocation, historyAction } = arg;
                  return shouldBlock({
                    currentLocation: {
                      ...currentLocation,
                      pathname:
                        stripBasename(currentLocation.pathname, basename) ||
                        currentLocation.pathname,
                    },
                    nextLocation: {
                      ...nextLocation,
                      pathname:
                        stripBasename(nextLocation.pathname, basename) ||
                        nextLocation.pathname,
                    },
                    historyAction,
                  });
                },
              }['useBlocker.useCallback[blockerFunction]'],
              [basename, shouldBlock]
            );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'useBlocker.useEffect': () => {
                let key = String(++blockerId);
                setBlockerKey(key);
                return {
                  'useBlocker.useEffect': () => router.deleteBlocker(key),
                }['useBlocker.useEffect'];
              },
            }['useBlocker.useEffect'],
            [router]
          );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'useBlocker.useEffect': () => {
                if (blockerKey !== '') {
                  router.getBlocker(blockerKey, blockerFunction);
                }
              },
            }['useBlocker.useEffect'],
            [router, blockerKey, blockerFunction]
          );
          return blockerKey && state.blockers.has(blockerKey)
            ? state.blockers.get(blockerKey)
            : IDLE_BLOCKER;
        }
        function useNavigateStable() {
          let { router } = useDataRouterContext(
            'useNavigate' /* UseNavigateStable */
          );
          let id = useCurrentRouteId('useNavigate' /* UseNavigateStable */);
          let activeRef =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ](false);
          useIsomorphicLayoutEffect(
            {
              'useNavigateStable.useIsomorphicLayoutEffect': () => {
                activeRef.current = true;
              },
            }['useNavigateStable.useIsomorphicLayoutEffect']
          );
          let navigate =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'useNavigateStable.useCallback[navigate]': async function (to) {
                  let options =
                    arguments.length > 1 && arguments[1] !== void 0
                      ? arguments[1]
                      : {};
                  warning(activeRef.current, navigateEffectWarning);
                  if (!activeRef.current) return;
                  if (typeof to === 'number') {
                    router.navigate(to);
                  } else {
                    await router.navigate(to, {
                      fromRouteId: id,
                      ...options,
                    });
                  }
                },
              }['useNavigateStable.useCallback[navigate]'],
              [router, id]
            );
          return navigate;
        }
        var alreadyWarned = {};
        function warningOnce(key, cond, message) {
          if (!cond && !alreadyWarned[key]) {
            alreadyWarned[key] = true;
            warning(false, message);
          }
        }
        // lib/server-runtime/warnings.ts
        var alreadyWarned2 = {};
        function warnOnce(condition, message) {
          if (!condition && !alreadyWarned2[message]) {
            alreadyWarned2[message] = true;
            console.warn(message);
          }
        }
        // lib/components.tsx
        function mapRouteProperties(route) {
          let updates = {
            // Note: this check also occurs in createRoutesFromChildren so update
            // there if you change this -- please and thank you!
            hasErrorBoundary:
              route.hasErrorBoundary ||
              route.ErrorBoundary != null ||
              route.errorElement != null,
          };
          if (route.Component) {
            if (('TURBOPACK compile-time truthy', 1)) {
              if (route.element) {
                warning(
                  false,
                  'You should not include both `Component` and `element` on your route - `Component` will be used.'
                );
              }
            }
            Object.assign(updates, {
              element:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](route.Component),
              Component: void 0,
            });
          }
          if (route.HydrateFallback) {
            if (('TURBOPACK compile-time truthy', 1)) {
              if (route.hydrateFallbackElement) {
                warning(
                  false,
                  'You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used.'
                );
              }
            }
            Object.assign(updates, {
              hydrateFallbackElement:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](route.HydrateFallback),
              HydrateFallback: void 0,
            });
          }
          if (route.ErrorBoundary) {
            if (('TURBOPACK compile-time truthy', 1)) {
              if (route.errorElement) {
                warning(
                  false,
                  'You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used.'
                );
              }
            }
            Object.assign(updates, {
              errorElement:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](route.ErrorBoundary),
              ErrorBoundary: void 0,
            });
          }
          return updates;
        }
        var hydrationRouteProperties = [
          'HydrateFallback',
          'hydrateFallbackElement',
        ];
        function createMemoryRouter(routes, opts) {
          return createRouter({
            basename: opts === null || opts === void 0 ? void 0 : opts.basename,
            unstable_getContext:
              opts === null || opts === void 0
                ? void 0
                : opts.unstable_getContext,
            future: opts === null || opts === void 0 ? void 0 : opts.future,
            history: createMemoryHistory({
              initialEntries:
                opts === null || opts === void 0 ? void 0 : opts.initialEntries,
              initialIndex:
                opts === null || opts === void 0 ? void 0 : opts.initialIndex,
            }),
            hydrationData:
              opts === null || opts === void 0 ? void 0 : opts.hydrationData,
            routes,
            hydrationRouteProperties,
            mapRouteProperties,
            dataStrategy:
              opts === null || opts === void 0 ? void 0 : opts.dataStrategy,
            patchRoutesOnNavigation:
              opts === null || opts === void 0
                ? void 0
                : opts.patchRoutesOnNavigation,
          }).initialize();
        }
        var Deferred = class {
          constructor() {
            this.status = 'pending';
            this.promise = new Promise((resolve, reject) => {
              this.resolve = (value) => {
                if (this.status === 'pending') {
                  this.status = 'resolved';
                  resolve(value);
                }
              };
              this.reject = (reason) => {
                if (this.status === 'pending') {
                  this.status = 'rejected';
                  reject(reason);
                }
              };
            });
          }
        };
        function RouterProvider(param) {
          let { router, flushSync: reactDomFlushSyncImpl } = param;
          let [state, setStateImpl] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ](router.state);
          let [pendingState, setPendingState] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]();
          let [vtContext, setVtContext] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]({
              isTransitioning: false,
            });
          let [renderDfd, setRenderDfd] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]();
          let [transition, setTransition] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]();
          let [interruption, setInterruption] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]();
          let fetcherData =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ](/* @__PURE__ */ new Map());
          let setState =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'RouterProvider.useCallback[setState]': (newState, param) => {
                  let { deletedFetchers, flushSync, viewTransitionOpts } =
                    param;
                  newState.fetchers.forEach(
                    {
                      'RouterProvider.useCallback[setState]': (
                        fetcher,
                        key
                      ) => {
                        if (fetcher.data !== void 0) {
                          fetcherData.current.set(key, fetcher.data);
                        }
                      },
                    }['RouterProvider.useCallback[setState]']
                  );
                  deletedFetchers.forEach(
                    {
                      'RouterProvider.useCallback[setState]': (key) =>
                        fetcherData.current.delete(key),
                    }['RouterProvider.useCallback[setState]']
                  );
                  warnOnce(
                    flushSync === false || reactDomFlushSyncImpl != null,
                    'You provided the `flushSync` option to a router update, but you are not using the `<RouterProvider>` from `react-router/dom` so `ReactDOM.flushSync()` is unavailable.  Please update your app to `import { RouterProvider } from "react-router/dom"` and ensure you have `react-dom` installed as a dependency to use the `flushSync` option.'
                  );
                  let isViewTransitionAvailable =
                    router.window != null &&
                    router.window.document != null &&
                    typeof router.window.document.startViewTransition ===
                      'function';
                  warnOnce(
                    viewTransitionOpts == null || isViewTransitionAvailable,
                    'You provided the `viewTransition` option to a router update, but you do not appear to be running in a DOM environment as `window.startViewTransition` is not available.'
                  );
                  if (!viewTransitionOpts || !isViewTransitionAvailable) {
                    if (reactDomFlushSyncImpl && flushSync) {
                      reactDomFlushSyncImpl(
                        {
                          'RouterProvider.useCallback[setState]': () =>
                            setStateImpl(newState),
                        }['RouterProvider.useCallback[setState]']
                      );
                    } else {
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'startTransition'
                      ](
                        {
                          'RouterProvider.useCallback[setState]': () =>
                            setStateImpl(newState),
                        }['RouterProvider.useCallback[setState]']
                      );
                    }
                    return;
                  }
                  if (reactDomFlushSyncImpl && flushSync) {
                    reactDomFlushSyncImpl(
                      {
                        'RouterProvider.useCallback[setState]': () => {
                          if (transition) {
                            renderDfd && renderDfd.resolve();
                            transition.skipTransition();
                          }
                          setVtContext({
                            isTransitioning: true,
                            flushSync: true,
                            currentLocation: viewTransitionOpts.currentLocation,
                            nextLocation: viewTransitionOpts.nextLocation,
                          });
                        },
                      }['RouterProvider.useCallback[setState]']
                    );
                    let t = router.window.document.startViewTransition(
                      {
                        'RouterProvider.useCallback[setState].t': () => {
                          reactDomFlushSyncImpl(
                            {
                              'RouterProvider.useCallback[setState].t': () =>
                                setStateImpl(newState),
                            }['RouterProvider.useCallback[setState].t']
                          );
                        },
                      }['RouterProvider.useCallback[setState].t']
                    );
                    t.finished.finally(
                      {
                        'RouterProvider.useCallback[setState]': () => {
                          reactDomFlushSyncImpl(
                            {
                              'RouterProvider.useCallback[setState]': () => {
                                setRenderDfd(void 0);
                                setTransition(void 0);
                                setPendingState(void 0);
                                setVtContext({
                                  isTransitioning: false,
                                });
                              },
                            }['RouterProvider.useCallback[setState]']
                          );
                        },
                      }['RouterProvider.useCallback[setState]']
                    );
                    reactDomFlushSyncImpl(
                      {
                        'RouterProvider.useCallback[setState]': () =>
                          setTransition(t),
                      }['RouterProvider.useCallback[setState]']
                    );
                    return;
                  }
                  if (transition) {
                    renderDfd && renderDfd.resolve();
                    transition.skipTransition();
                    setInterruption({
                      state: newState,
                      currentLocation: viewTransitionOpts.currentLocation,
                      nextLocation: viewTransitionOpts.nextLocation,
                    });
                  } else {
                    setPendingState(newState);
                    setVtContext({
                      isTransitioning: true,
                      flushSync: false,
                      currentLocation: viewTransitionOpts.currentLocation,
                      nextLocation: viewTransitionOpts.nextLocation,
                    });
                  }
                },
              }['RouterProvider.useCallback[setState]'],
              [router.window, reactDomFlushSyncImpl, transition, renderDfd]
            );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useLayoutEffect'
          ](
            {
              'RouterProvider.useLayoutEffect': () =>
                router.subscribe(setState),
            }['RouterProvider.useLayoutEffect'],
            [router, setState]
          );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'RouterProvider.useEffect': () => {
                if (vtContext.isTransitioning && !vtContext.flushSync) {
                  setRenderDfd(new Deferred());
                }
              },
            }['RouterProvider.useEffect'],
            [vtContext]
          );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'RouterProvider.useEffect': () => {
                if (renderDfd && pendingState && router.window) {
                  let newState = pendingState;
                  let renderPromise = renderDfd.promise;
                  let transition2 = router.window.document.startViewTransition(
                    {
                      'RouterProvider.useEffect.transition2': async () => {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                          'startTransition'
                        ](
                          {
                            'RouterProvider.useEffect.transition2': () =>
                              setStateImpl(newState),
                          }['RouterProvider.useEffect.transition2']
                        );
                        await renderPromise;
                      },
                    }['RouterProvider.useEffect.transition2']
                  );
                  transition2.finished.finally(
                    {
                      'RouterProvider.useEffect': () => {
                        setRenderDfd(void 0);
                        setTransition(void 0);
                        setPendingState(void 0);
                        setVtContext({
                          isTransitioning: false,
                        });
                      },
                    }['RouterProvider.useEffect']
                  );
                  setTransition(transition2);
                }
              },
            }['RouterProvider.useEffect'],
            [pendingState, renderDfd, router.window]
          );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'RouterProvider.useEffect': () => {
                if (
                  renderDfd &&
                  pendingState &&
                  state.location.key === pendingState.location.key
                ) {
                  renderDfd.resolve();
                }
              },
            }['RouterProvider.useEffect'],
            [renderDfd, transition, state.location, pendingState]
          );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'RouterProvider.useEffect': () => {
                if (!vtContext.isTransitioning && interruption) {
                  setPendingState(interruption.state);
                  setVtContext({
                    isTransitioning: true,
                    flushSync: false,
                    currentLocation: interruption.currentLocation,
                    nextLocation: interruption.nextLocation,
                  });
                  setInterruption(void 0);
                }
              },
            }['RouterProvider.useEffect'],
            [vtContext.isTransitioning, interruption]
          );
          let navigator =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'RouterProvider.useMemo[navigator]': () => {
                  return {
                    createHref: router.createHref,
                    encodeLocation: router.encodeLocation,
                    go: {
                      'RouterProvider.useMemo[navigator]': (n) =>
                        router.navigate(n),
                    }['RouterProvider.useMemo[navigator]'],
                    push: {
                      'RouterProvider.useMemo[navigator]': (to, state2, opts) =>
                        router.navigate(to, {
                          state: state2,
                          preventScrollReset:
                            opts === null || opts === void 0
                              ? void 0
                              : opts.preventScrollReset,
                        }),
                    }['RouterProvider.useMemo[navigator]'],
                    replace: {
                      'RouterProvider.useMemo[navigator]': (to, state2, opts) =>
                        router.navigate(to, {
                          replace: true,
                          state: state2,
                          preventScrollReset:
                            opts === null || opts === void 0
                              ? void 0
                              : opts.preventScrollReset,
                        }),
                    }['RouterProvider.useMemo[navigator]'],
                  };
                },
              }['RouterProvider.useMemo[navigator]'],
              [router]
            );
          let basename = router.basename || '/';
          let dataRouterContext =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'RouterProvider.useMemo[dataRouterContext]': () => ({
                  router,
                  navigator,
                  static: false,
                  basename,
                }),
              }['RouterProvider.useMemo[dataRouterContext]'],
              [router, navigator, basename]
            );
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Fragment'
            ],
            null,
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              DataRouterContext.Provider,
              {
                value: dataRouterContext,
              },
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](
                DataRouterStateContext.Provider,
                {
                  value: state,
                },
                /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](
                  FetchersContext.Provider,
                  {
                    value: fetcherData.current,
                  },
                  /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](
                    ViewTransitionContext.Provider,
                    {
                      value: vtContext,
                    },
                    /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'createElement'
                    ](
                      Router,
                      {
                        basename,
                        location: state.location,
                        navigationType: state.historyAction,
                        navigator,
                      },
                      /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'createElement'
                      ](MemoizedDataRoutes, {
                        routes: router.routes,
                        future: router.future,
                        state,
                      })
                    )
                  )
                )
              )
            ),
            null
          );
        }
        var MemoizedDataRoutes =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'memo'
          ](DataRoutes);
        function DataRoutes(param) {
          let { routes, future, state } = param;
          return useRoutesImpl(routes, void 0, state, future);
        }
        function MemoryRouter(param) {
          let { basename, children, initialEntries, initialIndex } = param;
          let historyRef =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ]();
          if (historyRef.current == null) {
            historyRef.current = createMemoryHistory({
              initialEntries,
              initialIndex,
              v5Compat: true,
            });
          }
          let history = historyRef.current;
          let [state, setStateImpl] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]({
              action: history.action,
              location: history.location,
            });
          let setState =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'MemoryRouter.useCallback[setState]': (newState) => {
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'startTransition'
                  ](
                    {
                      'MemoryRouter.useCallback[setState]': () =>
                        setStateImpl(newState),
                    }['MemoryRouter.useCallback[setState]']
                  );
                },
              }['MemoryRouter.useCallback[setState]'],
              [setStateImpl]
            );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useLayoutEffect'
          ](
            {
              'MemoryRouter.useLayoutEffect': () => history.listen(setState),
            }['MemoryRouter.useLayoutEffect'],
            [history, setState]
          );
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](Router, {
            basename,
            children,
            location: state.location,
            navigationType: state.action,
            navigator: history,
          });
        }
        function Navigate(param) {
          let { to, replace: replace2, state, relative } = param;
          invariant(
            useInRouterContext(),
            '<Navigate> may be used only in the context of a <Router> component.'
          );
          let { static: isStatic } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](NavigationContext);
          warning(
            !isStatic,
            '<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.'
          );
          let { matches } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteContext);
          let { pathname: locationPathname } = useLocation();
          let navigate = useNavigate();
          let path = resolveTo(
            to,
            getResolveToMatches(matches),
            locationPathname,
            relative === 'path'
          );
          let jsonPath = JSON.stringify(path);
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'Navigate.useEffect': () => {
                navigate(JSON.parse(jsonPath), {
                  replace: replace2,
                  state,
                  relative,
                });
              },
            }['Navigate.useEffect'],
            [navigate, jsonPath, relative, replace2, state]
          );
          return null;
        }
        function Outlet(props) {
          return useOutlet(props.context);
        }
        function Route(_props) {
          invariant(
            false,
            'A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.'
          );
        }
        function Router(param) {
          let {
            basename: basenameProp = '/',
            children = null,
            location: locationProp,
            navigationType = 'POP' /* Pop */,
            navigator,
            static: staticProp = false,
          } = param;
          invariant(
            !useInRouterContext(),
            'You cannot render a <Router> inside another <Router>. You should never have more than one in your app.'
          );
          let basename = basenameProp.replace(/^\/*/, '/');
          let navigationContext =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'Router.useMemo[navigationContext]': () => ({
                  basename,
                  navigator,
                  static: staticProp,
                  future: {},
                }),
              }['Router.useMemo[navigationContext]'],
              [basename, navigator, staticProp]
            );
          if (typeof locationProp === 'string') {
            locationProp = parsePath(locationProp);
          }
          let {
            pathname = '/',
            search = '',
            hash = '',
            state = null,
            key = 'default',
          } = locationProp;
          let locationContext =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'Router.useMemo[locationContext]': () => {
                  let trailingPathname = stripBasename(pathname, basename);
                  if (trailingPathname == null) {
                    return null;
                  }
                  return {
                    location: {
                      pathname: trailingPathname,
                      search,
                      hash,
                      state,
                      key,
                    },
                    navigationType,
                  };
                },
              }['Router.useMemo[locationContext]'],
              [basename, pathname, search, hash, state, key, navigationType]
            );
          warning(
            locationContext != null,
            '<Router basename="'
              .concat(basename, '"> is not able to match the URL "')
              .concat(pathname)
              .concat(search)
              .concat(
                hash,
                '" because it does not start with the basename, so the <Router> won\'t render anything.'
              )
          );
          if (locationContext == null) {
            return null;
          }
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            NavigationContext.Provider,
            {
              value: navigationContext,
            },
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](LocationContext.Provider, {
              children,
              value: locationContext,
            })
          );
        }
        function Routes(param) {
          let { children, location } = param;
          return useRoutes(createRoutesFromChildren(children), location);
        }
        function Await(param) {
          let { children, errorElement, resolve } = param;
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            AwaitErrorBoundary,
            {
              resolve,
              errorElement,
            },
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](ResolveAwait, null, children)
          );
        }
        var AwaitErrorBoundary = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
          'Component'
        ] {
          static getDerivedStateFromError(error) {
            return {
              error,
            };
          }
          componentDidCatch(error, errorInfo) {
            console.error(
              '<Await> caught the following error during render',
              error,
              errorInfo
            );
          }
          render() {
            let { children, errorElement, resolve } = this.props;
            let promise = null;
            let status = 0; /* pending */
            if (!(resolve instanceof Promise)) {
              status = 1 /* success */;
              promise = Promise.resolve();
              Object.defineProperty(promise, '_tracked', {
                get: () => true,
              });
              Object.defineProperty(promise, '_data', {
                get: () => resolve,
              });
            } else if (this.state.error) {
              status = 2 /* error */;
              let renderError = this.state.error;
              promise = Promise.reject().catch(() => {});
              Object.defineProperty(promise, '_tracked', {
                get: () => true,
              });
              Object.defineProperty(promise, '_error', {
                get: () => renderError,
              });
            } else if (resolve._tracked) {
              promise = resolve;
              status =
                '_error' in promise
                  ? 2 /* error */
                  : '_data' in promise
                    ? 1 /* success */
                    : 0 /* pending */;
            } else {
              status = 0 /* pending */;
              Object.defineProperty(resolve, '_tracked', {
                get: () => true,
              });
              promise = resolve.then(
                (data2) =>
                  Object.defineProperty(resolve, '_data', {
                    get: () => data2,
                  }),
                (error) =>
                  Object.defineProperty(resolve, '_error', {
                    get: () => error,
                  })
              );
            }
            if (status === 2 /* error */ && !errorElement) {
              throw promise._error;
            }
            if (status === 2 /* error */) {
              return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](AwaitContext.Provider, {
                value: promise,
                children: errorElement,
              });
            }
            if (status === 1 /* success */) {
              return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](AwaitContext.Provider, {
                value: promise,
                children,
              });
            }
            throw promise;
          }
          constructor(props) {
            super(props);
            this.state = {
              error: null,
            };
          }
        };
        function ResolveAwait(param) {
          let { children } = param;
          let data2 = useAsyncValue();
          let toRender =
            typeof children === 'function' ? children(data2) : children;
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Fragment'
            ],
            null,
            toRender
          );
        }
        function createRoutesFromChildren(children) {
          let parentPath =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
          let routes = [];
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'Children'
          ].forEach(children, (element, index) => {
            if (
              !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isValidElement'
              ](element)
            ) {
              return;
            }
            let treePath = [...parentPath, index];
            if (
              element.type ===
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'Fragment'
              ]
            ) {
              routes.push.apply(
                routes,
                createRoutesFromChildren(element.props.children, treePath)
              );
              return;
            }
            invariant(
              element.type === Route,
              '['.concat(
                typeof element.type === 'string'
                  ? element.type
                  : element.type.name,
                '] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>'
              )
            );
            invariant(
              !element.props.index || !element.props.children,
              'An index route cannot have child routes.'
            );
            let route = {
              id: element.props.id || treePath.join('-'),
              caseSensitive: element.props.caseSensitive,
              element: element.props.element,
              Component: element.props.Component,
              index: element.props.index,
              path: element.props.path,
              loader: element.props.loader,
              action: element.props.action,
              hydrateFallbackElement: element.props.hydrateFallbackElement,
              HydrateFallback: element.props.HydrateFallback,
              errorElement: element.props.errorElement,
              ErrorBoundary: element.props.ErrorBoundary,
              hasErrorBoundary:
                element.props.hasErrorBoundary === true ||
                element.props.ErrorBoundary != null ||
                element.props.errorElement != null,
              shouldRevalidate: element.props.shouldRevalidate,
              handle: element.props.handle,
              lazy: element.props.lazy,
            };
            if (element.props.children) {
              route.children = createRoutesFromChildren(
                element.props.children,
                treePath
              );
            }
            routes.push(route);
          });
          return routes;
        }
        var createRoutesFromElements = createRoutesFromChildren;
        function renderMatches(matches) {
          return _renderMatches(matches);
        }
        function withComponentProps(Component4) {
          return function WithComponentProps() {
            const props = {
              params: useParams(),
              loaderData: useLoaderData(),
              actionData: useActionData(),
              matches: useMatches(),
            };
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](Component4, props);
          };
        }
        function withHydrateFallbackProps(HydrateFallback) {
          return function WithHydrateFallbackProps() {
            const props = {
              params: useParams(),
              loaderData: useLoaderData(),
              actionData: useActionData(),
            };
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](HydrateFallback, props);
          };
        }
        function withErrorBoundaryProps(ErrorBoundary) {
          return function WithErrorBoundaryProps() {
            const props = {
              params: useParams(),
              loaderData: useLoaderData(),
              actionData: useActionData(),
              error: useRouteError(),
            };
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](ErrorBoundary, props);
          };
        }
        // lib/dom/dom.ts
        var defaultMethod = 'get';
        var defaultEncType = 'application/x-www-form-urlencoded';
        function isHtmlElement(object) {
          return object != null && typeof object.tagName === 'string';
        }
        function isButtonElement(object) {
          return (
            isHtmlElement(object) && object.tagName.toLowerCase() === 'button'
          );
        }
        function isFormElement(object) {
          return (
            isHtmlElement(object) && object.tagName.toLowerCase() === 'form'
          );
        }
        function isInputElement(object) {
          return (
            isHtmlElement(object) && object.tagName.toLowerCase() === 'input'
          );
        }
        function isModifiedEvent(event) {
          return !!(
            event.metaKey ||
            event.altKey ||
            event.ctrlKey ||
            event.shiftKey
          );
        }
        function shouldProcessLinkClick(event, target) {
          return (
            event.button === 0 && // Ignore everything but left clicks
            (!target || target === '_self') && // Let browser handle "target=_blank" etc.
            !isModifiedEvent(event)
          );
        }
        function createSearchParams() {
          let init =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : '';
          return new URLSearchParams(
            typeof init === 'string' ||
            Array.isArray(init) ||
            init instanceof URLSearchParams
              ? init
              : Object.keys(init).reduce((memo2, key) => {
                  let value = init[key];
                  return memo2.concat(
                    Array.isArray(value)
                      ? value.map((v) => [key, v])
                      : [[key, value]]
                  );
                }, [])
          );
        }
        function getSearchParamsForLocation(
          locationSearch,
          defaultSearchParams
        ) {
          let searchParams = createSearchParams(locationSearch);
          if (defaultSearchParams) {
            defaultSearchParams.forEach((_, key) => {
              if (!searchParams.has(key)) {
                defaultSearchParams.getAll(key).forEach((value) => {
                  searchParams.append(key, value);
                });
              }
            });
          }
          return searchParams;
        }
        var _formDataSupportsSubmitter = null;
        function isFormDataSubmitterSupported() {
          if (_formDataSupportsSubmitter === null) {
            try {
              new FormData(
                document.createElement('form'), // @ts-expect-error if FormData supports the submitter parameter, this will throw
                0
              );
              _formDataSupportsSubmitter = false;
            } catch (e) {
              _formDataSupportsSubmitter = true;
            }
          }
          return _formDataSupportsSubmitter;
        }
        var supportedFormEncTypes = /* @__PURE__ */ new Set([
          'application/x-www-form-urlencoded',
          'multipart/form-data',
          'text/plain',
        ]);
        function getFormEncType(encType) {
          if (encType != null && !supportedFormEncTypes.has(encType)) {
            warning(
              false,
              '"'
                .concat(
                  encType,
                  '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` and will default to "'
                )
                .concat(defaultEncType, '"')
            );
            return null;
          }
          return encType;
        }
        function getFormSubmissionInfo(target, basename) {
          let method;
          let action;
          let encType;
          let formData;
          let body;
          if (isFormElement(target)) {
            let attr = target.getAttribute('action');
            action = attr ? stripBasename(attr, basename) : null;
            method = target.getAttribute('method') || defaultMethod;
            encType =
              getFormEncType(target.getAttribute('enctype')) || defaultEncType;
            formData = new FormData(target);
          } else if (
            isButtonElement(target) ||
            (isInputElement(target) &&
              (target.type === 'submit' || target.type === 'image'))
          ) {
            let form = target.form;
            if (form == null) {
              throw new Error(
                'Cannot submit a <button> or <input type="submit"> without a <form>'
              );
            }
            let attr =
              target.getAttribute('formaction') || form.getAttribute('action');
            action = attr ? stripBasename(attr, basename) : null;
            method =
              target.getAttribute('formmethod') ||
              form.getAttribute('method') ||
              defaultMethod;
            encType =
              getFormEncType(target.getAttribute('formenctype')) ||
              getFormEncType(form.getAttribute('enctype')) ||
              defaultEncType;
            formData = new FormData(form, target);
            if (!isFormDataSubmitterSupported()) {
              let { name, type, value } = target;
              if (type === 'image') {
                let prefix = name ? ''.concat(name, '.') : '';
                formData.append(''.concat(prefix, 'x'), '0');
                formData.append(''.concat(prefix, 'y'), '0');
              } else if (name) {
                formData.append(name, value);
              }
            }
          } else if (isHtmlElement(target)) {
            throw new Error(
              'Cannot submit element that is not <form>, <button>, or <input type="submit|image">'
            );
          } else {
            method = defaultMethod;
            action = null;
            encType = defaultEncType;
            body = target;
          }
          if (formData && encType === 'text/plain') {
            body = formData;
            formData = void 0;
          }
          return {
            action,
            method: method.toLowerCase(),
            encType,
            formData,
            body,
          };
        }
        // lib/dom/ssr/invariant.ts
        function invariant2(value, message) {
          if (
            value === false ||
            value === null ||
            typeof value === 'undefined'
          ) {
            throw new Error(message);
          }
        }
        // lib/dom/ssr/routeModules.ts
        async function loadRouteModule(route, routeModulesCache) {
          if (route.id in routeModulesCache) {
            return routeModulesCache[route.id];
          }
          try {
            let routeModule = await import(
              /* @vite-ignore */ /* webpackIgnore: true */ route.module
            );
            routeModulesCache[route.id] = routeModule;
            return routeModule;
          } catch (error) {
            console.error(
              'Error loading route module `'.concat(
                route.module,
                '`, reloading page...'
              )
            );
            console.error(error);
            if (
              window.__reactRouterContext &&
              window.__reactRouterContext.isSpaMode && // @ts-expect-error
              __TURBOPACK__import$2e$meta__.hot
            ) {
              throw error;
            }
            window.location.reload();
            return new Promise(() => {});
          }
        }
        // lib/dom/ssr/links.ts
        function getKeyedLinksForMatches(matches, routeModules, manifest) {
          let descriptors = matches
            .map((match) => {
              var _module_links;
              let module = routeModules[match.route.id];
              let route = manifest.routes[match.route.id];
              return [
                route && route.css
                  ? route.css.map((href2) => ({
                      rel: 'stylesheet',
                      href: href2,
                    }))
                  : [],
                (module === null || module === void 0
                  ? void 0
                  : (_module_links = module.links) === null ||
                      _module_links === void 0
                    ? void 0
                    : _module_links.call(module)) || [],
              ];
            })
            .flat(2);
          let preloads = getModuleLinkHrefs(matches, manifest);
          return dedupeLinkDescriptors(descriptors, preloads);
        }
        function getRouteCssDescriptors(route) {
          if (!route.css) return [];
          return route.css.map((href2) => ({
            rel: 'stylesheet',
            href: href2,
          }));
        }
        async function prefetchRouteCss(route) {
          if (!route.css) return;
          let descriptors = getRouteCssDescriptors(route);
          await Promise.all(descriptors.map(prefetchStyleLink));
        }
        async function prefetchStyleLinks(route, routeModule) {
          if ((!route.css && !routeModule.links) || !isPreloadSupported())
            return;
          let descriptors = [];
          if (route.css) {
            descriptors.push(...getRouteCssDescriptors(route));
          }
          if (routeModule.links) {
            descriptors.push(...routeModule.links());
          }
          if (descriptors.length === 0) return;
          let styleLinks = [];
          for (let descriptor of descriptors) {
            if (
              !isPageLinkDescriptor(descriptor) &&
              descriptor.rel === 'stylesheet'
            ) {
              styleLinks.push({
                ...descriptor,
                rel: 'preload',
                as: 'style',
              });
            }
          }
          await Promise.all(styleLinks.map(prefetchStyleLink));
        }
        async function prefetchStyleLink(descriptor) {
          return new Promise((resolve) => {
            if (
              (descriptor.media &&
                !window.matchMedia(descriptor.media).matches) ||
              document.querySelector(
                'link[rel="stylesheet"][href="'.concat(descriptor.href, '"]')
              )
            ) {
              return resolve();
            }
            let link = document.createElement('link');
            Object.assign(link, descriptor);
            function removeLink() {
              if (document.head.contains(link)) {
                document.head.removeChild(link);
              }
            }
            link.onload = () => {
              removeLink();
              resolve();
            };
            link.onerror = () => {
              removeLink();
              resolve();
            };
            document.head.appendChild(link);
          });
        }
        function isPageLinkDescriptor(object) {
          return object != null && typeof object.page === 'string';
        }
        function isHtmlLinkDescriptor(object) {
          if (object == null) {
            return false;
          }
          if (object.href == null) {
            return (
              object.rel === 'preload' &&
              typeof object.imageSrcSet === 'string' &&
              typeof object.imageSizes === 'string'
            );
          }
          return (
            typeof object.rel === 'string' && typeof object.href === 'string'
          );
        }
        async function getKeyedPrefetchLinks(matches, manifest, routeModules) {
          let links = await Promise.all(
            matches.map(async (match) => {
              let route = manifest.routes[match.route.id];
              if (route) {
                let mod = await loadRouteModule(route, routeModules);
                return mod.links ? mod.links() : [];
              }
              return [];
            })
          );
          return dedupeLinkDescriptors(
            links
              .flat(1)
              .filter(isHtmlLinkDescriptor)
              .filter(
                (link) => link.rel === 'stylesheet' || link.rel === 'preload'
              )
              .map((link) =>
                link.rel === 'stylesheet'
                  ? {
                      ...link,
                      rel: 'prefetch',
                      as: 'style',
                    }
                  : {
                      ...link,
                      rel: 'prefetch',
                    }
              )
          );
        }
        function getNewMatchesForLinks(
          page,
          nextMatches,
          currentMatches,
          manifest,
          location,
          mode
        ) {
          let isNew = (match, index) => {
            if (!currentMatches[index]) return true;
            return match.route.id !== currentMatches[index].route.id;
          };
          let matchPathChanged = (match, index) => {
            var // splat param changed, which is not present in match.path
              // e.g. /files/images/avatar.jpg -> files/finances.xls
              _currentMatches_index_route_path;
            return (
              // param change, /users/123 -> /users/456
              currentMatches[index].pathname !== match.pathname ||
              (((_currentMatches_index_route_path =
                currentMatches[index].route.path) === null ||
              _currentMatches_index_route_path === void 0
                ? void 0
                : _currentMatches_index_route_path.endsWith('*')) &&
                currentMatches[index].params['*'] !== match.params['*'])
            );
          };
          if (mode === 'assets') {
            return nextMatches.filter(
              (match, index) =>
                isNew(match, index) || matchPathChanged(match, index)
            );
          }
          if (mode === 'data') {
            return nextMatches.filter((match, index) => {
              let manifestRoute = manifest.routes[match.route.id];
              if (!manifestRoute || !manifestRoute.hasLoader) {
                return false;
              }
              if (isNew(match, index) || matchPathChanged(match, index)) {
                return true;
              }
              if (match.route.shouldRevalidate) {
                var _currentMatches_;
                let routeChoice = match.route.shouldRevalidate({
                  currentUrl: new URL(
                    location.pathname + location.search + location.hash,
                    window.origin
                  ),
                  currentParams:
                    ((_currentMatches_ = currentMatches[0]) === null ||
                    _currentMatches_ === void 0
                      ? void 0
                      : _currentMatches_.params) || {},
                  nextUrl: new URL(page, window.origin),
                  nextParams: match.params,
                  defaultShouldRevalidate: true,
                });
                if (typeof routeChoice === 'boolean') {
                  return routeChoice;
                }
              }
              return true;
            });
          }
          return [];
        }
        function getModuleLinkHrefs(matches, manifest) {
          let { includeHydrateFallback } =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          return dedupeHrefs(
            matches
              .map((match) => {
                let route = manifest.routes[match.route.id];
                if (!route) return [];
                let hrefs = [route.module];
                if (route.clientActionModule) {
                  hrefs = hrefs.concat(route.clientActionModule);
                }
                if (route.clientLoaderModule) {
                  hrefs = hrefs.concat(route.clientLoaderModule);
                }
                if (includeHydrateFallback && route.hydrateFallbackModule) {
                  hrefs = hrefs.concat(route.hydrateFallbackModule);
                }
                if (route.imports) {
                  hrefs = hrefs.concat(route.imports);
                }
                return hrefs;
              })
              .flat(1)
          );
        }
        function dedupeHrefs(hrefs) {
          return [...new Set(hrefs)];
        }
        function sortKeys(obj) {
          let sorted = {};
          let keys = Object.keys(obj).sort();
          for (let key of keys) {
            sorted[key] = obj[key];
          }
          return sorted;
        }
        function dedupeLinkDescriptors(descriptors, preloads) {
          let set = /* @__PURE__ */ new Set();
          let preloadsSet = new Set(preloads);
          return descriptors.reduce((deduped, descriptor) => {
            let alreadyModulePreload =
              preloads &&
              !isPageLinkDescriptor(descriptor) &&
              descriptor.as === 'script' &&
              descriptor.href &&
              preloadsSet.has(descriptor.href);
            if (alreadyModulePreload) {
              return deduped;
            }
            let key = JSON.stringify(sortKeys(descriptor));
            if (!set.has(key)) {
              set.add(key);
              deduped.push({
                key,
                link: descriptor,
              });
            }
            return deduped;
          }, []);
        }
        var _isPreloadSupported;
        function isPreloadSupported() {
          if (_isPreloadSupported !== void 0) {
            return _isPreloadSupported;
          }
          let el = document.createElement('link');
          _isPreloadSupported = el.relList.supports('preload');
          el = null;
          return _isPreloadSupported;
        }
        // lib/dom/ssr/markup.ts
        var ESCAPE_LOOKUP = {
          '&': '\\u0026',
          '>': '\\u003e',
          '<': '\\u003c',
          '\u2028': '\\u2028',
          '\u2029': '\\u2029',
        };
        var ESCAPE_REGEX = /[&><\u2028\u2029]/g;
        function escapeHtml(html) {
          return html.replace(ESCAPE_REGEX, (match) => ESCAPE_LOOKUP[match]);
        }
        function createHtml(html) {
          return {
            __html: html,
          };
        }
        // vendor/turbo-stream-v2/utils.ts
        var HOLE = -1;
        var NAN = -2;
        var NEGATIVE_INFINITY = -3;
        var NEGATIVE_ZERO = -4;
        var NULL = -5;
        var POSITIVE_INFINITY = -6;
        var UNDEFINED = -7;
        var TYPE_BIGINT = 'B';
        var TYPE_DATE = 'D';
        var TYPE_ERROR = 'E';
        var TYPE_MAP = 'M';
        var TYPE_NULL_OBJECT = 'N';
        var TYPE_PROMISE = 'P';
        var TYPE_REGEXP = 'R';
        var TYPE_SET = 'S';
        var TYPE_SYMBOL = 'Y';
        var TYPE_URL = 'U';
        var TYPE_PREVIOUS_RESOLVED = 'Z';
        var Deferred2 = class {
          constructor() {
            this.promise = new Promise((resolve, reject) => {
              this.resolve = resolve;
              this.reject = reject;
            });
          }
        };
        function createLineSplittingTransform() {
          const decoder = new TextDecoder();
          let leftover = '';
          return new TransformStream({
            transform(chunk, controller) {
              const str = decoder.decode(chunk, {
                stream: true,
              });
              const parts = (leftover + str).split('\n');
              leftover = parts.pop() || '';
              for (const part of parts) {
                controller.enqueue(part);
              }
            },
            flush(controller) {
              if (leftover) {
                controller.enqueue(leftover);
              }
            },
          });
        }
        // vendor/turbo-stream-v2/flatten.ts
        function flatten(input) {
          const { indices } = this;
          const existing = indices.get(input);
          if (existing) return [existing];
          if (input === void 0) return UNDEFINED;
          if (input === null) return NULL;
          if (Number.isNaN(input)) return NAN;
          if (input === Number.POSITIVE_INFINITY) return POSITIVE_INFINITY;
          if (input === Number.NEGATIVE_INFINITY) return NEGATIVE_INFINITY;
          if (input === 0 && 1 / input < 0) return NEGATIVE_ZERO;
          const index = this.index++;
          indices.set(input, index);
          stringify.call(this, input, index);
          return index;
        }
        function stringify(input, index) {
          const { deferred, plugins, postPlugins } = this;
          const str = this.stringified;
          const stack = [[input, index]];
          while (stack.length > 0) {
            const [input2, index2] = stack.pop();
            const partsForObj = (obj) =>
              Object.keys(obj)
                .map((k) =>
                  '"_'
                    .concat(flatten.call(this, k), '":')
                    .concat(flatten.call(this, obj[k]))
                )
                .join(',');
            let error = null;
            switch (typeof input2) {
              case 'boolean':
              case 'number':
              case 'string':
                str[index2] = JSON.stringify(input2);
                break;
              case 'bigint':
                str[index2] = '["'
                  .concat(TYPE_BIGINT, '","')
                  .concat(input2, '"]');
                break;
              case 'symbol': {
                const keyFor = Symbol.keyFor(input2);
                if (!keyFor) {
                  error = new Error(
                    'Cannot encode symbol unless created with Symbol.for()'
                  );
                } else {
                  str[index2] = '["'
                    .concat(TYPE_SYMBOL, '",')
                    .concat(JSON.stringify(keyFor), ']');
                }
                break;
              }
              case 'object': {
                if (!input2) {
                  str[index2] = ''.concat(NULL);
                  break;
                }
                const isArray = Array.isArray(input2);
                let pluginHandled = false;
                if (!isArray && plugins) {
                  for (const plugin of plugins) {
                    const pluginResult = plugin(input2);
                    if (Array.isArray(pluginResult)) {
                      pluginHandled = true;
                      const [pluginIdentifier, ...rest] = pluginResult;
                      str[index2] = '['.concat(
                        JSON.stringify(pluginIdentifier)
                      );
                      if (rest.length > 0) {
                        str[index2] += ','.concat(
                          rest.map((v) => flatten.call(this, v)).join(',')
                        );
                      }
                      str[index2] += ']';
                      break;
                    }
                  }
                }
                if (!pluginHandled) {
                  let result = isArray ? '[' : '{';
                  if (isArray) {
                    for (let i = 0; i < input2.length; i++)
                      result +=
                        (i ? ',' : '') +
                        (i in input2 ? flatten.call(this, input2[i]) : HOLE);
                    str[index2] = ''.concat(result, ']');
                  } else if (input2 instanceof Date) {
                    str[index2] = '["'
                      .concat(TYPE_DATE, '",')
                      .concat(input2.getTime(), ']');
                  } else if (input2 instanceof URL) {
                    str[index2] = '["'
                      .concat(TYPE_URL, '",')
                      .concat(JSON.stringify(input2.href), ']');
                  } else if (input2 instanceof RegExp) {
                    str[index2] = '["'
                      .concat(TYPE_REGEXP, '",')
                      .concat(JSON.stringify(input2.source), ',')
                      .concat(JSON.stringify(input2.flags), ']');
                  } else if (input2 instanceof Set) {
                    if (input2.size > 0) {
                      str[index2] = '["'
                        .concat(TYPE_SET, '",')
                        .concat(
                          [...input2]
                            .map((val) => flatten.call(this, val))
                            .join(','),
                          ']'
                        );
                    } else {
                      str[index2] = '["'.concat(TYPE_SET, '"]');
                    }
                  } else if (input2 instanceof Map) {
                    if (input2.size > 0) {
                      str[index2] = '["'.concat(TYPE_MAP, '",').concat(
                        [...input2]
                          .flatMap((param) => {
                            let [k, v] = param;
                            return [
                              flatten.call(this, k),
                              flatten.call(this, v),
                            ];
                          })
                          .join(','),
                        ']'
                      );
                    } else {
                      str[index2] = '["'.concat(TYPE_MAP, '"]');
                    }
                  } else if (input2 instanceof Promise) {
                    str[index2] = '["'
                      .concat(TYPE_PROMISE, '",')
                      .concat(index2, ']');
                    deferred[index2] = input2;
                  } else if (input2 instanceof Error) {
                    str[index2] = '["'
                      .concat(TYPE_ERROR, '",')
                      .concat(JSON.stringify(input2.message));
                    if (input2.name !== 'Error') {
                      str[index2] += ','.concat(JSON.stringify(input2.name));
                    }
                    str[index2] += ']';
                  } else if (Object.getPrototypeOf(input2) === null) {
                    str[index2] = '["'
                      .concat(TYPE_NULL_OBJECT, '",{')
                      .concat(partsForObj(input2), '}]');
                  } else if (isPlainObject(input2)) {
                    str[index2] = '{'.concat(partsForObj(input2), '}');
                  } else {
                    error = new Error('Cannot encode object with prototype');
                  }
                }
                break;
              }
              default: {
                const isArray = Array.isArray(input2);
                let pluginHandled = false;
                if (!isArray && plugins) {
                  for (const plugin of plugins) {
                    const pluginResult = plugin(input2);
                    if (Array.isArray(pluginResult)) {
                      pluginHandled = true;
                      const [pluginIdentifier, ...rest] = pluginResult;
                      str[index2] = '['.concat(
                        JSON.stringify(pluginIdentifier)
                      );
                      if (rest.length > 0) {
                        str[index2] += ','.concat(
                          rest.map((v) => flatten.call(this, v)).join(',')
                        );
                      }
                      str[index2] += ']';
                      break;
                    }
                  }
                }
                if (!pluginHandled) {
                  error = new Error(
                    'Cannot encode function or unexpected type'
                  );
                }
              }
            }
            if (error) {
              let pluginHandled = false;
              if (postPlugins) {
                for (const plugin of postPlugins) {
                  const pluginResult = plugin(input2);
                  if (Array.isArray(pluginResult)) {
                    pluginHandled = true;
                    const [pluginIdentifier, ...rest] = pluginResult;
                    str[index2] = '['.concat(JSON.stringify(pluginIdentifier));
                    if (rest.length > 0) {
                      str[index2] += ','.concat(
                        rest.map((v) => flatten.call(this, v)).join(',')
                      );
                    }
                    str[index2] += ']';
                    break;
                  }
                }
              }
              if (!pluginHandled) {
                throw error;
              }
            }
          }
        }
        var objectProtoNames = Object.getOwnPropertyNames(Object.prototype)
          .sort()
          .join('\0');
        function isPlainObject(thing) {
          const proto = Object.getPrototypeOf(thing);
          return (
            proto === Object.prototype ||
            proto === null ||
            Object.getOwnPropertyNames(proto).sort().join('\0') ===
              objectProtoNames
          );
        }
        // vendor/turbo-stream-v2/unflatten.ts
        var globalObj =
          typeof window !== 'undefined'
            ? window
            : typeof globalThis !== 'undefined'
              ? globalThis
              : void 0;
        function unflatten(parsed) {
          const { hydrated, values } = this;
          if (typeof parsed === 'number') return hydrate.call(this, parsed);
          if (!Array.isArray(parsed) || !parsed.length) throw new SyntaxError();
          const startIndex = values.length;
          for (const value of parsed) {
            values.push(value);
          }
          hydrated.length = values.length;
          return hydrate.call(this, startIndex);
        }
        function hydrate(index) {
          const { hydrated, values, deferred, plugins } = this;
          let result;
          const stack = [
            [
              index,
              (v) => {
                result = v;
              },
            ],
          ];
          let postRun = [];
          while (stack.length > 0) {
            const [index2, set] = stack.pop();
            switch (index2) {
              case UNDEFINED:
                set(void 0);
                continue;
              case NULL:
                set(null);
                continue;
              case NAN:
                set(NaN);
                continue;
              case POSITIVE_INFINITY:
                set(Infinity);
                continue;
              case NEGATIVE_INFINITY:
                set(-Infinity);
                continue;
              case NEGATIVE_ZERO:
                set(-0);
                continue;
            }
            if (hydrated[index2]) {
              set(hydrated[index2]);
              continue;
            }
            const value = values[index2];
            if (!value || typeof value !== 'object') {
              hydrated[index2] = value;
              set(value);
              continue;
            }
            if (Array.isArray(value)) {
              if (typeof value[0] === 'string') {
                const [type, b, c] = value;
                switch (type) {
                  case TYPE_DATE:
                    set((hydrated[index2] = new Date(b)));
                    continue;
                  case TYPE_URL:
                    set((hydrated[index2] = new URL(b)));
                    continue;
                  case TYPE_BIGINT:
                    set((hydrated[index2] = BigInt(b)));
                    continue;
                  case TYPE_REGEXP:
                    set((hydrated[index2] = new RegExp(b, c)));
                    continue;
                  case TYPE_SYMBOL:
                    set((hydrated[index2] = Symbol.for(b)));
                    continue;
                  case TYPE_SET:
                    const newSet = /* @__PURE__ */ new Set();
                    hydrated[index2] = newSet;
                    for (let i = value.length - 1; i > 0; i--)
                      stack.push([
                        value[i],
                        (v) => {
                          newSet.add(v);
                        },
                      ]);
                    set(newSet);
                    continue;
                  case TYPE_MAP:
                    const map = /* @__PURE__ */ new Map();
                    hydrated[index2] = map;
                    for (let i = value.length - 2; i > 0; i -= 2) {
                      const r = [];
                      stack.push([
                        value[i + 1],
                        (v) => {
                          r[1] = v;
                        },
                      ]);
                      stack.push([
                        value[i],
                        (k) => {
                          r[0] = k;
                        },
                      ]);
                      postRun.push(() => {
                        map.set(r[0], r[1]);
                      });
                    }
                    set(map);
                    continue;
                  case TYPE_NULL_OBJECT:
                    const obj = /* @__PURE__ */ Object.create(null);
                    hydrated[index2] = obj;
                    for (const key of Object.keys(b).reverse()) {
                      const r = [];
                      stack.push([
                        b[key],
                        (v) => {
                          r[1] = v;
                        },
                      ]);
                      stack.push([
                        Number(key.slice(1)),
                        (k) => {
                          r[0] = k;
                        },
                      ]);
                      postRun.push(() => {
                        obj[r[0]] = r[1];
                      });
                    }
                    set(obj);
                    continue;
                  case TYPE_PROMISE:
                    if (hydrated[b]) {
                      set((hydrated[index2] = hydrated[b]));
                    } else {
                      const d = new Deferred2();
                      deferred[b] = d;
                      set((hydrated[index2] = d.promise));
                    }
                    continue;
                  case TYPE_ERROR:
                    const [, message, errorType] = value;
                    let error =
                      errorType && globalObj && globalObj[errorType]
                        ? new globalObj[errorType](message)
                        : new Error(message);
                    hydrated[index2] = error;
                    set(error);
                    continue;
                  case TYPE_PREVIOUS_RESOLVED:
                    set((hydrated[index2] = hydrated[b]));
                    continue;
                  default:
                    if (Array.isArray(plugins)) {
                      const r = [];
                      const vals = value.slice(1);
                      for (let i = 0; i < vals.length; i++) {
                        const v = vals[i];
                        stack.push([
                          v,
                          (v2) => {
                            r[i] = v2;
                          },
                        ]);
                      }
                      postRun.push(() => {
                        for (const plugin of plugins) {
                          const result2 = plugin(value[0], ...r);
                          if (result2) {
                            set((hydrated[index2] = result2.value));
                            return;
                          }
                        }
                        throw new SyntaxError();
                      });
                      continue;
                    }
                    throw new SyntaxError();
                }
              } else {
                const array = [];
                hydrated[index2] = array;
                for (let i = 0; i < value.length; i++) {
                  const n = value[i];
                  if (n !== HOLE) {
                    stack.push([
                      n,
                      (v) => {
                        array[i] = v;
                      },
                    ]);
                  }
                }
                set(array);
                continue;
              }
            } else {
              const object = {};
              hydrated[index2] = object;
              for (const key of Object.keys(value).reverse()) {
                const r = [];
                stack.push([
                  value[key],
                  (v) => {
                    r[1] = v;
                  },
                ]);
                stack.push([
                  Number(key.slice(1)),
                  (k) => {
                    r[0] = k;
                  },
                ]);
                postRun.push(() => {
                  object[r[0]] = r[1];
                });
              }
              set(object);
              continue;
            }
          }
          while (postRun.length > 0) {
            postRun.pop()();
          }
          return result;
        }
        // vendor/turbo-stream-v2/turbo-stream.ts
        async function decode(readable, options) {
          const { plugins } =
            options !== null && options !== void 0 ? options : {};
          const done = new Deferred2();
          const reader = readable
            .pipeThrough(createLineSplittingTransform())
            .getReader();
          const decoder = {
            values: [],
            hydrated: [],
            deferred: {},
            plugins,
          };
          const decoded = await decodeInitial.call(decoder, reader);
          let donePromise = done.promise;
          if (decoded.done) {
            done.resolve();
          } else {
            donePromise = decodeDeferred
              .call(decoder, reader)
              .then(done.resolve)
              .catch((reason) => {
                for (const deferred of Object.values(decoder.deferred)) {
                  deferred.reject(reason);
                }
                done.reject(reason);
              });
          }
          return {
            done: donePromise.then(() => reader.closed),
            value: decoded.value,
          };
        }
        async function decodeInitial(reader) {
          const read = await reader.read();
          if (!read.value) {
            throw new SyntaxError();
          }
          let line;
          try {
            line = JSON.parse(read.value);
          } catch (reason) {
            throw new SyntaxError();
          }
          return {
            done: read.done,
            value: unflatten.call(this, line),
          };
        }
        async function decodeDeferred(reader) {
          let read = await reader.read();
          while (!read.done) {
            if (!read.value) continue;
            const line = read.value;
            switch (line[0]) {
              case TYPE_PROMISE: {
                const colonIndex = line.indexOf(':');
                const deferredId = Number(line.slice(1, colonIndex));
                const deferred = this.deferred[deferredId];
                if (!deferred) {
                  throw new Error(
                    'Deferred ID '.concat(deferredId, ' not found in stream')
                  );
                }
                const lineData = line.slice(colonIndex + 1);
                let jsonLine;
                try {
                  jsonLine = JSON.parse(lineData);
                } catch (reason) {
                  throw new SyntaxError();
                }
                const value = unflatten.call(this, jsonLine);
                deferred.resolve(value);
                break;
              }
              case TYPE_ERROR: {
                const colonIndex = line.indexOf(':');
                const deferredId = Number(line.slice(1, colonIndex));
                const deferred = this.deferred[deferredId];
                if (!deferred) {
                  throw new Error(
                    'Deferred ID '.concat(deferredId, ' not found in stream')
                  );
                }
                const lineData = line.slice(colonIndex + 1);
                let jsonLine;
                try {
                  jsonLine = JSON.parse(lineData);
                } catch (reason) {
                  throw new SyntaxError();
                }
                const value = unflatten.call(this, jsonLine);
                deferred.reject(value);
                break;
              }
              default:
                throw new SyntaxError();
            }
            read = await reader.read();
          }
        }
        function encode(input, options) {
          const { plugins, postPlugins, signal } =
            options !== null && options !== void 0 ? options : {};
          const encoder2 = {
            deferred: {},
            index: 0,
            indices: /* @__PURE__ */ new Map(),
            stringified: [],
            plugins,
            postPlugins,
            signal,
          };
          const textEncoder = new TextEncoder();
          let lastSentIndex = 0;
          const readable = new ReadableStream({
            async start(controller) {
              const id = flatten.call(encoder2, input);
              if (Array.isArray(id)) {
                throw new Error('This should never happen');
              }
              if (id < 0) {
                controller.enqueue(textEncoder.encode(''.concat(id, '\n')));
              } else {
                controller.enqueue(
                  textEncoder.encode(
                    '['.concat(encoder2.stringified.join(','), ']\n')
                  )
                );
                lastSentIndex = encoder2.stringified.length - 1;
              }
              const seenPromises = /* @__PURE__ */ new WeakSet();
              if (Object.keys(encoder2.deferred).length) {
                let raceDone;
                const racePromise = new Promise((resolve, reject) => {
                  raceDone = resolve;
                  if (signal) {
                    const rejectPromise = () =>
                      reject(signal.reason || new Error('Signal was aborted.'));
                    if (signal.aborted) {
                      rejectPromise();
                    } else {
                      signal.addEventListener('abort', (event) => {
                        rejectPromise();
                      });
                    }
                  }
                });
                while (Object.keys(encoder2.deferred).length > 0) {
                  for (const [deferredId, deferred] of Object.entries(
                    encoder2.deferred
                  )) {
                    if (seenPromises.has(deferred)) continue;
                    seenPromises.add(
                      // biome-ignore lint/suspicious/noAssignInExpressions: <explanation>
                      (encoder2.deferred[Number(deferredId)] = Promise.race([
                        racePromise,
                        deferred,
                      ])
                        .then(
                          (resolved) => {
                            const id2 = flatten.call(encoder2, resolved);
                            if (Array.isArray(id2)) {
                              controller.enqueue(
                                textEncoder.encode(
                                  ''
                                    .concat(TYPE_PROMISE)
                                    .concat(deferredId, ':[["')
                                    .concat(TYPE_PREVIOUS_RESOLVED, '",')
                                    .concat(id2[0], ']]\n')
                                )
                              );
                              encoder2.index++;
                              lastSentIndex++;
                            } else if (id2 < 0) {
                              controller.enqueue(
                                textEncoder.encode(
                                  ''
                                    .concat(TYPE_PROMISE)
                                    .concat(deferredId, ':')
                                    .concat(id2, '\n')
                                )
                              );
                            } else {
                              const values = encoder2.stringified
                                .slice(lastSentIndex + 1)
                                .join(',');
                              controller.enqueue(
                                textEncoder.encode(
                                  ''
                                    .concat(TYPE_PROMISE)
                                    .concat(deferredId, ':[')
                                    .concat(values, ']\n')
                                )
                              );
                              lastSentIndex = encoder2.stringified.length - 1;
                            }
                          },
                          (reason) => {
                            if (
                              !reason ||
                              typeof reason !== 'object' ||
                              !(reason instanceof Error)
                            ) {
                              reason = new Error('An unknown error occurred');
                            }
                            const id2 = flatten.call(encoder2, reason);
                            if (Array.isArray(id2)) {
                              controller.enqueue(
                                textEncoder.encode(
                                  ''
                                    .concat(TYPE_ERROR)
                                    .concat(deferredId, ':[["')
                                    .concat(TYPE_PREVIOUS_RESOLVED, '",')
                                    .concat(id2[0], ']]\n')
                                )
                              );
                              encoder2.index++;
                              lastSentIndex++;
                            } else if (id2 < 0) {
                              controller.enqueue(
                                textEncoder.encode(
                                  ''
                                    .concat(TYPE_ERROR)
                                    .concat(deferredId, ':')
                                    .concat(id2, '\n')
                                )
                              );
                            } else {
                              const values = encoder2.stringified
                                .slice(lastSentIndex + 1)
                                .join(',');
                              controller.enqueue(
                                textEncoder.encode(
                                  ''
                                    .concat(TYPE_ERROR)
                                    .concat(deferredId, ':[')
                                    .concat(values, ']\n')
                                )
                              );
                              lastSentIndex = encoder2.stringified.length - 1;
                            }
                          }
                        )
                        .finally(() => {
                          delete encoder2.deferred[Number(deferredId)];
                        }))
                    );
                  }
                  await Promise.race(Object.values(encoder2.deferred));
                }
                raceDone();
              }
              await Promise.all(Object.values(encoder2.deferred));
              controller.close();
            },
          });
          return readable;
        }
        // lib/dom/ssr/data.ts
        async function createRequestInit(request) {
          let init = {
            signal: request.signal,
          };
          if (request.method !== 'GET') {
            init.method = request.method;
            let contentType = request.headers.get('Content-Type');
            if (contentType && /\bapplication\/json\b/.test(contentType)) {
              init.headers = {
                'Content-Type': contentType,
              };
              init.body = JSON.stringify(await request.json());
            } else if (contentType && /\btext\/plain\b/.test(contentType)) {
              init.headers = {
                'Content-Type': contentType,
              };
              init.body = await request.text();
            } else if (
              contentType &&
              /\bapplication\/x-www-form-urlencoded\b/.test(contentType)
            ) {
              init.body = new URLSearchParams(await request.text());
            } else {
              init.body = await request.formData();
            }
          }
          return init;
        }
        // lib/dom/ssr/single-fetch.tsx
        var SingleFetchRedirectSymbol = Symbol('SingleFetchRedirect');
        var SingleFetchNoResultError = class extends Error {};
        var SINGLE_FETCH_REDIRECT_STATUS = 202;
        var NO_BODY_STATUS_CODES = /* @__PURE__ */ new Set([
          100, 101, 204, 205,
        ]);
        function StreamTransfer(param) {
          let { context, identifier, reader, textDecoder, nonce } = param;
          if (!context.renderMeta || !context.renderMeta.didRenderScripts) {
            return null;
          }
          if (!context.renderMeta.streamCache) {
            context.renderMeta.streamCache = {};
          }
          let { streamCache } = context.renderMeta;
          let promise = streamCache[identifier];
          if (!promise) {
            promise = streamCache[identifier] = reader
              .read()
              .then((result) => {
                streamCache[identifier].result = {
                  done: result.done,
                  value: textDecoder.decode(result.value, {
                    stream: true,
                  }),
                };
              })
              .catch((e) => {
                streamCache[identifier].error = e;
              });
          }
          if (promise.error) {
            throw promise.error;
          }
          if (promise.result === void 0) {
            throw promise;
          }
          let { done, value } = promise.result;
          let scriptTag = value
            ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ]('script', {
                nonce,
                dangerouslySetInnerHTML: {
                  __html:
                    'window.__reactRouterContext.streamController.enqueue('.concat(
                      escapeHtml(JSON.stringify(value)),
                      ');'
                    ),
                },
              })
            : null;
          if (done) {
            return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'Fragment'
              ],
              null,
              scriptTag,
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ]('script', {
                nonce,
                dangerouslySetInnerHTML: {
                  __html:
                    'window.__reactRouterContext.streamController.close();',
                },
              })
            );
          } else {
            return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'Fragment'
              ],
              null,
              scriptTag,
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'Suspense'
                ],
                null,
                /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](StreamTransfer, {
                  context,
                  identifier: identifier + 1,
                  reader,
                  textDecoder,
                  nonce,
                })
              )
            );
          }
        }
        function getTurboStreamSingleFetchDataStrategy(
          getRouter,
          manifest,
          routeModules,
          ssr,
          basename
        ) {
          let dataStrategy = getSingleFetchDataStrategyImpl(
            getRouter,
            (match) => {
              let manifestRoute = manifest.routes[match.route.id];
              invariant2(manifestRoute, 'Route not found in manifest');
              let routeModule = routeModules[match.route.id];
              return {
                hasLoader: manifestRoute.hasLoader,
                hasClientLoader: manifestRoute.hasClientLoader,
                hasShouldRevalidate: Boolean(
                  routeModule === null || routeModule === void 0
                    ? void 0
                    : routeModule.shouldRevalidate
                ),
              };
            },
            fetchAndDecodeViaTurboStream,
            ssr,
            basename
          );
          return async (args) =>
            args.unstable_runClientMiddleware(dataStrategy);
        }
        function getSingleFetchDataStrategyImpl(
          getRouter,
          getRouteInfo,
          fetchAndDecode,
          ssr,
          basename
        ) {
          return async (args) => {
            let { request, matches, fetcherKey } = args;
            let router = getRouter();
            if (request.method !== 'GET') {
              return singleFetchActionStrategy(args, fetchAndDecode, basename);
            }
            let foundRevalidatingServerLoader = matches.some((m) => {
              let { hasLoader, hasClientLoader } = getRouteInfo(m);
              return (
                m.unstable_shouldCallHandler() && hasLoader && !hasClientLoader
              );
            });
            if (!ssr && !foundRevalidatingServerLoader) {
              return nonSsrStrategy(
                args,
                getRouteInfo,
                fetchAndDecode,
                basename
              );
            }
            if (fetcherKey) {
              return singleFetchLoaderFetcherStrategy(
                args,
                fetchAndDecode,
                basename
              );
            }
            return singleFetchLoaderNavigationStrategy(
              args,
              router,
              getRouteInfo,
              fetchAndDecode,
              ssr,
              basename
            );
          };
        }
        async function singleFetchActionStrategy(
          args,
          fetchAndDecode,
          basename
        ) {
          let actionMatch = args.matches.find((m) =>
            m.unstable_shouldCallHandler()
          );
          invariant2(actionMatch, 'No action match found');
          let actionStatus = void 0;
          let result = await actionMatch.resolve(async (handler) => {
            let result2 = await handler(async () => {
              let { data: data2, status } = await fetchAndDecode(
                args,
                basename,
                [actionMatch.route.id]
              );
              actionStatus = status;
              return unwrapSingleFetchResult(data2, actionMatch.route.id);
            });
            return result2;
          });
          if (
            isResponse(result.result) ||
            isRouteErrorResponse(result.result) ||
            isDataWithResponseInit(result.result)
          ) {
            return {
              [actionMatch.route.id]: result,
            };
          }
          return {
            [actionMatch.route.id]: {
              type: result.type,
              result: data(result.result, actionStatus),
            },
          };
        }
        async function nonSsrStrategy(
          args,
          getRouteInfo,
          fetchAndDecode,
          basename
        ) {
          let matchesToLoad = args.matches.filter((m) =>
            m.unstable_shouldCallHandler()
          );
          let results = {};
          await Promise.all(
            matchesToLoad.map((m) =>
              m.resolve(async (handler) => {
                try {
                  let { hasClientLoader } = getRouteInfo(m);
                  let routeId = m.route.id;
                  let result = hasClientLoader
                    ? await handler(async () => {
                        let { data: data2 } = await fetchAndDecode(
                          args,
                          basename,
                          [routeId]
                        );
                        return unwrapSingleFetchResult(data2, routeId);
                      })
                    : await handler();
                  results[m.route.id] = {
                    type: 'data',
                    result,
                  };
                } catch (e) {
                  results[m.route.id] = {
                    type: 'error',
                    result: e,
                  };
                }
              })
            )
          );
          return results;
        }
        async function singleFetchLoaderNavigationStrategy(
          args,
          router,
          getRouteInfo,
          fetchAndDecode,
          ssr,
          basename
        ) {
          let routesParams = /* @__PURE__ */ new Set();
          let foundOptOutRoute = false;
          let routeDfds = args.matches.map(() => createDeferred2());
          let singleFetchDfd = createDeferred2();
          let results = {};
          let resolvePromise = Promise.all(
            args.matches.map(async (m, i) =>
              m.resolve(async (handler) => {
                routeDfds[i].resolve();
                let routeId = m.route.id;
                let { hasLoader, hasClientLoader, hasShouldRevalidate } =
                  getRouteInfo(m);
                let defaultShouldRevalidate =
                  !m.unstable_shouldRevalidateArgs ||
                  m.unstable_shouldRevalidateArgs.actionStatus == null ||
                  m.unstable_shouldRevalidateArgs.actionStatus < 400;
                let shouldCall = m.unstable_shouldCallHandler(
                  defaultShouldRevalidate
                );
                if (!shouldCall) {
                  foundOptOutRoute ||
                    (foundOptOutRoute =
                      m.unstable_shouldRevalidateArgs != null && // This is a revalidation,
                      hasLoader && // for a route with a server loader,
                      hasShouldRevalidate === true);
                  return;
                }
                if (hasClientLoader) {
                  if (hasLoader) {
                    foundOptOutRoute = true;
                  }
                  try {
                    let result = await handler(async () => {
                      let { data: data2 } = await fetchAndDecode(
                        args,
                        basename,
                        [routeId]
                      );
                      return unwrapSingleFetchResult(data2, routeId);
                    });
                    results[routeId] = {
                      type: 'data',
                      result,
                    };
                  } catch (e) {
                    results[routeId] = {
                      type: 'error',
                      result: e,
                    };
                  }
                  return;
                }
                if (hasLoader) {
                  routesParams.add(routeId);
                }
                try {
                  let result = await handler(async () => {
                    let data2 = await singleFetchDfd.promise;
                    return unwrapSingleFetchResult(data2, routeId);
                  });
                  results[routeId] = {
                    type: 'data',
                    result,
                  };
                } catch (e) {
                  results[routeId] = {
                    type: 'error',
                    result: e,
                  };
                }
              })
            )
          );
          await Promise.all(routeDfds.map((d) => d.promise));
          let isInitialLoad =
            !router.state.initialized &&
            router.state.navigation.state === 'idle';
          if (
            (isInitialLoad || routesParams.size === 0) &&
            !window.__reactRouterHdrActive
          ) {
            singleFetchDfd.resolve({
              routes: {},
            });
          } else {
            let targetRoutes =
              ssr && foundOptOutRoute && routesParams.size > 0
                ? [...routesParams.keys()]
                : void 0;
            try {
              let data2 = await fetchAndDecode(args, basename, targetRoutes);
              singleFetchDfd.resolve(data2.data);
            } catch (e) {
              singleFetchDfd.reject(e);
            }
          }
          await resolvePromise;
          await bubbleMiddlewareErrors(
            singleFetchDfd.promise,
            args.matches,
            routesParams,
            results
          );
          return results;
        }
        async function bubbleMiddlewareErrors(
          singleFetchPromise,
          matches,
          routesParams,
          results
        ) {
          try {
            let middlewareError;
            let fetchedData = await singleFetchPromise;
            if ('routes' in fetchedData) {
              for (let match of matches) {
                if (match.route.id in fetchedData.routes) {
                  let routeResult = fetchedData.routes[match.route.id];
                  if ('error' in routeResult) {
                    middlewareError = routeResult.error;
                    break;
                  }
                }
              }
            }
            if (middlewareError !== void 0) {
              Array.from(routesParams.values()).forEach((routeId) => {
                if (
                  results[routeId].result instanceof SingleFetchNoResultError
                ) {
                  results[routeId].result = middlewareError;
                }
              });
            }
          } catch (e) {}
        }
        async function singleFetchLoaderFetcherStrategy(
          args,
          fetchAndDecode,
          basename
        ) {
          let fetcherMatch = args.matches.find((m) =>
            m.unstable_shouldCallHandler()
          );
          invariant2(fetcherMatch, 'No fetcher match found');
          let routeId = fetcherMatch.route.id;
          let result = await fetcherMatch.resolve(async (handler) =>
            handler(async () => {
              let { data: data2 } = await fetchAndDecode(args, basename, [
                routeId,
              ]);
              return unwrapSingleFetchResult(data2, routeId);
            })
          );
          return {
            [fetcherMatch.route.id]: result,
          };
        }
        function stripIndexParam(url) {
          let indexValues = url.searchParams.getAll('index');
          url.searchParams.delete('index');
          let indexValuesToKeep = [];
          for (let indexValue of indexValues) {
            if (indexValue) {
              indexValuesToKeep.push(indexValue);
            }
          }
          for (let toKeep of indexValuesToKeep) {
            url.searchParams.append('index', toKeep);
          }
          return url;
        }
        function singleFetchUrl(reqUrl, basename) {
          let url =
            typeof reqUrl === 'string'
              ? new URL(
                  reqUrl, // This can be called during the SSR flow via PrefetchPageLinksImpl so
                  // don't assume window is available
                  typeof window === 'undefined'
                    ? 'server://singlefetch/'
                    : window.location.origin
                )
              : reqUrl;
          if (url.pathname === '/') {
            url.pathname = '_root.data';
          } else if (
            basename &&
            stripBasename(url.pathname, basename) === '/'
          ) {
            url.pathname = ''.concat(
              basename.replace(/\/$/, ''),
              '/_root.data'
            );
          } else {
            url.pathname = ''.concat(url.pathname.replace(/\/$/, ''), '.data');
          }
          return url;
        }
        async function fetchAndDecodeViaTurboStream(
          args,
          basename,
          targetRoutes
        ) {
          let { request } = args;
          let url = singleFetchUrl(request.url, basename);
          if (request.method === 'GET') {
            url = stripIndexParam(url);
            if (targetRoutes) {
              url.searchParams.set('_routes', targetRoutes.join(','));
            }
          }
          let res = await fetch(url, await createRequestInit(request));
          if (res.status === 404 && !res.headers.has('X-Remix-Response')) {
            throw new ErrorResponseImpl(404, 'Not Found', true);
          }
          if (res.status === 204 && res.headers.has('X-Remix-Redirect')) {
            return {
              status: SINGLE_FETCH_REDIRECT_STATUS,
              data: {
                redirect: {
                  redirect: res.headers.get('X-Remix-Redirect'),
                  status: Number(res.headers.get('X-Remix-Status') || '302'),
                  revalidate: res.headers.get('X-Remix-Revalidate') === 'true',
                  reload: res.headers.get('X-Remix-Reload-Document') === 'true',
                  replace: res.headers.get('X-Remix-Replace') === 'true',
                },
              },
            };
          }
          if (NO_BODY_STATUS_CODES.has(res.status)) {
            let routes = {};
            if (targetRoutes && request.method !== 'GET') {
              routes[targetRoutes[0]] = {
                data: void 0,
              };
            }
            return {
              status: res.status,
              data: {
                routes,
              },
            };
          }
          invariant2(res.body, 'No response body to decode');
          try {
            let decoded = await decodeViaTurboStream(res.body, window);
            let data2;
            if (request.method === 'GET') {
              let typed = decoded.value;
              if (SingleFetchRedirectSymbol in typed) {
                data2 = {
                  redirect: typed[SingleFetchRedirectSymbol],
                };
              } else {
                data2 = {
                  routes: typed,
                };
              }
            } else {
              let typed = decoded.value;
              let routeId =
                targetRoutes === null || targetRoutes === void 0
                  ? void 0
                  : targetRoutes[0];
              invariant2(
                routeId,
                'No routeId found for single fetch call decoding'
              );
              if ('redirect' in typed) {
                data2 = {
                  redirect: typed,
                };
              } else {
                data2 = {
                  routes: {
                    [routeId]: typed,
                  },
                };
              }
            }
            return {
              status: res.status,
              data: data2,
            };
          } catch (e) {
            throw new Error('Unable to decode turbo-stream response');
          }
        }
        function decodeViaTurboStream(body, global2) {
          return decode(body, {
            plugins: [
              function (type) {
                for (
                  var _len = arguments.length,
                    rest = new Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  rest[_key - 1] = arguments[_key];
                }
                if (type === 'SanitizedError') {
                  let [name, message, stack] = rest;
                  let Constructor = Error;
                  if (
                    name &&
                    name in global2 &&
                    typeof global2[name] === 'function'
                  ) {
                    Constructor = global2[name];
                  }
                  let error = new Constructor(message);
                  error.stack = stack;
                  return {
                    value: error,
                  };
                }
                if (type === 'ErrorResponse') {
                  let [data2, status, statusText] = rest;
                  return {
                    value: new ErrorResponseImpl(status, statusText, data2),
                  };
                }
                if (type === 'SingleFetchRedirect') {
                  return {
                    value: {
                      [SingleFetchRedirectSymbol]: rest[0],
                    },
                  };
                }
                if (type === 'SingleFetchClassInstance') {
                  return {
                    value: rest[0],
                  };
                }
                if (type === 'SingleFetchFallback') {
                  return {
                    value: void 0,
                  };
                }
              },
            ],
          });
        }
        function unwrapSingleFetchResult(result, routeId) {
          if ('redirect' in result) {
            let {
              redirect: location,
              revalidate,
              reload,
              replace: replace2,
              status,
            } = result.redirect;
            throw redirect(location, {
              status,
              headers: {
                // Three R's of redirecting (lol Veep)
                ...(revalidate
                  ? {
                      'X-Remix-Revalidate': 'yes',
                    }
                  : null),
                ...(reload
                  ? {
                      'X-Remix-Reload-Document': 'yes',
                    }
                  : null),
                ...(replace2
                  ? {
                      'X-Remix-Replace': 'yes',
                    }
                  : null),
              },
            });
          }
          let routeResult = result.routes[routeId];
          if (routeResult == null) {
            throw new SingleFetchNoResultError(
              'No result found for routeId "'.concat(routeId, '"')
            );
          } else if ('error' in routeResult) {
            throw routeResult.error;
          } else if ('data' in routeResult) {
            return routeResult.data;
          } else {
            throw new Error(
              'Invalid response found for routeId "'.concat(routeId, '"')
            );
          }
        }
        function createDeferred2() {
          let resolve;
          let reject;
          let promise = new Promise((res, rej) => {
            resolve = async (val) => {
              res(val);
              try {
                await promise;
              } catch (e) {}
            };
            reject = async (error) => {
              rej(error);
              try {
                await promise;
              } catch (e) {}
            };
          });
          return {
            promise,
            //@ts-ignore
            resolve,
            //@ts-ignore
            reject,
          };
        }
        var RemixErrorBoundary = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
          'Component'
        ] {
          static getDerivedStateFromError(error) {
            return {
              error,
            };
          }
          static getDerivedStateFromProps(props, state) {
            if (state.location !== props.location) {
              return {
                error: props.error || null,
                location: props.location,
              };
            }
            return {
              error: props.error || state.error,
              location: state.location,
            };
          }
          render() {
            if (this.state.error) {
              return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](RemixRootDefaultErrorBoundary, {
                error: this.state.error,
                isOutsideRemixApp: true,
              });
            } else {
              return this.props.children;
            }
          }
          constructor(props) {
            super(props);
            this.state = {
              error: props.error || null,
              location: props.location,
            };
          }
        };
        function RemixRootDefaultErrorBoundary(param) {
          let { error, isOutsideRemixApp } = param;
          console.error(error);
          let heyDeveloper =
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ]('script', {
              dangerouslySetInnerHTML: {
                __html:
                  '\n        console.log(\n          "💿 Hey developer 👋. You can provide a way better UX than this when your app throws errors. Check out https://reactrouter.com/how-to/error-boundary for more information."\n        );\n      ',
              },
            });
          if (isRouteErrorResponse(error)) {
            return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              BoundaryShell,
              {
                title: 'Unhandled Thrown Response!',
              },
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](
                'h1',
                {
                  style: {
                    fontSize: '24px',
                  },
                },
                error.status,
                ' ',
                error.statusText
              ),
              ('TURBOPACK compile-time truthy', 1)
                ? heyDeveloper
                : 'TURBOPACK unreachable'
            );
          }
          let errorInstance;
          if (error instanceof Error) {
            errorInstance = error;
          } else {
            let errorString =
              error == null
                ? 'Unknown Error'
                : typeof error === 'object' && 'toString' in error
                  ? error.toString()
                  : JSON.stringify(error);
            errorInstance = new Error(errorString);
          }
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            BoundaryShell,
            {
              title: 'Application Error!',
              isOutsideRemixApp,
            },
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              'h1',
              {
                style: {
                  fontSize: '24px',
                },
              },
              'Application Error'
            ),
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              'pre',
              {
                style: {
                  padding: '2rem',
                  background: 'hsla(10, 50%, 50%, 0.1)',
                  color: 'red',
                  overflow: 'auto',
                },
              },
              errorInstance.stack
            ),
            heyDeveloper
          );
        }
        function BoundaryShell(param) {
          let { title, renderScripts, isOutsideRemixApp, children } = param;
          var _routeModules_root;
          let { routeModules } = useFrameworkContext();
          if (
            ((_routeModules_root = routeModules.root) === null ||
            _routeModules_root === void 0
              ? void 0
              : _routeModules_root.Layout) &&
            !isOutsideRemixApp
          ) {
            return children;
          }
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            'html',
            {
              lang: 'en',
            },
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              'head',
              null,
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ]('meta', {
                charSet: 'utf-8',
              }),
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ]('meta', {
                name: 'viewport',
                content:
                  'width=device-width,initial-scale=1,viewport-fit=cover',
              }),
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ]('title', null, title)
            ),
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              'body',
              null,
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](
                'main',
                {
                  style: {
                    fontFamily: 'system-ui, sans-serif',
                    padding: '2rem',
                  },
                },
                children,
                renderScripts
                  ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'createElement'
                    ](Scripts, null)
                  : null
              )
            )
          );
        }
        function RemixRootDefaultHydrateFallback() {
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            BoundaryShell,
            {
              title: 'Loading...',
              renderScripts: true,
            },
            ('TURBOPACK compile-time truthy', 1)
              ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ]('script', {
                  dangerouslySetInnerHTML: {
                    __html:
                      '\n              console.log(\n                "💿 Hey developer 👋. You can provide a way better UX than this " +\n                "when your app is loading JS modules and/or running `clientLoader` " +\n                "functions. Check out https://reactrouter.com/start/framework/route-module#hydratefallback " +\n                "for more information."\n              );\n            ',
                  },
                })
              : 'TURBOPACK unreachable'
          );
        }
        // lib/dom/ssr/routes.tsx
        function groupRoutesByParentId(manifest) {
          let routes = {};
          Object.values(manifest).forEach((route) => {
            if (route) {
              let parentId = route.parentId || '';
              if (!routes[parentId]) {
                routes[parentId] = [];
              }
              routes[parentId].push(route);
            }
          });
          return routes;
        }
        function getRouteComponents(route, routeModule, isSpaMode) {
          let Component4 = getRouteModuleComponent(routeModule);
          let HydrateFallback =
            routeModule.HydrateFallback && (!isSpaMode || route.id === 'root')
              ? routeModule.HydrateFallback
              : route.id === 'root'
                ? RemixRootDefaultHydrateFallback
                : void 0;
          let ErrorBoundary = routeModule.ErrorBoundary
            ? routeModule.ErrorBoundary
            : route.id === 'root'
              ? () =>
                  /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](RemixRootDefaultErrorBoundary, {
                    error: useRouteError(),
                  })
              : void 0;
          if (route.id === 'root' && routeModule.Layout) {
            return {
              ...(Component4
                ? {
                    element:
                      /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'createElement'
                      ](
                        routeModule.Layout,
                        null,
                        /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                          'createElement'
                        ](Component4, null)
                      ),
                  }
                : {
                    Component: Component4,
                  }),
              ...(ErrorBoundary
                ? {
                    errorElement:
                      /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'createElement'
                      ](
                        routeModule.Layout,
                        null,
                        /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                          'createElement'
                        ](ErrorBoundary, null)
                      ),
                  }
                : {
                    ErrorBoundary,
                  }),
              ...(HydrateFallback
                ? {
                    hydrateFallbackElement:
                      /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'createElement'
                      ](
                        routeModule.Layout,
                        null,
                        /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                          'createElement'
                        ](HydrateFallback, null)
                      ),
                  }
                : {
                    HydrateFallback,
                  }),
            };
          }
          return {
            Component: Component4,
            ErrorBoundary,
            HydrateFallback,
          };
        }
        function createServerRoutes(manifest, routeModules, future, isSpaMode) {
          let parentId =
              arguments.length > 4 && arguments[4] !== void 0
                ? arguments[4]
                : '',
            routesByParentId =
              arguments.length > 5 && arguments[5] !== void 0
                ? arguments[5]
                : groupRoutesByParentId(manifest),
            spaModeLazyPromise =
              arguments.length > 6 && arguments[6] !== void 0
                ? arguments[6]
                : Promise.resolve({
                    Component: () => null,
                  });
          return (routesByParentId[parentId] || []).map((route) => {
            let routeModule = routeModules[route.id];
            invariant2(
              routeModule,
              'No `routeModule` available to create server routes'
            );
            let dataRoute = {
              ...getRouteComponents(route, routeModule, isSpaMode),
              caseSensitive: route.caseSensitive,
              id: route.id,
              index: route.index,
              path: route.path,
              handle: routeModule.handle,
              // For SPA Mode, all routes are lazy except root.  However we tell the
              // router root is also lazy here too since we don't need a full
              // implementation - we just need a `lazy` prop to tell the RR rendering
              // where to stop which is always at the root route in SPA mode
              lazy: isSpaMode ? () => spaModeLazyPromise : void 0,
              // For partial hydration rendering, we need to indicate when the route
              // has a loader/clientLoader, but it won't ever be called during the static
              // render, so just give it a no-op function so we can render down to the
              // proper fallback
              loader:
                route.hasLoader || route.hasClientLoader ? () => null : void 0,
            };
            let children = createServerRoutes(
              manifest,
              routeModules,
              future,
              isSpaMode,
              route.id,
              routesByParentId,
              spaModeLazyPromise
            );
            if (children.length > 0) dataRoute.children = children;
            return dataRoute;
          });
        }
        function createClientRoutesWithHMRRevalidationOptOut(
          needsRevalidation,
          manifest,
          routeModulesCache,
          initialState,
          ssr,
          isSpaMode
        ) {
          return createClientRoutes(
            manifest,
            routeModulesCache,
            initialState,
            ssr,
            isSpaMode,
            '',
            groupRoutesByParentId(manifest),
            needsRevalidation
          );
        }
        function preventInvalidServerHandlerCall(type, route) {
          if (
            (type === 'loader' && !route.hasLoader) ||
            (type === 'action' && !route.hasAction)
          ) {
            let fn = type === 'action' ? 'serverAction()' : 'serverLoader()';
            let msg = 'You are trying to call '
              .concat(fn, ' on a route that does not have a server ')
              .concat(type, ' (routeId: "')
              .concat(route.id, '")');
            console.error(msg);
            throw new ErrorResponseImpl(
              400,
              'Bad Request',
              new Error(msg),
              true
            );
          }
        }
        function noActionDefinedError(type, routeId) {
          let article = type === 'clientAction' ? 'a' : 'an';
          let msg = 'Route "'
            .concat(routeId, '" does not have ')
            .concat(article, ' ')
            .concat(
              type,
              ', but you are trying to submit to it. To fix this, please add '
            )
            .concat(article, ' `')
            .concat(type, '` function to the route');
          console.error(msg);
          throw new ErrorResponseImpl(
            405,
            'Method Not Allowed',
            new Error(msg),
            true
          );
        }
        function createClientRoutes(
          manifest,
          routeModulesCache,
          initialState,
          ssr,
          isSpaMode
        ) {
          let parentId =
              arguments.length > 5 && arguments[5] !== void 0
                ? arguments[5]
                : '',
            routesByParentId =
              arguments.length > 6 && arguments[6] !== void 0
                ? arguments[6]
                : groupRoutesByParentId(manifest),
            needsRevalidation = arguments.length > 7 ? arguments[7] : void 0;
          return (routesByParentId[parentId] || []).map((route) => {
            let routeModule = routeModulesCache[route.id];
            function fetchServerHandler(singleFetch) {
              invariant2(
                typeof singleFetch === 'function',
                'No single fetch function available for route handler'
              );
              return singleFetch();
            }
            function fetchServerLoader(singleFetch) {
              if (!route.hasLoader) return Promise.resolve(null);
              return fetchServerHandler(singleFetch);
            }
            function fetchServerAction(singleFetch) {
              if (!route.hasAction) {
                throw noActionDefinedError('action', route.id);
              }
              return fetchServerHandler(singleFetch);
            }
            function prefetchModule(modulePath) {
              import(/* @vite-ignore */ /* webpackIgnore: true */ modulePath);
            }
            function prefetchRouteModuleChunks(route2) {
              if (route2.clientActionModule) {
                prefetchModule(route2.clientActionModule);
              }
              if (route2.clientLoaderModule) {
                prefetchModule(route2.clientLoaderModule);
              }
            }
            async function prefetchStylesAndCallHandler(handler) {
              let cachedModule = routeModulesCache[route.id];
              let linkPrefetchPromise = cachedModule
                ? prefetchStyleLinks(route, cachedModule)
                : Promise.resolve();
              try {
                return handler();
              } finally {
                await linkPrefetchPromise;
              }
            }
            let dataRoute = {
              id: route.id,
              index: route.index,
              path: route.path,
            };
            if (routeModule) {
              var _initialState_loaderData,
                _initialState_errors,
                _routeModule_clientLoader;
              Object.assign(dataRoute, {
                ...dataRoute,
                ...getRouteComponents(route, routeModule, isSpaMode),
                unstable_middleware: routeModule.unstable_clientMiddleware,
                handle: routeModule.handle,
                shouldRevalidate: getShouldRevalidateFunction(
                  dataRoute.path,
                  routeModule,
                  route,
                  ssr,
                  needsRevalidation
                ),
              });
              let hasInitialData =
                initialState &&
                initialState.loaderData &&
                route.id in initialState.loaderData;
              let initialData = hasInitialData
                ? initialState === null || initialState === void 0
                  ? void 0
                  : (_initialState_loaderData = initialState.loaderData) ===
                        null || _initialState_loaderData === void 0
                    ? void 0
                    : _initialState_loaderData[route.id]
                : void 0;
              let hasInitialError =
                initialState &&
                initialState.errors &&
                route.id in initialState.errors;
              let initialError = hasInitialError
                ? initialState === null || initialState === void 0
                  ? void 0
                  : (_initialState_errors = initialState.errors) === null ||
                      _initialState_errors === void 0
                    ? void 0
                    : _initialState_errors[route.id]
                : void 0;
              let isHydrationRequest =
                needsRevalidation == null &&
                (((_routeModule_clientLoader = routeModule.clientLoader) ===
                  null || _routeModule_clientLoader === void 0
                  ? void 0
                  : _routeModule_clientLoader.hydrate) === true ||
                  !route.hasLoader);
              dataRoute.loader = async (param, singleFetch) => {
                let { request, params, context } = param;
                try {
                  let result = await prefetchStylesAndCallHandler(async () => {
                    invariant2(
                      routeModule,
                      'No `routeModule` available for critical-route loader'
                    );
                    if (!routeModule.clientLoader) {
                      return fetchServerLoader(singleFetch);
                    }
                    return routeModule.clientLoader({
                      request,
                      params,
                      context,
                      async serverLoader() {
                        preventInvalidServerHandlerCall('loader', route);
                        if (isHydrationRequest) {
                          if (hasInitialData) {
                            return initialData;
                          }
                          if (hasInitialError) {
                            throw initialError;
                          }
                        }
                        return fetchServerLoader(singleFetch);
                      },
                    });
                  });
                  return result;
                } finally {
                  isHydrationRequest = false;
                }
              };
              dataRoute.loader.hydrate = shouldHydrateRouteLoader(
                route.id,
                routeModule.clientLoader,
                route.hasLoader,
                isSpaMode
              );
              dataRoute.action = (param, singleFetch) => {
                let { request, params, context } = param;
                return prefetchStylesAndCallHandler(async () => {
                  invariant2(
                    routeModule,
                    'No `routeModule` available for critical-route action'
                  );
                  if (!routeModule.clientAction) {
                    if (isSpaMode) {
                      throw noActionDefinedError('clientAction', route.id);
                    }
                    return fetchServerAction(singleFetch);
                  }
                  return routeModule.clientAction({
                    request,
                    params,
                    context,
                    async serverAction() {
                      preventInvalidServerHandlerCall('action', route);
                      return fetchServerAction(singleFetch);
                    },
                  });
                });
              };
            } else {
              if (!route.hasClientLoader) {
                dataRoute.loader = (_, singleFetch) =>
                  prefetchStylesAndCallHandler(() => {
                    return fetchServerLoader(singleFetch);
                  });
              }
              if (!route.hasClientAction) {
                dataRoute.action = (_, singleFetch) =>
                  prefetchStylesAndCallHandler(() => {
                    if (isSpaMode) {
                      throw noActionDefinedError('clientAction', route.id);
                    }
                    return fetchServerAction(singleFetch);
                  });
              }
              let lazyRoutePromise;
              async function getLazyRoute() {
                if (lazyRoutePromise) {
                  return await lazyRoutePromise;
                }
                lazyRoutePromise = (async () => {
                  if (route.clientLoaderModule || route.clientActionModule) {
                    await new Promise((resolve) => setTimeout(resolve, 0));
                  }
                  let routeModulePromise = loadRouteModuleWithBlockingLinks(
                    route,
                    routeModulesCache
                  );
                  prefetchRouteModuleChunks(route);
                  return await routeModulePromise;
                })();
                return await lazyRoutePromise;
              }
              dataRoute.lazy = {
                loader: route.hasClientLoader
                  ? async () => {
                      let { clientLoader } = route.clientLoaderModule
                        ? await import(
                            /* @vite-ignore */ /* webpackIgnore: true */ route.clientLoaderModule
                          )
                        : await getLazyRoute();
                      invariant2(
                        clientLoader,
                        'No `clientLoader` export found'
                      );
                      return (args, singleFetch) =>
                        clientLoader({
                          ...args,
                          async serverLoader() {
                            preventInvalidServerHandlerCall('loader', route);
                            return fetchServerLoader(singleFetch);
                          },
                        });
                    }
                  : void 0,
                action: route.hasClientAction
                  ? async () => {
                      let clientActionPromise = route.clientActionModule
                        ? import(
                            /* @vite-ignore */ /* webpackIgnore: true */ route.clientActionModule
                          )
                        : getLazyRoute();
                      prefetchRouteModuleChunks(route);
                      let { clientAction } = await clientActionPromise;
                      invariant2(
                        clientAction,
                        'No `clientAction` export found'
                      );
                      return (args, singleFetch) =>
                        clientAction({
                          ...args,
                          async serverAction() {
                            preventInvalidServerHandlerCall('action', route);
                            return fetchServerAction(singleFetch);
                          },
                        });
                    }
                  : void 0,
                unstable_middleware: route.hasClientMiddleware
                  ? async () => {
                      let { unstable_clientMiddleware } =
                        route.clientMiddlewareModule
                          ? await import(
                              /* @vite-ignore */ /* webpackIgnore: true */ route.clientMiddlewareModule
                            )
                          : await getLazyRoute();
                      invariant2(
                        unstable_clientMiddleware,
                        'No `unstable_clientMiddleware` export found'
                      );
                      return unstable_clientMiddleware;
                    }
                  : void 0,
                shouldRevalidate: async () => {
                  let lazyRoute = await getLazyRoute();
                  return getShouldRevalidateFunction(
                    dataRoute.path,
                    lazyRoute,
                    route,
                    ssr,
                    needsRevalidation
                  );
                },
                handle: async () => (await getLazyRoute()).handle,
                // No need to wrap these in layout since the root route is never
                // loaded via route.lazy()
                Component: async () => (await getLazyRoute()).Component,
                ErrorBoundary: route.hasErrorBoundary
                  ? async () => (await getLazyRoute()).ErrorBoundary
                  : void 0,
              };
            }
            let children = createClientRoutes(
              manifest,
              routeModulesCache,
              initialState,
              ssr,
              isSpaMode,
              route.id,
              routesByParentId,
              needsRevalidation
            );
            if (children.length > 0) dataRoute.children = children;
            return dataRoute;
          });
        }
        function getShouldRevalidateFunction(
          path,
          route,
          manifestRoute,
          ssr,
          needsRevalidation
        ) {
          if (needsRevalidation) {
            return wrapShouldRevalidateForHdr(
              manifestRoute.id,
              route.shouldRevalidate,
              needsRevalidation
            );
          }
          if (
            !ssr &&
            manifestRoute.hasLoader &&
            !manifestRoute.hasClientLoader
          ) {
            let myParams = path
              ? compilePath(path)[1].map((p) => p.paramName)
              : [];
            const didParamsChange = (opts) =>
              myParams.some(
                (p) => opts.currentParams[p] !== opts.nextParams[p]
              );
            if (route.shouldRevalidate) {
              let fn = route.shouldRevalidate;
              return (opts) =>
                fn({
                  ...opts,
                  defaultShouldRevalidate: didParamsChange(opts),
                });
            } else {
              return (opts) => didParamsChange(opts);
            }
          }
          if (ssr && route.shouldRevalidate) {
            let fn = route.shouldRevalidate;
            return (opts) =>
              fn({
                ...opts,
                defaultShouldRevalidate: true,
              });
          }
          return route.shouldRevalidate;
        }
        function wrapShouldRevalidateForHdr(
          routeId,
          routeShouldRevalidate,
          needsRevalidation
        ) {
          let handledRevalidation = false;
          return (arg) => {
            if (!handledRevalidation) {
              handledRevalidation = true;
              return needsRevalidation.has(routeId);
            }
            return routeShouldRevalidate
              ? routeShouldRevalidate(arg)
              : arg.defaultShouldRevalidate;
          };
        }
        async function loadRouteModuleWithBlockingLinks(route, routeModules) {
          let routeModulePromise = loadRouteModule(route, routeModules);
          let prefetchRouteCssPromise = prefetchRouteCss(route);
          let routeModule = await routeModulePromise;
          await Promise.all([
            prefetchRouteCssPromise,
            prefetchStyleLinks(route, routeModule),
          ]);
          return {
            Component: getRouteModuleComponent(routeModule),
            ErrorBoundary: routeModule.ErrorBoundary,
            unstable_clientMiddleware: routeModule.unstable_clientMiddleware,
            clientAction: routeModule.clientAction,
            clientLoader: routeModule.clientLoader,
            handle: routeModule.handle,
            links: routeModule.links,
            meta: routeModule.meta,
            shouldRevalidate: routeModule.shouldRevalidate,
          };
        }
        function getRouteModuleComponent(routeModule) {
          if (routeModule.default == null) return void 0;
          let isEmptyObject =
            typeof routeModule.default === 'object' &&
            Object.keys(routeModule.default).length === 0;
          if (!isEmptyObject) {
            return routeModule.default;
          }
        }
        function shouldHydrateRouteLoader(
          routeId,
          clientLoader,
          hasLoader,
          isSpaMode
        ) {
          return (
            (isSpaMode && routeId !== 'root') ||
            (clientLoader != null &&
              (clientLoader.hydrate === true || hasLoader !== true))
          );
        }
        // lib/dom/ssr/fog-of-war.ts
        var nextPaths = /* @__PURE__ */ new Set();
        var discoveredPathsMaxSize = 1e3;
        var discoveredPaths = /* @__PURE__ */ new Set();
        var URL_LIMIT = 7680;
        function isFogOfWarEnabled(routeDiscovery, ssr) {
          return routeDiscovery.mode === 'lazy' && ssr === true;
        }
        function getPartialManifest(param, router) {
          let { sri, ...manifest } = param;
          let routeIds = new Set(router.state.matches.map((m) => m.route.id));
          let segments = router.state.location.pathname
            .split('/')
            .filter(Boolean);
          let paths = ['/'];
          segments.pop();
          while (segments.length > 0) {
            paths.push('/'.concat(segments.join('/')));
            segments.pop();
          }
          paths.forEach((path) => {
            let matches = matchRoutes(router.routes, path, router.basename);
            if (matches) {
              matches.forEach((m) => routeIds.add(m.route.id));
            }
          });
          let initialRoutes = [...routeIds].reduce(
            (acc, id) =>
              Object.assign(acc, {
                [id]: manifest.routes[id],
              }),
            {}
          );
          return {
            ...manifest,
            routes: initialRoutes,
            sri: sri ? true : void 0,
          };
        }
        function getPatchRoutesOnNavigationFunction(
          manifest,
          routeModules,
          ssr,
          routeDiscovery,
          isSpaMode,
          basename
        ) {
          if (!isFogOfWarEnabled(routeDiscovery, ssr)) {
            return void 0;
          }
          return async (param) => {
            let { path, patch, signal, fetcherKey } = param;
            if (discoveredPaths.has(path)) {
              return;
            }
            await fetchAndApplyManifestPatches(
              [path],
              fetcherKey ? window.location.href : path,
              manifest,
              routeModules,
              ssr,
              isSpaMode,
              basename,
              routeDiscovery.manifestPath,
              patch,
              signal
            );
          };
        }
        function useFogOFWarDiscovery(
          router,
          manifest,
          routeModules,
          ssr,
          routeDiscovery,
          isSpaMode
        ) {
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'useFogOFWarDiscovery.useEffect': () => {
                var // @ts-expect-error - TS doesn't know about this yet
                  _window_navigator_connection,
                  _window_navigator;
                if (
                  !isFogOfWarEnabled(routeDiscovery, ssr) ||
                  ((_window_navigator = window.navigator) === null ||
                  _window_navigator === void 0
                    ? void 0
                    : (_window_navigator_connection =
                          _window_navigator.connection) === null ||
                        _window_navigator_connection === void 0
                      ? void 0
                      : _window_navigator_connection.saveData) === true
                ) {
                  return;
                }
                function registerElement(el) {
                  let path =
                    el.tagName === 'FORM'
                      ? el.getAttribute('action')
                      : el.getAttribute('href');
                  if (!path) {
                    return;
                  }
                  let pathname =
                    el.tagName === 'A'
                      ? el.pathname
                      : new URL(path, window.location.origin).pathname;
                  if (!discoveredPaths.has(pathname)) {
                    nextPaths.add(pathname);
                  }
                }
                async function fetchPatches() {
                  document
                    .querySelectorAll('a[data-discover], form[data-discover]')
                    .forEach(registerElement);
                  let lazyPaths = Array.from(nextPaths.keys()).filter(
                    {
                      'useFogOFWarDiscovery.useEffect.fetchPatches.lazyPaths': (
                        path
                      ) => {
                        if (discoveredPaths.has(path)) {
                          nextPaths.delete(path);
                          return false;
                        }
                        return true;
                      },
                    }['useFogOFWarDiscovery.useEffect.fetchPatches.lazyPaths']
                  );
                  if (lazyPaths.length === 0) {
                    return;
                  }
                  try {
                    await fetchAndApplyManifestPatches(
                      lazyPaths,
                      null,
                      manifest,
                      routeModules,
                      ssr,
                      isSpaMode,
                      router.basename,
                      routeDiscovery.manifestPath,
                      router.patchRoutes
                    );
                  } catch (e) {
                    console.error('Failed to fetch manifest patches', e);
                  }
                }
                let debouncedFetchPatches = debounce(fetchPatches, 100);
                fetchPatches();
                let observer = new MutationObserver(
                  {
                    'useFogOFWarDiscovery.useEffect': () =>
                      debouncedFetchPatches(),
                  }['useFogOFWarDiscovery.useEffect']
                );
                observer.observe(document.documentElement, {
                  subtree: true,
                  childList: true,
                  attributes: true,
                  attributeFilter: ['data-discover', 'href', 'action'],
                });
                return {
                  'useFogOFWarDiscovery.useEffect': () => observer.disconnect(),
                }['useFogOFWarDiscovery.useEffect'];
              },
            }['useFogOFWarDiscovery.useEffect'],
            [ssr, isSpaMode, manifest, routeModules, router, routeDiscovery]
          );
        }
        function getManifestPath(_manifestPath, basename) {
          let manifestPath = _manifestPath || '/__manifest';
          if (basename == null) {
            return manifestPath;
          }
          return ''.concat(basename).concat(manifestPath).replace(/\/+/g, '/');
        }
        var MANIFEST_VERSION_STORAGE_KEY = 'react-router-manifest-version';
        async function fetchAndApplyManifestPatches(
          paths,
          errorReloadPath,
          manifest,
          routeModules,
          ssr,
          isSpaMode,
          basename,
          manifestPath,
          patchRoutes,
          signal
        ) {
          let url = new URL(
            getManifestPath(manifestPath, basename),
            window.location.origin
          );
          paths.sort().forEach((path) => url.searchParams.append('p', path));
          url.searchParams.set('version', manifest.version);
          if (url.toString().length > URL_LIMIT) {
            nextPaths.clear();
            return;
          }
          let serverPatches;
          try {
            let res = await fetch(url, {
              signal,
            });
            if (!res.ok) {
              throw new Error(
                ''.concat(res.status, ' ').concat(res.statusText)
              );
            } else if (
              res.status === 204 &&
              res.headers.has('X-Remix-Reload-Document')
            ) {
              if (!errorReloadPath) {
                console.warn(
                  'Detected a manifest version mismatch during eager route discovery. The next navigation/fetch to an undiscovered route will result in a new document navigation to sync up with the latest manifest.'
                );
                return;
              }
              if (
                sessionStorage.getItem(MANIFEST_VERSION_STORAGE_KEY) ===
                manifest.version
              ) {
                console.error(
                  'Unable to discover routes due to manifest version mismatch.'
                );
                return;
              }
              sessionStorage.setItem(
                MANIFEST_VERSION_STORAGE_KEY,
                manifest.version
              );
              window.location.href = errorReloadPath;
              console.warn('Detected manifest version mismatch, reloading...');
              await new Promise(() => {});
            } else if (res.status >= 400) {
              throw new Error(await res.text());
            }
            sessionStorage.removeItem(MANIFEST_VERSION_STORAGE_KEY);
            serverPatches = await res.json();
          } catch (e) {
            if (signal === null || signal === void 0 ? void 0 : signal.aborted)
              return;
            throw e;
          }
          let knownRoutes = new Set(Object.keys(manifest.routes));
          let patches = Object.values(serverPatches).reduce((acc, route) => {
            if (route && !knownRoutes.has(route.id)) {
              acc[route.id] = route;
            }
            return acc;
          }, {});
          Object.assign(manifest.routes, patches);
          paths.forEach((p) => addToFifoQueue(p, discoveredPaths));
          let parentIds = /* @__PURE__ */ new Set();
          Object.values(patches).forEach((patch) => {
            if (patch && (!patch.parentId || !patches[patch.parentId])) {
              parentIds.add(patch.parentId);
            }
          });
          parentIds.forEach((parentId) =>
            patchRoutes(
              parentId || null,
              createClientRoutes(
                patches,
                routeModules,
                null,
                ssr,
                isSpaMode,
                parentId
              )
            )
          );
        }
        function addToFifoQueue(path, queue) {
          if (queue.size >= discoveredPathsMaxSize) {
            let first = queue.values().next().value;
            queue.delete(first);
          }
          queue.add(path);
        }
        function debounce(callback, wait) {
          let timeoutId;
          return function () {
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }
            window.clearTimeout(timeoutId);
            timeoutId = window.setTimeout(() => callback(...args), wait);
          };
        }
        // lib/dom/ssr/components.tsx
        function useDataRouterContext2() {
          let context =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](DataRouterContext);
          invariant2(
            context,
            'You must render this element inside a <DataRouterContext.Provider> element'
          );
          return context;
        }
        function useDataRouterStateContext() {
          let context =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](DataRouterStateContext);
          invariant2(
            context,
            'You must render this element inside a <DataRouterStateContext.Provider> element'
          );
          return context;
        }
        var FrameworkContext =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createContext'
          ](void 0);
        FrameworkContext.displayName = 'FrameworkContext';
        function useFrameworkContext() {
          let context =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](FrameworkContext);
          invariant2(
            context,
            'You must render this element inside a <HydratedRouter> element'
          );
          return context;
        }
        function usePrefetchBehavior(prefetch, theirElementProps) {
          let frameworkContext =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](FrameworkContext);
          let [maybePrefetch, setMaybePrefetch] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ](false);
          let [shouldPrefetch, setShouldPrefetch] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ](false);
          let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } =
            theirElementProps;
          let ref =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ](null);
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'usePrefetchBehavior.useEffect': () => {
                if (prefetch === 'render') {
                  setShouldPrefetch(true);
                }
                if (prefetch === 'viewport') {
                  let callback = {
                    'usePrefetchBehavior.useEffect.callback': (entries) => {
                      entries.forEach(
                        {
                          'usePrefetchBehavior.useEffect.callback': (entry) => {
                            setShouldPrefetch(entry.isIntersecting);
                          },
                        }['usePrefetchBehavior.useEffect.callback']
                      );
                    },
                  }['usePrefetchBehavior.useEffect.callback'];
                  let observer = new IntersectionObserver(callback, {
                    threshold: 0.5,
                  });
                  if (ref.current) observer.observe(ref.current);
                  return {
                    'usePrefetchBehavior.useEffect': () => {
                      observer.disconnect();
                    },
                  }['usePrefetchBehavior.useEffect'];
                }
              },
            }['usePrefetchBehavior.useEffect'],
            [prefetch]
          );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'usePrefetchBehavior.useEffect': () => {
                if (maybePrefetch) {
                  let id = setTimeout(
                    {
                      'usePrefetchBehavior.useEffect.id': () => {
                        setShouldPrefetch(true);
                      },
                    }['usePrefetchBehavior.useEffect.id'],
                    100
                  );
                  return {
                    'usePrefetchBehavior.useEffect': () => {
                      clearTimeout(id);
                    },
                  }['usePrefetchBehavior.useEffect'];
                }
              },
            }['usePrefetchBehavior.useEffect'],
            [maybePrefetch]
          );
          let setIntent = () => {
            setMaybePrefetch(true);
          };
          let cancelIntent = () => {
            setMaybePrefetch(false);
            setShouldPrefetch(false);
          };
          if (!frameworkContext) {
            return [false, ref, {}];
          }
          if (prefetch !== 'intent') {
            return [shouldPrefetch, ref, {}];
          }
          return [
            shouldPrefetch,
            ref,
            {
              onFocus: composeEventHandlers(onFocus, setIntent),
              onBlur: composeEventHandlers(onBlur, cancelIntent),
              onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
              onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
              onTouchStart: composeEventHandlers(onTouchStart, setIntent),
            },
          ];
        }
        function composeEventHandlers(theirHandler, ourHandler) {
          return (event) => {
            theirHandler && theirHandler(event);
            if (!event.defaultPrevented) {
              ourHandler(event);
            }
          };
        }
        function getActiveMatches(matches, errors, isSpaMode) {
          if (isSpaMode && !isHydrated) {
            return [matches[0]];
          }
          if (errors) {
            let errorIdx = matches.findIndex(
              (m) => errors[m.route.id] !== void 0
            );
            return matches.slice(0, errorIdx + 1);
          }
          return matches;
        }
        function Links() {
          let { isSpaMode, manifest, routeModules, criticalCss } =
            useFrameworkContext();
          let { errors, matches: routerMatches } = useDataRouterStateContext();
          let matches = getActiveMatches(routerMatches, errors, isSpaMode);
          let keyedLinks =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'Links.useMemo[keyedLinks]': () =>
                  getKeyedLinksForMatches(matches, routeModules, manifest),
              }['Links.useMemo[keyedLinks]'],
              [matches, routeModules, manifest]
            );
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Fragment'
            ],
            null,
            typeof criticalCss === 'string'
              ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ]('style', {
                  dangerouslySetInnerHTML: {
                    __html: criticalCss,
                  },
                })
              : null,
            typeof criticalCss === 'object'
              ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ]('link', {
                  rel: 'stylesheet',
                  href: criticalCss.href,
                })
              : null,
            keyedLinks.map((param) => {
              let { key, link } = param;
              return isPageLinkDescriptor(link)
                ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](PrefetchPageLinks, {
                    key,
                    ...link,
                  })
                : /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ]('link', {
                    key,
                    ...link,
                  });
            })
          );
        }
        function PrefetchPageLinks(param) {
          let { page, ...dataLinkProps } = param;
          let { router } = useDataRouterContext2();
          let matches =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'PrefetchPageLinks.useMemo[matches]': () =>
                  matchRoutes(router.routes, page, router.basename),
              }['PrefetchPageLinks.useMemo[matches]'],
              [router.routes, page, router.basename]
            );
          if (!matches) {
            return null;
          }
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](PrefetchPageLinksImpl, {
            page,
            matches,
            ...dataLinkProps,
          });
        }
        function useKeyedPrefetchLinks(matches) {
          let { manifest, routeModules } = useFrameworkContext();
          let [keyedPrefetchLinks, setKeyedPrefetchLinks] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]([]);
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'useKeyedPrefetchLinks.useEffect': () => {
                let interrupted = false;
                void getKeyedPrefetchLinks(
                  matches,
                  manifest,
                  routeModules
                ).then(
                  {
                    'useKeyedPrefetchLinks.useEffect': (links) => {
                      if (!interrupted) {
                        setKeyedPrefetchLinks(links);
                      }
                    },
                  }['useKeyedPrefetchLinks.useEffect']
                );
                return {
                  'useKeyedPrefetchLinks.useEffect': () => {
                    interrupted = true;
                  },
                }['useKeyedPrefetchLinks.useEffect'];
              },
            }['useKeyedPrefetchLinks.useEffect'],
            [matches, manifest, routeModules]
          );
          return keyedPrefetchLinks;
        }
        function PrefetchPageLinksImpl(param) {
          let { page, matches: nextMatches, ...linkProps } = param;
          let location = useLocation();
          let { manifest, routeModules } = useFrameworkContext();
          let { basename } = useDataRouterContext2();
          let { loaderData, matches } = useDataRouterStateContext();
          let newMatchesForData =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'PrefetchPageLinksImpl.useMemo[newMatchesForData]': () =>
                  getNewMatchesForLinks(
                    page,
                    nextMatches,
                    matches,
                    manifest,
                    location,
                    'data'
                  ),
              }['PrefetchPageLinksImpl.useMemo[newMatchesForData]'],
              [page, nextMatches, matches, manifest, location]
            );
          let newMatchesForAssets =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'PrefetchPageLinksImpl.useMemo[newMatchesForAssets]': () =>
                  getNewMatchesForLinks(
                    page,
                    nextMatches,
                    matches,
                    manifest,
                    location,
                    'assets'
                  ),
              }['PrefetchPageLinksImpl.useMemo[newMatchesForAssets]'],
              [page, nextMatches, matches, manifest, location]
            );
          let dataHrefs =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'PrefetchPageLinksImpl.useMemo[dataHrefs]': () => {
                  if (
                    page ===
                    location.pathname + location.search + location.hash
                  ) {
                    return [];
                  }
                  let routesParams = /* @__PURE__ */ new Set();
                  let foundOptOutRoute = false;
                  nextMatches.forEach(
                    {
                      'PrefetchPageLinksImpl.useMemo[dataHrefs]': (m) => {
                        var _routeModules_m_route_id;
                        let manifestRoute = manifest.routes[m.route.id];
                        if (!manifestRoute || !manifestRoute.hasLoader) {
                          return;
                        }
                        if (
                          !newMatchesForData.some(
                            {
                              'PrefetchPageLinksImpl.useMemo[dataHrefs]': (
                                m2
                              ) => m2.route.id === m.route.id,
                            }['PrefetchPageLinksImpl.useMemo[dataHrefs]']
                          ) &&
                          m.route.id in loaderData &&
                          ((_routeModules_m_route_id =
                            routeModules[m.route.id]) === null ||
                          _routeModules_m_route_id === void 0
                            ? void 0
                            : _routeModules_m_route_id.shouldRevalidate)
                        ) {
                          foundOptOutRoute = true;
                        } else if (manifestRoute.hasClientLoader) {
                          foundOptOutRoute = true;
                        } else {
                          routesParams.add(m.route.id);
                        }
                      },
                    }['PrefetchPageLinksImpl.useMemo[dataHrefs]']
                  );
                  if (routesParams.size === 0) {
                    return [];
                  }
                  let url = singleFetchUrl(page, basename);
                  if (foundOptOutRoute && routesParams.size > 0) {
                    url.searchParams.set(
                      '_routes',
                      nextMatches
                        .filter(
                          {
                            'PrefetchPageLinksImpl.useMemo[dataHrefs]': (m) =>
                              routesParams.has(m.route.id),
                          }['PrefetchPageLinksImpl.useMemo[dataHrefs]']
                        )
                        .map(
                          {
                            'PrefetchPageLinksImpl.useMemo[dataHrefs]': (m) =>
                              m.route.id,
                          }['PrefetchPageLinksImpl.useMemo[dataHrefs]']
                        )
                        .join(',')
                    );
                  }
                  return [url.pathname + url.search];
                },
              }['PrefetchPageLinksImpl.useMemo[dataHrefs]'],
              [
                basename,
                loaderData,
                location,
                manifest,
                newMatchesForData,
                nextMatches,
                page,
                routeModules,
              ]
            );
          let moduleHrefs =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'PrefetchPageLinksImpl.useMemo[moduleHrefs]': () =>
                  getModuleLinkHrefs(newMatchesForAssets, manifest),
              }['PrefetchPageLinksImpl.useMemo[moduleHrefs]'],
              [newMatchesForAssets, manifest]
            );
          let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Fragment'
            ],
            null,
            dataHrefs.map((href2) =>
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ]('link', {
                key: href2,
                rel: 'prefetch',
                as: 'fetch',
                href: href2,
                ...linkProps,
              })
            ),
            moduleHrefs.map((href2) =>
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ]('link', {
                key: href2,
                rel: 'modulepreload',
                href: href2,
                ...linkProps,
              })
            ),
            keyedPrefetchLinks.map((param) => {
              let { key, link } = param;
              return (
                // these don't spread `linkProps` because they are full link descriptors
                // already with their own props
                /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ]('link', {
                  key,
                  ...link,
                })
              );
            })
          );
        }
        function Meta() {
          let { isSpaMode, routeModules } = useFrameworkContext();
          let {
            errors,
            matches: routerMatches,
            loaderData,
          } = useDataRouterStateContext();
          let location = useLocation();
          let _matches = getActiveMatches(routerMatches, errors, isSpaMode);
          let error = null;
          if (errors) {
            error = errors[_matches[_matches.length - 1].route.id];
          }
          let meta = [];
          let leafMeta = null;
          let matches = [];
          for (let i = 0; i < _matches.length; i++) {
            let _match = _matches[i];
            let routeId = _match.route.id;
            let data2 = loaderData[routeId];
            let params = _match.params;
            let routeModule = routeModules[routeId];
            let routeMeta = [];
            let match = {
              id: routeId,
              data: data2,
              meta: [],
              params: _match.params,
              pathname: _match.pathname,
              handle: _match.route.handle,
              error,
            };
            matches[i] = match;
            if (
              routeModule === null || routeModule === void 0
                ? void 0
                : routeModule.meta
            ) {
              routeMeta =
                typeof routeModule.meta === 'function'
                  ? routeModule.meta({
                      data: data2,
                      params,
                      location,
                      matches,
                      error,
                    })
                  : Array.isArray(routeModule.meta)
                    ? [...routeModule.meta]
                    : routeModule.meta;
            } else if (leafMeta) {
              routeMeta = [...leafMeta];
            }
            routeMeta = routeMeta || [];
            if (!Array.isArray(routeMeta)) {
              throw new Error(
                'The route at ' +
                  _match.route.path +
                  ' returns an invalid value. All route meta functions must return an array of meta objects.\n\nTo reference the meta function API, see https://remix.run/route/meta'
              );
            }
            match.meta = routeMeta;
            matches[i] = match;
            meta = [...routeMeta];
            leafMeta = meta;
          }
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Fragment'
            ],
            null,
            meta.flat().map((metaProps) => {
              if (!metaProps) {
                return null;
              }
              if ('tagName' in metaProps) {
                let { tagName, ...rest } = metaProps;
                if (!isValidMetaTag(tagName)) {
                  console.warn(
                    'A meta object uses an invalid tagName: '.concat(
                      tagName,
                      ". Expected either 'link' or 'meta'"
                    )
                  );
                  return null;
                }
                let Comp = tagName;
                return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](Comp, {
                  key: JSON.stringify(rest),
                  ...rest,
                });
              }
              if ('title' in metaProps) {
                return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](
                  'title',
                  {
                    key: 'title',
                  },
                  String(metaProps.title)
                );
              }
              if ('charset' in metaProps) {
                var _metaProps_charSet;
                (_metaProps_charSet = metaProps.charSet) !== null &&
                _metaProps_charSet !== void 0
                  ? _metaProps_charSet
                  : (metaProps.charSet = metaProps.charset);
                delete metaProps.charset;
              }
              if ('charSet' in metaProps && metaProps.charSet != null) {
                return typeof metaProps.charSet === 'string'
                  ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'createElement'
                    ]('meta', {
                      key: 'charSet',
                      charSet: metaProps.charSet,
                    })
                  : null;
              }
              if ('script:ld+json' in metaProps) {
                try {
                  let json = JSON.stringify(metaProps['script:ld+json']);
                  return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ]('script', {
                    key: 'script:ld+json:'.concat(json),
                    type: 'application/ld+json',
                    dangerouslySetInnerHTML: {
                      __html: json,
                    },
                  });
                } catch (err) {
                  return null;
                }
              }
              return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ]('meta', {
                key: JSON.stringify(metaProps),
                ...metaProps,
              });
            })
          );
        }
        function isValidMetaTag(tagName) {
          return typeof tagName === 'string' && /^(meta|link)$/.test(tagName);
        }
        var isHydrated = false;
        function Scripts(props) {
          let {
            manifest,
            serverHandoffString,
            isSpaMode,
            renderMeta,
            routeDiscovery,
            ssr,
          } = useFrameworkContext();
          let {
            router,
            static: isStatic,
            staticContext,
          } = useDataRouterContext2();
          let { matches: routerMatches } = useDataRouterStateContext();
          let enableFogOfWar = isFogOfWarEnabled(routeDiscovery, ssr);
          if (renderMeta) {
            renderMeta.didRenderScripts = true;
          }
          let matches = getActiveMatches(routerMatches, null, isSpaMode);
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'Scripts.useEffect': () => {
                isHydrated = true;
              },
            }['Scripts.useEffect'],
            []
          );
          let initialScripts =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'Scripts.useMemo[initialScripts]': () => {
                  var _manifest_hmr;
                  let streamScript =
                    'window.__reactRouterContext.stream = new ReadableStream({start(controller){window.__reactRouterContext.streamController = controller;}}).pipeThrough(new TextEncoderStream());';
                  let contextScript = staticContext
                    ? 'window.__reactRouterContext = '
                        .concat(serverHandoffString, ';')
                        .concat(streamScript)
                    : ' ';
                  let routeModulesScript = !isStatic
                    ? ' '
                    : ''
                        .concat(
                          (
                            (_manifest_hmr = manifest.hmr) === null ||
                            _manifest_hmr === void 0
                              ? void 0
                              : _manifest_hmr.runtime
                          )
                            ? 'import '.concat(
                                JSON.stringify(manifest.hmr.runtime),
                                ';'
                              )
                            : ''
                        )
                        .concat(
                          !enableFogOfWar
                            ? 'import '.concat(JSON.stringify(manifest.url))
                            : '',
                          ';\n'
                        )
                        .concat(
                          matches
                            .map(
                              {
                                'Scripts.useMemo[initialScripts]': (
                                  match,
                                  routeIndex
                                ) => {
                                  let routeVarName = 'route'.concat(routeIndex);
                                  let manifestEntry =
                                    manifest.routes[match.route.id];
                                  invariant2(
                                    manifestEntry,
                                    'Route '.concat(
                                      match.route.id,
                                      ' not found in manifest'
                                    )
                                  );
                                  let {
                                    clientActionModule,
                                    clientLoaderModule,
                                    clientMiddlewareModule,
                                    hydrateFallbackModule,
                                    module,
                                  } = manifestEntry;
                                  let chunks = [
                                    ...(clientActionModule
                                      ? [
                                          {
                                            module: clientActionModule,
                                            varName: ''.concat(
                                              routeVarName,
                                              '_clientAction'
                                            ),
                                          },
                                        ]
                                      : []),
                                    ...(clientLoaderModule
                                      ? [
                                          {
                                            module: clientLoaderModule,
                                            varName: ''.concat(
                                              routeVarName,
                                              '_clientLoader'
                                            ),
                                          },
                                        ]
                                      : []),
                                    ...(clientMiddlewareModule
                                      ? [
                                          {
                                            module: clientMiddlewareModule,
                                            varName: ''.concat(
                                              routeVarName,
                                              '_clientMiddleware'
                                            ),
                                          },
                                        ]
                                      : []),
                                    ...(hydrateFallbackModule
                                      ? [
                                          {
                                            module: hydrateFallbackModule,
                                            varName: ''.concat(
                                              routeVarName,
                                              '_HydrateFallback'
                                            ),
                                          },
                                        ]
                                      : []),
                                    {
                                      module,
                                      varName: ''.concat(routeVarName, '_main'),
                                    },
                                  ];
                                  if (chunks.length === 1) {
                                    return 'import * as '
                                      .concat(routeVarName, ' from ')
                                      .concat(JSON.stringify(module), ';');
                                  }
                                  let chunkImportsSnippet = chunks
                                    .map(
                                      {
                                        'Scripts.useMemo[initialScripts].chunkImportsSnippet':
                                          (chunk) =>
                                            'import * as '
                                              .concat(chunk.varName, ' from "')
                                              .concat(chunk.module, '";'),
                                      }[
                                        'Scripts.useMemo[initialScripts].chunkImportsSnippet'
                                      ]
                                    )
                                    .join('\n');
                                  let mergedChunksSnippet = 'const '
                                    .concat(routeVarName, ' = {')
                                    .concat(
                                      chunks
                                        .map(
                                          {
                                            'Scripts.useMemo[initialScripts].mergedChunksSnippet':
                                              (chunk) =>
                                                '...'.concat(chunk.varName),
                                          }[
                                            'Scripts.useMemo[initialScripts].mergedChunksSnippet'
                                          ]
                                        )
                                        .join(','),
                                      '};'
                                    );
                                  return [
                                    chunkImportsSnippet,
                                    mergedChunksSnippet,
                                  ].join('\n');
                                },
                              }['Scripts.useMemo[initialScripts]']
                            )
                            .join('\n'),
                          '\n  '
                        )
                        .concat(
                          enableFogOfWar // Inline a minimal manifest with the SSR matches
                            ? 'window.__reactRouterManifest = '.concat(
                                JSON.stringify(
                                  getPartialManifest(manifest, router),
                                  null,
                                  2
                                ),
                                ';'
                              )
                            : '',
                          '\n  window.__reactRouterRouteModules = {'
                        )
                        .concat(
                          matches
                            .map(
                              {
                                'Scripts.useMemo[initialScripts]': (
                                  match,
                                  index
                                ) =>
                                  ''
                                    .concat(
                                      JSON.stringify(match.route.id),
                                      ':route'
                                    )
                                    .concat(index),
                              }['Scripts.useMemo[initialScripts]']
                            )
                            .join(','),
                          '};\n\nimport('
                        )
                        .concat(JSON.stringify(manifest.entry.module), ');');
                  return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'Fragment'
                    ],
                    null,
                    /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'createElement'
                    ]('script', {
                      ...props,
                      suppressHydrationWarning: true,
                      dangerouslySetInnerHTML: createHtml(contextScript),
                      type: void 0,
                    }),
                    /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'createElement'
                    ]('script', {
                      ...props,
                      suppressHydrationWarning: true,
                      dangerouslySetInnerHTML: createHtml(routeModulesScript),
                      type: 'module',
                      async: true,
                    })
                  );
                },
              }['Scripts.useMemo[initialScripts]'],
              []
            );
          let preloads = isHydrated
            ? []
            : dedupe(
                manifest.entry.imports.concat(
                  getModuleLinkHrefs(matches, manifest, {
                    includeHydrateFallback: true,
                  })
                )
              );
          let sri = typeof manifest.sri === 'object' ? manifest.sri : {};
          return isHydrated
            ? null
            : /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'Fragment'
                ],
                null,
                typeof manifest.sri === 'object'
                  ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'createElement'
                    ]('script', {
                      'rr-importmap': '',
                      type: 'importmap',
                      suppressHydrationWarning: true,
                      dangerouslySetInnerHTML: {
                        __html: JSON.stringify({
                          integrity: sri,
                        }),
                      },
                    })
                  : null,
                !enableFogOfWar
                  ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'createElement'
                    ]('link', {
                      rel: 'modulepreload',
                      href: manifest.url,
                      crossOrigin: props.crossOrigin,
                      integrity: sri[manifest.url],
                      suppressHydrationWarning: true,
                    })
                  : null,
                /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ]('link', {
                  rel: 'modulepreload',
                  href: manifest.entry.module,
                  crossOrigin: props.crossOrigin,
                  integrity: sri[manifest.entry.module],
                  suppressHydrationWarning: true,
                }),
                preloads.map((path) =>
                  /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ]('link', {
                    key: path,
                    rel: 'modulepreload',
                    href: path,
                    crossOrigin: props.crossOrigin,
                    integrity: sri[path],
                    suppressHydrationWarning: true,
                  })
                ),
                initialScripts
              );
        }
        function dedupe(array) {
          return [...new Set(array)];
        }
        function mergeRefs() {
          for (
            var _len = arguments.length, refs = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            refs[_key] = arguments[_key];
          }
          return (value) => {
            refs.forEach((ref) => {
              if (typeof ref === 'function') {
                ref(value);
              } else if (ref != null) {
                ref.current = value;
              }
            });
          };
        }
        // lib/dom/lib.tsx
        var isBrowser =
          typeof window !== 'undefined' &&
          typeof window.document !== 'undefined' &&
          typeof window.document.createElement !== 'undefined';
        try {
          if (isBrowser) {
            window.__reactRouterVersion = '7.6.3';
          }
        } catch (e) {}
        function createBrowserRouter(routes, opts) {
          return createRouter({
            basename: opts === null || opts === void 0 ? void 0 : opts.basename,
            unstable_getContext:
              opts === null || opts === void 0
                ? void 0
                : opts.unstable_getContext,
            future: opts === null || opts === void 0 ? void 0 : opts.future,
            history: createBrowserHistory({
              window: opts === null || opts === void 0 ? void 0 : opts.window,
            }),
            hydrationData:
              (opts === null || opts === void 0
                ? void 0
                : opts.hydrationData) || parseHydrationData(),
            routes,
            mapRouteProperties,
            hydrationRouteProperties,
            dataStrategy:
              opts === null || opts === void 0 ? void 0 : opts.dataStrategy,
            patchRoutesOnNavigation:
              opts === null || opts === void 0
                ? void 0
                : opts.patchRoutesOnNavigation,
            window: opts === null || opts === void 0 ? void 0 : opts.window,
          }).initialize();
        }
        function createHashRouter(routes, opts) {
          return createRouter({
            basename: opts === null || opts === void 0 ? void 0 : opts.basename,
            unstable_getContext:
              opts === null || opts === void 0
                ? void 0
                : opts.unstable_getContext,
            future: opts === null || opts === void 0 ? void 0 : opts.future,
            history: createHashHistory({
              window: opts === null || opts === void 0 ? void 0 : opts.window,
            }),
            hydrationData:
              (opts === null || opts === void 0
                ? void 0
                : opts.hydrationData) || parseHydrationData(),
            routes,
            mapRouteProperties,
            hydrationRouteProperties,
            dataStrategy:
              opts === null || opts === void 0 ? void 0 : opts.dataStrategy,
            patchRoutesOnNavigation:
              opts === null || opts === void 0
                ? void 0
                : opts.patchRoutesOnNavigation,
            window: opts === null || opts === void 0 ? void 0 : opts.window,
          }).initialize();
        }
        function parseHydrationData() {
          var _window;
          let state =
            (_window = window) === null || _window === void 0
              ? void 0
              : _window.__staticRouterHydrationData;
          if (state && state.errors) {
            state = {
              ...state,
              errors: deserializeErrors(state.errors),
            };
          }
          return state;
        }
        function deserializeErrors(errors) {
          if (!errors) return null;
          let entries = Object.entries(errors);
          let serialized = {};
          for (let [key, val] of entries) {
            if (val && val.__type === 'RouteErrorResponse') {
              serialized[key] = new ErrorResponseImpl(
                val.status,
                val.statusText,
                val.data,
                val.internal === true
              );
            } else if (val && val.__type === 'Error') {
              if (val.__subType) {
                let ErrorConstructor = window[val.__subType];
                if (typeof ErrorConstructor === 'function') {
                  try {
                    let error = new ErrorConstructor(val.message);
                    error.stack = '';
                    serialized[key] = error;
                  } catch (e) {}
                }
              }
              if (serialized[key] == null) {
                let error = new Error(val.message);
                error.stack = '';
                serialized[key] = error;
              }
            } else {
              serialized[key] = val;
            }
          }
          return serialized;
        }
        function BrowserRouter(param) {
          let { basename, children, window: window2 } = param;
          let historyRef =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ]();
          if (historyRef.current == null) {
            historyRef.current = createBrowserHistory({
              window: window2,
              v5Compat: true,
            });
          }
          let history = historyRef.current;
          let [state, setStateImpl] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]({
              action: history.action,
              location: history.location,
            });
          let setState =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'BrowserRouter.useCallback[setState]': (newState) => {
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'startTransition'
                  ](
                    {
                      'BrowserRouter.useCallback[setState]': () =>
                        setStateImpl(newState),
                    }['BrowserRouter.useCallback[setState]']
                  );
                },
              }['BrowserRouter.useCallback[setState]'],
              [setStateImpl]
            );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useLayoutEffect'
          ](
            {
              'BrowserRouter.useLayoutEffect': () => history.listen(setState),
            }['BrowserRouter.useLayoutEffect'],
            [history, setState]
          );
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](Router, {
            basename,
            children,
            location: state.location,
            navigationType: state.action,
            navigator: history,
          });
        }
        function HashRouter(param) {
          let { basename, children, window: window2 } = param;
          let historyRef =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ]();
          if (historyRef.current == null) {
            historyRef.current = createHashHistory({
              window: window2,
              v5Compat: true,
            });
          }
          let history = historyRef.current;
          let [state, setStateImpl] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]({
              action: history.action,
              location: history.location,
            });
          let setState =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'HashRouter.useCallback[setState]': (newState) => {
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'startTransition'
                  ](
                    {
                      'HashRouter.useCallback[setState]': () =>
                        setStateImpl(newState),
                    }['HashRouter.useCallback[setState]']
                  );
                },
              }['HashRouter.useCallback[setState]'],
              [setStateImpl]
            );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useLayoutEffect'
          ](
            {
              'HashRouter.useLayoutEffect': () => history.listen(setState),
            }['HashRouter.useLayoutEffect'],
            [history, setState]
          );
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](Router, {
            basename,
            children,
            location: state.location,
            navigationType: state.action,
            navigator: history,
          });
        }
        function HistoryRouter(param) {
          let { basename, children, history } = param;
          let [state, setStateImpl] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ]({
              action: history.action,
              location: history.location,
            });
          let setState =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'HistoryRouter.useCallback[setState]': (newState) => {
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'startTransition'
                  ](
                    {
                      'HistoryRouter.useCallback[setState]': () =>
                        setStateImpl(newState),
                    }['HistoryRouter.useCallback[setState]']
                  );
                },
              }['HistoryRouter.useCallback[setState]'],
              [setStateImpl]
            );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useLayoutEffect'
          ](
            {
              'HistoryRouter.useLayoutEffect': () => history.listen(setState),
            }['HistoryRouter.useLayoutEffect'],
            [history, setState]
          );
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](Router, {
            basename,
            children,
            location: state.location,
            navigationType: state.action,
            navigator: history,
          });
        }
        HistoryRouter.displayName = 'unstable_HistoryRouter';
        var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
        var Link =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'forwardRef'
          ](function LinkWithRef(param, forwardedRef) {
            let {
              onClick,
              discover = 'render',
              prefetch = 'none',
              relative,
              reloadDocument,
              replace: replace2,
              state,
              target,
              to,
              preventScrollReset,
              viewTransition,
              ...rest
            } = param;
            let { basename } =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useContext'
              ](NavigationContext);
            let isAbsolute =
              typeof to === 'string' && ABSOLUTE_URL_REGEX2.test(to);
            let absoluteHref;
            let isExternal = false;
            if (typeof to === 'string' && isAbsolute) {
              absoluteHref = to;
              if (isBrowser) {
                try {
                  let currentUrl = new URL(window.location.href);
                  let targetUrl = to.startsWith('//')
                    ? new URL(currentUrl.protocol + to)
                    : new URL(to);
                  let path = stripBasename(targetUrl.pathname, basename);
                  if (targetUrl.origin === currentUrl.origin && path != null) {
                    to = path + targetUrl.search + targetUrl.hash;
                  } else {
                    isExternal = true;
                  }
                } catch (e) {
                  warning(
                    false,
                    '<Link to="'.concat(
                      to,
                      '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.'
                    )
                  );
                }
              }
            }
            let href2 = useHref(to, {
              relative,
            });
            let [shouldPrefetch, prefetchRef, prefetchHandlers] =
              usePrefetchBehavior(prefetch, rest);
            let internalOnClick = useLinkClickHandler(to, {
              replace: replace2,
              state,
              target,
              preventScrollReset,
              relative,
              viewTransition,
            });
            function handleClick(event) {
              if (onClick) onClick(event);
              if (!event.defaultPrevented) {
                internalOnClick(event);
              }
            }
            let link = // eslint-disable-next-line jsx-a11y/anchor-has-content
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ]('a', {
                ...rest,
                ...prefetchHandlers,
                href: absoluteHref || href2,
                onClick: isExternal || reloadDocument ? onClick : handleClick,
                ref: mergeRefs(forwardedRef, prefetchRef),
                target,
                'data-discover':
                  !isAbsolute && discover === 'render' ? 'true' : void 0,
              });
            return shouldPrefetch && !isAbsolute
              ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'Fragment'
                  ],
                  null,
                  link,
                  /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](PrefetchPageLinks, {
                    page: href2,
                  })
                )
              : link;
          });
        Link.displayName = 'Link';
        var NavLink =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'forwardRef'
          ](function NavLinkWithRef(param, ref) {
            let {
              'aria-current': ariaCurrentProp = 'page',
              caseSensitive = false,
              className: classNameProp = '',
              end = false,
              style: styleProp,
              to,
              viewTransition,
              children,
              ...rest
            } = param;
            let path = useResolvedPath(to, {
              relative: rest.relative,
            });
            let location = useLocation();
            let routerState =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useContext'
              ](DataRouterStateContext);
            let { navigator, basename } =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useContext'
              ](NavigationContext);
            let isTransitioning =
              routerState != null && // Conditional usage is OK here because the usage of a data router is static
              // eslint-disable-next-line react-hooks/rules-of-hooks
              useViewTransitionState(path) &&
              viewTransition === true;
            let toPathname = navigator.encodeLocation
              ? navigator.encodeLocation(path).pathname
              : path.pathname;
            let locationPathname = location.pathname;
            let nextLocationPathname =
              routerState &&
              routerState.navigation &&
              routerState.navigation.location
                ? routerState.navigation.location.pathname
                : null;
            if (!caseSensitive) {
              locationPathname = locationPathname.toLowerCase();
              nextLocationPathname = nextLocationPathname
                ? nextLocationPathname.toLowerCase()
                : null;
              toPathname = toPathname.toLowerCase();
            }
            if (nextLocationPathname && basename) {
              nextLocationPathname =
                stripBasename(nextLocationPathname, basename) ||
                nextLocationPathname;
            }
            const endSlashPosition =
              toPathname !== '/' && toPathname.endsWith('/')
                ? toPathname.length - 1
                : toPathname.length;
            let isActive =
              locationPathname === toPathname ||
              (!end &&
                locationPathname.startsWith(toPathname) &&
                locationPathname.charAt(endSlashPosition) === '/');
            let isPending =
              nextLocationPathname != null &&
              (nextLocationPathname === toPathname ||
                (!end &&
                  nextLocationPathname.startsWith(toPathname) &&
                  nextLocationPathname.charAt(toPathname.length) === '/'));
            let renderProps = {
              isActive,
              isPending,
              isTransitioning,
            };
            let ariaCurrent = isActive ? ariaCurrentProp : void 0;
            let className;
            if (typeof classNameProp === 'function') {
              className = classNameProp(renderProps);
            } else {
              className = [
                classNameProp,
                isActive ? 'active' : null,
                isPending ? 'pending' : null,
                isTransitioning ? 'transitioning' : null,
              ]
                .filter(Boolean)
                .join(' ');
            }
            let style =
              typeof styleProp === 'function'
                ? styleProp(renderProps)
                : styleProp;
            return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              Link,
              {
                ...rest,
                'aria-current': ariaCurrent,
                className,
                ref,
                style,
                to,
                viewTransition,
              },
              typeof children === 'function' ? children(renderProps) : children
            );
          });
        NavLink.displayName = 'NavLink';
        var Form =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'forwardRef'
          ]((param, forwardedRef) => {
            let {
              discover = 'render',
              fetcherKey,
              navigate,
              reloadDocument,
              replace: replace2,
              state,
              method = defaultMethod,
              action,
              onSubmit,
              relative,
              preventScrollReset,
              viewTransition,
              ...props
            } = param;
            let submit = useSubmit();
            let formAction = useFormAction(action, {
              relative,
            });
            let formMethod = method.toLowerCase() === 'get' ? 'get' : 'post';
            let isAbsolute =
              typeof action === 'string' && ABSOLUTE_URL_REGEX2.test(action);
            let submitHandler = (event) => {
              onSubmit && onSubmit(event);
              if (event.defaultPrevented) return;
              event.preventDefault();
              let submitter = event.nativeEvent.submitter;
              let submitMethod =
                (submitter === null || submitter === void 0
                  ? void 0
                  : submitter.getAttribute('formmethod')) || method;
              submit(submitter || event.currentTarget, {
                fetcherKey,
                method: submitMethod,
                navigate,
                replace: replace2,
                state,
                relative,
                preventScrollReset,
                viewTransition,
              });
            };
            return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ]('form', {
              ref: forwardedRef,
              method: formMethod,
              action: formAction,
              onSubmit: reloadDocument ? onSubmit : submitHandler,
              ...props,
              'data-discover':
                !isAbsolute && discover === 'render' ? 'true' : void 0,
            });
          });
        Form.displayName = 'Form';
        function ScrollRestoration(param) {
          let { getKey, storageKey, ...props } = param;
          let remixContext =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](FrameworkContext);
          let { basename } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](NavigationContext);
          let location = useLocation();
          let matches = useMatches();
          useScrollRestoration({
            getKey,
            storageKey,
          });
          let ssrKey =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'ScrollRestoration.useMemo[ssrKey]': () => {
                  if (!remixContext || !getKey) return null;
                  let userKey = getScrollRestorationKey(
                    location,
                    matches,
                    basename,
                    getKey
                  );
                  return userKey !== location.key ? userKey : null;
                },
              }['ScrollRestoration.useMemo[ssrKey]'], // Nah, we only need this the first time for the SSR render
              // eslint-disable-next-line react-hooks/exhaustive-deps
              []
            );
          if (!remixContext || remixContext.isSpaMode) {
            return null;
          }
          let restoreScroll = ((storageKey2, restoreKey) => {
            if (!window.history.state || !window.history.state.key) {
              let key = Math.random().toString(32).slice(2);
              window.history.replaceState(
                {
                  key,
                },
                ''
              );
            }
            try {
              let positions = JSON.parse(
                sessionStorage.getItem(storageKey2) || '{}'
              );
              let storedY = positions[restoreKey || window.history.state.key];
              if (typeof storedY === 'number') {
                window.scrollTo(0, storedY);
              }
            } catch (error) {
              console.error(error);
              sessionStorage.removeItem(storageKey2);
            }
          }).toString();
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ]('script', {
            ...props,
            suppressHydrationWarning: true,
            dangerouslySetInnerHTML: {
              __html: '('
                .concat(restoreScroll, ')(')
                .concat(
                  JSON.stringify(storageKey || SCROLL_RESTORATION_STORAGE_KEY),
                  ', '
                )
                .concat(JSON.stringify(ssrKey), ')'),
            },
          });
        }
        ScrollRestoration.displayName = 'ScrollRestoration';
        function getDataRouterConsoleError2(hookName) {
          return ''.concat(
            hookName,
            ' must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.'
          );
        }
        function useDataRouterContext3(hookName) {
          let ctx =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](DataRouterContext);
          invariant(ctx, getDataRouterConsoleError2(hookName));
          return ctx;
        }
        function useDataRouterState2(hookName) {
          let state =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](DataRouterStateContext);
          invariant(state, getDataRouterConsoleError2(hookName));
          return state;
        }
        function useLinkClickHandler(to) {
          let {
            target,
            replace: replaceProp,
            state,
            preventScrollReset,
            relative,
            viewTransition,
          } = arguments.length > 1 && arguments[1] !== void 0
            ? arguments[1]
            : {};
          let navigate = useNavigate();
          let location = useLocation();
          let path = useResolvedPath(to, {
            relative,
          });
          return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useCallback'
          ](
            {
              'useLinkClickHandler.useCallback': (event) => {
                if (shouldProcessLinkClick(event, target)) {
                  event.preventDefault();
                  let replace2 =
                    replaceProp !== void 0
                      ? replaceProp
                      : createPath(location) === createPath(path);
                  navigate(to, {
                    replace: replace2,
                    state,
                    preventScrollReset,
                    relative,
                    viewTransition,
                  });
                }
              },
            }['useLinkClickHandler.useCallback'],
            [
              location,
              navigate,
              path,
              replaceProp,
              state,
              target,
              to,
              preventScrollReset,
              relative,
              viewTransition,
            ]
          );
        }
        function useSearchParams(defaultInit) {
          warning(
            typeof URLSearchParams !== 'undefined',
            'You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params.'
          );
          let defaultSearchParamsRef =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ](createSearchParams(defaultInit));
          let hasSetSearchParamsRef =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ](false);
          let location = useLocation();
          let searchParams =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'useSearchParams.useMemo[searchParams]': () =>
                  // Only merge in the defaults if we haven't yet called setSearchParams.
                  // Once we call that we want those to take precedence, otherwise you can't
                  // remove a param with setSearchParams({}) if it has an initial value
                  getSearchParamsForLocation(
                    location.search,
                    hasSetSearchParamsRef.current
                      ? null
                      : defaultSearchParamsRef.current
                  ),
              }['useSearchParams.useMemo[searchParams]'],
              [location.search]
            );
          let navigate = useNavigate();
          let setSearchParams =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'useSearchParams.useCallback[setSearchParams]': (
                  nextInit,
                  navigateOptions
                ) => {
                  const newSearchParams = createSearchParams(
                    typeof nextInit === 'function'
                      ? nextInit(searchParams)
                      : nextInit
                  );
                  hasSetSearchParamsRef.current = true;
                  navigate('?' + newSearchParams, navigateOptions);
                },
              }['useSearchParams.useCallback[setSearchParams]'],
              [navigate, searchParams]
            );
          return [searchParams, setSearchParams];
        }
        var fetcherId = 0;
        var getUniqueFetcherId = () => '__'.concat(String(++fetcherId), '__');
        function useSubmit() {
          let { router } = useDataRouterContext3('useSubmit' /* UseSubmit */);
          let { basename } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](NavigationContext);
          let currentRouteId = useRouteId();
          return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useCallback'
          ](
            {
              'useSubmit.useCallback': async function (target) {
                let options =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : {};
                let { action, method, encType, formData, body } =
                  getFormSubmissionInfo(target, basename);
                if (options.navigate === false) {
                  let key = options.fetcherKey || getUniqueFetcherId();
                  await router.fetch(
                    key,
                    currentRouteId,
                    options.action || action,
                    {
                      preventScrollReset: options.preventScrollReset,
                      formData,
                      body,
                      formMethod: options.method || method,
                      formEncType: options.encType || encType,
                      flushSync: options.flushSync,
                    }
                  );
                } else {
                  await router.navigate(options.action || action, {
                    preventScrollReset: options.preventScrollReset,
                    formData,
                    body,
                    formMethod: options.method || method,
                    formEncType: options.encType || encType,
                    replace: options.replace,
                    state: options.state,
                    fromRouteId: currentRouteId,
                    flushSync: options.flushSync,
                    viewTransition: options.viewTransition,
                  });
                }
              },
            }['useSubmit.useCallback'],
            [router, basename, currentRouteId]
          );
        }
        function useFormAction(action) {
          let { relative } =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          let { basename } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](NavigationContext);
          let routeContext =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteContext);
          invariant(
            routeContext,
            'useFormAction must be used inside a RouteContext'
          );
          let [match] = routeContext.matches.slice(-1);
          let path = {
            ...useResolvedPath(action ? action : '.', {
              relative,
            }),
          };
          let location = useLocation();
          if (action == null) {
            path.search = location.search;
            let params = new URLSearchParams(path.search);
            let indexValues = params.getAll('index');
            let hasNakedIndexParam = indexValues.some((v) => v === '');
            if (hasNakedIndexParam) {
              params.delete('index');
              indexValues
                .filter((v) => v)
                .forEach((v) => params.append('index', v));
              let qs = params.toString();
              path.search = qs ? '?'.concat(qs) : '';
            }
          }
          if ((!action || action === '.') && match.route.index) {
            path.search = path.search
              ? path.search.replace(/^\?/, '?index&')
              : '?index';
          }
          if (basename !== '/') {
            path.pathname =
              path.pathname === '/'
                ? basename
                : joinPaths([basename, path.pathname]);
          }
          return createPath(path);
        }
        function useFetcher() {
          let { key } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var _route_matches_;
          let { router } = useDataRouterContext3('useFetcher' /* UseFetcher */);
          let state = useDataRouterState2('useFetcher' /* UseFetcher */);
          let fetcherData =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](FetchersContext);
          let route =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](RouteContext);
          let routeId =
            (_route_matches_ = route.matches[route.matches.length - 1]) ===
              null || _route_matches_ === void 0
              ? void 0
              : _route_matches_.route.id;
          invariant(
            fetcherData,
            'useFetcher must be used inside a FetchersContext'
          );
          invariant(route, 'useFetcher must be used inside a RouteContext');
          invariant(
            routeId != null,
            'useFetcher can only be used on routes that contain a unique "id"'
          );
          let defaultKey =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useId'
            ]();
          let [fetcherKey, setFetcherKey] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ](key || defaultKey);
          if (key && key !== fetcherKey) {
            setFetcherKey(key);
          }
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'useFetcher.useEffect': () => {
                router.getFetcher(fetcherKey);
                return {
                  'useFetcher.useEffect': () =>
                    router.deleteFetcher(fetcherKey),
                }['useFetcher.useEffect'];
              },
            }['useFetcher.useEffect'],
            [router, fetcherKey]
          );
          let load =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'useFetcher.useCallback[load]': async (href2, opts) => {
                  invariant(routeId, 'No routeId available for fetcher.load()');
                  await router.fetch(fetcherKey, routeId, href2, opts);
                },
              }['useFetcher.useCallback[load]'],
              [fetcherKey, routeId, router]
            );
          let submitImpl = useSubmit();
          let submit =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'useFetcher.useCallback[submit]': async (target, opts) => {
                  await submitImpl(target, {
                    ...opts,
                    navigate: false,
                    fetcherKey,
                  });
                },
              }['useFetcher.useCallback[submit]'],
              [fetcherKey, submitImpl]
            );
          let FetcherForm =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'useFetcher.useMemo[FetcherForm]': () => {
                  let FetcherForm2 =
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'forwardRef'
                    ](
                      {
                        'useFetcher.useMemo[FetcherForm].FetcherForm2': (
                          props,
                          ref
                        ) => {
                          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                            'createElement'
                          ](Form, {
                            ...props,
                            navigate: false,
                            fetcherKey,
                            ref,
                          });
                        },
                      }['useFetcher.useMemo[FetcherForm].FetcherForm2']
                    );
                  FetcherForm2.displayName = 'fetcher.Form';
                  return FetcherForm2;
                },
              }['useFetcher.useMemo[FetcherForm]'],
              [fetcherKey]
            );
          let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;
          let data2 = fetcherData.get(fetcherKey);
          let fetcherWithComponents =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'useFetcher.useMemo[fetcherWithComponents]': () => ({
                  Form: FetcherForm,
                  submit,
                  load,
                  ...fetcher,
                  data: data2,
                }),
              }['useFetcher.useMemo[fetcherWithComponents]'],
              [FetcherForm, submit, load, fetcher, data2]
            );
          return fetcherWithComponents;
        }
        function useFetchers() {
          let state = useDataRouterState2('useFetchers' /* UseFetchers */);
          return Array.from(state.fetchers.entries()).map((param) => {
            let [key, fetcher] = param;
            return {
              ...fetcher,
              key,
            };
          });
        }
        var SCROLL_RESTORATION_STORAGE_KEY = 'react-router-scroll-positions';
        var savedScrollPositions = {};
        function getScrollRestorationKey(location, matches, basename, getKey) {
          let key = null;
          if (getKey) {
            if (basename !== '/') {
              key = getKey(
                {
                  ...location,
                  pathname:
                    stripBasename(location.pathname, basename) ||
                    location.pathname,
                },
                matches
              );
            } else {
              key = getKey(location, matches);
            }
          }
          if (key == null) {
            key = location.key;
          }
          return key;
        }
        function useScrollRestoration() {
          let { getKey, storageKey } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          let { router } = useDataRouterContext3(
            'useScrollRestoration' /* UseScrollRestoration */
          );
          let { restoreScrollPosition, preventScrollReset } =
            useDataRouterState2(
              'useScrollRestoration' /* UseScrollRestoration */
            );
          let { basename } =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](NavigationContext);
          let location = useLocation();
          let matches = useMatches();
          let navigation = useNavigation();
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'useScrollRestoration.useEffect': () => {
                window.history.scrollRestoration = 'manual';
                return {
                  'useScrollRestoration.useEffect': () => {
                    window.history.scrollRestoration = 'auto';
                  },
                }['useScrollRestoration.useEffect'];
              },
            }['useScrollRestoration.useEffect'],
            []
          );
          usePageHide(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ](
              {
                'useScrollRestoration.usePageHide.useCallback': () => {
                  if (navigation.state === 'idle') {
                    let key = getScrollRestorationKey(
                      location,
                      matches,
                      basename,
                      getKey
                    );
                    savedScrollPositions[key] = window.scrollY;
                  }
                  try {
                    sessionStorage.setItem(
                      storageKey || SCROLL_RESTORATION_STORAGE_KEY,
                      JSON.stringify(savedScrollPositions)
                    );
                  } catch (error) {
                    warning(
                      false,
                      'Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly ('.concat(
                        error,
                        ').'
                      )
                    );
                  }
                  window.history.scrollRestoration = 'auto';
                },
              }['useScrollRestoration.usePageHide.useCallback'],
              [
                navigation.state,
                getKey,
                basename,
                location,
                matches,
                storageKey,
              ]
            )
          );
          if (typeof document !== 'undefined') {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useLayoutEffect'
            ](
              {
                'useScrollRestoration.useLayoutEffect': () => {
                  try {
                    let sessionPositions = sessionStorage.getItem(
                      storageKey || SCROLL_RESTORATION_STORAGE_KEY
                    );
                    if (sessionPositions) {
                      savedScrollPositions = JSON.parse(sessionPositions);
                    }
                  } catch (e) {}
                },
              }['useScrollRestoration.useLayoutEffect'],
              [storageKey]
            );
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useLayoutEffect'
            ](
              {
                'useScrollRestoration.useLayoutEffect': () => {
                  let disableScrollRestoration =
                    router === null || router === void 0
                      ? void 0
                      : router.enableScrollRestoration(
                          savedScrollPositions,
                          {
                            'useScrollRestoration.useLayoutEffect': () =>
                              window.scrollY,
                          }['useScrollRestoration.useLayoutEffect'],
                          getKey
                            ? {
                                'useScrollRestoration.useLayoutEffect': (
                                  location2,
                                  matches2
                                ) =>
                                  getScrollRestorationKey(
                                    location2,
                                    matches2,
                                    basename,
                                    getKey
                                  ),
                              }['useScrollRestoration.useLayoutEffect']
                            : void 0
                        );
                  return {
                    'useScrollRestoration.useLayoutEffect': () =>
                      disableScrollRestoration && disableScrollRestoration(),
                  }['useScrollRestoration.useLayoutEffect'];
                },
              }['useScrollRestoration.useLayoutEffect'],
              [router, basename, getKey]
            );
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useLayoutEffect'
            ](
              {
                'useScrollRestoration.useLayoutEffect': () => {
                  if (restoreScrollPosition === false) {
                    return;
                  }
                  if (typeof restoreScrollPosition === 'number') {
                    window.scrollTo(0, restoreScrollPosition);
                    return;
                  }
                  if (location.hash) {
                    let el = document.getElementById(
                      decodeURIComponent(location.hash.slice(1))
                    );
                    if (el) {
                      el.scrollIntoView();
                      return;
                    }
                  }
                  if (preventScrollReset === true) {
                    return;
                  }
                  window.scrollTo(0, 0);
                },
              }['useScrollRestoration.useLayoutEffect'],
              [location, restoreScrollPosition, preventScrollReset]
            );
          }
        }
        function useBeforeUnload(callback, options) {
          let { capture } = options || {};
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'useBeforeUnload.useEffect': () => {
                let opts =
                  capture != null
                    ? {
                        capture,
                      }
                    : void 0;
                window.addEventListener('beforeunload', callback, opts);
                return {
                  'useBeforeUnload.useEffect': () => {
                    window.removeEventListener('beforeunload', callback, opts);
                  },
                }['useBeforeUnload.useEffect'];
              },
            }['useBeforeUnload.useEffect'],
            [callback, capture]
          );
        }
        function usePageHide(callback, options) {
          let { capture } = options || {};
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'usePageHide.useEffect': () => {
                let opts =
                  capture != null
                    ? {
                        capture,
                      }
                    : void 0;
                window.addEventListener('pagehide', callback, opts);
                return {
                  'usePageHide.useEffect': () => {
                    window.removeEventListener('pagehide', callback, opts);
                  },
                }['usePageHide.useEffect'];
              },
            }['usePageHide.useEffect'],
            [callback, capture]
          );
        }
        function usePrompt(param) {
          let { when, message } = param;
          let blocker = useBlocker(when);
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'usePrompt.useEffect': () => {
                if (blocker.state === 'blocked') {
                  let proceed = window.confirm(message);
                  if (proceed) {
                    setTimeout(blocker.proceed, 0);
                  } else {
                    blocker.reset();
                  }
                }
              },
            }['usePrompt.useEffect'],
            [blocker, message]
          );
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ](
            {
              'usePrompt.useEffect': () => {
                if (blocker.state === 'blocked' && !when) {
                  blocker.reset();
                }
              },
            }['usePrompt.useEffect'],
            [blocker, when]
          );
        }
        function useViewTransitionState(to) {
          let opts =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          let vtContext =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useContext'
            ](ViewTransitionContext);
          invariant(
            vtContext != null,
            "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
          );
          let { basename } = useDataRouterContext3(
            'useViewTransitionState' /* useViewTransitionState */
          );
          let path = useResolvedPath(to, {
            relative: opts.relative,
          });
          if (!vtContext.isTransitioning) {
            return false;
          }
          let currentPath =
            stripBasename(vtContext.currentLocation.pathname, basename) ||
            vtContext.currentLocation.pathname;
          let nextPath =
            stripBasename(vtContext.nextLocation.pathname, basename) ||
            vtContext.nextLocation.pathname;
          return (
            matchPath(path.pathname, nextPath) != null ||
            matchPath(path.pathname, currentPath) != null
          );
        }
        function StaticRouter(param) {
          let { basename, children, location: locationProp = '/' } = param;
          if (typeof locationProp === 'string') {
            locationProp = parsePath(locationProp);
          }
          let action = 'POP'; /* Pop */
          let location = {
            pathname: locationProp.pathname || '/',
            search: locationProp.search || '',
            hash: locationProp.hash || '',
            state: locationProp.state != null ? locationProp.state : null,
            key: locationProp.key || 'default',
          };
          let staticNavigator = getStatelessNavigator();
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](Router, {
            basename,
            children,
            location,
            navigationType: action,
            navigator: staticNavigator,
            static: true,
          });
        }
        function StaticRouterProvider(param) {
          let { context, router, hydrate: hydrate2 = true, nonce } = param;
          invariant(
            router && context,
            'You must provide `router` and `context` to <StaticRouterProvider>'
          );
          let dataRouterContext = {
            router,
            navigator: getStatelessNavigator(),
            static: true,
            staticContext: context,
            basename: context.basename || '/',
          };
          let fetchersContext = /* @__PURE__ */ new Map();
          let hydrateScript = '';
          if (hydrate2 !== false) {
            let data2 = {
              loaderData: context.loaderData,
              actionData: context.actionData,
              errors: serializeErrors(context.errors),
            };
            let json = htmlEscape(JSON.stringify(JSON.stringify(data2)));
            hydrateScript =
              'window.__staticRouterHydrationData = JSON.parse('.concat(
                json,
                ');'
              );
          }
          let { state } = dataRouterContext.router;
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Fragment'
            ],
            null,
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              DataRouterContext.Provider,
              {
                value: dataRouterContext,
              },
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](
                DataRouterStateContext.Provider,
                {
                  value: state,
                },
                /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](
                  FetchersContext.Provider,
                  {
                    value: fetchersContext,
                  },
                  /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](
                    ViewTransitionContext.Provider,
                    {
                      value: {
                        isTransitioning: false,
                      },
                    },
                    /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'createElement'
                    ](
                      Router,
                      {
                        basename: dataRouterContext.basename,
                        location: state.location,
                        navigationType: state.historyAction,
                        navigator: dataRouterContext.navigator,
                        static: dataRouterContext.static,
                      },
                      /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'createElement'
                      ](DataRoutes2, {
                        routes: router.routes,
                        future: router.future,
                        state,
                      })
                    )
                  )
                )
              )
            ),
            hydrateScript
              ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ]('script', {
                  suppressHydrationWarning: true,
                  nonce,
                  dangerouslySetInnerHTML: {
                    __html: hydrateScript,
                  },
                })
              : null
          );
        }
        function DataRoutes2(param) {
          let { routes, future, state } = param;
          return useRoutesImpl(routes, void 0, state, future);
        }
        function serializeErrors(errors) {
          if (!errors) return null;
          let entries = Object.entries(errors);
          let serialized = {};
          for (let [key, val] of entries) {
            if (isRouteErrorResponse(val)) {
              serialized[key] = {
                ...val,
                __type: 'RouteErrorResponse',
              };
            } else if (val instanceof Error) {
              serialized[key] = {
                message: val.message,
                __type: 'Error',
                // If this is a subclass (i.e., ReferenceError), send up the type so we
                // can re-create the same type during hydration.
                ...(val.name !== 'Error'
                  ? {
                      __subType: val.name,
                    }
                  : {}),
              };
            } else {
              serialized[key] = val;
            }
          }
          return serialized;
        }
        function getStatelessNavigator() {
          return {
            createHref,
            encodeLocation,
            push(to) {
              throw new Error(
                'You cannot use navigator.push() on the server because it is a stateless environment. This error was probably triggered when you did a `navigate('.concat(
                  JSON.stringify(to),
                  ')` somewhere in your app.'
                )
              );
            },
            replace(to) {
              throw new Error(
                'You cannot use navigator.replace() on the server because it is a stateless environment. This error was probably triggered when you did a `navigate('.concat(
                  JSON.stringify(to),
                  ', { replace: true })` somewhere in your app.'
                )
              );
            },
            go(delta) {
              throw new Error(
                'You cannot use navigator.go() on the server because it is a stateless environment. This error was probably triggered when you did a `navigate('.concat(
                  delta,
                  ')` somewhere in your app.'
                )
              );
            },
            back() {
              throw new Error(
                'You cannot use navigator.back() on the server because it is a stateless environment.'
              );
            },
            forward() {
              throw new Error(
                'You cannot use navigator.forward() on the server because it is a stateless environment.'
              );
            },
          };
        }
        function createStaticHandler2(routes, opts) {
          return createStaticHandler(routes, {
            ...opts,
            mapRouteProperties,
          });
        }
        function createStaticRouter(routes, context) {
          let opts =
            arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          let manifest = {};
          let dataRoutes = convertRoutesToDataRoutes(
            routes,
            mapRouteProperties,
            void 0,
            manifest
          );
          let matches = context.matches.map((match) => {
            let route = manifest[match.route.id] || match.route;
            return {
              ...match,
              route,
            };
          });
          let msg = (method) =>
            'You cannot use router.'.concat(
              method,
              '() on the server because it is a stateless environment'
            );
          return {
            get basename() {
              return context.basename;
            },
            get future() {
              return {
                unstable_middleware: false,
                ...(opts === null || opts === void 0 ? void 0 : opts.future),
              };
            },
            get state() {
              return {
                historyAction: 'POP' /* Pop */,
                location: context.location,
                matches,
                loaderData: context.loaderData,
                actionData: context.actionData,
                errors: context.errors,
                initialized: true,
                navigation: IDLE_NAVIGATION,
                restoreScrollPosition: null,
                preventScrollReset: false,
                revalidation: 'idle',
                fetchers: /* @__PURE__ */ new Map(),
                blockers: /* @__PURE__ */ new Map(),
              };
            },
            get routes() {
              return dataRoutes;
            },
            get window() {
              return void 0;
            },
            initialize() {
              throw msg('initialize');
            },
            subscribe() {
              throw msg('subscribe');
            },
            enableScrollRestoration() {
              throw msg('enableScrollRestoration');
            },
            navigate() {
              throw msg('navigate');
            },
            fetch() {
              throw msg('fetch');
            },
            revalidate() {
              throw msg('revalidate');
            },
            createHref,
            encodeLocation,
            getFetcher() {
              return IDLE_FETCHER;
            },
            deleteFetcher() {
              throw msg('deleteFetcher');
            },
            dispose() {
              throw msg('dispose');
            },
            getBlocker() {
              return IDLE_BLOCKER;
            },
            deleteBlocker() {
              throw msg('deleteBlocker');
            },
            patchRoutes() {
              throw msg('patchRoutes');
            },
            _internalFetchControllers: /* @__PURE__ */ new Map(),
            _internalSetRoutes() {
              throw msg('_internalSetRoutes');
            },
          };
        }
        function createHref(to) {
          return typeof to === 'string' ? to : createPath(to);
        }
        function encodeLocation(to) {
          let href2 = typeof to === 'string' ? to : createPath(to);
          href2 = href2.replace(/ $/, '%20');
          let encoded = ABSOLUTE_URL_REGEX3.test(href2)
            ? new URL(href2)
            : new URL(href2, 'http://localhost');
          return {
            pathname: encoded.pathname,
            search: encoded.search,
            hash: encoded.hash,
          };
        }
        var ABSOLUTE_URL_REGEX3 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
        var ESCAPE_LOOKUP2 = {
          '&': '\\u0026',
          '>': '\\u003e',
          '<': '\\u003c',
          '\u2028': '\\u2028',
          '\u2029': '\\u2029',
        };
        var ESCAPE_REGEX2 = /[&><\u2028\u2029]/g;
        function htmlEscape(str) {
          return str.replace(ESCAPE_REGEX2, (match) => ESCAPE_LOOKUP2[match]);
        }
        function ServerRouter(param) {
          let { context, url, nonce } = param;
          if (typeof url === 'string') {
            url = new URL(url);
          }
          let { manifest, routeModules, criticalCss, serverHandoffString } =
            context;
          let routes = createServerRoutes(
            manifest.routes,
            routeModules,
            context.future,
            context.isSpaMode
          );
          context.staticHandlerContext.loaderData = {
            ...context.staticHandlerContext.loaderData,
          };
          for (let match of context.staticHandlerContext.matches) {
            let routeId = match.route.id;
            let route = routeModules[routeId];
            let manifestRoute = context.manifest.routes[routeId];
            if (
              route &&
              manifestRoute &&
              shouldHydrateRouteLoader(
                routeId,
                route.clientLoader,
                manifestRoute.hasLoader,
                context.isSpaMode
              ) &&
              (route.HydrateFallback || !manifestRoute.hasLoader)
            ) {
              delete context.staticHandlerContext.loaderData[routeId];
            }
          }
          let router = createStaticRouter(routes, context.staticHandlerContext);
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Fragment'
            ],
            null,
            /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              FrameworkContext.Provider,
              {
                value: {
                  manifest,
                  routeModules,
                  criticalCss,
                  serverHandoffString,
                  future: context.future,
                  ssr: context.ssr,
                  isSpaMode: context.isSpaMode,
                  routeDiscovery: context.routeDiscovery,
                  serializeError: context.serializeError,
                  renderMeta: context.renderMeta,
                },
              },
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](
                RemixErrorBoundary,
                {
                  location: router.state.location,
                },
                /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](StaticRouterProvider, {
                  router,
                  context: context.staticHandlerContext,
                  hydrate: false,
                })
              )
            ),
            context.serverHandoffStream
              ? /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'createElement'
                ](
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'Suspense'
                  ],
                  null,
                  /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](StreamTransfer, {
                    context,
                    identifier: 0,
                    reader: context.serverHandoffStream.getReader(),
                    textDecoder: new TextDecoder(),
                    nonce,
                  })
                )
              : null
          );
        }
        function createRoutesStub(routes, unstable_getContext) {
          return function RoutesTestStub(param) {
            let { initialEntries, initialIndex, hydrationData, future } = param;
            let routerRef =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ]();
            let remixContextRef =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ]();
            if (routerRef.current == null) {
              remixContextRef.current = {
                future: {
                  unstable_subResourceIntegrity:
                    (future === null || future === void 0
                      ? void 0
                      : future.unstable_subResourceIntegrity) === true,
                  unstable_middleware:
                    (future === null || future === void 0
                      ? void 0
                      : future.unstable_middleware) === true,
                },
                manifest: {
                  routes: {},
                  entry: {
                    imports: [],
                    module: '',
                  },
                  url: '',
                  version: '',
                },
                routeModules: {},
                ssr: false,
                isSpaMode: false,
                routeDiscovery: {
                  mode: 'lazy',
                  manifestPath: '/__manifest',
                },
              };
              let patched = processRoutes(
                // @ts-expect-error `StubRouteObject` is stricter about `loader`/`action`
                // types compared to `AgnosticRouteObject`
                convertRoutesToDataRoutes(routes, (r) => r),
                remixContextRef.current.manifest,
                remixContextRef.current.routeModules
              );
              routerRef.current = createMemoryRouter(patched, {
                unstable_getContext,
                initialEntries,
                initialIndex,
                hydrationData,
              });
            }
            return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createElement'
            ](
              FrameworkContext.Provider,
              {
                value: remixContextRef.current,
              },
              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createElement'
              ](RouterProvider, {
                router: routerRef.current,
              })
            );
          };
        }
        function processRoutes(routes, manifest, routeModules, parentId) {
          return routes.map((route) => {
            if (!route.id) {
              throw new Error(
                'Expected a route.id in @remix-run/testing processRoutes() function'
              );
            }
            let newRoute = {
              id: route.id,
              path: route.path,
              index: route.index,
              Component: route.Component
                ? withComponentProps(route.Component)
                : void 0,
              HydrateFallback: route.HydrateFallback
                ? withHydrateFallbackProps(route.HydrateFallback)
                : void 0,
              ErrorBoundary: route.ErrorBoundary
                ? withErrorBoundaryProps(route.ErrorBoundary)
                : void 0,
              action: route.action,
              loader: route.loader,
              handle: route.handle,
              shouldRevalidate: route.shouldRevalidate,
            };
            let entryRoute = {
              id: route.id,
              path: route.path,
              index: route.index,
              parentId,
              hasAction: route.action != null,
              hasLoader: route.loader != null,
              // When testing routes, you should be stubbing loader/action/middleware,
              // not trying to re-implement the full loader/clientLoader/SSR/hydration
              // flow. That is better tested via E2E tests.
              hasClientAction: false,
              hasClientLoader: false,
              hasClientMiddleware: false,
              hasErrorBoundary: route.ErrorBoundary != null,
              // any need for these?
              module: 'build/stub-path-to-module.js',
              clientActionModule: void 0,
              clientLoaderModule: void 0,
              clientMiddlewareModule: void 0,
              hydrateFallbackModule: void 0,
            };
            manifest.routes[newRoute.id] = entryRoute;
            routeModules[route.id] = {
              default: newRoute.Component || Outlet,
              ErrorBoundary: newRoute.ErrorBoundary || void 0,
              handle: route.handle,
              links: route.links,
              meta: route.meta,
              shouldRevalidate: route.shouldRevalidate,
            };
            if (route.children) {
              newRoute.children = processRoutes(
                route.children,
                manifest,
                routeModules,
                newRoute.id
              );
            }
            return newRoute;
          });
        }
        // lib/server-runtime/crypto.ts
        var encoder = /* @__PURE__ */ new TextEncoder();
        var sign = async (value, secret) => {
          let data2 = encoder.encode(value);
          let key = await createKey2(secret, ['sign']);
          let signature = await crypto.subtle.sign('HMAC', key, data2);
          let hash = btoa(
            String.fromCharCode(...new Uint8Array(signature))
          ).replace(/=+$/, '');
          return value + '.' + hash;
        };
        var unsign = async (cookie, secret) => {
          let index = cookie.lastIndexOf('.');
          let value = cookie.slice(0, index);
          let hash = cookie.slice(index + 1);
          let data2 = encoder.encode(value);
          let key = await createKey2(secret, ['verify']);
          let signature = byteStringToUint8Array(atob(hash));
          let valid = await crypto.subtle.verify('HMAC', key, signature, data2);
          return valid ? value : false;
        };
        var createKey2 = async (secret, usages) =>
          crypto.subtle.importKey(
            'raw',
            encoder.encode(secret),
            {
              name: 'HMAC',
              hash: 'SHA-256',
            },
            false,
            usages
          );
        function byteStringToUint8Array(byteString) {
          let array = new Uint8Array(byteString.length);
          for (let i = 0; i < byteString.length; i++) {
            array[i] = byteString.charCodeAt(i);
          }
          return array;
        }
        // lib/server-runtime/cookies.ts
        var createCookie = function (name) {
          let cookieOptions =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          let { secrets = [], ...options } = {
            path: '/',
            sameSite: 'lax',
            ...cookieOptions,
          };
          warnOnceAboutExpiresCookie(name, options.expires);
          return {
            get name() {
              return name;
            },
            get isSigned() {
              return secrets.length > 0;
            },
            get expires() {
              return typeof options.maxAge !== 'undefined'
                ? new Date(Date.now() + options.maxAge * 1e3)
                : options.expires;
            },
            async parse(cookieHeader, parseOptions) {
              if (!cookieHeader) return null;
              let cookies = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cookie$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'parse'
              ])(cookieHeader, {
                ...options,
                ...parseOptions,
              });
              if (name in cookies) {
                let value = cookies[name];
                if (typeof value === 'string' && value !== '') {
                  let decoded = await decodeCookieValue(value, secrets);
                  return decoded;
                } else {
                  return '';
                }
              } else {
                return null;
              }
            },
            async serialize(value, serializeOptions) {
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cookie$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'serialize'
              ])(
                name,
                value === '' ? '' : await encodeCookieValue(value, secrets),
                {
                  ...options,
                  ...serializeOptions,
                }
              );
            },
          };
        };
        var isCookie = (object) => {
          return (
            object != null &&
            typeof object.name === 'string' &&
            typeof object.isSigned === 'boolean' &&
            typeof object.parse === 'function' &&
            typeof object.serialize === 'function'
          );
        };
        async function encodeCookieValue(value, secrets) {
          let encoded = encodeData(value);
          if (secrets.length > 0) {
            encoded = await sign(encoded, secrets[0]);
          }
          return encoded;
        }
        async function decodeCookieValue(value, secrets) {
          if (secrets.length > 0) {
            for (let secret of secrets) {
              let unsignedValue = await unsign(value, secret);
              if (unsignedValue !== false) {
                return decodeData(unsignedValue);
              }
            }
            return null;
          }
          return decodeData(value);
        }
        function encodeData(value) {
          return btoa(myUnescape(encodeURIComponent(JSON.stringify(value))));
        }
        function decodeData(value) {
          try {
            return JSON.parse(decodeURIComponent(myEscape(atob(value))));
          } catch (error) {
            return {};
          }
        }
        function myEscape(value) {
          let str = value.toString();
          let result = '';
          let index = 0;
          let chr, code;
          while (index < str.length) {
            chr = str.charAt(index++);
            if (/[\w*+\-./@]/.exec(chr)) {
              result += chr;
            } else {
              code = chr.charCodeAt(0);
              if (code < 256) {
                result += '%' + hex(code, 2);
              } else {
                result += '%u' + hex(code, 4).toUpperCase();
              }
            }
          }
          return result;
        }
        function hex(code, length) {
          let result = code.toString(16);
          while (result.length < length) result = '0' + result;
          return result;
        }
        function myUnescape(value) {
          let str = value.toString();
          let result = '';
          let index = 0;
          let chr, part;
          while (index < str.length) {
            chr = str.charAt(index++);
            if (chr === '%') {
              if (str.charAt(index) === 'u') {
                part = str.slice(index + 1, index + 5);
                if (/^[\da-f]{4}$/i.exec(part)) {
                  result += String.fromCharCode(parseInt(part, 16));
                  index += 5;
                  continue;
                }
              } else {
                part = str.slice(index, index + 2);
                if (/^[\da-f]{2}$/i.exec(part)) {
                  result += String.fromCharCode(parseInt(part, 16));
                  index += 2;
                  continue;
                }
              }
            }
            result += chr;
          }
          return result;
        }
        function warnOnceAboutExpiresCookie(name, expires) {
          warnOnce(
            !expires,
            'The "'.concat(
              name,
              '" cookie has an "expires" property set. This will cause the expires value to not be updated when the session is committed. Instead, you should set the expires value when serializing the cookie. You can use `commitSession(session, { expires })` if using a session storage object, or `cookie.serialize("value", { expires })` if you\'re using the cookie directly.'
            )
          );
        }
        // lib/server-runtime/entry.ts
        function createEntryRouteModules(manifest) {
          return Object.keys(manifest).reduce((memo2, routeId) => {
            let route = manifest[routeId];
            if (route) {
              memo2[routeId] = route.module;
            }
            return memo2;
          }, {});
        }
        // lib/server-runtime/mode.ts
        var ServerMode = /* @__PURE__ */ ((ServerMode2) => {
          ServerMode2['Development'] = 'development';
          ServerMode2['Production'] = 'production';
          ServerMode2['Test'] = 'test';
          return ServerMode2;
        })(ServerMode || {});
        function isServerMode(value) {
          return (
            value === 'development' /* Development */ ||
            value === 'production' /* Production */ ||
            value === 'test' /* Test */
          );
        }
        // lib/server-runtime/errors.ts
        function sanitizeError(error, serverMode) {
          if (
            error instanceof Error &&
            serverMode !== 'development' /* Development */
          ) {
            let sanitized = new Error('Unexpected Server Error');
            sanitized.stack = void 0;
            return sanitized;
          }
          return error;
        }
        function sanitizeErrors(errors, serverMode) {
          return Object.entries(errors).reduce((acc, param) => {
            let [routeId, error] = param;
            return Object.assign(acc, {
              [routeId]: sanitizeError(error, serverMode),
            });
          }, {});
        }
        function serializeError(error, serverMode) {
          let sanitized = sanitizeError(error, serverMode);
          return {
            message: sanitized.message,
            stack: sanitized.stack,
          };
        }
        function serializeErrors2(errors, serverMode) {
          if (!errors) return null;
          let entries = Object.entries(errors);
          let serialized = {};
          for (let [key, val] of entries) {
            if (isRouteErrorResponse(val)) {
              serialized[key] = {
                ...val,
                __type: 'RouteErrorResponse',
              };
            } else if (val instanceof Error) {
              let sanitized = sanitizeError(val, serverMode);
              serialized[key] = {
                message: sanitized.message,
                stack: sanitized.stack,
                __type: 'Error',
                // If this is a subclass (i.e., ReferenceError), send up the type so we
                // can re-create the same type during hydration.  This will only apply
                // in dev mode since all production errors are sanitized to normal
                // Error instances
                ...(sanitized.name !== 'Error'
                  ? {
                      __subType: sanitized.name,
                    }
                  : {}),
              };
            } else {
              serialized[key] = val;
            }
          }
          return serialized;
        }
        // lib/server-runtime/routeMatching.ts
        function matchServerRoutes(routes, pathname, basename) {
          let matches = matchRoutes(routes, pathname, basename);
          if (!matches) return null;
          return matches.map((match) => ({
            params: match.params,
            pathname: match.pathname,
            route: match.route,
          }));
        }
        // lib/server-runtime/data.ts
        async function callRouteHandler(handler, args) {
          let result = await handler({
            request: stripRoutesParam(stripIndexParam2(args.request)),
            params: args.params,
            context: args.context,
          });
          if (
            isDataWithResponseInit(result) &&
            result.init &&
            result.init.status &&
            isRedirectStatusCode(result.init.status)
          ) {
            throw new Response(null, result.init);
          }
          return result;
        }
        function stripIndexParam2(request) {
          let url = new URL(request.url);
          let indexValues = url.searchParams.getAll('index');
          url.searchParams.delete('index');
          let indexValuesToKeep = [];
          for (let indexValue of indexValues) {
            if (indexValue) {
              indexValuesToKeep.push(indexValue);
            }
          }
          for (let toKeep of indexValuesToKeep) {
            url.searchParams.append('index', toKeep);
          }
          let init = {
            method: request.method,
            body: request.body,
            headers: request.headers,
            signal: request.signal,
          };
          if (init.body) {
            init.duplex = 'half';
          }
          return new Request(url.href, init);
        }
        function stripRoutesParam(request) {
          let url = new URL(request.url);
          url.searchParams.delete('_routes');
          let init = {
            method: request.method,
            body: request.body,
            headers: request.headers,
            signal: request.signal,
          };
          if (init.body) {
            init.duplex = 'half';
          }
          return new Request(url.href, init);
        }
        // lib/server-runtime/invariant.ts
        function invariant3(value, message) {
          if (
            value === false ||
            value === null ||
            typeof value === 'undefined'
          ) {
            console.error(
              'The following error is a bug in React Router; please open an issue! https://github.com/remix-run/react-router/issues/new/choose'
            );
            throw new Error(message);
          }
        }
        // lib/server-runtime/dev.ts
        var globalDevServerHooksKey = '__reactRouterDevServerHooks';
        function setDevServerHooks(devServerHooks) {
          globalThis[globalDevServerHooksKey] = devServerHooks;
        }
        function getDevServerHooks() {
          return globalThis[globalDevServerHooksKey];
        }
        function getBuildTimeHeader(request, headerName) {
          if (
            typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'default'
            ] !== 'undefined'
          ) {
            try {
              var _process_env;
              if (
                ((_process_env =
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'default'
                  ].env) === null || _process_env === void 0
                  ? void 0
                  : _process_env.IS_RR_BUILD_REQUEST) === 'yes'
              ) {
                return request.headers.get(headerName);
              }
            } catch (e) {}
          }
          return null;
        }
        // lib/server-runtime/routes.ts
        function groupRoutesByParentId2(manifest) {
          let routes = {};
          Object.values(manifest).forEach((route) => {
            if (route) {
              let parentId = route.parentId || '';
              if (!routes[parentId]) {
                routes[parentId] = [];
              }
              routes[parentId].push(route);
            }
          });
          return routes;
        }
        function createRoutes(manifest) {
          let parentId =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : '',
            routesByParentId =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : groupRoutesByParentId2(manifest);
          return (routesByParentId[parentId] || []).map((route) => ({
            ...route,
            children: createRoutes(manifest, route.id, routesByParentId),
          }));
        }
        function createStaticHandlerDataRoutes(manifest, future) {
          let parentId =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : '',
            routesByParentId =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : groupRoutesByParentId2(manifest);
          return (routesByParentId[parentId] || []).map((route) => {
            let commonRoute = {
              // Always include root due to default boundaries
              hasErrorBoundary:
                route.id === 'root' || route.module.ErrorBoundary != null,
              id: route.id,
              path: route.path,
              unstable_middleware: route.module.unstable_middleware,
              // Need to use RR's version in the param typed here to permit the optional
              // context even though we know it'll always be provided in remix
              loader: route.module.loader
                ? async (args) => {
                    let preRenderedData = getBuildTimeHeader(
                      args.request,
                      'X-React-Router-Prerender-Data'
                    );
                    if (preRenderedData != null) {
                      let encoded = preRenderedData
                        ? decodeURI(preRenderedData)
                        : preRenderedData;
                      invariant3(encoded, 'Missing prerendered data for route');
                      let uint8array = new TextEncoder().encode(encoded);
                      let stream = new ReadableStream({
                        start(controller) {
                          controller.enqueue(uint8array);
                          controller.close();
                        },
                      });
                      let decoded = await decodeViaTurboStream(
                        stream,
                        ('TURBOPACK ident replacement', globalThis)
                      );
                      let data2 = decoded.value;
                      if (data2 && SingleFetchRedirectSymbol in data2) {
                        let result = data2[SingleFetchRedirectSymbol];
                        let init = {
                          status: result.status,
                        };
                        if (result.reload) {
                          throw redirectDocument(result.redirect, init);
                        } else if (result.replace) {
                          throw replace(result.redirect, init);
                        } else {
                          throw redirect(result.redirect, init);
                        }
                      } else {
                        invariant3(
                          data2 && route.id in data2,
                          'Unable to decode prerendered data'
                        );
                        let result = data2[route.id];
                        invariant3(
                          'data' in result,
                          'Unable to process prerendered data'
                        );
                        return result.data;
                      }
                    }
                    let val = await callRouteHandler(route.module.loader, args);
                    return val;
                  }
                : void 0,
              action: route.module.action
                ? (args) => callRouteHandler(route.module.action, args)
                : void 0,
              handle: route.module.handle,
            };
            return route.index
              ? {
                  index: true,
                  ...commonRoute,
                }
              : {
                  caseSensitive: route.caseSensitive,
                  children: createStaticHandlerDataRoutes(
                    manifest,
                    future,
                    route.id,
                    routesByParentId
                  ),
                  ...commonRoute,
                };
          });
        }
        // lib/server-runtime/markup.ts
        var ESCAPE_LOOKUP3 = {
          '&': '\\u0026',
          '>': '\\u003e',
          '<': '\\u003c',
          '\u2028': '\\u2028',
          '\u2029': '\\u2029',
        };
        var ESCAPE_REGEX3 = /[&><\u2028\u2029]/g;
        function escapeHtml2(html) {
          return html.replace(ESCAPE_REGEX3, (match) => ESCAPE_LOOKUP3[match]);
        }
        // lib/server-runtime/serverHandoff.ts
        function createServerHandoffString(serverHandoff) {
          return escapeHtml2(JSON.stringify(serverHandoff));
        }
        function getDocumentHeaders(build, context) {
          return getDocumentHeadersImpl(context, (m) => {
            let route = build.routes[m.route.id];
            invariant3(
              route,
              'Route with id "'.concat(m.route.id, '" not found in build')
            );
            return route.module.headers;
          });
        }
        function getDocumentHeadersImpl(context, getRouteHeadersFn) {
          let boundaryIdx = context.errors
            ? context.matches.findIndex((m) => context.errors[m.route.id])
            : -1;
          let matches =
            boundaryIdx >= 0
              ? context.matches.slice(0, boundaryIdx + 1)
              : context.matches;
          let errorHeaders;
          if (boundaryIdx >= 0) {
            let { actionHeaders, actionData, loaderHeaders, loaderData } =
              context;
            context.matches.slice(boundaryIdx).some((match) => {
              let id = match.route.id;
              if (
                actionHeaders[id] &&
                (!actionData || !actionData.hasOwnProperty(id))
              ) {
                errorHeaders = actionHeaders[id];
              } else if (loaderHeaders[id] && !loaderData.hasOwnProperty(id)) {
                errorHeaders = loaderHeaders[id];
              }
              return errorHeaders != null;
            });
          }
          return matches.reduce((parentHeaders, match, idx) => {
            let { id } = match.route;
            let loaderHeaders = context.loaderHeaders[id] || new Headers();
            let actionHeaders = context.actionHeaders[id] || new Headers();
            let includeErrorHeaders =
              errorHeaders != null && idx === matches.length - 1;
            let includeErrorCookies =
              includeErrorHeaders &&
              errorHeaders !== loaderHeaders &&
              errorHeaders !== actionHeaders;
            let headersFn = getRouteHeadersFn(match);
            if (headersFn == null) {
              let headers2 = new Headers(parentHeaders);
              if (includeErrorCookies) {
                prependCookies(errorHeaders, headers2);
              }
              prependCookies(actionHeaders, headers2);
              prependCookies(loaderHeaders, headers2);
              return headers2;
            }
            let headers = new Headers(
              typeof headersFn === 'function'
                ? headersFn({
                    loaderHeaders,
                    parentHeaders,
                    actionHeaders,
                    errorHeaders: includeErrorHeaders ? errorHeaders : void 0,
                  })
                : headersFn
            );
            if (includeErrorCookies) {
              prependCookies(errorHeaders, headers);
            }
            prependCookies(actionHeaders, headers);
            prependCookies(loaderHeaders, headers);
            prependCookies(parentHeaders, headers);
            return headers;
          }, new Headers());
        }
        function prependCookies(parentHeaders, childHeaders) {
          let parentSetCookieString = parentHeaders.get('Set-Cookie');
          if (parentSetCookieString) {
            let cookies = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$set$2d$cookie$2d$parser$2f$lib$2f$set$2d$cookie$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'splitCookiesString'
            ])(parentSetCookieString);
            let childCookies = new Set(childHeaders.getSetCookie());
            cookies.forEach((cookie) => {
              if (!childCookies.has(cookie)) {
                childHeaders.append('Set-Cookie', cookie);
              }
            });
          }
        }
        // lib/server-runtime/single-fetch.ts
        var SERVER_NO_BODY_STATUS_CODES = /* @__PURE__ */ new Set([
          ...NO_BODY_STATUS_CODES,
          304,
        ]);
        async function singleFetchAction(
          build,
          serverMode,
          staticHandler,
          request,
          handlerUrl,
          loadContext,
          handleError
        ) {
          try {
            let respond2 = function (context) {
              let headers = getDocumentHeaders(build, context);
              if (
                isRedirectStatusCode(context.statusCode) &&
                headers.has('Location')
              ) {
                return generateSingleFetchResponse(request, build, serverMode, {
                  result: getSingleFetchRedirect(
                    context.statusCode,
                    headers,
                    build.basename
                  ),
                  headers,
                  status: SINGLE_FETCH_REDIRECT_STATUS,
                });
              }
              if (context.errors) {
                Object.values(context.errors).forEach((err) => {
                  if (!isRouteErrorResponse(err) || err.error) {
                    handleError(err);
                  }
                });
                context.errors = sanitizeErrors(context.errors, serverMode);
              }
              let singleFetchResult;
              if (context.errors) {
                singleFetchResult = {
                  error: Object.values(context.errors)[0],
                };
              } else {
                singleFetchResult = {
                  data: Object.values(context.actionData || {})[0],
                };
              }
              return generateSingleFetchResponse(request, build, serverMode, {
                result: singleFetchResult,
                headers,
                status: context.statusCode,
              });
            };
            var respond = respond2;
            let handlerRequest = new Request(handlerUrl, {
              method: request.method,
              body: request.body,
              headers: request.headers,
              signal: request.signal,
              ...(request.body
                ? {
                    duplex: 'half',
                  }
                : void 0),
            });
            let result = await staticHandler.query(handlerRequest, {
              requestContext: loadContext,
              skipLoaderErrorBubbling: true,
              skipRevalidation: true,
              unstable_respond: respond2,
            });
            if (!isResponse(result)) {
              result = respond2(result);
            }
            if (isRedirectResponse(result)) {
              return generateSingleFetchResponse(request, build, serverMode, {
                result: getSingleFetchRedirect(
                  result.status,
                  result.headers,
                  build.basename
                ),
                headers: result.headers,
                status: SINGLE_FETCH_REDIRECT_STATUS,
              });
            }
            return result;
          } catch (error) {
            handleError(error);
            return generateSingleFetchResponse(request, build, serverMode, {
              result: {
                error,
              },
              headers: new Headers(),
              status: 500,
            });
          }
        }
        async function singleFetchLoaders(
          build,
          serverMode,
          staticHandler,
          request,
          handlerUrl,
          loadContext,
          handleError
        ) {
          try {
            let respond2 = function (context) {
              let headers = getDocumentHeaders(build, context);
              if (
                isRedirectStatusCode(context.statusCode) &&
                headers.has('Location')
              ) {
                return generateSingleFetchResponse(request, build, serverMode, {
                  result: {
                    [SingleFetchRedirectSymbol]: getSingleFetchRedirect(
                      context.statusCode,
                      headers,
                      build.basename
                    ),
                  },
                  headers,
                  status: SINGLE_FETCH_REDIRECT_STATUS,
                });
              }
              if (context.errors) {
                Object.values(context.errors).forEach((err) => {
                  if (!isRouteErrorResponse(err) || err.error) {
                    handleError(err);
                  }
                });
                context.errors = sanitizeErrors(context.errors, serverMode);
              }
              let results = {};
              let loadedMatches = new Set(
                context.matches
                  .filter((m) =>
                    loadRouteIds
                      ? loadRouteIds.has(m.route.id)
                      : m.route.loader != null
                  )
                  .map((m) => m.route.id)
              );
              if (context.errors) {
                for (let [id, error] of Object.entries(context.errors)) {
                  results[id] = {
                    error,
                  };
                }
              }
              for (let [id, data2] of Object.entries(context.loaderData)) {
                if (!(id in results) && loadedMatches.has(id)) {
                  results[id] = {
                    data: data2,
                  };
                }
              }
              return generateSingleFetchResponse(request, build, serverMode, {
                result: results,
                headers,
                status: context.statusCode,
              });
            };
            var respond = respond2;
            let handlerRequest = new Request(handlerUrl, {
              headers: request.headers,
              signal: request.signal,
            });
            let routesParam = new URL(request.url).searchParams.get('_routes');
            let loadRouteIds = routesParam
              ? new Set(routesParam.split(','))
              : null;
            let result = await staticHandler.query(handlerRequest, {
              requestContext: loadContext,
              filterMatchesToLoad: (m) =>
                !loadRouteIds || loadRouteIds.has(m.route.id),
              skipLoaderErrorBubbling: true,
              unstable_respond: respond2,
            });
            if (!isResponse(result)) {
              result = respond2(result);
            }
            if (isRedirectResponse(result)) {
              return generateSingleFetchResponse(request, build, serverMode, {
                result: {
                  [SingleFetchRedirectSymbol]: getSingleFetchRedirect(
                    result.status,
                    result.headers,
                    build.basename
                  ),
                },
                headers: result.headers,
                status: SINGLE_FETCH_REDIRECT_STATUS,
              });
            }
            return result;
          } catch (error) {
            handleError(error);
            return generateSingleFetchResponse(request, build, serverMode, {
              result: {
                root: {
                  error,
                },
              },
              headers: new Headers(),
              status: 500,
            });
          }
        }
        function generateSingleFetchResponse(
          request,
          build,
          serverMode,
          param
        ) {
          let { result, headers, status } = param;
          let resultHeaders = new Headers(headers);
          resultHeaders.set('X-Remix-Response', 'yes');
          if (SERVER_NO_BODY_STATUS_CODES.has(status)) {
            return new Response(null, {
              status,
              headers: resultHeaders,
            });
          }
          resultHeaders.set('Content-Type', 'text/x-script');
          return new Response(
            encodeViaTurboStream(
              result,
              request.signal,
              build.entry.module.streamTimeout,
              serverMode
            ),
            {
              status: status || 200,
              headers: resultHeaders,
            }
          );
        }
        function getSingleFetchRedirect(status, headers, basename) {
          let redirect2 = headers.get('Location');
          if (basename) {
            redirect2 = stripBasename(redirect2, basename) || redirect2;
          }
          return {
            redirect: redirect2,
            status,
            // Technically X-Remix-Revalidate isn't needed here - that was an implementation
            revalidate:
              // detail of ?_data requests as our way to tell the front end to revalidate when
              // we didn't have a response body to include that information in.
              // With single fetch, we tell the front end via this revalidate boolean field.
              // However, we're respecting it for now because it may be something folks have
              // used in their own responses
              // TODO(v3): Consider removing or making this official public API
              headers.has('X-Remix-Revalidate') || headers.has('Set-Cookie'),
            reload: headers.has('X-Remix-Reload-Document'),
            replace: headers.has('X-Remix-Replace'),
          };
        }
        function encodeViaTurboStream(
          data2,
          requestSignal,
          streamTimeout,
          serverMode
        ) {
          let controller = new AbortController();
          let timeoutId = setTimeout(
            () => controller.abort(new Error('Server Timeout')),
            typeof streamTimeout === 'number' ? streamTimeout : 4950
          );
          requestSignal.addEventListener('abort', () =>
            clearTimeout(timeoutId)
          );
          return encode(data2, {
            signal: controller.signal,
            plugins: [
              (value) => {
                if (value instanceof Error) {
                  let { name, message, stack } =
                    serverMode === 'production' /* Production */
                      ? sanitizeError(value, serverMode)
                      : value;
                  return ['SanitizedError', name, message, stack];
                }
                if (value instanceof ErrorResponseImpl) {
                  let { data: data3, status, statusText } = value;
                  return ['ErrorResponse', data3, status, statusText];
                }
                if (
                  value &&
                  typeof value === 'object' &&
                  SingleFetchRedirectSymbol in value
                ) {
                  return [
                    'SingleFetchRedirect',
                    value[SingleFetchRedirectSymbol],
                  ];
                }
              },
            ],
            postPlugins: [
              (value) => {
                if (!value) return;
                if (typeof value !== 'object') return;
                return [
                  'SingleFetchClassInstance',
                  Object.fromEntries(Object.entries(value)),
                ];
              },
              () => ['SingleFetchFallback'],
            ],
          });
        }
        // lib/server-runtime/server.ts
        function derive(build, mode) {
          let routes = createRoutes(build.routes);
          let dataRoutes = createStaticHandlerDataRoutes(
            build.routes,
            build.future
          );
          let serverMode = isServerMode(mode)
            ? mode
            : 'production'; /* Production */
          let staticHandler = createStaticHandler(dataRoutes, {
            basename: build.basename,
          });
          let errorHandler =
            build.entry.module.handleError ||
            ((error, param) => {
              let { request } = param;
              if (serverMode !== 'test' /* Test */ && !request.signal.aborted) {
                console.error(
                  // @ts-expect-error This is "private" from users but intended for internal use
                  isRouteErrorResponse(error) && error.error
                    ? error.error
                    : error
                );
              }
            });
          return {
            routes,
            dataRoutes,
            serverMode,
            staticHandler,
            errorHandler,
          };
        }
        var createRequestHandler = (build, mode) => {
          let _build;
          let routes;
          let serverMode;
          let staticHandler;
          let errorHandler;
          return async function requestHandler(request, initialContext) {
            _build = typeof build === 'function' ? await build() : build;
            if (typeof build === 'function') {
              let derived = derive(_build, mode);
              routes = derived.routes;
              serverMode = derived.serverMode;
              staticHandler = derived.staticHandler;
              errorHandler = derived.errorHandler;
            } else if (
              !routes ||
              !serverMode ||
              !staticHandler ||
              !errorHandler
            ) {
              let derived = derive(_build, mode);
              routes = derived.routes;
              serverMode = derived.serverMode;
              staticHandler = derived.staticHandler;
              errorHandler = derived.errorHandler;
            }
            let params = {};
            let loadContext;
            let handleError = (error) => {
              if (mode === 'development' /* Development */) {
                var _getDevServerHooks_processRequestError, _getDevServerHooks;
                (_getDevServerHooks = getDevServerHooks()) === null ||
                _getDevServerHooks === void 0
                  ? void 0
                  : (_getDevServerHooks_processRequestError =
                        _getDevServerHooks.processRequestError) === null ||
                      _getDevServerHooks_processRequestError === void 0
                    ? void 0
                    : _getDevServerHooks_processRequestError.call(
                        _getDevServerHooks,
                        error
                      );
              }
              errorHandler(error, {
                context: loadContext,
                params,
                request,
              });
            };
            if (_build.future.unstable_middleware) {
              if (initialContext == null) {
                loadContext = new unstable_RouterContextProvider();
              } else {
                try {
                  loadContext = new unstable_RouterContextProvider(
                    initialContext
                  );
                } catch (e) {
                  let error = new Error(
                    'Unable to create initial `unstable_RouterContextProvider` instance. Please confirm you are returning an instance of `Map<unstable_routerContext, unknown>` from your `getLoadContext` function.\n\nError: '.concat(
                      e instanceof Error ? e.toString() : e
                    )
                  );
                  handleError(error);
                  return returnLastResortErrorResponse(error, serverMode);
                }
              }
            } else {
              loadContext = initialContext || {};
            }
            let url = new URL(request.url);
            let normalizedBasename = _build.basename || '/';
            let normalizedPath = url.pathname;
            if (
              stripBasename(normalizedPath, normalizedBasename) ===
              '/_root.data'
            ) {
              normalizedPath = normalizedBasename;
            } else if (normalizedPath.endsWith('.data')) {
              normalizedPath = normalizedPath.replace(/\.data$/, '');
            }
            if (
              stripBasename(normalizedPath, normalizedBasename) !== '/' &&
              normalizedPath.endsWith('/')
            ) {
              normalizedPath = normalizedPath.slice(0, -1);
            }
            let isSpaMode =
              getBuildTimeHeader(request, 'X-React-Router-SPA-Mode') === 'yes';
            if (!_build.ssr) {
              if (_build.prerender.length === 0) {
                isSpaMode = true;
              } else if (
                !_build.prerender.includes(normalizedPath) &&
                !_build.prerender.includes(normalizedPath + '/')
              ) {
                if (url.pathname.endsWith('.data')) {
                  errorHandler(
                    new ErrorResponseImpl(
                      404,
                      'Not Found',
                      'Refusing to SSR the path `'.concat(
                        normalizedPath,
                        '` because `ssr:false` is set and the path is not included in the `prerender` config, so in production the path will be a 404.'
                      )
                    ),
                    {
                      context: loadContext,
                      params,
                      request,
                    }
                  );
                  return new Response('Not Found', {
                    status: 404,
                    statusText: 'Not Found',
                  });
                } else {
                  isSpaMode = true;
                }
              }
            }
            let manifestUrl = getManifestPath(
              _build.routeDiscovery.manifestPath,
              normalizedBasename
            );
            if (url.pathname === manifestUrl) {
              try {
                let res = await handleManifestRequest(_build, routes, url);
                return res;
              } catch (e) {
                handleError(e);
                return new Response('Unknown Server Error', {
                  status: 500,
                });
              }
            }
            let matches = matchServerRoutes(
              routes,
              normalizedPath,
              _build.basename
            );
            if (matches && matches.length > 0) {
              Object.assign(params, matches[0].params);
            }
            let response;
            if (url.pathname.endsWith('.data')) {
              let handlerUrl = new URL(request.url);
              handlerUrl.pathname = normalizedPath;
              let singleFetchMatches = matchServerRoutes(
                routes,
                handlerUrl.pathname,
                _build.basename
              );
              response = await handleSingleFetchRequest(
                serverMode,
                _build,
                staticHandler,
                request,
                handlerUrl,
                loadContext,
                handleError
              );
              if (_build.entry.module.handleDataRequest) {
                response = await _build.entry.module.handleDataRequest(
                  response,
                  {
                    context: loadContext,
                    params: singleFetchMatches
                      ? singleFetchMatches[0].params
                      : {},
                    request,
                  }
                );
                if (isRedirectResponse(response)) {
                  let result = getSingleFetchRedirect(
                    response.status,
                    response.headers,
                    _build.basename
                  );
                  if (request.method === 'GET') {
                    result = {
                      [SingleFetchRedirectSymbol]: result,
                    };
                  }
                  let headers = new Headers(response.headers);
                  headers.set('Content-Type', 'text/x-script');
                  return new Response(
                    encodeViaTurboStream(
                      result,
                      request.signal,
                      _build.entry.module.streamTimeout,
                      serverMode
                    ),
                    {
                      status: SINGLE_FETCH_REDIRECT_STATUS,
                      headers,
                    }
                  );
                }
              }
            } else if (
              !isSpaMode &&
              matches &&
              matches[matches.length - 1].route.module.default == null &&
              matches[matches.length - 1].route.module.ErrorBoundary == null
            ) {
              response = await handleResourceRequest(
                serverMode,
                _build,
                staticHandler,
                matches.slice(-1)[0].route.id,
                request,
                loadContext,
                handleError
              );
            } else {
              var _getDevServerHooks;
              let { pathname } = url;
              let criticalCss = void 0;
              if (_build.unstable_getCriticalCss) {
                criticalCss = await _build.unstable_getCriticalCss({
                  pathname,
                });
              } else if (
                mode === 'development' /* Development */ &&
                ((_getDevServerHooks = getDevServerHooks()) === null ||
                _getDevServerHooks === void 0
                  ? void 0
                  : _getDevServerHooks.getCriticalCss)
              ) {
                var _getDevServerHooks_getCriticalCss, _getDevServerHooks1;
                criticalCss = await ((_getDevServerHooks1 =
                  getDevServerHooks()) === null ||
                _getDevServerHooks1 === void 0
                  ? void 0
                  : (_getDevServerHooks_getCriticalCss =
                        _getDevServerHooks1.getCriticalCss) === null ||
                      _getDevServerHooks_getCriticalCss === void 0
                    ? void 0
                    : _getDevServerHooks_getCriticalCss.call(
                        _getDevServerHooks1,
                        pathname
                      ));
              }
              response = await handleDocumentRequest(
                serverMode,
                _build,
                staticHandler,
                request,
                loadContext,
                handleError,
                isSpaMode,
                criticalCss
              );
            }
            if (request.method === 'HEAD') {
              return new Response(null, {
                headers: response.headers,
                status: response.status,
                statusText: response.statusText,
              });
            }
            return response;
          };
        };
        async function handleManifestRequest(build, routes, url) {
          if (build.assets.version !== url.searchParams.get('version')) {
            return new Response(null, {
              status: 204,
              headers: {
                'X-Remix-Reload-Document': 'true',
              },
            });
          }
          let patches = {};
          if (url.searchParams.has('p')) {
            let paths = /* @__PURE__ */ new Set();
            url.searchParams.getAll('p').forEach((path) => {
              if (!path.startsWith('/')) {
                path = '/'.concat(path);
              }
              let segments = path.split('/').slice(1);
              segments.forEach((_, i) => {
                let partialPath = segments.slice(0, i + 1).join('/');
                paths.add('/'.concat(partialPath));
              });
            });
            for (let path of paths) {
              let matches = matchServerRoutes(routes, path, build.basename);
              if (matches) {
                for (let match of matches) {
                  let routeId = match.route.id;
                  let route = build.assets.routes[routeId];
                  if (route) {
                    patches[routeId] = route;
                  }
                }
              }
            }
            return Response.json(patches, {
              headers: {
                'Cache-Control': 'public, max-age=31536000, immutable',
              },
            });
          }
          return new Response('Invalid Request', {
            status: 400,
          });
        }
        async function handleSingleFetchRequest(
          serverMode,
          build,
          staticHandler,
          request,
          handlerUrl,
          loadContext,
          handleError
        ) {
          let response =
            request.method !== 'GET'
              ? await singleFetchAction(
                  build,
                  serverMode,
                  staticHandler,
                  request,
                  handlerUrl,
                  loadContext,
                  handleError
                )
              : await singleFetchLoaders(
                  build,
                  serverMode,
                  staticHandler,
                  request,
                  handlerUrl,
                  loadContext,
                  handleError
                );
          return response;
        }
        async function handleDocumentRequest(
          serverMode,
          build,
          staticHandler,
          request,
          loadContext,
          handleError,
          isSpaMode,
          criticalCss
        ) {
          try {
            let response = await staticHandler.query(request, {
              requestContext: loadContext,
              unstable_respond: build.future.unstable_middleware
                ? (ctx) => renderHtml(ctx, isSpaMode)
                : void 0,
            });
            return isResponse(response)
              ? response
              : renderHtml(response, isSpaMode);
          } catch (error) {
            handleError(error);
            return new Response(null, {
              status: 500,
            });
          }
          async function renderHtml(context, isSpaMode2) {
            if (isResponse(context)) {
              return context;
            }
            let headers = getDocumentHeaders(build, context);
            if (SERVER_NO_BODY_STATUS_CODES.has(context.statusCode)) {
              return new Response(null, {
                status: context.statusCode,
                headers,
              });
            }
            if (context.errors) {
              Object.values(context.errors).forEach((err) => {
                if (!isRouteErrorResponse(err) || err.error) {
                  handleError(err);
                }
              });
              context.errors = sanitizeErrors(context.errors, serverMode);
            }
            let state = {
              loaderData: context.loaderData,
              actionData: context.actionData,
              errors: serializeErrors2(context.errors, serverMode),
            };
            let baseServerHandoff = {
              basename: build.basename,
              future: build.future,
              routeDiscovery: build.routeDiscovery,
              ssr: build.ssr,
              isSpaMode: isSpaMode2,
            };
            let entryContext = {
              manifest: build.assets,
              routeModules: createEntryRouteModules(build.routes),
              staticHandlerContext: context,
              criticalCss,
              serverHandoffString: createServerHandoffString({
                ...baseServerHandoff,
                criticalCss,
              }),
              serverHandoffStream: encodeViaTurboStream(
                state,
                request.signal,
                build.entry.module.streamTimeout,
                serverMode
              ),
              renderMeta: {},
              future: build.future,
              ssr: build.ssr,
              routeDiscovery: build.routeDiscovery,
              isSpaMode: isSpaMode2,
              serializeError: (err) => serializeError(err, serverMode),
            };
            let handleDocumentRequestFunction = build.entry.module.default;
            try {
              return await handleDocumentRequestFunction(
                request,
                context.statusCode,
                headers,
                entryContext,
                loadContext
              );
            } catch (error) {
              handleError(error);
              let errorForSecondRender = error;
              if (isResponse(error)) {
                try {
                  let data2 = await unwrapResponse(error);
                  errorForSecondRender = new ErrorResponseImpl(
                    error.status,
                    error.statusText,
                    data2
                  );
                } catch (e) {}
              }
              context = getStaticContextFromError(
                staticHandler.dataRoutes,
                context,
                errorForSecondRender
              );
              if (context.errors) {
                context.errors = sanitizeErrors(context.errors, serverMode);
              }
              let state2 = {
                loaderData: context.loaderData,
                actionData: context.actionData,
                errors: serializeErrors2(context.errors, serverMode),
              };
              entryContext = {
                ...entryContext,
                staticHandlerContext: context,
                serverHandoffString:
                  createServerHandoffString(baseServerHandoff),
                serverHandoffStream: encodeViaTurboStream(
                  state2,
                  request.signal,
                  build.entry.module.streamTimeout,
                  serverMode
                ),
                renderMeta: {},
              };
              try {
                return await handleDocumentRequestFunction(
                  request,
                  context.statusCode,
                  headers,
                  entryContext,
                  loadContext
                );
              } catch (error2) {
                handleError(error2);
                return returnLastResortErrorResponse(error2, serverMode);
              }
            }
          }
        }
        async function handleResourceRequest(
          serverMode,
          build,
          staticHandler,
          routeId,
          request,
          loadContext,
          handleError
        ) {
          try {
            let response = await staticHandler.queryRoute(request, {
              routeId,
              requestContext: loadContext,
              unstable_respond: build.future.unstable_middleware
                ? (ctx) => ctx
                : void 0,
            });
            if (isResponse(response)) {
              return response;
            }
            if (typeof response === 'string') {
              return new Response(response);
            }
            return Response.json(response);
          } catch (error) {
            if (isResponse(error)) {
              error.headers.set('X-Remix-Catch', 'yes');
              return error;
            }
            if (isRouteErrorResponse(error)) {
              if (error) {
                handleError(error);
              }
              return errorResponseToJson(error, serverMode);
            }
            if (
              error instanceof Error &&
              error.message === 'Expected a response from queryRoute'
            ) {
              let newError = new Error(
                'Expected a Response to be returned from resource route handler'
              );
              handleError(newError);
              return returnLastResortErrorResponse(newError, serverMode);
            }
            handleError(error);
            return returnLastResortErrorResponse(error, serverMode);
          }
        }
        function errorResponseToJson(errorResponse, serverMode) {
          return Response.json(
            serializeError(
              // @ts-expect-error This is "private" from users but intended for internal use
              errorResponse.error || new Error('Unexpected Server Error'),
              serverMode
            ),
            {
              status: errorResponse.status,
              statusText: errorResponse.statusText,
              headers: {
                'X-Remix-Error': 'yes',
              },
            }
          );
        }
        function returnLastResortErrorResponse(error, serverMode) {
          let message = 'Unexpected Server Error';
          if (serverMode !== 'production' /* Production */) {
            message += '\n\n'.concat(String(error));
          }
          return new Response(message, {
            status: 500,
            headers: {
              'Content-Type': 'text/plain',
            },
          });
        }
        function unwrapResponse(response) {
          let contentType = response.headers.get('Content-Type');
          return contentType && /\bapplication\/json\b/.test(contentType)
            ? response.body == null
              ? null
              : response.json()
            : response.text();
        }
        // lib/server-runtime/sessions.ts
        function flash(name) {
          return '__flash_'.concat(name, '__');
        }
        var createSession = function () {
          let initialData =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {},
            id =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : '';
          let map = new Map(Object.entries(initialData));
          return {
            get id() {
              return id;
            },
            get data() {
              return Object.fromEntries(map);
            },
            has(name) {
              return map.has(name) || map.has(flash(name));
            },
            get(name) {
              if (map.has(name)) return map.get(name);
              let flashName = flash(name);
              if (map.has(flashName)) {
                let value = map.get(flashName);
                map.delete(flashName);
                return value;
              }
              return void 0;
            },
            set(name, value) {
              map.set(name, value);
            },
            flash(name, value) {
              map.set(flash(name), value);
            },
            unset(name) {
              map.delete(name);
            },
          };
        };
        var isSession = (object) => {
          return (
            object != null &&
            typeof object.id === 'string' &&
            typeof object.data !== 'undefined' &&
            typeof object.has === 'function' &&
            typeof object.get === 'function' &&
            typeof object.set === 'function' &&
            typeof object.flash === 'function' &&
            typeof object.unset === 'function'
          );
        };
        function createSessionStorage(param) {
          let {
            cookie: cookieArg,
            createData,
            readData,
            updateData,
            deleteData,
          } = param;
          let cookie = isCookie(cookieArg)
            ? cookieArg
            : createCookie(
                (cookieArg === null || cookieArg === void 0
                  ? void 0
                  : cookieArg.name) || '__session',
                cookieArg
              );
          warnOnceAboutSigningSessionCookie(cookie);
          return {
            async getSession(cookieHeader, options) {
              let id =
                cookieHeader && (await cookie.parse(cookieHeader, options));
              let data2 = id && (await readData(id));
              return createSession(data2 || {}, id || '');
            },
            async commitSession(session, options) {
              let { id, data: data2 } = session;
              let expires =
                (options === null || options === void 0
                  ? void 0
                  : options.maxAge) != null
                  ? new Date(Date.now() + options.maxAge * 1e3)
                  : (options === null || options === void 0
                        ? void 0
                        : options.expires) != null
                    ? options.expires
                    : cookie.expires;
              if (id) {
                await updateData(id, data2, expires);
              } else {
                id = await createData(data2, expires);
              }
              return cookie.serialize(id, options);
            },
            async destroySession(session, options) {
              await deleteData(session.id);
              return cookie.serialize('', {
                ...options,
                maxAge: void 0,
                expires: /* @__PURE__ */ new Date(0),
              });
            },
          };
        }
        function warnOnceAboutSigningSessionCookie(cookie) {
          warnOnce(
            cookie.isSigned,
            'The "'.concat(
              cookie.name,
              '" cookie is not signed, but session cookies should be signed to prevent tampering on the client before they are sent back to the server. See https://reactrouter.com/explanation/sessions-and-cookies#signing-cookies for more information.'
            )
          );
        }
        // lib/server-runtime/sessions/cookieStorage.ts
        function createCookieSessionStorage() {
          let { cookie: cookieArg } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          let cookie = isCookie(cookieArg)
            ? cookieArg
            : createCookie(
                (cookieArg === null || cookieArg === void 0
                  ? void 0
                  : cookieArg.name) || '__session',
                cookieArg
              );
          warnOnceAboutSigningSessionCookie(cookie);
          return {
            async getSession(cookieHeader, options) {
              return createSession(
                (cookieHeader && (await cookie.parse(cookieHeader, options))) ||
                  {}
              );
            },
            async commitSession(session, options) {
              let serializedCookie = await cookie.serialize(
                session.data,
                options
              );
              if (serializedCookie.length > 4096) {
                throw new Error(
                  'Cookie length will exceed browser maximum. Length: ' +
                    serializedCookie.length
                );
              }
              return serializedCookie;
            },
            async destroySession(_session, options) {
              return cookie.serialize('', {
                ...options,
                maxAge: void 0,
                expires: /* @__PURE__ */ new Date(0),
              });
            },
          };
        }
        // lib/server-runtime/sessions/memoryStorage.ts
        function createMemorySessionStorage() {
          let { cookie } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          let map = /* @__PURE__ */ new Map();
          return createSessionStorage({
            cookie,
            async createData(data2, expires) {
              let id = Math.random().toString(36).substring(2, 10);
              map.set(id, {
                data: data2,
                expires,
              });
              return id;
            },
            async readData(id) {
              if (map.has(id)) {
                let { data: data2, expires } = map.get(id);
                if (!expires || expires > /* @__PURE__ */ new Date()) {
                  return data2;
                }
                if (expires) map.delete(id);
              }
              return null;
            },
            async updateData(id, data2, expires) {
              map.set(id, {
                data: data2,
                expires,
              });
            },
            async deleteData(id) {
              map.delete(id);
            },
          });
        }
        // lib/href.ts
        function href(path) {
          for (
            var _len = arguments.length,
              args = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key];
          }
          let params = args[0];
          return path
            .split('/')
            .map((segment) => {
              if (segment === '*') {
                return params ? params['*'] : void 0;
              }
              const match = segment.match(/^:([\w-]+)(\?)?/);
              if (!match) return segment;
              const param = match[1];
              const value = params ? params[param] : void 0;
              const isRequired = match[2] === void 0;
              if (isRequired && value === void 0) {
                throw Error(
                  "Path '"
                    .concat(path, "' requires param '")
                    .concat(param, "' but it was not provided")
                );
              }
              return value;
            })
            .filter((segment) => segment !== void 0)
            .join('/');
        }
        // lib/dom/ssr/errors.ts
        function deserializeErrors2(errors) {
          if (!errors) return null;
          let entries = Object.entries(errors);
          let serialized = {};
          for (let [key, val] of entries) {
            if (val && val.__type === 'RouteErrorResponse') {
              serialized[key] = new ErrorResponseImpl(
                val.status,
                val.statusText,
                val.data,
                val.internal === true
              );
            } else if (val && val.__type === 'Error') {
              if (val.__subType) {
                let ErrorConstructor = window[val.__subType];
                if (typeof ErrorConstructor === 'function') {
                  try {
                    let error = new ErrorConstructor(val.message);
                    error.stack = val.stack;
                    serialized[key] = error;
                  } catch (e) {}
                }
              }
              if (serialized[key] == null) {
                let error = new Error(val.message);
                error.stack = val.stack;
                serialized[key] = error;
              }
            } else {
              serialized[key] = val;
            }
          }
          return serialized;
        }
        // lib/dom/ssr/hydration.tsx
        function getHydrationData(
          state,
          routes,
          getRouteInfo,
          location,
          basename,
          isSpaMode
        ) {
          let hydrationData = {
            ...state,
            loaderData: {
              ...state.loaderData,
            },
          };
          let initialMatches = matchRoutes(routes, location, basename);
          if (initialMatches) {
            for (let match of initialMatches) {
              let routeId = match.route.id;
              let routeInfo = getRouteInfo(routeId);
              if (
                shouldHydrateRouteLoader(
                  routeId,
                  routeInfo.clientLoader,
                  routeInfo.hasLoader,
                  isSpaMode
                ) &&
                (routeInfo.hasHydrateFallback || !routeInfo.hasLoader)
              ) {
                delete hydrationData.loaderData[routeId];
              } else if (!routeInfo.hasLoader) {
                hydrationData.loaderData[routeId] = null;
              }
            }
          }
          return hydrationData;
        }
      },
  },
]);

//# sourceMappingURL=node_modules_932258a9._.js.map
