(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([
  typeof document === 'object' ? document.currentScript : undefined,
  {
    '[project]/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          /**
           * @license React
           * react-jsx-dev-runtime.development.js
           *
           * Copyright (c) Meta Platforms, Inc. and affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          'production' !== ('TURBOPACK compile-time value', 'development') &&
            (function () {
              function getComponentNameFromType(type) {
                if (null == type) return null;
                if ('function' === typeof type)
                  return type.$$typeof === REACT_CLIENT_REFERENCE
                    ? null
                    : type.displayName || type.name || null;
                if ('string' === typeof type) return type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return 'Fragment';
                  case REACT_PROFILER_TYPE:
                    return 'Profiler';
                  case REACT_STRICT_MODE_TYPE:
                    return 'StrictMode';
                  case REACT_SUSPENSE_TYPE:
                    return 'Suspense';
                  case REACT_SUSPENSE_LIST_TYPE:
                    return 'SuspenseList';
                  case REACT_ACTIVITY_TYPE:
                    return 'Activity';
                }
                if ('object' === typeof type)
                  switch (
                    ('number' === typeof type.tag &&
                      console.error(
                        'Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.'
                      ),
                    type.$$typeof)
                  ) {
                    case REACT_PORTAL_TYPE:
                      return 'Portal';
                    case REACT_CONTEXT_TYPE:
                      return type.displayName || 'Context';
                    case REACT_CONSUMER_TYPE:
                      return (
                        (type._context.displayName || 'Context') + '.Consumer'
                      );
                    case REACT_FORWARD_REF_TYPE:
                      var innerType = type.render;
                      type = type.displayName;
                      type ||
                        ((type = innerType.displayName || innerType.name || ''),
                        (type =
                          '' !== type
                            ? 'ForwardRef(' + type + ')'
                            : 'ForwardRef'));
                      return type;
                    case REACT_MEMO_TYPE:
                      return (
                        (innerType = type.displayName || null),
                        null !== innerType
                          ? innerType
                          : getComponentNameFromType(type.type) || 'Memo'
                      );
                    case REACT_LAZY_TYPE:
                      innerType = type._payload;
                      type = type._init;
                      try {
                        return getComponentNameFromType(type(innerType));
                      } catch (x) {}
                  }
                return null;
              }
              function testStringCoercion(value) {
                return '' + value;
              }
              function checkKeyStringCoercion(value) {
                try {
                  testStringCoercion(value);
                  var JSCompiler_inline_result = !1;
                } catch (e) {
                  JSCompiler_inline_result = !0;
                }
                if (JSCompiler_inline_result) {
                  JSCompiler_inline_result = console;
                  var JSCompiler_temp_const = JSCompiler_inline_result.error;
                  var JSCompiler_inline_result$jscomp$0 =
                    ('function' === typeof Symbol &&
                      Symbol.toStringTag &&
                      value[Symbol.toStringTag]) ||
                    value.constructor.name ||
                    'Object';
                  JSCompiler_temp_const.call(
                    JSCompiler_inline_result,
                    'The provided key is an unsupported type %s. This value must be coerced to a string before using it here.',
                    JSCompiler_inline_result$jscomp$0
                  );
                  return testStringCoercion(value);
                }
              }
              function getTaskName(type) {
                if (type === REACT_FRAGMENT_TYPE) return '<>';
                if (
                  'object' === typeof type &&
                  null !== type &&
                  type.$$typeof === REACT_LAZY_TYPE
                )
                  return '<...>';
                try {
                  var name = getComponentNameFromType(type);
                  return name ? '<' + name + '>' : '<...>';
                } catch (x) {
                  return '<...>';
                }
              }
              function getOwner() {
                var dispatcher = ReactSharedInternals.A;
                return null === dispatcher ? null : dispatcher.getOwner();
              }
              function UnknownOwner() {
                return Error('react-stack-top-frame');
              }
              function hasValidKey(config) {
                if (hasOwnProperty.call(config, 'key')) {
                  var getter = Object.getOwnPropertyDescriptor(
                    config,
                    'key'
                  ).get;
                  if (getter && getter.isReactWarning) return !1;
                }
                return void 0 !== config.key;
              }
              function defineKeyPropWarningGetter(props, displayName) {
                function warnAboutAccessingKey() {
                  specialPropKeyWarningShown ||
                    ((specialPropKeyWarningShown = !0),
                    console.error(
                      '%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)',
                      displayName
                    ));
                }
                warnAboutAccessingKey.isReactWarning = !0;
                Object.defineProperty(props, 'key', {
                  get: warnAboutAccessingKey,
                  configurable: !0,
                });
              }
              function elementRefGetterWithDeprecationWarning() {
                var componentName = getComponentNameFromType(this.type);
                didWarnAboutElementRef[componentName] ||
                  ((didWarnAboutElementRef[componentName] = !0),
                  console.error(
                    'Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.'
                  ));
                componentName = this.props.ref;
                return void 0 !== componentName ? componentName : null;
              }
              function ReactElement(
                type,
                key,
                self,
                source,
                owner,
                props,
                debugStack,
                debugTask
              ) {
                self = props.ref;
                type = {
                  $$typeof: REACT_ELEMENT_TYPE,
                  type: type,
                  key: key,
                  props: props,
                  _owner: owner,
                };
                null !== (void 0 !== self ? self : null)
                  ? Object.defineProperty(type, 'ref', {
                      enumerable: !1,
                      get: elementRefGetterWithDeprecationWarning,
                    })
                  : Object.defineProperty(type, 'ref', {
                      enumerable: !1,
                      value: null,
                    });
                type._store = {};
                Object.defineProperty(type._store, 'validated', {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: 0,
                });
                Object.defineProperty(type, '_debugInfo', {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: null,
                });
                Object.defineProperty(type, '_debugStack', {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugStack,
                });
                Object.defineProperty(type, '_debugTask', {
                  configurable: !1,
                  enumerable: !1,
                  writable: !0,
                  value: debugTask,
                });
                Object.freeze &&
                  (Object.freeze(type.props), Object.freeze(type));
                return type;
              }
              function jsxDEVImpl(
                type,
                config,
                maybeKey,
                isStaticChildren,
                source,
                self,
                debugStack,
                debugTask
              ) {
                var children = config.children;
                if (void 0 !== children)
                  if (isStaticChildren)
                    if (isArrayImpl(children)) {
                      for (
                        isStaticChildren = 0;
                        isStaticChildren < children.length;
                        isStaticChildren++
                      )
                        validateChildKeys(children[isStaticChildren]);
                      Object.freeze && Object.freeze(children);
                    } else
                      console.error(
                        'React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.'
                      );
                  else validateChildKeys(children);
                if (hasOwnProperty.call(config, 'key')) {
                  children = getComponentNameFromType(type);
                  var keys = Object.keys(config).filter(function (k) {
                    return 'key' !== k;
                  });
                  isStaticChildren =
                    0 < keys.length
                      ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}'
                      : '{key: someKey}';
                  didWarnAboutKeySpread[children + isStaticChildren] ||
                    ((keys =
                      0 < keys.length
                        ? '{' + keys.join(': ..., ') + ': ...}'
                        : '{}'),
                    console.error(
                      'A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />',
                      isStaticChildren,
                      children,
                      keys,
                      children
                    ),
                    (didWarnAboutKeySpread[children + isStaticChildren] = !0));
                }
                children = null;
                void 0 !== maybeKey &&
                  (checkKeyStringCoercion(maybeKey),
                  (children = '' + maybeKey));
                hasValidKey(config) &&
                  (checkKeyStringCoercion(config.key),
                  (children = '' + config.key));
                if ('key' in config) {
                  maybeKey = {};
                  for (var propName in config)
                    'key' !== propName &&
                      (maybeKey[propName] = config[propName]);
                } else maybeKey = config;
                children &&
                  defineKeyPropWarningGetter(
                    maybeKey,
                    'function' === typeof type
                      ? type.displayName || type.name || 'Unknown'
                      : type
                  );
                return ReactElement(
                  type,
                  children,
                  self,
                  source,
                  getOwner(),
                  maybeKey,
                  debugStack,
                  debugTask
                );
              }
              function validateChildKeys(node) {
                'object' === typeof node &&
                  null !== node &&
                  node.$$typeof === REACT_ELEMENT_TYPE &&
                  node._store &&
                  (node._store.validated = 1);
              }
              var React = __turbopack_context__.r(
                  '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
                ),
                REACT_ELEMENT_TYPE = Symbol.for('react.transitional.element'),
                REACT_PORTAL_TYPE = Symbol.for('react.portal'),
                REACT_FRAGMENT_TYPE = Symbol.for('react.fragment'),
                REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode'),
                REACT_PROFILER_TYPE = Symbol.for('react.profiler'),
                REACT_CONSUMER_TYPE = Symbol.for('react.consumer'),
                REACT_CONTEXT_TYPE = Symbol.for('react.context'),
                REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref'),
                REACT_SUSPENSE_TYPE = Symbol.for('react.suspense'),
                REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list'),
                REACT_MEMO_TYPE = Symbol.for('react.memo'),
                REACT_LAZY_TYPE = Symbol.for('react.lazy'),
                REACT_ACTIVITY_TYPE = Symbol.for('react.activity'),
                REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference'),
                ReactSharedInternals =
                  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
                hasOwnProperty = Object.prototype.hasOwnProperty,
                isArrayImpl = Array.isArray,
                createTask = console.createTask
                  ? console.createTask
                  : function () {
                      return null;
                    };
              React = {
                react_stack_bottom_frame: function (callStackForError) {
                  return callStackForError();
                },
              };
              var specialPropKeyWarningShown;
              var didWarnAboutElementRef = {};
              var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(
                React,
                UnknownOwner
              )();
              var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
              var didWarnAboutKeySpread = {};
              exports.Fragment = REACT_FRAGMENT_TYPE;
              exports.jsxDEV = function (
                type,
                config,
                maybeKey,
                isStaticChildren,
                source,
                self
              ) {
                var trackActualOwner =
                  1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
                return jsxDEVImpl(
                  type,
                  config,
                  maybeKey,
                  isStaticChildren,
                  source,
                  self,
                  trackActualOwner
                    ? Error('react-stack-top-frame')
                    : unknownOwnerDebugStack,
                  trackActualOwner
                    ? createTask(getTaskName(type))
                    : unknownOwnerDebugTask
                );
              };
            })();
        }
      },
    '[project]/node_modules/next/dist/compiled/react/jsx-dev-runtime.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          if (('TURBOPACK compile-time falsy', 0));
          else {
            //TURBOPACK unreachable
            module.exports = __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js [app-client] (ecmascript)'
            );
          }
        }
      },
    '[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          _: () => _define_property,
        });
        function _define_property(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            });
          } else obj[key] = value;
          return obj;
        }
      },
    '[project]/node_modules/immer/dist/immer.mjs [app-client] (ecmascript)': (
      __turbopack_context__
    ) => {
      'use strict';

      // src/utils/env.ts
      __turbopack_context__.s({
        Immer: () => Immer2,
        applyPatches: () => applyPatches,
        castDraft: () => castDraft,
        castImmutable: () => castImmutable,
        createDraft: () => createDraft,
        current: () => current,
        enableMapSet: () => enableMapSet,
        enablePatches: () => enablePatches,
        finishDraft: () => finishDraft,
        freeze: () => freeze,
        immerable: () => DRAFTABLE,
        isDraft: () => isDraft,
        isDraftable: () => isDraftable,
        nothing: () => NOTHING,
        original: () => original,
        produce: () => produce,
        produceWithPatches: () => produceWithPatches,
        setAutoFreeze: () => setAutoFreeze,
        setUseStrictShallowCopy: () => setUseStrictShallowCopy,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
        /*#__PURE__*/ __turbopack_context__.i(
          '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
        );
      var NOTHING = Symbol.for('immer-nothing');
      var DRAFTABLE = Symbol.for('immer-draftable');
      var DRAFT_STATE = Symbol.for('immer-state');
      // src/utils/errors.ts
      var errors = ('TURBOPACK compile-time truthy', 1)
        ? [
            // All error codes, starting by 0:
            function (plugin) {
              return "The plugin for '"
                .concat(
                  plugin,
                  "' has not been loaded into Immer. To enable the plugin, import and call `enable"
                )
                .concat(plugin, '()` when initializing your application.');
            },
            function (thing) {
              return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '".concat(
                thing,
                "'"
              );
            },
            'This object has been frozen and should not be mutated',
            function (data) {
              return (
                'Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? ' +
                data
              );
            },
            'An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.',
            'Immer forbids circular references',
            'The first or second argument to `produce` must be a function',
            'The third argument to `produce` must be a function or undefined',
            'First argument to `createDraft` must be a plain object, an array, or an immerable object',
            'First argument to `finishDraft` must be a draft returned by `createDraft`',
            function (thing) {
              return "'current' expects a draft, got: ".concat(thing);
            },
            'Object.defineProperty() cannot be used on an Immer draft',
            'Object.setPrototypeOf() cannot be used on an Immer draft',
            'Immer only supports deleting array indices',
            "Immer only supports setting array indices and the 'length' property",
            function (thing) {
              return "'original' expects a draft, got: ".concat(thing);
            },
          ]
        : 'TURBOPACK unreachable';
      function die(error) {
        for (
          var _len = arguments.length,
            args = new Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }
        if (('TURBOPACK compile-time truthy', 1)) {
          const e = errors[error];
          const msg = typeof e === 'function' ? e.apply(null, args) : e;
          throw new Error('[Immer] '.concat(msg));
        }
        throw new Error(
          '[Immer] minified error nr: '.concat(
            error,
            '. Full error at: https://bit.ly/3cXEKWf'
          )
        );
      }
      // src/utils/common.ts
      var getPrototypeOf = Object.getPrototypeOf;
      function isDraft(value) {
        return !!value && !!value[DRAFT_STATE];
      }
      function isDraftable(value) {
        var _value_constructor;
        if (!value) return false;
        return (
          isPlainObject(value) ||
          Array.isArray(value) ||
          !!value[DRAFTABLE] ||
          !!((_value_constructor = value.constructor) === null ||
          _value_constructor === void 0
            ? void 0
            : _value_constructor[DRAFTABLE]) ||
          isMap(value) ||
          isSet(value)
        );
      }
      var objectCtorString = Object.prototype.constructor.toString();
      function isPlainObject(value) {
        if (!value || typeof value !== 'object') return false;
        const proto = getPrototypeOf(value);
        if (proto === null) {
          return true;
        }
        const Ctor =
          Object.hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        if (Ctor === Object) return true;
        return (
          typeof Ctor == 'function' &&
          Function.toString.call(Ctor) === objectCtorString
        );
      }
      function original(value) {
        if (!isDraft(value)) die(15, value);
        return value[DRAFT_STATE].base_;
      }
      function each(obj, iter) {
        if (getArchtype(obj) === 0 /* Object */) {
          Reflect.ownKeys(obj).forEach((key) => {
            iter(key, obj[key], obj);
          });
        } else {
          obj.forEach((entry, index) => iter(index, entry, obj));
        }
      }
      function getArchtype(thing) {
        const state = thing[DRAFT_STATE];
        return state
          ? state.type_
          : Array.isArray(thing)
            ? 1 /* Array */
            : isMap(thing)
              ? 2 /* Map */
              : isSet(thing)
                ? 3 /* Set */
                : 0 /* Object */;
      }
      function has(thing, prop) {
        return getArchtype(thing) === 2 /* Map */
          ? thing.has(prop)
          : Object.prototype.hasOwnProperty.call(thing, prop);
      }
      function get(thing, prop) {
        return getArchtype(thing) === 2 /* Map */
          ? thing.get(prop)
          : thing[prop];
      }
      function set(thing, propOrOldValue, value) {
        const t = getArchtype(thing);
        if (t === 2 /* Map */) thing.set(propOrOldValue, value);
        else if (t === 3 /* Set */) {
          thing.add(value);
        } else thing[propOrOldValue] = value;
      }
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function isMap(target) {
        return target instanceof Map;
      }
      function isSet(target) {
        return target instanceof Set;
      }
      function latest(state) {
        return state.copy_ || state.base_;
      }
      function shallowCopy(base, strict) {
        if (isMap(base)) {
          return new Map(base);
        }
        if (isSet(base)) {
          return new Set(base);
        }
        if (Array.isArray(base)) return Array.prototype.slice.call(base);
        const isPlain = isPlainObject(base);
        if (strict === true || (strict === 'class_only' && !isPlain)) {
          const descriptors = Object.getOwnPropertyDescriptors(base);
          delete descriptors[DRAFT_STATE];
          let keys = Reflect.ownKeys(descriptors);
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const desc = descriptors[key];
            if (desc.writable === false) {
              desc.writable = true;
              desc.configurable = true;
            }
            if (desc.get || desc.set)
              descriptors[key] = {
                configurable: true,
                writable: true,
                // could live with !!desc.set as well here...
                enumerable: desc.enumerable,
                value: base[key],
              };
          }
          return Object.create(getPrototypeOf(base), descriptors);
        } else {
          const proto = getPrototypeOf(base);
          if (proto !== null && isPlain) {
            return {
              ...base,
            };
          }
          const obj = Object.create(proto);
          return Object.assign(obj, base);
        }
      }
      function freeze(obj) {
        let deep =
          arguments.length > 1 && arguments[1] !== void 0
            ? arguments[1]
            : false;
        if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj;
        if (getArchtype(obj) > 1) {
          obj.set =
            obj.add =
            obj.clear =
            obj.delete =
              dontMutateFrozenCollections;
        }
        Object.freeze(obj);
        if (deep)
          Object.entries(obj).forEach((param) => {
            let [key, value] = param;
            return freeze(value, true);
          });
        return obj;
      }
      function dontMutateFrozenCollections() {
        die(2);
      }
      function isFrozen(obj) {
        return Object.isFrozen(obj);
      }
      // src/utils/plugins.ts
      var plugins = {};
      function getPlugin(pluginKey) {
        const plugin = plugins[pluginKey];
        if (!plugin) {
          die(0, pluginKey);
        }
        return plugin;
      }
      function loadPlugin(pluginKey, implementation) {
        if (!plugins[pluginKey]) plugins[pluginKey] = implementation;
      }
      // src/core/scope.ts
      var currentScope;
      function getCurrentScope() {
        return currentScope;
      }
      function createScope(parent_, immer_) {
        return {
          drafts_: [],
          parent_,
          immer_,
          // Whenever the modified draft contains a draft from another scope, we
          // need to prevent auto-freezing so the unowned draft can be finalized.
          canAutoFreeze_: true,
          unfinalizedDrafts_: 0,
        };
      }
      function usePatchesInScope(scope, patchListener) {
        if (patchListener) {
          getPlugin('Patches');
          scope.patches_ = [];
          scope.inversePatches_ = [];
          scope.patchListener_ = patchListener;
        }
      }
      function revokeScope(scope) {
        leaveScope(scope);
        scope.drafts_.forEach(revokeDraft);
        scope.drafts_ = null;
      }
      function leaveScope(scope) {
        if (scope === currentScope) {
          currentScope = scope.parent_;
        }
      }
      function enterScope(immer2) {
        return (currentScope = createScope(currentScope, immer2));
      }
      function revokeDraft(draft) {
        const state = draft[DRAFT_STATE];
        if (state.type_ === 0 /* Object */ || state.type_ === 1 /* Array */)
          state.revoke_();
        else state.revoked_ = true;
      }
      // src/core/finalize.ts
      function processResult(result, scope) {
        scope.unfinalizedDrafts_ = scope.drafts_.length;
        const baseDraft = scope.drafts_[0];
        const isReplaced = result !== void 0 && result !== baseDraft;
        if (isReplaced) {
          if (baseDraft[DRAFT_STATE].modified_) {
            revokeScope(scope);
            die(4);
          }
          if (isDraftable(result)) {
            result = finalize(scope, result);
            if (!scope.parent_) maybeFreeze(scope, result);
          }
          if (scope.patches_) {
            getPlugin('Patches').generateReplacementPatches_(
              baseDraft[DRAFT_STATE].base_,
              result,
              scope.patches_,
              scope.inversePatches_
            );
          }
        } else {
          result = finalize(scope, baseDraft, []);
        }
        revokeScope(scope);
        if (scope.patches_) {
          scope.patchListener_(scope.patches_, scope.inversePatches_);
        }
        return result !== NOTHING ? result : void 0;
      }
      function finalize(rootScope, value, path) {
        if (isFrozen(value)) return value;
        const state = value[DRAFT_STATE];
        if (!state) {
          each(value, (key, childValue) =>
            finalizeProperty(rootScope, state, value, key, childValue, path)
          );
          return value;
        }
        if (state.scope_ !== rootScope) return value;
        if (!state.modified_) {
          maybeFreeze(rootScope, state.base_, true);
          return state.base_;
        }
        if (!state.finalized_) {
          state.finalized_ = true;
          state.scope_.unfinalizedDrafts_--;
          const result = state.copy_;
          let resultEach = result;
          let isSet2 = false;
          if (state.type_ === 3 /* Set */) {
            resultEach = new Set(result);
            result.clear();
            isSet2 = true;
          }
          each(resultEach, (key, childValue) =>
            finalizeProperty(
              rootScope,
              state,
              result,
              key,
              childValue,
              path,
              isSet2
            )
          );
          maybeFreeze(rootScope, result, false);
          if (path && rootScope.patches_) {
            getPlugin('Patches').generatePatches_(
              state,
              path,
              rootScope.patches_,
              rootScope.inversePatches_
            );
          }
        }
        return state.copy_;
      }
      function finalizeProperty(
        rootScope,
        parentState,
        targetObject,
        prop,
        childValue,
        rootPath,
        targetIsSet
      ) {
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          childValue === targetObject
        )
          die(5);
        if (isDraft(childValue)) {
          const path =
            rootPath &&
            parentState &&
            parentState.type_ !== 3 /* Set */ && // Set objects are atomic since they have no keys.
            !has(parentState.assigned_, prop)
              ? rootPath.concat(prop)
              : void 0;
          const res = finalize(rootScope, childValue, path);
          set(targetObject, prop, res);
          if (isDraft(res)) {
            rootScope.canAutoFreeze_ = false;
          } else return;
        } else if (targetIsSet) {
          targetObject.add(childValue);
        }
        if (isDraftable(childValue) && !isFrozen(childValue)) {
          if (
            !rootScope.immer_.autoFreeze_ &&
            rootScope.unfinalizedDrafts_ < 1
          ) {
            return;
          }
          finalize(rootScope, childValue);
          if (
            (!parentState || !parentState.scope_.parent_) &&
            typeof prop !== 'symbol' &&
            Object.prototype.propertyIsEnumerable.call(targetObject, prop)
          )
            maybeFreeze(rootScope, childValue);
        }
      }
      function maybeFreeze(scope, value) {
        let deep =
          arguments.length > 2 && arguments[2] !== void 0
            ? arguments[2]
            : false;
        if (
          !scope.parent_ &&
          scope.immer_.autoFreeze_ &&
          scope.canAutoFreeze_
        ) {
          freeze(value, deep);
        }
      }
      // src/core/proxy.ts
      function createProxyProxy(base, parent) {
        const isArray = Array.isArray(base);
        const state = {
          type_: isArray ? 1 /* Array */ : 0 /* Object */,
          // Track which produce call this is associated with.
          scope_: parent ? parent.scope_ : getCurrentScope(),
          // True for both shallow and deep changes.
          modified_: false,
          // Used during finalization.
          finalized_: false,
          // Track which properties have been assigned (true) or deleted (false).
          assigned_: {},
          // The parent draft state.
          parent_: parent,
          // The base state.
          base_: base,
          // The base proxy.
          draft_: null,
          // set below
          // The base copy with any updated values.
          copy_: null,
          // Called by the `produce` function.
          revoke_: null,
          isManual_: false,
        };
        let target = state;
        let traps = objectTraps;
        if (isArray) {
          target = [state];
          traps = arrayTraps;
        }
        const { revoke, proxy } = Proxy.revocable(target, traps);
        state.draft_ = proxy;
        state.revoke_ = revoke;
        return proxy;
      }
      var objectTraps = {
        get(state, prop) {
          if (prop === DRAFT_STATE) return state;
          const source = latest(state);
          if (!has(source, prop)) {
            return readPropFromProto(state, source, prop);
          }
          const value = source[prop];
          if (state.finalized_ || !isDraftable(value)) {
            return value;
          }
          if (value === peek(state.base_, prop)) {
            prepareCopy(state);
            return (state.copy_[prop] = createProxy(value, state));
          }
          return value;
        },
        has(state, prop) {
          return prop in latest(state);
        },
        ownKeys(state) {
          return Reflect.ownKeys(latest(state));
        },
        set(state, prop, value) {
          const desc = getDescriptorFromProto(latest(state), prop);
          if (desc === null || desc === void 0 ? void 0 : desc.set) {
            desc.set.call(state.draft_, value);
            return true;
          }
          if (!state.modified_) {
            const current2 = peek(latest(state), prop);
            const currentState =
              current2 === null || current2 === void 0
                ? void 0
                : current2[DRAFT_STATE];
            if (currentState && currentState.base_ === value) {
              state.copy_[prop] = value;
              state.assigned_[prop] = false;
              return true;
            }
            if (
              is(value, current2) &&
              (value !== void 0 || has(state.base_, prop))
            )
              return true;
            prepareCopy(state);
            markChanged(state);
          }
          if (
            (state.copy_[prop] === value && // special case: handle new props with value 'undefined'
              (value !== void 0 || prop in state.copy_)) || // special case: NaN
            (Number.isNaN(value) && Number.isNaN(state.copy_[prop]))
          )
            return true;
          state.copy_[prop] = value;
          state.assigned_[prop] = true;
          return true;
        },
        deleteProperty(state, prop) {
          if (peek(state.base_, prop) !== void 0 || prop in state.base_) {
            state.assigned_[prop] = false;
            prepareCopy(state);
            markChanged(state);
          } else {
            delete state.assigned_[prop];
          }
          if (state.copy_) {
            delete state.copy_[prop];
          }
          return true;
        },
        // Note: We never coerce `desc.value` into an Immer draft, because we can't make
        // the same guarantee in ES5 mode.
        getOwnPropertyDescriptor(state, prop) {
          const owner = latest(state);
          const desc = Reflect.getOwnPropertyDescriptor(owner, prop);
          if (!desc) return desc;
          return {
            writable: true,
            configurable: state.type_ !== 1 /* Array */ || prop !== 'length',
            enumerable: desc.enumerable,
            value: owner[prop],
          };
        },
        defineProperty() {
          die(11);
        },
        getPrototypeOf(state) {
          return getPrototypeOf(state.base_);
        },
        setPrototypeOf() {
          die(12);
        },
      };
      var arrayTraps = {};
      each(objectTraps, (key, fn) => {
        arrayTraps[key] = function () {
          arguments[0] = arguments[0][0];
          return fn.apply(this, arguments);
        };
      });
      arrayTraps.deleteProperty = function (state, prop) {
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          isNaN(parseInt(prop))
        )
          die(13);
        return arrayTraps.set.call(this, state, prop, void 0);
      };
      arrayTraps.set = function (state, prop, value) {
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          prop !== 'length' &&
          isNaN(parseInt(prop))
        )
          die(14);
        return objectTraps.set.call(this, state[0], prop, value, state[0]);
      };
      function peek(draft, prop) {
        const state = draft[DRAFT_STATE];
        const source = state ? latest(state) : draft;
        return source[prop];
      }
      function readPropFromProto(state, source, prop) {
        var // This is a very special case, if the prop is a getter defined by the
          // prototype, we should invoke it with the draft as context!
          _desc_get;
        const desc = getDescriptorFromProto(source, prop);
        return desc
          ? 'value' in desc
            ? desc.value
            : (_desc_get = desc.get) === null || _desc_get === void 0
              ? void 0
              : _desc_get.call(state.draft_)
          : void 0;
      }
      function getDescriptorFromProto(source, prop) {
        if (!(prop in source)) return void 0;
        let proto = getPrototypeOf(source);
        while (proto) {
          const desc = Object.getOwnPropertyDescriptor(proto, prop);
          if (desc) return desc;
          proto = getPrototypeOf(proto);
        }
        return void 0;
      }
      function markChanged(state) {
        if (!state.modified_) {
          state.modified_ = true;
          if (state.parent_) {
            markChanged(state.parent_);
          }
        }
      }
      function prepareCopy(state) {
        if (!state.copy_) {
          state.copy_ = shallowCopy(
            state.base_,
            state.scope_.immer_.useStrictShallowCopy_
          );
        }
      }
      // src/core/immerClass.ts
      var Immer2 = class {
        createDraft(base) {
          if (!isDraftable(base)) die(8);
          if (isDraft(base)) base = current(base);
          const scope = enterScope(this);
          const proxy = createProxy(base, void 0);
          proxy[DRAFT_STATE].isManual_ = true;
          leaveScope(scope);
          return proxy;
        }
        finishDraft(draft, patchListener) {
          const state = draft && draft[DRAFT_STATE];
          if (!state || !state.isManual_) die(9);
          const { scope_: scope } = state;
          usePatchesInScope(scope, patchListener);
          return processResult(void 0, scope);
        }
        /**
         * Pass true to automatically freeze all copies created by Immer.
         *
         * By default, auto-freezing is enabled.
         */ setAutoFreeze(value) {
          this.autoFreeze_ = value;
        }
        /**
         * Pass true to enable strict shallow copy.
         *
         * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
         */ setUseStrictShallowCopy(value) {
          this.useStrictShallowCopy_ = value;
        }
        applyPatches(base, patches) {
          let i;
          for (i = patches.length - 1; i >= 0; i--) {
            const patch = patches[i];
            if (patch.path.length === 0 && patch.op === 'replace') {
              base = patch.value;
              break;
            }
          }
          if (i > -1) {
            patches = patches.slice(i + 1);
          }
          const applyPatchesImpl = getPlugin('Patches').applyPatches_;
          if (isDraft(base)) {
            return applyPatchesImpl(base, patches);
          }
          return this.produce(base, (draft) =>
            applyPatchesImpl(draft, patches)
          );
        }
        constructor(config) {
          this.autoFreeze_ = true;
          this.useStrictShallowCopy_ = false;
          /**
           * The `produce` function takes a value and a "recipe function" (whose
           * return value often depends on the base state). The recipe function is
           * free to mutate its first argument however it wants. All mutations are
           * only ever applied to a __copy__ of the base state.
           *
           * Pass only a function to create a "curried producer" which relieves you
           * from passing the recipe function every time.
           *
           * Only plain objects and arrays are made mutable. All other objects are
           * considered uncopyable.
           *
           * Note: This function is __bound__ to its `Immer` instance.
           *
           * @param {any} base - the initial state
           * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified
           * @param {Function} patchListener - optional function that will be called with all the patches produced here
           * @returns {any} a new state, or the initial state if nothing was modified
           */ this.produce = (base, recipe, patchListener) => {
            if (typeof base === 'function' && typeof recipe !== 'function') {
              const defaultBase = recipe;
              recipe = base;
              const self = this;
              return function curriedProduce() {
                let base2 =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : defaultBase;
                for (
                  var _len = arguments.length,
                    args = new Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }
                return self.produce(base2, (draft) =>
                  recipe.call(this, draft, ...args)
                );
              };
            }
            if (typeof recipe !== 'function') die(6);
            if (patchListener !== void 0 && typeof patchListener !== 'function')
              die(7);
            let result;
            if (isDraftable(base)) {
              const scope = enterScope(this);
              const proxy = createProxy(base, void 0);
              let hasError = true;
              try {
                result = recipe(proxy);
                hasError = false;
              } finally {
                if (hasError) revokeScope(scope);
                else leaveScope(scope);
              }
              usePatchesInScope(scope, patchListener);
              return processResult(result, scope);
            } else if (!base || typeof base !== 'object') {
              result = recipe(base);
              if (result === void 0) result = base;
              if (result === NOTHING) result = void 0;
              if (this.autoFreeze_) freeze(result, true);
              if (patchListener) {
                const p = [];
                const ip = [];
                getPlugin('Patches').generateReplacementPatches_(
                  base,
                  result,
                  p,
                  ip
                );
                patchListener(p, ip);
              }
              return result;
            } else die(1, base);
          };
          this.produceWithPatches = (base, recipe) => {
            if (typeof base === 'function') {
              var _this = this;
              return function (state) {
                for (
                  var _len = arguments.length,
                    args = new Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }
                return _this.produceWithPatches(state, (draft) =>
                  base(draft, ...args)
                );
              };
            }
            let patches, inversePatches;
            const result = this.produce(base, recipe, (p, ip) => {
              patches = p;
              inversePatches = ip;
            });
            return [result, patches, inversePatches];
          };
          if (
            typeof (config === null || config === void 0
              ? void 0
              : config.autoFreeze) === 'boolean'
          )
            this.setAutoFreeze(config.autoFreeze);
          if (
            typeof (config === null || config === void 0
              ? void 0
              : config.useStrictShallowCopy) === 'boolean'
          )
            this.setUseStrictShallowCopy(config.useStrictShallowCopy);
        }
      };
      function createProxy(value, parent) {
        const draft = isMap(value)
          ? getPlugin('MapSet').proxyMap_(value, parent)
          : isSet(value)
            ? getPlugin('MapSet').proxySet_(value, parent)
            : createProxyProxy(value, parent);
        const scope = parent ? parent.scope_ : getCurrentScope();
        scope.drafts_.push(draft);
        return draft;
      }
      // src/core/current.ts
      function current(value) {
        if (!isDraft(value)) die(10, value);
        return currentImpl(value);
      }
      function currentImpl(value) {
        if (!isDraftable(value) || isFrozen(value)) return value;
        const state = value[DRAFT_STATE];
        let copy;
        if (state) {
          if (!state.modified_) return state.base_;
          state.finalized_ = true;
          copy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);
        } else {
          copy = shallowCopy(value, true);
        }
        each(copy, (key, childValue) => {
          set(copy, key, currentImpl(childValue));
        });
        if (state) {
          state.finalized_ = false;
        }
        return copy;
      }
      // src/plugins/patches.ts
      function enablePatches() {
        const errorOffset = 16;
        if (('TURBOPACK compile-time truthy', 1)) {
          errors.push(
            'Sets cannot have "replace" patches.',
            function (op) {
              return 'Unsupported patch operation: ' + op;
            },
            function (path) {
              return "Cannot apply patch, path doesn't resolve: " + path;
            },
            'Patching reserved attributes like __proto__, prototype and constructor is not allowed'
          );
        }
        const REPLACE = 'replace';
        const ADD = 'add';
        const REMOVE = 'remove';
        function generatePatches_(state, basePath, patches, inversePatches) {
          switch (state.type_) {
            case 0 /* Object */:
            case 2 /* Map */:
              return generatePatchesFromAssigned(
                state,
                basePath,
                patches,
                inversePatches
              );
            case 1 /* Array */:
              return generateArrayPatches(
                state,
                basePath,
                patches,
                inversePatches
              );
            case 3 /* Set */:
              return generateSetPatches(
                state,
                basePath,
                patches,
                inversePatches
              );
          }
        }
        function generateArrayPatches(
          state,
          basePath,
          patches,
          inversePatches
        ) {
          let { base_, assigned_ } = state;
          let copy_ = state.copy_;
          if (copy_.length < base_.length) {
            [base_, copy_] = [copy_, base_];
            [patches, inversePatches] = [inversePatches, patches];
          }
          for (let i = 0; i < base_.length; i++) {
            if (assigned_[i] && copy_[i] !== base_[i]) {
              const path = basePath.concat([i]);
              patches.push({
                op: REPLACE,
                path,
                // Need to maybe clone it, as it can in fact be the original value
                // due to the base/copy inversion at the start of this function
                value: clonePatchValueIfNeeded(copy_[i]),
              });
              inversePatches.push({
                op: REPLACE,
                path,
                value: clonePatchValueIfNeeded(base_[i]),
              });
            }
          }
          for (let i = base_.length; i < copy_.length; i++) {
            const path = basePath.concat([i]);
            patches.push({
              op: ADD,
              path,
              // Need to maybe clone it, as it can in fact be the original value
              // due to the base/copy inversion at the start of this function
              value: clonePatchValueIfNeeded(copy_[i]),
            });
          }
          for (let i = copy_.length - 1; base_.length <= i; --i) {
            const path = basePath.concat([i]);
            inversePatches.push({
              op: REMOVE,
              path,
            });
          }
        }
        function generatePatchesFromAssigned(
          state,
          basePath,
          patches,
          inversePatches
        ) {
          const { base_, copy_ } = state;
          each(state.assigned_, (key, assignedValue) => {
            const origValue = get(base_, key);
            const value = get(copy_, key);
            const op = !assignedValue
              ? REMOVE
              : has(base_, key)
                ? REPLACE
                : ADD;
            if (origValue === value && op === REPLACE) return;
            const path = basePath.concat(key);
            patches.push(
              op === REMOVE
                ? {
                    op,
                    path,
                  }
                : {
                    op,
                    path,
                    value,
                  }
            );
            inversePatches.push(
              op === ADD
                ? {
                    op: REMOVE,
                    path,
                  }
                : op === REMOVE
                  ? {
                      op: ADD,
                      path,
                      value: clonePatchValueIfNeeded(origValue),
                    }
                  : {
                      op: REPLACE,
                      path,
                      value: clonePatchValueIfNeeded(origValue),
                    }
            );
          });
        }
        function generateSetPatches(state, basePath, patches, inversePatches) {
          let { base_, copy_ } = state;
          let i = 0;
          base_.forEach((value) => {
            if (!copy_.has(value)) {
              const path = basePath.concat([i]);
              patches.push({
                op: REMOVE,
                path,
                value,
              });
              inversePatches.unshift({
                op: ADD,
                path,
                value,
              });
            }
            i++;
          });
          i = 0;
          copy_.forEach((value) => {
            if (!base_.has(value)) {
              const path = basePath.concat([i]);
              patches.push({
                op: ADD,
                path,
                value,
              });
              inversePatches.unshift({
                op: REMOVE,
                path,
                value,
              });
            }
            i++;
          });
        }
        function generateReplacementPatches_(
          baseValue,
          replacement,
          patches,
          inversePatches
        ) {
          patches.push({
            op: REPLACE,
            path: [],
            value: replacement === NOTHING ? void 0 : replacement,
          });
          inversePatches.push({
            op: REPLACE,
            path: [],
            value: baseValue,
          });
        }
        function applyPatches_(draft, patches) {
          patches.forEach((patch) => {
            const { path, op } = patch;
            let base = draft;
            for (let i = 0; i < path.length - 1; i++) {
              const parentType = getArchtype(base);
              let p = path[i];
              if (typeof p !== 'string' && typeof p !== 'number') {
                p = '' + p;
              }
              if (
                (parentType === 0 /* Object */ ||
                  parentType === 1) /* Array */ &&
                (p === '__proto__' || p === 'constructor')
              )
                die(errorOffset + 3);
              if (typeof base === 'function' && p === 'prototype')
                die(errorOffset + 3);
              base = get(base, p);
              if (typeof base !== 'object')
                die(errorOffset + 2, path.join('/'));
            }
            const type = getArchtype(base);
            const value = deepClonePatchValue(patch.value);
            const key = path[path.length - 1];
            switch (op) {
              case REPLACE:
                switch (type) {
                  case 2 /* Map */:
                    return base.set(key, value);
                  case 3 /* Set */:
                    die(errorOffset);
                  default:
                    return (base[key] = value);
                }
              case ADD:
                switch (type) {
                  case 1 /* Array */:
                    return key === '-'
                      ? base.push(value)
                      : base.splice(key, 0, value);
                  case 2 /* Map */:
                    return base.set(key, value);
                  case 3 /* Set */:
                    return base.add(value);
                  default:
                    return (base[key] = value);
                }
              case REMOVE:
                switch (type) {
                  case 1 /* Array */:
                    return base.splice(key, 1);
                  case 2 /* Map */:
                    return base.delete(key);
                  case 3 /* Set */:
                    return base.delete(patch.value);
                  default:
                    return delete base[key];
                }
              default:
                die(errorOffset + 1, op);
            }
          });
          return draft;
        }
        function deepClonePatchValue(obj) {
          if (!isDraftable(obj)) return obj;
          if (Array.isArray(obj)) return obj.map(deepClonePatchValue);
          if (isMap(obj))
            return new Map(
              Array.from(obj.entries()).map((param) => {
                let [k, v] = param;
                return [k, deepClonePatchValue(v)];
              })
            );
          if (isSet(obj))
            return new Set(Array.from(obj).map(deepClonePatchValue));
          const cloned = Object.create(getPrototypeOf(obj));
          for (const key in obj) cloned[key] = deepClonePatchValue(obj[key]);
          if (has(obj, DRAFTABLE)) cloned[DRAFTABLE] = obj[DRAFTABLE];
          return cloned;
        }
        function clonePatchValueIfNeeded(obj) {
          if (isDraft(obj)) {
            return deepClonePatchValue(obj);
          } else return obj;
        }
        loadPlugin('Patches', {
          applyPatches_,
          generatePatches_,
          generateReplacementPatches_,
        });
      }
      // src/plugins/mapset.ts
      function enableMapSet() {
        class DraftMap extends Map {
          get size() {
            return latest(this[DRAFT_STATE]).size;
          }
          has(key) {
            return latest(this[DRAFT_STATE]).has(key);
          }
          set(key, value) {
            const state = this[DRAFT_STATE];
            assertUnrevoked(state);
            if (!latest(state).has(key) || latest(state).get(key) !== value) {
              prepareMapCopy(state);
              markChanged(state);
              state.assigned_.set(key, true);
              state.copy_.set(key, value);
              state.assigned_.set(key, true);
            }
            return this;
          }
          delete(key) {
            if (!this.has(key)) {
              return false;
            }
            const state = this[DRAFT_STATE];
            assertUnrevoked(state);
            prepareMapCopy(state);
            markChanged(state);
            if (state.base_.has(key)) {
              state.assigned_.set(key, false);
            } else {
              state.assigned_.delete(key);
            }
            state.copy_.delete(key);
            return true;
          }
          clear() {
            const state = this[DRAFT_STATE];
            assertUnrevoked(state);
            if (latest(state).size) {
              prepareMapCopy(state);
              markChanged(state);
              state.assigned_ = /* @__PURE__ */ new Map();
              each(state.base_, (key) => {
                state.assigned_.set(key, false);
              });
              state.copy_.clear();
            }
          }
          forEach(cb, thisArg) {
            const state = this[DRAFT_STATE];
            latest(state).forEach((_value, key, _map) => {
              cb.call(thisArg, this.get(key), key, this);
            });
          }
          get(key) {
            const state = this[DRAFT_STATE];
            assertUnrevoked(state);
            const value = latest(state).get(key);
            if (state.finalized_ || !isDraftable(value)) {
              return value;
            }
            if (value !== state.base_.get(key)) {
              return value;
            }
            const draft = createProxy(value, state);
            prepareMapCopy(state);
            state.copy_.set(key, draft);
            return draft;
          }
          keys() {
            return latest(this[DRAFT_STATE]).keys();
          }
          values() {
            const iterator = this.keys();
            return {
              [Symbol.iterator]: () => this.values(),
              next: () => {
                const r = iterator.next();
                if (r.done) return r;
                const value = this.get(r.value);
                return {
                  done: false,
                  value,
                };
              },
            };
          }
          entries() {
            const iterator = this.keys();
            return {
              [Symbol.iterator]: () => this.entries(),
              next: () => {
                const r = iterator.next();
                if (r.done) return r;
                const value = this.get(r.value);
                return {
                  done: false,
                  value: [r.value, value],
                };
              },
            };
          }
          [(DRAFT_STATE, Symbol.iterator)]() {
            return this.entries();
          }
          constructor(target, parent) {
            super();
            this[DRAFT_STATE] = {
              type_: 2 /* Map */,
              parent_: parent,
              scope_: parent ? parent.scope_ : getCurrentScope(),
              modified_: false,
              finalized_: false,
              copy_: void 0,
              assigned_: void 0,
              base_: target,
              draft_: this,
              isManual_: false,
              revoked_: false,
            };
          }
        }
        function proxyMap_(target, parent) {
          return new DraftMap(target, parent);
        }
        function prepareMapCopy(state) {
          if (!state.copy_) {
            state.assigned_ = /* @__PURE__ */ new Map();
            state.copy_ = new Map(state.base_);
          }
        }
        class DraftSet extends Set {
          get size() {
            return latest(this[DRAFT_STATE]).size;
          }
          has(value) {
            const state = this[DRAFT_STATE];
            assertUnrevoked(state);
            if (!state.copy_) {
              return state.base_.has(value);
            }
            if (state.copy_.has(value)) return true;
            if (
              state.drafts_.has(value) &&
              state.copy_.has(state.drafts_.get(value))
            )
              return true;
            return false;
          }
          add(value) {
            const state = this[DRAFT_STATE];
            assertUnrevoked(state);
            if (!this.has(value)) {
              prepareSetCopy(state);
              markChanged(state);
              state.copy_.add(value);
            }
            return this;
          }
          delete(value) {
            if (!this.has(value)) {
              return false;
            }
            const state = this[DRAFT_STATE];
            assertUnrevoked(state);
            prepareSetCopy(state);
            markChanged(state);
            return (
              state.copy_.delete(value) ||
              (state.drafts_.has(value)
                ? state.copy_.delete(state.drafts_.get(value))
                : /* istanbul ignore next */ false)
            );
          }
          clear() {
            const state = this[DRAFT_STATE];
            assertUnrevoked(state);
            if (latest(state).size) {
              prepareSetCopy(state);
              markChanged(state);
              state.copy_.clear();
            }
          }
          values() {
            const state = this[DRAFT_STATE];
            assertUnrevoked(state);
            prepareSetCopy(state);
            return state.copy_.values();
          }
          entries() {
            const state = this[DRAFT_STATE];
            assertUnrevoked(state);
            prepareSetCopy(state);
            return state.copy_.entries();
          }
          keys() {
            return this.values();
          }
          [(DRAFT_STATE, Symbol.iterator)]() {
            return this.values();
          }
          forEach(cb, thisArg) {
            const iterator = this.values();
            let result = iterator.next();
            while (!result.done) {
              cb.call(thisArg, result.value, result.value, this);
              result = iterator.next();
            }
          }
          constructor(target, parent) {
            super();
            this[DRAFT_STATE] = {
              type_: 3 /* Set */,
              parent_: parent,
              scope_: parent ? parent.scope_ : getCurrentScope(),
              modified_: false,
              finalized_: false,
              copy_: void 0,
              base_: target,
              draft_: this,
              drafts_: /* @__PURE__ */ new Map(),
              revoked_: false,
              isManual_: false,
            };
          }
        }
        function proxySet_(target, parent) {
          return new DraftSet(target, parent);
        }
        function prepareSetCopy(state) {
          if (!state.copy_) {
            state.copy_ = /* @__PURE__ */ new Set();
            state.base_.forEach((value) => {
              if (isDraftable(value)) {
                const draft = createProxy(value, state);
                state.drafts_.set(value, draft);
                state.copy_.add(draft);
              } else {
                state.copy_.add(value);
              }
            });
          }
        }
        function assertUnrevoked(state) {
          if (state.revoked_) die(3, JSON.stringify(latest(state)));
        }
        loadPlugin('MapSet', {
          proxyMap_,
          proxySet_,
        });
      }
      // src/immer.ts
      var immer = new Immer2();
      var produce = immer.produce;
      var produceWithPatches = immer.produceWithPatches.bind(immer);
      var setAutoFreeze = immer.setAutoFreeze.bind(immer);
      var setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer);
      var applyPatches = immer.applyPatches.bind(immer);
      var createDraft = immer.createDraft.bind(immer);
      var finishDraft = immer.finishDraft.bind(immer);
      function castDraft(value) {
        return value;
      }
      function castImmutable(value) {
        return value;
      }
      //# sourceMappingURL=immer.mjs.map
    },
    '[project]/node_modules/reselect/dist/reselect.mjs [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        // src/devModeChecks/identityFunctionCheck.ts
        __turbopack_context__.s({
          createSelector: () => createSelector,
          createSelectorCreator: () => createSelectorCreator,
          createStructuredSelector: () => createStructuredSelector,
          lruMemoize: () => lruMemoize,
          referenceEqualityCheck: () => referenceEqualityCheck,
          setGlobalDevModeChecks: () => setGlobalDevModeChecks,
          unstable_autotrackMemoize: () => autotrackMemoize,
          weakMapMemoize: () => weakMapMemoize,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          /*#__PURE__*/ __turbopack_context__.i(
            '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)'
          );
        var runIdentityFunctionCheck = (
          resultFunc,
          inputSelectorsResults,
          outputSelectorResult
        ) => {
          if (
            inputSelectorsResults.length === 1 &&
            inputSelectorsResults[0] === outputSelectorResult
          ) {
            let isInputSameAsOutput = false;
            try {
              const emptyObject = {};
              if (resultFunc(emptyObject) === emptyObject)
                isInputSameAsOutput = true;
            } catch (e) {}
            if (isInputSameAsOutput) {
              let stack = void 0;
              try {
                throw new Error();
              } catch (e) {
                ({ stack } = e);
              }
              console.warn(
                'The result function returned its own inputs without modification. e.g\n`createSelector([state => state.todos], todos => todos)`\nThis could lead to inefficient memoization and unnecessary re-renders.\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.',
                {
                  stack,
                }
              );
            }
          }
        };
        // src/devModeChecks/inputStabilityCheck.ts
        var runInputStabilityCheck = (
          inputSelectorResultsObject,
          options,
          inputSelectorArgs
        ) => {
          const { memoize, memoizeOptions } = options;
          const { inputSelectorResults, inputSelectorResultsCopy } =
            inputSelectorResultsObject;
          const createAnEmptyObject = memoize(() => ({}), ...memoizeOptions);
          const areInputSelectorResultsEqual =
            createAnEmptyObject.apply(null, inputSelectorResults) ===
            createAnEmptyObject.apply(null, inputSelectorResultsCopy);
          if (!areInputSelectorResultsEqual) {
            let stack = void 0;
            try {
              throw new Error();
            } catch (e) {
              ({ stack } = e);
            }
            console.warn(
              'An input selector returned a different result when passed same arguments.\nThis means your output selector will likely run more frequently than intended.\nAvoid returning a new reference inside your input selector, e.g.\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`',
              {
                arguments: inputSelectorArgs,
                firstInputs: inputSelectorResults,
                secondInputs: inputSelectorResultsCopy,
                stack,
              }
            );
          }
        };
        // src/devModeChecks/setGlobalDevModeChecks.ts
        var globalDevModeChecks = {
          inputStabilityCheck: 'once',
          identityFunctionCheck: 'once',
        };
        var setGlobalDevModeChecks = (devModeChecks) => {
          Object.assign(globalDevModeChecks, devModeChecks);
        };
        // src/utils.ts
        var NOT_FOUND = /* @__PURE__ */ Symbol('NOT_FOUND');
        function assertIsFunction(func) {
          let errorMessage =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : 'expected a function, instead received '.concat(typeof func);
          if (typeof func !== 'function') {
            throw new TypeError(errorMessage);
          }
        }
        function assertIsObject(object) {
          let errorMessage =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : 'expected an object, instead received '.concat(typeof object);
          if (typeof object !== 'object') {
            throw new TypeError(errorMessage);
          }
        }
        function assertIsArrayOfFunctions(array) {
          let errorMessage =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : 'expected all items to be functions, instead received the following types: ';
          if (!array.every((item) => typeof item === 'function')) {
            const itemTypes = array
              .map((item) =>
                typeof item === 'function'
                  ? 'function '.concat(item.name || 'unnamed', '()')
                  : typeof item
              )
              .join(', ');
            throw new TypeError(
              ''.concat(errorMessage, '[').concat(itemTypes, ']')
            );
          }
        }
        var ensureIsArray = (item) => {
          return Array.isArray(item) ? item : [item];
        };
        function getDependencies(createSelectorArgs) {
          const dependencies = Array.isArray(createSelectorArgs[0])
            ? createSelectorArgs[0]
            : createSelectorArgs;
          assertIsArrayOfFunctions(
            dependencies,
            'createSelector expects all input-selectors to be functions, but received the following types: '
          );
          return dependencies;
        }
        function collectInputSelectorResults(dependencies, inputSelectorArgs) {
          const inputSelectorResults = [];
          const { length } = dependencies;
          for (let i = 0; i < length; i++) {
            inputSelectorResults.push(
              dependencies[i].apply(null, inputSelectorArgs)
            );
          }
          return inputSelectorResults;
        }
        var getDevModeChecksExecutionInfo = (firstRun, devModeChecks) => {
          const { identityFunctionCheck, inputStabilityCheck } = {
            ...globalDevModeChecks,
            ...devModeChecks,
          };
          return {
            identityFunctionCheck: {
              shouldRun:
                identityFunctionCheck === 'always' ||
                (identityFunctionCheck === 'once' && firstRun),
              run: runIdentityFunctionCheck,
            },
            inputStabilityCheck: {
              shouldRun:
                inputStabilityCheck === 'always' ||
                (inputStabilityCheck === 'once' && firstRun),
              run: runInputStabilityCheck,
            },
          };
        };
        // src/autotrackMemoize/autotracking.ts
        var $REVISION = 0;
        var CURRENT_TRACKER = null;
        var Cell = class {
          // Whenever a storage value is read, it'll add itself to the current tracker if
          // one exists, entangling its state with that cache.
          get value() {
            CURRENT_TRACKER === null || CURRENT_TRACKER === void 0
              ? void 0
              : CURRENT_TRACKER.add(this);
            return this._value;
          }
          // Whenever a storage value is updated, we bump the global revision clock,
          // assign the revision for this storage to the new value, _and_ we schedule a
          // rerender. This is important, and it's what makes autotracking  _pull_
          // based. We don't actively tell the caches which depend on the storage that
          // anything has happened. Instead, we recompute the caches when needed.
          set value(newValue) {
            if (this.value === newValue) return;
            this._value = newValue;
            this.revision = ++$REVISION;
          }
          constructor(initialValue, isEqual = tripleEq) {
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'revision', $REVISION);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, '_value', void 0);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, '_lastValue', void 0);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, '_isEqual', tripleEq);
            this._value = this._lastValue = initialValue;
            this._isEqual = isEqual;
          }
        };
        function tripleEq(a, b) {
          return a === b;
        }
        var TrackingCache = class {
          clear() {
            this._cachedValue = void 0;
            this._cachedRevision = -1;
            this._deps = [];
            this.hits = 0;
          }
          get value() {
            if (this.revision > this._cachedRevision) {
              const { fn } = this;
              const currentTracker = /* @__PURE__ */ new Set();
              const prevTracker = CURRENT_TRACKER;
              CURRENT_TRACKER = currentTracker;
              this._cachedValue = fn();
              CURRENT_TRACKER = prevTracker;
              this.hits++;
              this._deps = Array.from(currentTracker);
              this._cachedRevision = this.revision;
            }
            CURRENT_TRACKER === null || CURRENT_TRACKER === void 0
              ? void 0
              : CURRENT_TRACKER.add(this);
            return this._cachedValue;
          }
          get revision() {
            return Math.max(...this._deps.map((d) => d.revision), 0);
          }
          constructor(fn) {
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, '_cachedValue', void 0);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, '_cachedRevision', -1);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, '_deps', []);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'hits', 0);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'fn', void 0);
            this.fn = fn;
          }
        };
        function getValue(cell) {
          if (!(cell instanceof Cell)) {
            console.warn('Not a valid cell! ', cell);
          }
          return cell.value;
        }
        function setValue(storage, value) {
          if (!(storage instanceof Cell)) {
            throw new TypeError(
              'setValue must be passed a tracked store created with `createStorage`.'
            );
          }
          storage.value = storage._lastValue = value;
        }
        function createCell(initialValue) {
          let isEqual =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : tripleEq;
          return new Cell(initialValue, isEqual);
        }
        function createCache(fn) {
          assertIsFunction(
            fn,
            'the first parameter to `createCache` must be a function'
          );
          return new TrackingCache(fn);
        }
        // src/autotrackMemoize/tracking.ts
        var neverEq = (a, b) => false;
        function createTag() {
          return createCell(null, neverEq);
        }
        function dirtyTag(tag, value) {
          setValue(tag, value);
        }
        var consumeCollection = (node) => {
          let tag = node.collectionTag;
          if (tag === null) {
            tag = node.collectionTag = createTag();
          }
          getValue(tag);
        };
        var dirtyCollection = (node) => {
          const tag = node.collectionTag;
          if (tag !== null) {
            dirtyTag(tag, null);
          }
        };
        // src/autotrackMemoize/proxy.ts
        var REDUX_PROXY_LABEL = Symbol();
        var nextId = 0;
        var proto = Object.getPrototypeOf({});
        var ObjectTreeNode = class {
          constructor(value) {
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'proxy', new Proxy(this, objectProxyHandler));
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'tag', createTag());
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'tags', {});
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'children', {});
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'collectionTag', null);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'id', nextId++);
            this.value = value;
            this.value = value;
            this.tag.value = value;
          }
        };
        var objectProxyHandler = {
          get(node, key) {
            function calculateResult() {
              const { value } = node;
              const childValue = Reflect.get(value, key);
              if (typeof key === 'symbol') {
                return childValue;
              }
              if (key in proto) {
                return childValue;
              }
              if (typeof childValue === 'object' && childValue !== null) {
                let childNode = node.children[key];
                if (childNode === void 0) {
                  childNode = node.children[key] = createNode(childValue);
                }
                if (childNode.tag) {
                  getValue(childNode.tag);
                }
                return childNode.proxy;
              } else {
                let tag = node.tags[key];
                if (tag === void 0) {
                  tag = node.tags[key] = createTag();
                  tag.value = childValue;
                }
                getValue(tag);
                return childValue;
              }
            }
            const res = calculateResult();
            return res;
          },
          ownKeys(node) {
            consumeCollection(node);
            return Reflect.ownKeys(node.value);
          },
          getOwnPropertyDescriptor(node, prop) {
            return Reflect.getOwnPropertyDescriptor(node.value, prop);
          },
          has(node, prop) {
            return Reflect.has(node.value, prop);
          },
        };
        var ArrayTreeNode = class {
          constructor(value) {
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'proxy', new Proxy([this], arrayProxyHandler));
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'tag', createTag());
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'tags', {});
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'children', {});
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'collectionTag', null);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'id', nextId++);
            this.value = value;
            this.value = value;
            this.tag.value = value;
          }
        };
        var arrayProxyHandler = {
          get(param, key) {
            let [node] = param;
            if (key === 'length') {
              consumeCollection(node);
            }
            return objectProxyHandler.get(node, key);
          },
          ownKeys(param) {
            let [node] = param;
            return objectProxyHandler.ownKeys(node);
          },
          getOwnPropertyDescriptor(param, prop) {
            let [node] = param;
            return objectProxyHandler.getOwnPropertyDescriptor(node, prop);
          },
          has(param, prop) {
            let [node] = param;
            return objectProxyHandler.has(node, prop);
          },
        };
        function createNode(value) {
          if (Array.isArray(value)) {
            return new ArrayTreeNode(value);
          }
          return new ObjectTreeNode(value);
        }
        function updateNode(node, newValue) {
          const { value, tags, children } = node;
          node.value = newValue;
          if (
            Array.isArray(value) &&
            Array.isArray(newValue) &&
            value.length !== newValue.length
          ) {
            dirtyCollection(node);
          } else {
            if (value !== newValue) {
              let oldKeysSize = 0;
              let newKeysSize = 0;
              let anyKeysAdded = false;
              for (const _key in value) {
                oldKeysSize++;
              }
              for (const key in newValue) {
                newKeysSize++;
                if (!(key in value)) {
                  anyKeysAdded = true;
                  break;
                }
              }
              const isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize;
              if (isDifferent) {
                dirtyCollection(node);
              }
            }
          }
          for (const key in tags) {
            const childValue = value[key];
            const newChildValue = newValue[key];
            if (childValue !== newChildValue) {
              dirtyCollection(node);
              dirtyTag(tags[key], newChildValue);
            }
            if (typeof newChildValue === 'object' && newChildValue !== null) {
              delete tags[key];
            }
          }
          for (const key in children) {
            const childNode = children[key];
            const newChildValue = newValue[key];
            const childValue = childNode.value;
            if (childValue === newChildValue) {
              continue;
            } else if (
              typeof newChildValue === 'object' &&
              newChildValue !== null
            ) {
              updateNode(childNode, newChildValue);
            } else {
              deleteNode(childNode);
              delete children[key];
            }
          }
        }
        function deleteNode(node) {
          if (node.tag) {
            dirtyTag(node.tag, null);
          }
          dirtyCollection(node);
          for (const key in node.tags) {
            dirtyTag(node.tags[key], null);
          }
          for (const key in node.children) {
            deleteNode(node.children[key]);
          }
        }
        // src/lruMemoize.ts
        function createSingletonCache(equals) {
          let entry;
          return {
            get(key) {
              if (entry && equals(entry.key, key)) {
                return entry.value;
              }
              return NOT_FOUND;
            },
            put(key, value) {
              entry = {
                key,
                value,
              };
            },
            getEntries() {
              return entry ? [entry] : [];
            },
            clear() {
              entry = void 0;
            },
          };
        }
        function createLruCache(maxSize, equals) {
          let entries = [];
          function get(key) {
            const cacheIndex = entries.findIndex((entry) =>
              equals(key, entry.key)
            );
            if (cacheIndex > -1) {
              const entry = entries[cacheIndex];
              if (cacheIndex > 0) {
                entries.splice(cacheIndex, 1);
                entries.unshift(entry);
              }
              return entry.value;
            }
            return NOT_FOUND;
          }
          function put(key, value) {
            if (get(key) === NOT_FOUND) {
              entries.unshift({
                key,
                value,
              });
              if (entries.length > maxSize) {
                entries.pop();
              }
            }
          }
          function getEntries() {
            return entries;
          }
          function clear() {
            entries = [];
          }
          return {
            get,
            put,
            getEntries,
            clear,
          };
        }
        var referenceEqualityCheck = (a, b) => a === b;
        function createCacheKeyComparator(equalityCheck) {
          return function areArgumentsShallowlyEqual(prev, next) {
            if (prev === null || next === null || prev.length !== next.length) {
              return false;
            }
            const { length } = prev;
            for (let i = 0; i < length; i++) {
              if (!equalityCheck(prev[i], next[i])) {
                return false;
              }
            }
            return true;
          };
        }
        function lruMemoize(func, equalityCheckOrOptions) {
          const providedOptions =
            typeof equalityCheckOrOptions === 'object'
              ? equalityCheckOrOptions
              : {
                  equalityCheck: equalityCheckOrOptions,
                };
          const {
            equalityCheck = referenceEqualityCheck,
            maxSize = 1,
            resultEqualityCheck,
          } = providedOptions;
          const comparator = createCacheKeyComparator(equalityCheck);
          let resultsCount = 0;
          const cache =
            maxSize <= 1
              ? createSingletonCache(comparator)
              : createLruCache(maxSize, comparator);
          function memoized() {
            let value = cache.get(arguments);
            if (value === NOT_FOUND) {
              value = func.apply(null, arguments);
              resultsCount++;
              if (resultEqualityCheck) {
                const entries = cache.getEntries();
                const matchingEntry = entries.find((entry) =>
                  resultEqualityCheck(entry.value, value)
                );
                if (matchingEntry) {
                  value = matchingEntry.value;
                  resultsCount !== 0 && resultsCount--;
                }
              }
              cache.put(arguments, value);
            }
            return value;
          }
          memoized.clearCache = () => {
            cache.clear();
            memoized.resetResultsCount();
          };
          memoized.resultsCount = () => resultsCount;
          memoized.resetResultsCount = () => {
            resultsCount = 0;
          };
          return memoized;
        }
        // src/autotrackMemoize/autotrackMemoize.ts
        function autotrackMemoize(func) {
          const node = createNode([]);
          let lastArgs = null;
          const shallowEqual = createCacheKeyComparator(referenceEqualityCheck);
          const cache = createCache(() => {
            const res = func.apply(null, node.proxy);
            return res;
          });
          function memoized() {
            if (!shallowEqual(lastArgs, arguments)) {
              updateNode(node, arguments);
              lastArgs = arguments;
            }
            return cache.value;
          }
          memoized.clearCache = () => {
            return cache.clear();
          };
          return memoized;
        }
        // src/weakMapMemoize.ts
        var StrongRef = class {
          deref() {
            return this.value;
          }
          constructor(value) {
            this.value = value;
          }
        };
        var Ref = typeof WeakRef !== 'undefined' ? WeakRef : StrongRef;
        var UNTERMINATED = 0;
        var TERMINATED = 1;
        function createCacheNode() {
          return {
            s: UNTERMINATED,
            v: void 0,
            o: null,
            p: null,
          };
        }
        function weakMapMemoize(func) {
          let options =
            arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          let fnNode = createCacheNode();
          const { resultEqualityCheck } = options;
          let lastResult;
          let resultsCount = 0;
          function memoized() {
            let cacheNode = fnNode;
            const { length } = arguments;
            for (let i = 0, l = length; i < l; i++) {
              const arg = arguments[i];
              if (
                typeof arg === 'function' ||
                (typeof arg === 'object' && arg !== null)
              ) {
                let objectCache = cacheNode.o;
                if (objectCache === null) {
                  cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
                }
                const objectNode = objectCache.get(arg);
                if (objectNode === void 0) {
                  cacheNode = createCacheNode();
                  objectCache.set(arg, cacheNode);
                } else {
                  cacheNode = objectNode;
                }
              } else {
                let primitiveCache = cacheNode.p;
                if (primitiveCache === null) {
                  cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
                }
                const primitiveNode = primitiveCache.get(arg);
                if (primitiveNode === void 0) {
                  cacheNode = createCacheNode();
                  primitiveCache.set(arg, cacheNode);
                } else {
                  cacheNode = primitiveNode;
                }
              }
            }
            const terminatedNode = cacheNode;
            let result;
            if (cacheNode.s === TERMINATED) {
              result = cacheNode.v;
            } else {
              result = func.apply(null, arguments);
              resultsCount++;
              if (resultEqualityCheck) {
                var _lastResult_deref;
                var _lastResult_deref1;
                const lastResultValue =
                  (_lastResult_deref1 =
                    lastResult === null || lastResult === void 0
                      ? void 0
                      : (_lastResult_deref = lastResult.deref) === null ||
                          _lastResult_deref === void 0
                        ? void 0
                        : _lastResult_deref.call(lastResult)) !== null &&
                  _lastResult_deref1 !== void 0
                    ? _lastResult_deref1
                    : lastResult;
                if (
                  lastResultValue != null &&
                  resultEqualityCheck(lastResultValue, result)
                ) {
                  result = lastResultValue;
                  resultsCount !== 0 && resultsCount--;
                }
                const needsWeakRef =
                  (typeof result === 'object' && result !== null) ||
                  typeof result === 'function';
                lastResult = needsWeakRef ? new Ref(result) : result;
              }
            }
            terminatedNode.s = TERMINATED;
            terminatedNode.v = result;
            return result;
          }
          memoized.clearCache = () => {
            fnNode = createCacheNode();
            memoized.resetResultsCount();
          };
          memoized.resultsCount = () => resultsCount;
          memoized.resetResultsCount = () => {
            resultsCount = 0;
          };
          return memoized;
        }
        // src/createSelectorCreator.ts
        function createSelectorCreator(memoizeOrOptions) {
          for (
            var _len = arguments.length,
              memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            memoizeOptionsFromArgs[_key - 1] = arguments[_key];
          }
          const createSelectorCreatorOptions =
            typeof memoizeOrOptions === 'function'
              ? {
                  memoize: memoizeOrOptions,
                  memoizeOptions: memoizeOptionsFromArgs,
                }
              : memoizeOrOptions;
          const createSelector2 = function () {
            for (
              var _len = arguments.length,
                createSelectorArgs = new Array(_len),
                _key = 0;
              _key < _len;
              _key++
            ) {
              createSelectorArgs[_key] = arguments[_key];
            }
            let recomputations = 0;
            let dependencyRecomputations = 0;
            let lastResult;
            let directlyPassedOptions = {};
            let resultFunc = createSelectorArgs.pop();
            if (typeof resultFunc === 'object') {
              directlyPassedOptions = resultFunc;
              resultFunc = createSelectorArgs.pop();
            }
            assertIsFunction(
              resultFunc,
              'createSelector expects an output function after the inputs, but received: ['.concat(
                typeof resultFunc,
                ']'
              )
            );
            const combinedOptions = {
              ...createSelectorCreatorOptions,
              ...directlyPassedOptions,
            };
            const {
              memoize,
              memoizeOptions = [],
              argsMemoize = weakMapMemoize,
              argsMemoizeOptions = [],
              devModeChecks = {},
            } = combinedOptions;
            const finalMemoizeOptions = ensureIsArray(memoizeOptions);
            const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);
            const dependencies = getDependencies(createSelectorArgs);
            const memoizedResultFunc = memoize(
              function recomputationWrapper() {
                recomputations++;
                return resultFunc.apply(null, arguments);
              },
              ...finalMemoizeOptions
            );
            let firstRun = true;
            const selector = argsMemoize(
              function dependenciesChecker() {
                dependencyRecomputations++;
                const inputSelectorResults = collectInputSelectorResults(
                  dependencies,
                  arguments
                );
                lastResult = memoizedResultFunc.apply(
                  null,
                  inputSelectorResults
                );
                if (('TURBOPACK compile-time truthy', 1)) {
                  const { identityFunctionCheck, inputStabilityCheck } =
                    getDevModeChecksExecutionInfo(firstRun, devModeChecks);
                  if (identityFunctionCheck.shouldRun) {
                    identityFunctionCheck.run(
                      resultFunc,
                      inputSelectorResults,
                      lastResult
                    );
                  }
                  if (inputStabilityCheck.shouldRun) {
                    const inputSelectorResultsCopy =
                      collectInputSelectorResults(dependencies, arguments);
                    inputStabilityCheck.run(
                      {
                        inputSelectorResults,
                        inputSelectorResultsCopy,
                      },
                      {
                        memoize,
                        memoizeOptions: finalMemoizeOptions,
                      },
                      arguments
                    );
                  }
                  if (firstRun) firstRun = false;
                }
                return lastResult;
              },
              ...finalArgsMemoizeOptions
            );
            return Object.assign(selector, {
              resultFunc,
              memoizedResultFunc,
              dependencies,
              dependencyRecomputations: () => dependencyRecomputations,
              resetDependencyRecomputations: () => {
                dependencyRecomputations = 0;
              },
              lastResult: () => lastResult,
              recomputations: () => recomputations,
              resetRecomputations: () => {
                recomputations = 0;
              },
              memoize,
              argsMemoize,
            });
          };
          Object.assign(createSelector2, {
            withTypes: () => createSelector2,
          });
          return createSelector2;
        }
        var createSelector =
          /* @__PURE__ */ createSelectorCreator(weakMapMemoize);
        // src/createStructuredSelector.ts
        var createStructuredSelector = Object.assign(
          function (inputSelectorsObject) {
            let selectorCreator =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : createSelector;
            assertIsObject(
              inputSelectorsObject,
              'createStructuredSelector expects first argument to be an object where each property is a selector, instead received a '.concat(
                typeof inputSelectorsObject
              )
            );
            const inputSelectorKeys = Object.keys(inputSelectorsObject);
            const dependencies = inputSelectorKeys.map(
              (key) => inputSelectorsObject[key]
            );
            const structuredSelector = selectorCreator(
              dependencies,
              function () {
                for (
                  var _len = arguments.length,
                    inputSelectorResults = new Array(_len),
                    _key = 0;
                  _key < _len;
                  _key++
                ) {
                  inputSelectorResults[_key] = arguments[_key];
                }
                return inputSelectorResults.reduce(
                  (composition, value, index) => {
                    composition[inputSelectorKeys[index]] = value;
                    return composition;
                  },
                  {}
                );
              }
            );
            return structuredSelector;
          },
          {
            withTypes: () => createStructuredSelector,
          }
        );
        //# sourceMappingURL=reselect.mjs.map
      },
    '[project]/node_modules/redux/dist/redux.mjs [app-client] (ecmascript)': (
      __turbopack_context__
    ) => {
      'use strict';

      // src/utils/formatProdErrorMessage.ts
      __turbopack_context__.s({
        __DO_NOT_USE__ActionTypes: () => actionTypes_default,
        applyMiddleware: () => applyMiddleware,
        bindActionCreators: () => bindActionCreators,
        combineReducers: () => combineReducers,
        compose: () => compose,
        createStore: () => createStore,
        isAction: () => isAction,
        isPlainObject: () => isPlainObject,
        legacy_createStore: () => legacy_createStore,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
        /*#__PURE__*/ __turbopack_context__.i(
          '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
        );
      function formatProdErrorMessage(code) {
        return 'Minified Redux error #'
          .concat(code, '; visit https://redux.js.org/Errors?code=')
          .concat(
            code,
            ' for the full message or use the non-minified dev environment for full errors. '
          );
      }
      // src/utils/symbol-observable.ts
      var $$observable = /* @__PURE__ */ (() =>
        (typeof Symbol === 'function' && Symbol.observable) ||
        '@@observable')();
      var symbol_observable_default = $$observable;
      // src/utils/actionTypes.ts
      var randomString = () =>
        Math.random().toString(36).substring(7).split('').join('.');
      var ActionTypes = {
        INIT: '@@redux/INIT'.concat(/* @__PURE__ */ randomString()),
        REPLACE: '@@redux/REPLACE'.concat(/* @__PURE__ */ randomString()),
        PROBE_UNKNOWN_ACTION: () =>
          '@@redux/PROBE_UNKNOWN_ACTION'.concat(randomString()),
      };
      var actionTypes_default = ActionTypes;
      // src/utils/isPlainObject.ts
      function isPlainObject(obj) {
        if (typeof obj !== 'object' || obj === null) return false;
        let proto = obj;
        while (Object.getPrototypeOf(proto) !== null) {
          proto = Object.getPrototypeOf(proto);
        }
        return (
          Object.getPrototypeOf(obj) === proto ||
          Object.getPrototypeOf(obj) === null
        );
      }
      // src/utils/kindOf.ts
      function miniKindOf(val) {
        if (val === void 0) return 'undefined';
        if (val === null) return 'null';
        const type = typeof val;
        switch (type) {
          case 'boolean':
          case 'string':
          case 'number':
          case 'symbol':
          case 'function': {
            return type;
          }
        }
        if (Array.isArray(val)) return 'array';
        if (isDate(val)) return 'date';
        if (isError(val)) return 'error';
        const constructorName = ctorName(val);
        switch (constructorName) {
          case 'Symbol':
          case 'Promise':
          case 'WeakMap':
          case 'WeakSet':
          case 'Map':
          case 'Set':
            return constructorName;
        }
        return Object.prototype.toString
          .call(val)
          .slice(8, -1)
          .toLowerCase()
          .replace(/\s/g, '');
      }
      function ctorName(val) {
        return typeof val.constructor === 'function'
          ? val.constructor.name
          : null;
      }
      function isError(val) {
        return (
          val instanceof Error ||
          (typeof val.message === 'string' &&
            val.constructor &&
            typeof val.constructor.stackTraceLimit === 'number')
        );
      }
      function isDate(val) {
        if (val instanceof Date) return true;
        return (
          typeof val.toDateString === 'function' &&
          typeof val.getDate === 'function' &&
          typeof val.setDate === 'function'
        );
      }
      function kindOf(val) {
        let typeOfVal = typeof val;
        if (('TURBOPACK compile-time truthy', 1)) {
          typeOfVal = miniKindOf(val);
        }
        return typeOfVal;
      }
      // src/createStore.ts
      function createStore(reducer, preloadedState, enhancer) {
        if (typeof reducer !== 'function') {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : "Expected the root reducer to be a function. Instead, received: '".concat(
                  kindOf(reducer),
                  "'"
                )
          );
        }
        if (
          (typeof preloadedState === 'function' &&
            typeof enhancer === 'function') ||
          (typeof enhancer === 'function' && typeof arguments[3] === 'function')
        ) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.'
          );
        }
        if (
          typeof preloadedState === 'function' &&
          typeof enhancer === 'undefined'
        ) {
          enhancer = preloadedState;
          preloadedState = void 0;
        }
        if (typeof enhancer !== 'undefined') {
          if (typeof enhancer !== 'function') {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : "Expected the enhancer to be a function. Instead, received: '".concat(
                    kindOf(enhancer),
                    "'"
                  )
            );
          }
          return enhancer(createStore)(reducer, preloadedState);
        }
        let currentReducer = reducer;
        let currentState = preloadedState;
        let currentListeners = /* @__PURE__ */ new Map();
        let nextListeners = currentListeners;
        let listenerIdCounter = 0;
        let isDispatching = false;
        function ensureCanMutateNextListeners() {
          if (nextListeners === currentListeners) {
            nextListeners = /* @__PURE__ */ new Map();
            currentListeners.forEach((listener, key) => {
              nextListeners.set(key, listener);
            });
          }
        }
        function getState() {
          if (isDispatching) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.'
            );
          }
          return currentState;
        }
        function subscribe(listener) {
          if (typeof listener !== 'function') {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : "Expected the listener to be a function. Instead, received: '".concat(
                    kindOf(listener),
                    "'"
                  )
            );
          }
          if (isDispatching) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.'
            );
          }
          let isSubscribed = true;
          ensureCanMutateNextListeners();
          const listenerId = listenerIdCounter++;
          nextListeners.set(listenerId, listener);
          return function unsubscribe() {
            if (!isSubscribed) {
              return;
            }
            if (isDispatching) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.'
              );
            }
            isSubscribed = false;
            ensureCanMutateNextListeners();
            nextListeners.delete(listenerId);
            currentListeners = null;
          };
        }
        function dispatch(action) {
          if (!isPlainObject(action)) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : "Actions must be plain objects. Instead, the actual type was: '".concat(
                    kindOf(action),
                    "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples."
                  )
            );
          }
          if (typeof action.type === 'undefined') {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.'
            );
          }
          if (typeof action.type !== 'string') {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Action "type" property must be a string. Instead, the actual type was: \''
                    .concat(kindOf(action.type), "'. Value was: '")
                    .concat(action.type, "' (stringified)")
            );
          }
          if (isDispatching) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Reducers may not dispatch actions.'
            );
          }
          try {
            isDispatching = true;
            currentState = currentReducer(currentState, action);
          } finally {
            isDispatching = false;
          }
          const listeners = (currentListeners = nextListeners);
          listeners.forEach((listener) => {
            listener();
          });
          return action;
        }
        function replaceReducer(nextReducer) {
          if (typeof nextReducer !== 'function') {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : "Expected the nextReducer to be a function. Instead, received: '".concat(
                    kindOf(nextReducer)
                  )
            );
          }
          currentReducer = nextReducer;
          dispatch({
            type: actionTypes_default.REPLACE,
          });
        }
        function observable() {
          const outerSubscribe = subscribe;
          return {
            /**
             * The minimal observable subscription method.
             * @param observer Any object that can be used as an observer.
             * The observer object should have a `next` method.
             * @returns An object with an `unsubscribe` method that can
             * be used to unsubscribe the observable from the store, and prevent further
             * emission of values from the observable.
             */ subscribe(observer) {
              if (typeof observer !== 'object' || observer === null) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : "Expected the observer to be an object. Instead, received: '".concat(
                        kindOf(observer),
                        "'"
                      )
                );
              }
              function observeState() {
                const observerAsObserver = observer;
                if (observerAsObserver.next) {
                  observerAsObserver.next(getState());
                }
              }
              observeState();
              const unsubscribe = outerSubscribe(observeState);
              return {
                unsubscribe,
              };
            },
            [symbol_observable_default]() {
              return this;
            },
          };
        }
        dispatch({
          type: actionTypes_default.INIT,
        });
        const store = {
          dispatch,
          subscribe,
          getState,
          replaceReducer,
          [symbol_observable_default]: observable,
        };
        return store;
      }
      function legacy_createStore(reducer, preloadedState, enhancer) {
        return createStore(reducer, preloadedState, enhancer);
      }
      // src/utils/warning.ts
      function warning(message) {
        if (
          typeof console !== 'undefined' &&
          typeof console.error === 'function'
        ) {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (e) {}
      }
      // src/combineReducers.ts
      function getUnexpectedStateShapeWarningMessage(
        inputState,
        reducers,
        action,
        unexpectedKeyCache
      ) {
        const reducerKeys = Object.keys(reducers);
        const argumentName =
          action && action.type === actionTypes_default.INIT
            ? 'preloadedState argument passed to createStore'
            : 'previous state received by the reducer';
        if (reducerKeys.length === 0) {
          return 'Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.';
        }
        if (!isPlainObject(inputState)) {
          return 'The '
            .concat(argumentName, ' has unexpected type of "')
            .concat(
              kindOf(inputState),
              '". Expected argument to be an object with the following keys: "'
            )
            .concat(reducerKeys.join('", "'), '"');
        }
        const unexpectedKeys = Object.keys(inputState).filter(
          (key) => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]
        );
        unexpectedKeys.forEach((key) => {
          unexpectedKeyCache[key] = true;
        });
        if (action && action.type === actionTypes_default.REPLACE) return;
        if (unexpectedKeys.length > 0) {
          return 'Unexpected '
            .concat(unexpectedKeys.length > 1 ? 'keys' : 'key', ' "')
            .concat(unexpectedKeys.join('", "'), '" found in ')
            .concat(
              argumentName,
              '. Expected to find one of the known reducer keys instead: "'
            )
            .concat(
              reducerKeys.join('", "'),
              '". Unexpected keys will be ignored.'
            );
        }
      }
      function assertReducerShape(reducers) {
        Object.keys(reducers).forEach((key) => {
          const reducer = reducers[key];
          const initialState = reducer(void 0, {
            type: actionTypes_default.INIT,
          });
          if (typeof initialState === 'undefined') {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'The slice reducer for key "'.concat(
                    key,
                    '" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don\'t want to set a value for this reducer, you can use null instead of undefined.'
                  )
            );
          }
          if (
            typeof reducer(void 0, {
              type: actionTypes_default.PROBE_UNKNOWN_ACTION(),
            }) === 'undefined'
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'The slice reducer for key "'
                    .concat(
                      key,
                      "\" returned undefined when probed with a random type. Don't try to handle '"
                    )
                    .concat(
                      actionTypes_default.INIT,
                      '\' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.'
                    )
            );
          }
        });
      }
      function combineReducers(reducers) {
        const reducerKeys = Object.keys(reducers);
        const finalReducers = {};
        for (let i = 0; i < reducerKeys.length; i++) {
          const key = reducerKeys[i];
          if (('TURBOPACK compile-time truthy', 1)) {
            if (typeof reducers[key] === 'undefined') {
              warning('No reducer provided for key "'.concat(key, '"'));
            }
          }
          if (typeof reducers[key] === 'function') {
            finalReducers[key] = reducers[key];
          }
        }
        const finalReducerKeys = Object.keys(finalReducers);
        let unexpectedKeyCache;
        if (('TURBOPACK compile-time value', 'development') !== 'production') {
          unexpectedKeyCache = {};
        }
        let shapeAssertionError;
        try {
          assertReducerShape(finalReducers);
        } catch (e) {
          shapeAssertionError = e;
        }
        return function combination() {
          let state =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {},
            action = arguments.length > 1 ? arguments[1] : void 0;
          if (shapeAssertionError) {
            throw shapeAssertionError;
          }
          if (('TURBOPACK compile-time truthy', 1)) {
            const warningMessage = getUnexpectedStateShapeWarningMessage(
              state,
              finalReducers,
              action,
              unexpectedKeyCache
            );
            if (warningMessage) {
              warning(warningMessage);
            }
          }
          let hasChanged = false;
          const nextState = {};
          for (let i = 0; i < finalReducerKeys.length; i++) {
            const key = finalReducerKeys[i];
            const reducer = finalReducers[key];
            const previousStateForKey = state[key];
            const nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === 'undefined') {
              const actionType = action && action.type;
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'When called with an action of type '
                      .concat(
                        actionType
                          ? '"'.concat(String(actionType), '"')
                          : '(unknown type)',
                        ', the slice reducer for key "'
                      )
                      .concat(
                        key,
                        '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'
                      )
              );
            }
            nextState[key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
          }
          hasChanged =
            hasChanged || finalReducerKeys.length !== Object.keys(state).length;
          return hasChanged ? nextState : state;
        };
      }
      // src/bindActionCreators.ts
      function bindActionCreator(actionCreator, dispatch) {
        return function () {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }
          return dispatch(actionCreator.apply(this, args));
        };
      }
      function bindActionCreators(actionCreators, dispatch) {
        if (typeof actionCreators === 'function') {
          return bindActionCreator(actionCreators, dispatch);
        }
        if (typeof actionCreators !== 'object' || actionCreators === null) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : "bindActionCreators expected an object or a function, but instead received: '".concat(
                  kindOf(actionCreators),
                  '\'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?'
                )
          );
        }
        const boundActionCreators = {};
        for (const key in actionCreators) {
          const actionCreator = actionCreators[key];
          if (typeof actionCreator === 'function') {
            boundActionCreators[key] = bindActionCreator(
              actionCreator,
              dispatch
            );
          }
        }
        return boundActionCreators;
      }
      // src/compose.ts
      function compose() {
        for (
          var _len = arguments.length, funcs = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          funcs[_key] = arguments[_key];
        }
        if (funcs.length === 0) {
          return (arg) => arg;
        }
        if (funcs.length === 1) {
          return funcs[0];
        }
        return funcs.reduce(
          (a, b) =>
            function () {
              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }
              return a(b(...args));
            }
        );
      }
      // src/applyMiddleware.ts
      function applyMiddleware() {
        for (
          var _len = arguments.length, middlewares = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          middlewares[_key] = arguments[_key];
        }
        return (createStore2) => (reducer, preloadedState) => {
          const store = createStore2(reducer, preloadedState);
          let dispatch = () => {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.'
            );
          };
          const middlewareAPI = {
            getState: store.getState,
            dispatch: function (action) {
              for (
                var _len = arguments.length,
                  args = new Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key];
              }
              return dispatch(action, ...args);
            },
          };
          const chain = middlewares.map((middleware) =>
            middleware(middlewareAPI)
          );
          dispatch = compose(...chain)(store.dispatch);
          return {
            ...store,
            dispatch,
          };
        };
      }
      // src/utils/isAction.ts
      function isAction(action) {
        return (
          isPlainObject(action) &&
          'type' in action &&
          typeof action.type === 'string'
        );
      }
      //# sourceMappingURL=redux.mjs.map
    },
    '[project]/node_modules/redux-thunk/dist/redux-thunk.mjs [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        // src/index.ts
        __turbopack_context__.s({
          thunk: () => thunk,
          withExtraArgument: () => withExtraArgument,
        });
        function createThunkMiddleware(extraArgument) {
          const middleware = (param) => {
            let { dispatch, getState } = param;
            return (next) => (action) => {
              if (typeof action === 'function') {
                return action(dispatch, getState, extraArgument);
              }
              return next(action);
            };
          };
          return middleware;
        }
        var thunk = createThunkMiddleware();
        var withExtraArgument = createThunkMiddleware;
      },
    '[project]/node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs [app-client] (ecmascript) <locals>':
      (__turbopack_context__) => {
        'use strict';

        // src/index.ts
        __turbopack_context__.s({
          ReducerType: () => ReducerType,
          SHOULD_AUTOBATCH: () => SHOULD_AUTOBATCH,
          TaskAbortError: () => TaskAbortError,
          Tuple: () => Tuple,
          addListener: () => addListener,
          asyncThunkCreator: () => asyncThunkCreator,
          autoBatchEnhancer: () => autoBatchEnhancer,
          buildCreateSlice: () => buildCreateSlice,
          clearAllListeners: () => clearAllListeners,
          combineSlices: () => combineSlices,
          configureStore: () => configureStore,
          createAction: () => createAction,
          createActionCreatorInvariantMiddleware: () =>
            createActionCreatorInvariantMiddleware,
          createAsyncThunk: () => createAsyncThunk,
          createDraftSafeSelector: () => createDraftSafeSelector,
          createDraftSafeSelectorCreator: () => createDraftSafeSelectorCreator,
          createDynamicMiddleware: () => createDynamicMiddleware,
          createEntityAdapter: () => createEntityAdapter,
          createImmutableStateInvariantMiddleware: () =>
            createImmutableStateInvariantMiddleware,
          createListenerMiddleware: () => createListenerMiddleware,
          createReducer: () => createReducer,
          createSerializableStateInvariantMiddleware: () =>
            createSerializableStateInvariantMiddleware,
          createSlice: () => createSlice,
          findNonSerializableValue: () => findNonSerializableValue,
          formatProdErrorMessage: () => formatProdErrorMessage,
          isActionCreator: () => isActionCreator,
          isAllOf: () => isAllOf,
          isAnyOf: () => isAnyOf,
          isAsyncThunkAction: () => isAsyncThunkAction,
          isFluxStandardAction: () => isFSA,
          isFulfilled: () => isFulfilled,
          isImmutableDefault: () => isImmutableDefault,
          isPending: () => isPending,
          isPlain: () => isPlain,
          isRejected: () => isRejected,
          isRejectedWithValue: () => isRejectedWithValue,
          miniSerializeError: () => miniSerializeError,
          nanoid: () => nanoid,
          prepareAutoBatched: () => prepareAutoBatched,
          removeListener: () => removeListener,
          unwrapResult: () => unwrapResult,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          /*#__PURE__*/ __turbopack_context__.i(
            '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)'
          );
        // src/createDraftSafeSelector.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/immer/dist/immer.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/reselect/dist/reselect.mjs [app-client] (ecmascript)'
          );
        // src/configureStore.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/redux/dist/redux.mjs [app-client] (ecmascript)'
          );
        // src/getDefaultMiddleware.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/redux-thunk/dist/redux-thunk.mjs [app-client] (ecmascript)'
          );
        var createDraftSafeSelectorCreator = function () {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }
          const createSelector2 = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createSelectorCreator'
          ])(...args);
          const createDraftSafeSelector2 = Object.assign(
            function () {
              for (
                var _len = arguments.length, args2 = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args2[_key] = arguments[_key];
              }
              const selector = createSelector2(...args2);
              const wrappedSelector = function (value) {
                for (
                  var _len = arguments.length,
                    rest = new Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  rest[_key - 1] = arguments[_key];
                }
                return selector(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'isDraft'
                  ])(value)
                    ? (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'current'
                      ])(value)
                    : value,
                  ...rest
                );
              };
              Object.assign(wrappedSelector, selector);
              return wrappedSelector;
            },
            {
              withTypes: () => createDraftSafeSelector2,
            }
          );
          return createDraftSafeSelector2;
        };
        var createDraftSafeSelector =
          /* @__PURE__ */ createDraftSafeSelectorCreator(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'weakMapMemoize'
            ]
          );
        var composeWithDevTools =
          typeof window !== 'undefined' &&
          window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
            ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
            : function () {
                if (arguments.length === 0) return void 0;
                if (typeof arguments[0] === 'object')
                  return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'compose'
                  ];
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'compose'
                ].apply(null, arguments);
              };
        var devToolsEnhancer =
          typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__
            ? window.__REDUX_DEVTOOLS_EXTENSION__
            : function () {
                return function (noop3) {
                  return noop3;
                };
              };
        // src/tsHelpers.ts
        var hasMatchFunction = (v) => {
          return v && typeof v.match === 'function';
        };
        // src/createAction.ts
        function createAction(type, prepareAction) {
          function actionCreator() {
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }
            if (prepareAction) {
              let prepared = prepareAction(...args);
              if (!prepared) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'prepareAction did not return an object'
                );
              }
              return {
                type,
                payload: prepared.payload,
                ...('meta' in prepared && {
                  meta: prepared.meta,
                }),
                ...('error' in prepared && {
                  error: prepared.error,
                }),
              };
            }
            return {
              type,
              payload: args[0],
            };
          }
          actionCreator.toString = () => ''.concat(type);
          actionCreator.type = type;
          actionCreator.match = (action) =>
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isAction'
            ])(action) && action.type === type;
          return actionCreator;
        }
        function isActionCreator(action) {
          return (
            typeof action === 'function' &&
            'type' in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it
            hasMatchFunction(action)
          );
        }
        function isFSA(action) {
          return (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isAction'
            ])(action) && Object.keys(action).every(isValidKey)
          );
        }
        function isValidKey(key) {
          return ['type', 'payload', 'error', 'meta'].indexOf(key) > -1;
        }
        // src/actionCreatorInvariantMiddleware.ts
        function getMessage(type) {
          const splitType = type ? ''.concat(type).split('/') : [];
          const actionName = splitType[splitType.length - 1] || 'actionCreator';
          return 'Detected an action creator with type "'
            .concat(
              type || 'unknown',
              '" being dispatched. \nMake sure you\'re calling the action creator before dispatching, i.e. `dispatch('
            )
            .concat(actionName, '())` instead of `dispatch(')
            .concat(
              actionName,
              ')`. This is necessary even if the action has no payload.'
            );
        }
        function createActionCreatorInvariantMiddleware() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          if (
            ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
          );
          const { isActionCreator: isActionCreator2 = isActionCreator } =
            options;
          return () => (next) => (action) => {
            if (isActionCreator2(action)) {
              console.warn(getMessage(action.type));
            }
            return next(action);
          };
        }
        function getTimeMeasureUtils(maxDelay, fnName) {
          let elapsed = 0;
          return {
            measureTime(fn) {
              const started = Date.now();
              try {
                return fn();
              } finally {
                const finished = Date.now();
                elapsed += finished - started;
              }
            },
            warnIfExceeded() {
              if (elapsed > maxDelay) {
                console.warn(
                  ''
                    .concat(fnName, ' took ')
                    .concat(
                      elapsed,
                      'ms, which is more than the warning threshold of '
                    )
                    .concat(
                      maxDelay,
                      "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that."
                    )
                );
              }
            },
          };
        }
        var Tuple = class _Tuple extends Array {
          static get [Symbol.species]() {
            return _Tuple;
          }
          concat() {
            for (
              var _len = arguments.length, arr = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              arr[_key] = arguments[_key];
            }
            return super.concat.apply(this, arr);
          }
          prepend() {
            for (
              var _len = arguments.length, arr = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              arr[_key] = arguments[_key];
            }
            if (arr.length === 1 && Array.isArray(arr[0])) {
              return new _Tuple(...arr[0].concat(this));
            }
            return new _Tuple(...arr.concat(this));
          }
          constructor(...items) {
            super(...items);
            Object.setPrototypeOf(this, _Tuple.prototype);
          }
        };
        function freezeDraftable(val) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'isDraftable'
          ])(val)
            ? (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'produce'
              ])(val, () => {})
            : val;
        }
        function getOrInsertComputed(map, key, compute) {
          if (map.has(key)) return map.get(key);
          return map.set(key, compute(key)).get(key);
        }
        // src/immutableStateInvariantMiddleware.ts
        function isImmutableDefault(value) {
          return (
            typeof value !== 'object' || value == null || Object.isFrozen(value)
          );
        }
        function trackForMutations(isImmutable, ignorePaths, obj) {
          const trackedProperties = trackProperties(
            isImmutable,
            ignorePaths,
            obj
          );
          return {
            detectMutations() {
              return detectMutations(
                isImmutable,
                ignorePaths,
                trackedProperties,
                obj
              );
            },
          };
        }
        function trackProperties(isImmutable) {
          let ignorePaths =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : [],
            obj = arguments.length > 2 ? arguments[2] : void 0,
            path =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : '',
            checkedObjects =
              arguments.length > 4 && arguments[4] !== void 0
                ? arguments[4]
                : /* @__PURE__ */ new Set();
          const tracked = {
            value: obj,
          };
          if (!isImmutable(obj) && !checkedObjects.has(obj)) {
            checkedObjects.add(obj);
            tracked.children = {};
            for (const key in obj) {
              const childPath = path ? path + '.' + key : key;
              if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
                continue;
              }
              tracked.children[key] = trackProperties(
                isImmutable,
                ignorePaths,
                obj[key],
                childPath
              );
            }
          }
          return tracked;
        }
        function detectMutations(isImmutable) {
          let ignoredPaths =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : [],
            trackedProperty = arguments.length > 2 ? arguments[2] : void 0,
            obj = arguments.length > 3 ? arguments[3] : void 0,
            sameParentRef =
              arguments.length > 4 && arguments[4] !== void 0
                ? arguments[4]
                : false,
            path =
              arguments.length > 5 && arguments[5] !== void 0
                ? arguments[5]
                : '';
          const prevObj = trackedProperty ? trackedProperty.value : void 0;
          const sameRef = prevObj === obj;
          if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
            return {
              wasMutated: true,
              path,
            };
          }
          if (isImmutable(prevObj) || isImmutable(obj)) {
            return {
              wasMutated: false,
            };
          }
          const keysToDetect = {};
          for (let key in trackedProperty.children) {
            keysToDetect[key] = true;
          }
          for (let key in obj) {
            keysToDetect[key] = true;
          }
          const hasIgnoredPaths = ignoredPaths.length > 0;
          for (let key in keysToDetect) {
            const nestedPath = path ? path + '.' + key : key;
            if (hasIgnoredPaths) {
              const hasMatches = ignoredPaths.some((ignored) => {
                if (ignored instanceof RegExp) {
                  return ignored.test(nestedPath);
                }
                return nestedPath === ignored;
              });
              if (hasMatches) {
                continue;
              }
            }
            const result = detectMutations(
              isImmutable,
              ignoredPaths,
              trackedProperty.children[key],
              obj[key],
              sameRef,
              nestedPath
            );
            if (result.wasMutated) {
              return result;
            }
          }
          return {
            wasMutated: false,
          };
        }
        function createImmutableStateInvariantMiddleware() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          if (('TURBOPACK compile-time falsy', 0));
          else {
            //TURBOPACK unreachable
            let stringify2 = function (obj, serializer, indent, decycler) {
                return JSON.stringify(
                  obj,
                  getSerialize2(serializer, decycler),
                  indent
                );
              },
              getSerialize2 = function (serializer, decycler) {
                let stack = [],
                  keys = [];
                if (!decycler)
                  decycler = function (_, value) {
                    if (stack[0] === value) return '[Circular ~]';
                    return (
                      '[Circular ~.' +
                      keys.slice(0, stack.indexOf(value)).join('.') +
                      ']'
                    );
                  };
                return function (key, value) {
                  if (stack.length > 0) {
                    var thisPos = stack.indexOf(this);
                    ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
                    ~thisPos
                      ? keys.splice(thisPos, Infinity, key)
                      : keys.push(key);
                    if (~stack.indexOf(value))
                      value = decycler.call(this, key, value);
                  } else stack.push(value);
                  return serializer == null
                    ? value
                    : serializer.call(this, key, value);
                };
              };
            var stringify = stringify2,
              getSerialize = getSerialize2;
            let {
              isImmutable = isImmutableDefault,
              ignoredPaths,
              warnAfter = 32,
            } = options;
            const track = trackForMutations.bind(
              null,
              isImmutable,
              ignoredPaths
            );
            return (param) => {
              let { getState } = param;
              let state = getState();
              let tracker = track(state);
              let result;
              return (next) => (action) => {
                const measureUtils = getTimeMeasureUtils(
                  warnAfter,
                  'ImmutableStateInvariantMiddleware'
                );
                measureUtils.measureTime(() => {
                  state = getState();
                  result = tracker.detectMutations();
                  tracker = track(state);
                  if (result.wasMutated) {
                    throw new Error(
                      ('TURBOPACK compile-time falsy', 0)
                        ? 'TURBOPACK unreachable'
                        : "A state mutation was detected between dispatches, in the path '".concat(
                            result.path || '',
                            "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)"
                          )
                    );
                  }
                });
                const dispatchedAction = next(action);
                measureUtils.measureTime(() => {
                  state = getState();
                  result = tracker.detectMutations();
                  tracker = track(state);
                  if (result.wasMutated) {
                    throw new Error(
                      ('TURBOPACK compile-time falsy', 0)
                        ? 'TURBOPACK unreachable'
                        : 'A state mutation was detected inside a dispatch, in the path: '
                            .concat(
                              result.path || '',
                              '. Take a look at the reducer(s) handling the action '
                            )
                            .concat(
                              stringify2(action),
                              '. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)'
                            )
                    );
                  }
                });
                measureUtils.warnIfExceeded();
                return dispatchedAction;
              };
            };
          }
        }
        function isPlain(val) {
          const type = typeof val;
          return (
            val == null ||
            type === 'string' ||
            type === 'boolean' ||
            type === 'number' ||
            Array.isArray(val) ||
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isPlainObject'
            ])(val)
          );
        }
        function findNonSerializableValue(value) {
          let path =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : '',
            isSerializable =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : isPlain,
            getEntries = arguments.length > 3 ? arguments[3] : void 0,
            ignoredPaths =
              arguments.length > 4 && arguments[4] !== void 0
                ? arguments[4]
                : [],
            cache = arguments.length > 5 ? arguments[5] : void 0;
          let foundNestedSerializable;
          if (!isSerializable(value)) {
            return {
              keyPath: path || '<root>',
              value,
            };
          }
          if (typeof value !== 'object' || value === null) {
            return false;
          }
          if (cache === null || cache === void 0 ? void 0 : cache.has(value))
            return false;
          const entries =
            getEntries != null ? getEntries(value) : Object.entries(value);
          const hasIgnoredPaths = ignoredPaths.length > 0;
          for (const [key, nestedValue] of entries) {
            const nestedPath = path ? path + '.' + key : key;
            if (hasIgnoredPaths) {
              const hasMatches = ignoredPaths.some((ignored) => {
                if (ignored instanceof RegExp) {
                  return ignored.test(nestedPath);
                }
                return nestedPath === ignored;
              });
              if (hasMatches) {
                continue;
              }
            }
            if (!isSerializable(nestedValue)) {
              return {
                keyPath: nestedPath,
                value: nestedValue,
              };
            }
            if (typeof nestedValue === 'object') {
              foundNestedSerializable = findNonSerializableValue(
                nestedValue,
                nestedPath,
                isSerializable,
                getEntries,
                ignoredPaths,
                cache
              );
              if (foundNestedSerializable) {
                return foundNestedSerializable;
              }
            }
          }
          if (cache && isNestedFrozen(value)) cache.add(value);
          return false;
        }
        function isNestedFrozen(value) {
          if (!Object.isFrozen(value)) return false;
          for (const nestedValue of Object.values(value)) {
            if (typeof nestedValue !== 'object' || nestedValue === null)
              continue;
            if (!isNestedFrozen(nestedValue)) return false;
          }
          return true;
        }
        function createSerializableStateInvariantMiddleware() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          if (('TURBOPACK compile-time falsy', 0));
          else {
            //TURBOPACK unreachable
            const {
              isSerializable = isPlain,
              getEntries,
              ignoredActions = [],
              ignoredActionPaths = ['meta.arg', 'meta.baseQueryMeta'],
              ignoredPaths = [],
              warnAfter = 32,
              ignoreState = false,
              ignoreActions = false,
              disableCache = false,
            } = options;
            const cache =
              !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
            return (storeAPI) => (next) => (action) => {
              if (
                !(0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'isAction'
                ])(action)
              ) {
                return next(action);
              }
              const result = next(action);
              const measureUtils = getTimeMeasureUtils(
                warnAfter,
                'SerializableStateInvariantMiddleware'
              );
              if (
                !ignoreActions &&
                !(
                  ignoredActions.length &&
                  ignoredActions.indexOf(action.type) !== -1
                )
              ) {
                measureUtils.measureTime(() => {
                  const foundActionNonSerializableValue =
                    findNonSerializableValue(
                      action,
                      '',
                      isSerializable,
                      getEntries,
                      ignoredActionPaths,
                      cache
                    );
                  if (foundActionNonSerializableValue) {
                    const { keyPath, value } = foundActionNonSerializableValue;
                    console.error(
                      'A non-serializable value was detected in an action, in the path: `'.concat(
                        keyPath,
                        '`. Value:'
                      ),
                      value,
                      '\nTake a look at the logic that dispatched this action: ',
                      action,
                      '\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)',
                      '\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)'
                    );
                  }
                });
              }
              if (!ignoreState) {
                measureUtils.measureTime(() => {
                  const state = storeAPI.getState();
                  const foundStateNonSerializableValue =
                    findNonSerializableValue(
                      state,
                      '',
                      isSerializable,
                      getEntries,
                      ignoredPaths,
                      cache
                    );
                  if (foundStateNonSerializableValue) {
                    const { keyPath, value } = foundStateNonSerializableValue;
                    console.error(
                      'A non-serializable value was detected in the state, in the path: `'.concat(
                        keyPath,
                        '`. Value:'
                      ),
                      value,
                      '\nTake a look at the reducer(s) handling this action type: '.concat(
                        action.type,
                        '.\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)'
                      )
                    );
                  }
                });
                measureUtils.warnIfExceeded();
              }
              return result;
            };
          }
        }
        // src/getDefaultMiddleware.ts
        function isBoolean(x) {
          return typeof x === 'boolean';
        }
        var buildGetDefaultMiddleware = () =>
          function getDefaultMiddleware(options) {
            const {
              thunk = true,
              immutableCheck = true,
              serializableCheck = true,
              actionCreatorCheck = true,
            } = options !== null && options !== void 0 ? options : {};
            let middlewareArray = new Tuple();
            if (thunk) {
              if (isBoolean(thunk)) {
                middlewareArray.push(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'thunk'
                  ]
                );
              } else {
                middlewareArray.push(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'withExtraArgument'
                  ])(thunk.extraArgument)
                );
              }
            }
            if (('TURBOPACK compile-time truthy', 1)) {
              if (immutableCheck) {
                let immutableOptions = {};
                if (!isBoolean(immutableCheck)) {
                  immutableOptions = immutableCheck;
                }
                middlewareArray.unshift(
                  createImmutableStateInvariantMiddleware(immutableOptions)
                );
              }
              if (serializableCheck) {
                let serializableOptions = {};
                if (!isBoolean(serializableCheck)) {
                  serializableOptions = serializableCheck;
                }
                middlewareArray.push(
                  createSerializableStateInvariantMiddleware(
                    serializableOptions
                  )
                );
              }
              if (actionCreatorCheck) {
                let actionCreatorOptions = {};
                if (!isBoolean(actionCreatorCheck)) {
                  actionCreatorOptions = actionCreatorCheck;
                }
                middlewareArray.unshift(
                  createActionCreatorInvariantMiddleware(actionCreatorOptions)
                );
              }
            }
            return middlewareArray;
          };
        // src/autoBatchEnhancer.ts
        var SHOULD_AUTOBATCH = 'RTK_autoBatch';
        var prepareAutoBatched = () => (payload) => ({
          payload,
          meta: {
            [SHOULD_AUTOBATCH]: true,
          },
        });
        var createQueueWithTimer = (timeout) => {
          return (notify) => {
            setTimeout(notify, timeout);
          };
        };
        var autoBatchEnhancer = function () {
          let options =
            arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : {
                  type: 'raf',
                };
          return (next) =>
            function () {
              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }
              const store = next(...args);
              let notifying = true;
              let shouldNotifyAtEndOfTick = false;
              let notificationQueued = false;
              const listeners = /* @__PURE__ */ new Set();
              const queueCallback =
                options.type === 'tick'
                  ? queueMicrotask
                  : options.type === 'raf' // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.
                    ? typeof window !== 'undefined' &&
                      window.requestAnimationFrame
                      ? window.requestAnimationFrame
                      : createQueueWithTimer(10)
                    : options.type === 'callback'
                      ? options.queueNotification
                      : createQueueWithTimer(options.timeout);
              const notifyListeners = () => {
                notificationQueued = false;
                if (shouldNotifyAtEndOfTick) {
                  shouldNotifyAtEndOfTick = false;
                  listeners.forEach((l) => l());
                }
              };
              return Object.assign({}, store, {
                // Override the base `store.subscribe` method to keep original listeners
                // from running if we're delaying notifications
                subscribe(listener2) {
                  const wrappedListener = () => notifying && listener2();
                  const unsubscribe = store.subscribe(wrappedListener);
                  listeners.add(listener2);
                  return () => {
                    unsubscribe();
                    listeners.delete(listener2);
                  };
                },
                // Override the base `store.dispatch` method so that we can check actions
                // for the `shouldAutoBatch` flag and determine if batching is active
                dispatch(action) {
                  try {
                    var _action_meta;
                    notifying = !(action === null || action === void 0
                      ? void 0
                      : (_action_meta = action.meta) === null ||
                          _action_meta === void 0
                        ? void 0
                        : _action_meta[SHOULD_AUTOBATCH]);
                    shouldNotifyAtEndOfTick = !notifying;
                    if (shouldNotifyAtEndOfTick) {
                      if (!notificationQueued) {
                        notificationQueued = true;
                        queueCallback(notifyListeners);
                      }
                    }
                    return store.dispatch(action);
                  } finally {
                    notifying = true;
                  }
                },
              });
            };
        };
        // src/getDefaultEnhancers.ts
        var buildGetDefaultEnhancers = (middlewareEnhancer) =>
          function getDefaultEnhancers(options) {
            const { autoBatch = true } =
              options !== null && options !== void 0 ? options : {};
            let enhancerArray = new Tuple(middlewareEnhancer);
            if (autoBatch) {
              enhancerArray.push(
                autoBatchEnhancer(
                  typeof autoBatch === 'object' ? autoBatch : void 0
                )
              );
            }
            return enhancerArray;
          };
        // src/configureStore.ts
        function configureStore(options) {
          const getDefaultMiddleware = buildGetDefaultMiddleware();
          const {
            reducer = void 0,
            middleware,
            devTools = true,
            duplicateMiddlewareCheck = true,
            preloadedState = void 0,
            enhancers = void 0,
          } = options || {};
          let rootReducer;
          if (typeof reducer === 'function') {
            rootReducer = reducer;
          } else if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isPlainObject'
            ])(reducer)
          ) {
            rootReducer = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'combineReducers'
            ])(reducer);
          } else {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : '`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers'
            );
          }
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            middleware &&
            typeof middleware !== 'function'
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : '`middleware` field must be a callback'
            );
          }
          let finalMiddleware;
          if (typeof middleware === 'function') {
            finalMiddleware = middleware(getDefaultMiddleware);
            if (
              ('TURBOPACK compile-time value', 'development') !==
                'production' &&
              !Array.isArray(finalMiddleware)
            ) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'when using a middleware builder function, an array of middleware must be returned'
              );
            }
          } else {
            finalMiddleware = getDefaultMiddleware();
          }
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            finalMiddleware.some((item) => typeof item !== 'function')
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'each middleware provided to configureStore must be a function'
            );
          }
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            duplicateMiddlewareCheck
          ) {
            let middlewareReferences = /* @__PURE__ */ new Set();
            finalMiddleware.forEach((middleware2) => {
              if (middlewareReferences.has(middleware2)) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.'
                );
              }
              middlewareReferences.add(middleware2);
            });
          }
          let finalCompose =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'compose'
            ];
          if (devTools) {
            finalCompose = composeWithDevTools({
              // Enable capture of stack traces for dispatched Redux actions
              trace:
                ('TURBOPACK compile-time value', 'development') !==
                'production',
              ...(typeof devTools === 'object' && devTools),
            });
          }
          const middlewareEnhancer = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'applyMiddleware'
          ])(...finalMiddleware);
          const getDefaultEnhancers =
            buildGetDefaultEnhancers(middlewareEnhancer);
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            enhancers &&
            typeof enhancers !== 'function'
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : '`enhancers` field must be a callback'
            );
          }
          let storeEnhancers =
            typeof enhancers === 'function'
              ? enhancers(getDefaultEnhancers)
              : getDefaultEnhancers();
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            !Array.isArray(storeEnhancers)
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : '`enhancers` callback must return an array'
            );
          }
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            storeEnhancers.some((item) => typeof item !== 'function')
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'each enhancer provided to configureStore must be a function'
            );
          }
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            finalMiddleware.length &&
            !storeEnhancers.includes(middlewareEnhancer)
          ) {
            console.error(
              'middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`'
            );
          }
          const composedEnhancer = finalCompose(...storeEnhancers);
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createStore'
          ])(rootReducer, preloadedState, composedEnhancer);
        }
        // src/mapBuilders.ts
        function executeReducerBuilderCallback(builderCallback) {
          const actionsMap = {};
          const actionMatchers = [];
          let defaultCaseReducer;
          const builder = {
            addCase(typeOrActionCreator, reducer) {
              if (('TURBOPACK compile-time truthy', 1)) {
                if (actionMatchers.length > 0) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`builder.addCase` should only be called before calling `builder.addMatcher`'
                  );
                }
                if (defaultCaseReducer) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`builder.addCase` should only be called before calling `builder.addDefaultCase`'
                  );
                }
              }
              const type =
                typeof typeOrActionCreator === 'string'
                  ? typeOrActionCreator
                  : typeOrActionCreator.type;
              if (!type) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : '`builder.addCase` cannot be called with an empty action type'
                );
              }
              if (type in actionsMap) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : "`builder.addCase` cannot be called with two reducers for the same action type '".concat(
                        type,
                        "'"
                      )
                );
              }
              actionsMap[type] = reducer;
              return builder;
            },
            addMatcher(matcher, reducer) {
              if (('TURBOPACK compile-time truthy', 1)) {
                if (defaultCaseReducer) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`builder.addMatcher` should only be called before calling `builder.addDefaultCase`'
                  );
                }
              }
              actionMatchers.push({
                matcher,
                reducer,
              });
              return builder;
            },
            addDefaultCase(reducer) {
              if (('TURBOPACK compile-time truthy', 1)) {
                if (defaultCaseReducer) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`builder.addDefaultCase` can only be called once'
                  );
                }
              }
              defaultCaseReducer = reducer;
              return builder;
            },
          };
          builderCallback(builder);
          return [actionsMap, actionMatchers, defaultCaseReducer];
        }
        // src/createReducer.ts
        function isStateFunction(x) {
          return typeof x === 'function';
        }
        function createReducer(initialState, mapOrBuilderCallback) {
          if (('TURBOPACK compile-time truthy', 1)) {
            if (typeof mapOrBuilderCallback === 'object') {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : "The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer"
              );
            }
          }
          let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] =
            executeReducerBuilderCallback(mapOrBuilderCallback);
          let getInitialState;
          if (isStateFunction(initialState)) {
            getInitialState = () => freezeDraftable(initialState());
          } else {
            const frozenInitialState = freezeDraftable(initialState);
            getInitialState = () => frozenInitialState;
          }
          function reducer() {
            let state =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : getInitialState(),
              action = arguments.length > 1 ? arguments[1] : void 0;
            let caseReducers = [
              actionsMap[action.type],
              ...finalActionMatchers
                .filter((param) => {
                  let { matcher } = param;
                  return matcher(action);
                })
                .map((param) => {
                  let { reducer: reducer2 } = param;
                  return reducer2;
                }),
            ];
            if (caseReducers.filter((cr) => !!cr).length === 0) {
              caseReducers = [finalDefaultCaseReducer];
            }
            return caseReducers.reduce((previousState, caseReducer) => {
              if (caseReducer) {
                if (
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'isDraft'
                  ])(previousState)
                ) {
                  const draft = previousState;
                  const result = caseReducer(draft, action);
                  if (result === void 0) {
                    return previousState;
                  }
                  return result;
                } else if (
                  !(0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'isDraftable'
                  ])(previousState)
                ) {
                  const result = caseReducer(previousState, action);
                  if (result === void 0) {
                    if (previousState === null) {
                      return previousState;
                    }
                    throw Error(
                      'A case reducer on a non-draftable value must not return undefined'
                    );
                  }
                  return result;
                } else {
                  return (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'produce'
                  ])(previousState, (draft) => {
                    return caseReducer(draft, action);
                  });
                }
              }
              return previousState;
            }, state);
          }
          reducer.getInitialState = getInitialState;
          return reducer;
        }
        // src/matchers.ts
        var matches = (matcher, action) => {
          if (hasMatchFunction(matcher)) {
            return matcher.match(action);
          } else {
            return matcher(action);
          }
        };
        function isAnyOf() {
          for (
            var _len = arguments.length, matchers = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            matchers[_key] = arguments[_key];
          }
          return (action) => {
            return matchers.some((matcher) => matches(matcher, action));
          };
        }
        function isAllOf() {
          for (
            var _len = arguments.length, matchers = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            matchers[_key] = arguments[_key];
          }
          return (action) => {
            return matchers.every((matcher) => matches(matcher, action));
          };
        }
        function hasExpectedRequestMetadata(action, validStatus) {
          if (!action || !action.meta) return false;
          const hasValidRequestId = typeof action.meta.requestId === 'string';
          const hasValidRequestStatus =
            validStatus.indexOf(action.meta.requestStatus) > -1;
          return hasValidRequestId && hasValidRequestStatus;
        }
        function isAsyncThunkArray(a) {
          return (
            typeof a[0] === 'function' &&
            'pending' in a[0] &&
            'fulfilled' in a[0] &&
            'rejected' in a[0]
          );
        }
        function isPending() {
          for (
            var _len = arguments.length,
              asyncThunks = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            asyncThunks[_key] = arguments[_key];
          }
          if (asyncThunks.length === 0) {
            return (action) => hasExpectedRequestMetadata(action, ['pending']);
          }
          if (!isAsyncThunkArray(asyncThunks)) {
            return isPending()(asyncThunks[0]);
          }
          return isAnyOf(
            ...asyncThunks.map((asyncThunk) => asyncThunk.pending)
          );
        }
        function isRejected() {
          for (
            var _len = arguments.length,
              asyncThunks = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            asyncThunks[_key] = arguments[_key];
          }
          if (asyncThunks.length === 0) {
            return (action) => hasExpectedRequestMetadata(action, ['rejected']);
          }
          if (!isAsyncThunkArray(asyncThunks)) {
            return isRejected()(asyncThunks[0]);
          }
          return isAnyOf(
            ...asyncThunks.map((asyncThunk) => asyncThunk.rejected)
          );
        }
        function isRejectedWithValue() {
          for (
            var _len = arguments.length,
              asyncThunks = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            asyncThunks[_key] = arguments[_key];
          }
          const hasFlag = (action) => {
            return action && action.meta && action.meta.rejectedWithValue;
          };
          if (asyncThunks.length === 0) {
            return isAllOf(isRejected(...asyncThunks), hasFlag);
          }
          if (!isAsyncThunkArray(asyncThunks)) {
            return isRejectedWithValue()(asyncThunks[0]);
          }
          return isAllOf(isRejected(...asyncThunks), hasFlag);
        }
        function isFulfilled() {
          for (
            var _len = arguments.length,
              asyncThunks = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            asyncThunks[_key] = arguments[_key];
          }
          if (asyncThunks.length === 0) {
            return (action) =>
              hasExpectedRequestMetadata(action, ['fulfilled']);
          }
          if (!isAsyncThunkArray(asyncThunks)) {
            return isFulfilled()(asyncThunks[0]);
          }
          return isAnyOf(
            ...asyncThunks.map((asyncThunk) => asyncThunk.fulfilled)
          );
        }
        function isAsyncThunkAction() {
          for (
            var _len = arguments.length,
              asyncThunks = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            asyncThunks[_key] = arguments[_key];
          }
          if (asyncThunks.length === 0) {
            return (action) =>
              hasExpectedRequestMetadata(action, [
                'pending',
                'fulfilled',
                'rejected',
              ]);
          }
          if (!isAsyncThunkArray(asyncThunks)) {
            return isAsyncThunkAction()(asyncThunks[0]);
          }
          return isAnyOf(
            ...asyncThunks.flatMap((asyncThunk) => [
              asyncThunk.pending,
              asyncThunk.rejected,
              asyncThunk.fulfilled,
            ])
          );
        }
        // src/nanoid.ts
        var urlAlphabet =
          'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';
        var nanoid = function () {
          let size =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 21;
          let id = '';
          let i = size;
          while (i--) {
            id += urlAlphabet[(Math.random() * 64) | 0];
          }
          return id;
        };
        // src/createAsyncThunk.ts
        var commonProperties = ['name', 'message', 'stack', 'code'];
        var RejectWithValue = class {
          constructor(payload, meta) {
            /*
  type-only property to distinguish between RejectWithValue and FulfillWithMeta
  does not exist at runtime
  */ (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, '_type', void 0);
            this.payload = payload;
            this.meta = meta;
          }
        };
        var FulfillWithMeta = class {
          constructor(payload, meta) {
            /*
  type-only property to distinguish between RejectWithValue and FulfillWithMeta
  does not exist at runtime
  */ (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, '_type', void 0);
            this.payload = payload;
            this.meta = meta;
          }
        };
        var miniSerializeError = (value) => {
          if (typeof value === 'object' && value !== null) {
            const simpleError = {};
            for (const property of commonProperties) {
              if (typeof value[property] === 'string') {
                simpleError[property] = value[property];
              }
            }
            return simpleError;
          }
          return {
            message: String(value),
          };
        };
        var externalAbortMessage = 'External signal was aborted';
        var createAsyncThunk = /* @__PURE__ */ (() => {
          function createAsyncThunk2(typePrefix, payloadCreator, options) {
            const fulfilled = createAction(
              typePrefix + '/fulfilled',
              (payload, requestId, arg, meta) => ({
                payload,
                meta: {
                  ...(meta || {}),
                  arg,
                  requestId,
                  requestStatus: 'fulfilled',
                },
              })
            );
            const pending = createAction(
              typePrefix + '/pending',
              (requestId, arg, meta) => ({
                payload: void 0,
                meta: {
                  ...(meta || {}),
                  arg,
                  requestId,
                  requestStatus: 'pending',
                },
              })
            );
            const rejected = createAction(
              typePrefix + '/rejected',
              (error, requestId, arg, payload, meta) => ({
                payload,
                error: (
                  (options && options.serializeError) ||
                  miniSerializeError
                )(error || 'Rejected'),
                meta: {
                  ...(meta || {}),
                  arg,
                  requestId,
                  rejectedWithValue: !!payload,
                  requestStatus: 'rejected',
                  aborted:
                    (error === null || error === void 0
                      ? void 0
                      : error.name) === 'AbortError',
                  condition:
                    (error === null || error === void 0
                      ? void 0
                      : error.name) === 'ConditionError',
                },
              })
            );
            function actionCreator(arg) {
              let { signal } =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              return (dispatch, getState, extra) => {
                const requestId = (
                  options === null || options === void 0
                    ? void 0
                    : options.idGenerator
                )
                  ? options.idGenerator(arg)
                  : nanoid();
                const abortController = new AbortController();
                let abortHandler;
                let abortReason;
                function abort(reason) {
                  abortReason = reason;
                  abortController.abort();
                }
                if (signal) {
                  if (signal.aborted) {
                    abort(externalAbortMessage);
                  } else {
                    signal.addEventListener(
                      'abort',
                      () => abort(externalAbortMessage),
                      {
                        once: true,
                      }
                    );
                  }
                }
                const promise = (async function () {
                  let finalAction;
                  try {
                    var _options_condition, _options_getPendingMeta;
                    let conditionResult =
                      options === null || options === void 0
                        ? void 0
                        : (_options_condition = options.condition) === null ||
                            _options_condition === void 0
                          ? void 0
                          : _options_condition.call(options, arg, {
                              getState,
                              extra,
                            });
                    if (isThenable(conditionResult)) {
                      conditionResult = await conditionResult;
                    }
                    if (
                      conditionResult === false ||
                      abortController.signal.aborted
                    ) {
                      throw {
                        name: 'ConditionError',
                        message:
                          'Aborted due to condition callback returning false.',
                      };
                    }
                    const abortedPromise = new Promise((_, reject) => {
                      abortHandler = () => {
                        reject({
                          name: 'AbortError',
                          message: abortReason || 'Aborted',
                        });
                      };
                      abortController.signal.addEventListener(
                        'abort',
                        abortHandler
                      );
                    });
                    dispatch(
                      pending(
                        requestId,
                        arg,
                        options === null || options === void 0
                          ? void 0
                          : (_options_getPendingMeta =
                                options.getPendingMeta) === null ||
                              _options_getPendingMeta === void 0
                            ? void 0
                            : _options_getPendingMeta.call(
                                options,
                                {
                                  requestId,
                                  arg,
                                },
                                {
                                  getState,
                                  extra,
                                }
                              )
                      )
                    );
                    finalAction = await Promise.race([
                      abortedPromise,
                      Promise.resolve(
                        payloadCreator(arg, {
                          dispatch,
                          getState,
                          extra,
                          requestId,
                          signal: abortController.signal,
                          abort,
                          rejectWithValue: (value, meta) => {
                            return new RejectWithValue(value, meta);
                          },
                          fulfillWithValue: (value, meta) => {
                            return new FulfillWithMeta(value, meta);
                          },
                        })
                      ).then((result) => {
                        if (result instanceof RejectWithValue) {
                          throw result;
                        }
                        if (result instanceof FulfillWithMeta) {
                          return fulfilled(
                            result.payload,
                            requestId,
                            arg,
                            result.meta
                          );
                        }
                        return fulfilled(result, requestId, arg);
                      }),
                    ]);
                  } catch (err) {
                    finalAction =
                      err instanceof RejectWithValue
                        ? rejected(null, requestId, arg, err.payload, err.meta)
                        : rejected(err, requestId, arg);
                  } finally {
                    if (abortHandler) {
                      abortController.signal.removeEventListener(
                        'abort',
                        abortHandler
                      );
                    }
                  }
                  const skipDispatch =
                    options &&
                    !options.dispatchConditionRejection &&
                    rejected.match(finalAction) &&
                    finalAction.meta.condition;
                  if (!skipDispatch) {
                    dispatch(finalAction);
                  }
                  return finalAction;
                })();
                return Object.assign(promise, {
                  abort,
                  requestId,
                  arg,
                  unwrap() {
                    return promise.then(unwrapResult);
                  },
                });
              };
            }
            return Object.assign(actionCreator, {
              pending,
              rejected,
              fulfilled,
              settled: isAnyOf(rejected, fulfilled),
              typePrefix,
            });
          }
          createAsyncThunk2.withTypes = () => createAsyncThunk2;
          return createAsyncThunk2;
        })();
        function unwrapResult(action) {
          if (action.meta && action.meta.rejectedWithValue) {
            throw action.payload;
          }
          if (action.error) {
            throw action.error;
          }
          return action.payload;
        }
        function isThenable(value) {
          return (
            value !== null &&
            typeof value === 'object' &&
            typeof value.then === 'function'
          );
        }
        // src/createSlice.ts
        var asyncThunkSymbol = /* @__PURE__ */ Symbol.for(
          'rtk-slice-createasyncthunk'
        );
        var asyncThunkCreator = {
          [asyncThunkSymbol]: createAsyncThunk,
        };
        var ReducerType = /* @__PURE__ */ ((ReducerType2) => {
          ReducerType2['reducer'] = 'reducer';
          ReducerType2['reducerWithPrepare'] = 'reducerWithPrepare';
          ReducerType2['asyncThunk'] = 'asyncThunk';
          return ReducerType2;
        })(ReducerType || {});
        function getType(slice, actionKey) {
          return ''.concat(slice, '/').concat(actionKey);
        }
        function buildCreateSlice() {
          let { creators } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var _creators_asyncThunk;
          const cAT =
            creators === null || creators === void 0
              ? void 0
              : (_creators_asyncThunk = creators.asyncThunk) === null ||
                  _creators_asyncThunk === void 0
                ? void 0
                : _creators_asyncThunk[asyncThunkSymbol];
          return function createSlice2(options) {
            const { name, reducerPath = name } = options;
            if (!name) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : '`name` is a required option for createSlice'
              );
            }
            if (
              typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'default'
              ] !== 'undefined' &&
              ('TURBOPACK compile-time value', 'development') === 'development'
            ) {
              if (options.initialState === void 0) {
                console.error(
                  'You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`'
                );
              }
            }
            const reducers =
              (typeof options.reducers === 'function'
                ? options.reducers(buildReducerCreators())
                : options.reducers) || {};
            const reducerNames = Object.keys(reducers);
            const context = {
              sliceCaseReducersByName: {},
              sliceCaseReducersByType: {},
              actionCreators: {},
              sliceMatchers: [],
            };
            const contextMethods = {
              addCase(typeOrActionCreator, reducer2) {
                const type =
                  typeof typeOrActionCreator === 'string'
                    ? typeOrActionCreator
                    : typeOrActionCreator.type;
                if (!type) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`context.addCase` cannot be called with an empty action type'
                  );
                }
                if (type in context.sliceCaseReducersByType) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : '`context.addCase` cannot be called with two reducers for the same action type: ' +
                        type
                  );
                }
                context.sliceCaseReducersByType[type] = reducer2;
                return contextMethods;
              },
              addMatcher(matcher, reducer2) {
                context.sliceMatchers.push({
                  matcher,
                  reducer: reducer2,
                });
                return contextMethods;
              },
              exposeAction(name2, actionCreator) {
                context.actionCreators[name2] = actionCreator;
                return contextMethods;
              },
              exposeCaseReducer(name2, reducer2) {
                context.sliceCaseReducersByName[name2] = reducer2;
                return contextMethods;
              },
            };
            reducerNames.forEach((reducerName) => {
              const reducerDefinition = reducers[reducerName];
              const reducerDetails = {
                reducerName,
                type: getType(name, reducerName),
                createNotation: typeof options.reducers === 'function',
              };
              if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {
                handleThunkCaseReducerDefinition(
                  reducerDetails,
                  reducerDefinition,
                  contextMethods,
                  cAT
                );
              } else {
                handleNormalReducerDefinition(
                  reducerDetails,
                  reducerDefinition,
                  contextMethods
                );
              }
            });
            function buildReducer() {
              if (('TURBOPACK compile-time truthy', 1)) {
                if (typeof options.extraReducers === 'object') {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : "The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice"
                  );
                }
              }
              const [
                extraReducers = {},
                actionMatchers = [],
                defaultCaseReducer = void 0,
              ] =
                typeof options.extraReducers === 'function'
                  ? executeReducerBuilderCallback(options.extraReducers)
                  : [options.extraReducers];
              const finalCaseReducers = {
                ...extraReducers,
                ...context.sliceCaseReducersByType,
              };
              return createReducer(options.initialState, (builder) => {
                for (let key in finalCaseReducers) {
                  builder.addCase(key, finalCaseReducers[key]);
                }
                for (let sM of context.sliceMatchers) {
                  builder.addMatcher(sM.matcher, sM.reducer);
                }
                for (let m of actionMatchers) {
                  builder.addMatcher(m.matcher, m.reducer);
                }
                if (defaultCaseReducer) {
                  builder.addDefaultCase(defaultCaseReducer);
                }
              });
            }
            const selectSelf = (state) => state;
            const injectedSelectorCache = /* @__PURE__ */ new Map();
            const injectedStateCache = /* @__PURE__ */ new WeakMap();
            let _reducer;
            function reducer(state, action) {
              if (!_reducer) _reducer = buildReducer();
              return _reducer(state, action);
            }
            function getInitialState() {
              if (!_reducer) _reducer = buildReducer();
              return _reducer.getInitialState();
            }
            function makeSelectorProps(reducerPath2) {
              let injected =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : false;
              function selectSlice(state) {
                let sliceState = state[reducerPath2];
                if (typeof sliceState === 'undefined') {
                  if (injected) {
                    sliceState = getOrInsertComputed(
                      injectedStateCache,
                      selectSlice,
                      getInitialState
                    );
                  } else if (('TURBOPACK compile-time truthy', 1)) {
                    throw new Error(
                      ('TURBOPACK compile-time falsy', 0)
                        ? 'TURBOPACK unreachable'
                        : 'selectSlice returned undefined for an uninjected slice reducer'
                    );
                  }
                }
                return sliceState;
              }
              function getSelectors() {
                let selectState =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : selectSelf;
                const selectorCache = getOrInsertComputed(
                  injectedSelectorCache,
                  injected,
                  () => /* @__PURE__ */ new WeakMap()
                );
                return getOrInsertComputed(selectorCache, selectState, () => {
                  const map = {};
                  var _options_selectors;
                  for (const [name2, selector] of Object.entries(
                    (_options_selectors = options.selectors) !== null &&
                      _options_selectors !== void 0
                      ? _options_selectors
                      : {}
                  )) {
                    map[name2] = wrapSelector(
                      selector,
                      selectState,
                      () =>
                        getOrInsertComputed(
                          injectedStateCache,
                          selectState,
                          getInitialState
                        ),
                      injected
                    );
                  }
                  return map;
                });
              }
              return {
                reducerPath: reducerPath2,
                getSelectors,
                get selectors() {
                  return getSelectors(selectSlice);
                },
                selectSlice,
              };
            }
            const slice = {
              name,
              reducer,
              actions: context.actionCreators,
              caseReducers: context.sliceCaseReducersByName,
              getInitialState,
              ...makeSelectorProps(reducerPath),
              injectInto(injectable) {
                let { reducerPath: pathOpt, ...config } =
                  arguments.length > 1 && arguments[1] !== void 0
                    ? arguments[1]
                    : {};
                const newReducerPath =
                  pathOpt !== null && pathOpt !== void 0
                    ? pathOpt
                    : reducerPath;
                injectable.inject(
                  {
                    reducerPath: newReducerPath,
                    reducer,
                  },
                  config
                );
                return {
                  ...slice,
                  ...makeSelectorProps(newReducerPath, true),
                };
              },
            };
            return slice;
          };
        }
        function wrapSelector(
          selector,
          selectState,
          getInitialState,
          injected
        ) {
          function wrapper(rootState) {
            for (
              var _len = arguments.length,
                args = new Array(_len > 1 ? _len - 1 : 0),
                _key = 1;
              _key < _len;
              _key++
            ) {
              args[_key - 1] = arguments[_key];
            }
            let sliceState = selectState(rootState);
            if (typeof sliceState === 'undefined') {
              if (injected) {
                sliceState = getInitialState();
              } else if (('TURBOPACK compile-time truthy', 1)) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'selectState returned undefined for an uninjected slice reducer'
                );
              }
            }
            return selector(sliceState, ...args);
          }
          wrapper.unwrapped = selector;
          return wrapper;
        }
        var createSlice = /* @__PURE__ */ buildCreateSlice();
        function buildReducerCreators() {
          function asyncThunk(payloadCreator, config) {
            return {
              _reducerDefinitionType: 'asyncThunk' /* asyncThunk */,
              payloadCreator,
              ...config,
            };
          }
          asyncThunk.withTypes = () => asyncThunk;
          return {
            reducer(caseReducer) {
              return Object.assign(
                {
                  // hack so the wrapping function has the same name as the original
                  // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
                  [caseReducer.name]() {
                    for (
                      var _len = arguments.length,
                        args = new Array(_len),
                        _key = 0;
                      _key < _len;
                      _key++
                    ) {
                      args[_key] = arguments[_key];
                    }
                    return caseReducer(...args);
                  },
                }[caseReducer.name],
                {
                  _reducerDefinitionType: 'reducer' /* reducer */,
                }
              );
            },
            preparedReducer(prepare, reducer) {
              return {
                _reducerDefinitionType:
                  'reducerWithPrepare' /* reducerWithPrepare */,
                prepare,
                reducer,
              };
            },
            asyncThunk,
          };
        }
        function handleNormalReducerDefinition(
          param,
          maybeReducerWithPrepare,
          context
        ) {
          let { type, reducerName, createNotation } = param;
          let caseReducer;
          let prepareCallback;
          if ('reducer' in maybeReducerWithPrepare) {
            if (
              createNotation &&
              !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)
            ) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.'
              );
            }
            caseReducer = maybeReducerWithPrepare.reducer;
            prepareCallback = maybeReducerWithPrepare.prepare;
          } else {
            caseReducer = maybeReducerWithPrepare;
          }
          context
            .addCase(type, caseReducer)
            .exposeCaseReducer(reducerName, caseReducer)
            .exposeAction(
              reducerName,
              prepareCallback
                ? createAction(type, prepareCallback)
                : createAction(type)
            );
        }
        function isAsyncThunkSliceReducerDefinition(reducerDefinition) {
          return (
            reducerDefinition._reducerDefinitionType ===
            'asyncThunk' /* asyncThunk */
          );
        }
        function isCaseReducerWithPrepareDefinition(reducerDefinition) {
          return (
            reducerDefinition._reducerDefinitionType ===
            'reducerWithPrepare' /* reducerWithPrepare */
          );
        }
        function handleThunkCaseReducerDefinition(
          param,
          reducerDefinition,
          context,
          cAT
        ) {
          let { type, reducerName } = param;
          if (!cAT) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.'
            );
          }
          const {
            payloadCreator,
            fulfilled,
            pending,
            rejected,
            settled,
            options,
          } = reducerDefinition;
          const thunk = cAT(type, payloadCreator, options);
          context.exposeAction(reducerName, thunk);
          if (fulfilled) {
            context.addCase(thunk.fulfilled, fulfilled);
          }
          if (pending) {
            context.addCase(thunk.pending, pending);
          }
          if (rejected) {
            context.addCase(thunk.rejected, rejected);
          }
          if (settled) {
            context.addMatcher(thunk.settled, settled);
          }
          context.exposeCaseReducer(reducerName, {
            fulfilled: fulfilled || noop,
            pending: pending || noop,
            rejected: rejected || noop,
            settled: settled || noop,
          });
        }
        function noop() {}
        // src/entities/entity_state.ts
        function getInitialEntityState() {
          return {
            ids: [],
            entities: {},
          };
        }
        function createInitialStateFactory(stateAdapter) {
          function getInitialState() {
            let additionalState =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {},
              entities = arguments.length > 1 ? arguments[1] : void 0;
            const state = Object.assign(
              getInitialEntityState(),
              additionalState
            );
            return entities ? stateAdapter.setAll(state, entities) : state;
          }
          return {
            getInitialState,
          };
        }
        // src/entities/state_selectors.ts
        function createSelectorsFactory() {
          function getSelectors(selectState) {
            let options =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
            const {
              createSelector: createSelector2 = createDraftSafeSelector,
            } = options;
            const selectIds = (state) => state.ids;
            const selectEntities = (state) => state.entities;
            const selectAll = createSelector2(
              selectIds,
              selectEntities,
              (ids, entities) => ids.map((id) => entities[id])
            );
            const selectId = (_, id) => id;
            const selectById = (entities, id) => entities[id];
            const selectTotal = createSelector2(selectIds, (ids) => ids.length);
            if (!selectState) {
              return {
                selectIds,
                selectEntities,
                selectAll,
                selectTotal,
                selectById: createSelector2(
                  selectEntities,
                  selectId,
                  selectById
                ),
              };
            }
            const selectGlobalizedEntities = createSelector2(
              selectState,
              selectEntities
            );
            return {
              selectIds: createSelector2(selectState, selectIds),
              selectEntities: selectGlobalizedEntities,
              selectAll: createSelector2(selectState, selectAll),
              selectTotal: createSelector2(selectState, selectTotal),
              selectById: createSelector2(
                selectGlobalizedEntities,
                selectId,
                selectById
              ),
            };
          }
          return {
            getSelectors,
          };
        }
        var isDraftTyped =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'isDraft'
          ];
        function createSingleArgumentStateOperator(mutator) {
          const operator = createStateOperator((_, state) => mutator(state));
          return function operation(state) {
            return operator(state, void 0);
          };
        }
        function createStateOperator(mutator) {
          return function operation(state, arg) {
            function isPayloadActionArgument(arg2) {
              return isFSA(arg2);
            }
            const runMutator = (draft) => {
              if (isPayloadActionArgument(arg)) {
                mutator(arg.payload, draft);
              } else {
                mutator(arg, draft);
              }
            };
            if (isDraftTyped(state)) {
              runMutator(state);
              return state;
            }
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'produce'
            ])(state, runMutator);
          };
        }
        function selectIdValue(entity, selectId) {
          const key = selectId(entity);
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            key === void 0
          ) {
            console.warn(
              'The entity passed to the `selectId` implementation returned undefined.',
              'You should probably provide your own `selectId` implementation.',
              'The entity that was passed:',
              entity,
              'The `selectId` implementation:',
              selectId.toString()
            );
          }
          return key;
        }
        function ensureEntitiesArray(entities) {
          if (!Array.isArray(entities)) {
            entities = Object.values(entities);
          }
          return entities;
        }
        function getCurrent(value) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'isDraft'
          ])(value)
            ? (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'current'
              ])(value)
            : value;
        }
        function splitAddedUpdatedEntities(newEntities, selectId, state) {
          newEntities = ensureEntitiesArray(newEntities);
          const existingIdsArray = getCurrent(state.ids);
          const existingIds = new Set(existingIdsArray);
          const added = [];
          const addedIds = /* @__PURE__ */ new Set([]);
          const updated = [];
          for (const entity of newEntities) {
            const id = selectIdValue(entity, selectId);
            if (existingIds.has(id) || addedIds.has(id)) {
              updated.push({
                id,
                changes: entity,
              });
            } else {
              addedIds.add(id);
              added.push(entity);
            }
          }
          return [added, updated, existingIdsArray];
        }
        // src/entities/unsorted_state_adapter.ts
        function createUnsortedStateAdapter(selectId) {
          function addOneMutably(entity, state) {
            const key = selectIdValue(entity, selectId);
            if (key in state.entities) {
              return;
            }
            state.ids.push(key);
            state.entities[key] = entity;
          }
          function addManyMutably(newEntities, state) {
            newEntities = ensureEntitiesArray(newEntities);
            for (const entity of newEntities) {
              addOneMutably(entity, state);
            }
          }
          function setOneMutably(entity, state) {
            const key = selectIdValue(entity, selectId);
            if (!(key in state.entities)) {
              state.ids.push(key);
            }
            state.entities[key] = entity;
          }
          function setManyMutably(newEntities, state) {
            newEntities = ensureEntitiesArray(newEntities);
            for (const entity of newEntities) {
              setOneMutably(entity, state);
            }
          }
          function setAllMutably(newEntities, state) {
            newEntities = ensureEntitiesArray(newEntities);
            state.ids = [];
            state.entities = {};
            addManyMutably(newEntities, state);
          }
          function removeOneMutably(key, state) {
            return removeManyMutably([key], state);
          }
          function removeManyMutably(keys, state) {
            let didMutate = false;
            keys.forEach((key) => {
              if (key in state.entities) {
                delete state.entities[key];
                didMutate = true;
              }
            });
            if (didMutate) {
              state.ids = state.ids.filter((id) => id in state.entities);
            }
          }
          function removeAllMutably(state) {
            Object.assign(state, {
              ids: [],
              entities: {},
            });
          }
          function takeNewKey(keys, update, state) {
            const original3 = state.entities[update.id];
            if (original3 === void 0) {
              return false;
            }
            const updated = Object.assign({}, original3, update.changes);
            const newKey = selectIdValue(updated, selectId);
            const hasNewKey = newKey !== update.id;
            if (hasNewKey) {
              keys[update.id] = newKey;
              delete state.entities[update.id];
            }
            state.entities[newKey] = updated;
            return hasNewKey;
          }
          function updateOneMutably(update, state) {
            return updateManyMutably([update], state);
          }
          function updateManyMutably(updates, state) {
            const newKeys = {};
            const updatesPerEntity = {};
            updates.forEach((update) => {
              if (update.id in state.entities) {
                var _updatesPerEntity_update_id;
                updatesPerEntity[update.id] = {
                  id: update.id,
                  // Spreads ignore falsy values, so this works even if there isn't
                  // an existing update already at this key
                  changes: {
                    ...((_updatesPerEntity_update_id =
                      updatesPerEntity[update.id]) === null ||
                    _updatesPerEntity_update_id === void 0
                      ? void 0
                      : _updatesPerEntity_update_id.changes),
                    ...update.changes,
                  },
                };
              }
            });
            updates = Object.values(updatesPerEntity);
            const didMutateEntities = updates.length > 0;
            if (didMutateEntities) {
              const didMutateIds =
                updates.filter((update) => takeNewKey(newKeys, update, state))
                  .length > 0;
              if (didMutateIds) {
                state.ids = Object.values(state.entities).map((e) =>
                  selectIdValue(e, selectId)
                );
              }
            }
          }
          function upsertOneMutably(entity, state) {
            return upsertManyMutably([entity], state);
          }
          function upsertManyMutably(newEntities, state) {
            const [added, updated] = splitAddedUpdatedEntities(
              newEntities,
              selectId,
              state
            );
            addManyMutably(added, state);
            updateManyMutably(updated, state);
          }
          return {
            removeAll: createSingleArgumentStateOperator(removeAllMutably),
            addOne: createStateOperator(addOneMutably),
            addMany: createStateOperator(addManyMutably),
            setOne: createStateOperator(setOneMutably),
            setMany: createStateOperator(setManyMutably),
            setAll: createStateOperator(setAllMutably),
            updateOne: createStateOperator(updateOneMutably),
            updateMany: createStateOperator(updateManyMutably),
            upsertOne: createStateOperator(upsertOneMutably),
            upsertMany: createStateOperator(upsertManyMutably),
            removeOne: createStateOperator(removeOneMutably),
            removeMany: createStateOperator(removeManyMutably),
          };
        }
        // src/entities/sorted_state_adapter.ts
        function findInsertIndex(sortedItems, item, comparisonFunction) {
          let lowIndex = 0;
          let highIndex = sortedItems.length;
          while (lowIndex < highIndex) {
            let middleIndex = (lowIndex + highIndex) >>> 1;
            const currentItem = sortedItems[middleIndex];
            const res = comparisonFunction(item, currentItem);
            if (res >= 0) {
              lowIndex = middleIndex + 1;
            } else {
              highIndex = middleIndex;
            }
          }
          return lowIndex;
        }
        function insert(sortedItems, item, comparisonFunction) {
          const insertAtIndex = findInsertIndex(
            sortedItems,
            item,
            comparisonFunction
          );
          sortedItems.splice(insertAtIndex, 0, item);
          return sortedItems;
        }
        function createSortedStateAdapter(selectId, comparer) {
          const { removeOne, removeMany, removeAll } =
            createUnsortedStateAdapter(selectId);
          function addOneMutably(entity, state) {
            return addManyMutably([entity], state);
          }
          function addManyMutably(newEntities, state, existingIds) {
            newEntities = ensureEntitiesArray(newEntities);
            const existingKeys = new Set(
              existingIds !== null && existingIds !== void 0
                ? existingIds
                : getCurrent(state.ids)
            );
            const models = newEntities.filter(
              (model) => !existingKeys.has(selectIdValue(model, selectId))
            );
            if (models.length !== 0) {
              mergeFunction(state, models);
            }
          }
          function setOneMutably(entity, state) {
            return setManyMutably([entity], state);
          }
          function setManyMutably(newEntities, state) {
            newEntities = ensureEntitiesArray(newEntities);
            if (newEntities.length !== 0) {
              for (const item of newEntities) {
                delete state.entities[selectId(item)];
              }
              mergeFunction(state, newEntities);
            }
          }
          function setAllMutably(newEntities, state) {
            newEntities = ensureEntitiesArray(newEntities);
            state.entities = {};
            state.ids = [];
            addManyMutably(newEntities, state, []);
          }
          function updateOneMutably(update, state) {
            return updateManyMutably([update], state);
          }
          function updateManyMutably(updates, state) {
            let appliedUpdates = false;
            let replacedIds = false;
            for (let update of updates) {
              const entity = state.entities[update.id];
              if (!entity) {
                continue;
              }
              appliedUpdates = true;
              Object.assign(entity, update.changes);
              const newId = selectId(entity);
              if (update.id !== newId) {
                replacedIds = true;
                delete state.entities[update.id];
                const oldIndex = state.ids.indexOf(update.id);
                state.ids[oldIndex] = newId;
                state.entities[newId] = entity;
              }
            }
            if (appliedUpdates) {
              mergeFunction(state, [], appliedUpdates, replacedIds);
            }
          }
          function upsertOneMutably(entity, state) {
            return upsertManyMutably([entity], state);
          }
          function upsertManyMutably(newEntities, state) {
            const [added, updated, existingIdsArray] =
              splitAddedUpdatedEntities(newEntities, selectId, state);
            if (added.length) {
              addManyMutably(added, state, existingIdsArray);
            }
            if (updated.length) {
              updateManyMutably(updated, state);
            }
          }
          function areArraysEqual(a, b) {
            if (a.length !== b.length) {
              return false;
            }
            for (let i = 0; i < a.length; i++) {
              if (a[i] === b[i]) {
                continue;
              }
              return false;
            }
            return true;
          }
          const mergeFunction = (
            state,
            addedItems,
            appliedUpdates,
            replacedIds
          ) => {
            const currentEntities = getCurrent(state.entities);
            const currentIds = getCurrent(state.ids);
            const stateEntities = state.entities;
            let ids = currentIds;
            if (replacedIds) {
              ids = new Set(currentIds);
            }
            let sortedEntities = [];
            for (const id of ids) {
              const entity = currentEntities[id];
              if (entity) {
                sortedEntities.push(entity);
              }
            }
            const wasPreviouslyEmpty = sortedEntities.length === 0;
            for (const item of addedItems) {
              stateEntities[selectId(item)] = item;
              if (!wasPreviouslyEmpty) {
                insert(sortedEntities, item, comparer);
              }
            }
            if (wasPreviouslyEmpty) {
              sortedEntities = addedItems.slice().sort(comparer);
            } else if (appliedUpdates) {
              sortedEntities.sort(comparer);
            }
            const newSortedIds = sortedEntities.map(selectId);
            if (!areArraysEqual(currentIds, newSortedIds)) {
              state.ids = newSortedIds;
            }
          };
          return {
            removeOne,
            removeMany,
            removeAll,
            addOne: createStateOperator(addOneMutably),
            updateOne: createStateOperator(updateOneMutably),
            upsertOne: createStateOperator(upsertOneMutably),
            setOne: createStateOperator(setOneMutably),
            setMany: createStateOperator(setManyMutably),
            setAll: createStateOperator(setAllMutably),
            addMany: createStateOperator(addManyMutably),
            updateMany: createStateOperator(updateManyMutably),
            upsertMany: createStateOperator(upsertManyMutably),
          };
        }
        // src/entities/create_adapter.ts
        function createEntityAdapter() {
          let options =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          const { selectId, sortComparer } = {
            sortComparer: false,
            selectId: (instance) => instance.id,
            ...options,
          };
          const stateAdapter = sortComparer
            ? createSortedStateAdapter(selectId, sortComparer)
            : createUnsortedStateAdapter(selectId);
          const stateFactory = createInitialStateFactory(stateAdapter);
          const selectorsFactory = createSelectorsFactory();
          return {
            selectId,
            sortComparer,
            ...stateFactory,
            ...selectorsFactory,
            ...stateAdapter,
          };
        }
        // src/listenerMiddleware/exceptions.ts
        var task = 'task';
        var listener = 'listener';
        var completed = 'completed';
        var cancelled = 'cancelled';
        var taskCancelled = 'task-'.concat(cancelled);
        var taskCompleted = 'task-'.concat(completed);
        var listenerCancelled = ''.concat(listener, '-').concat(cancelled);
        var listenerCompleted = ''.concat(listener, '-').concat(completed);
        var TaskAbortError = class {
          constructor(code) {
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'name', 'TaskAbortError');
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '_'
            ])(this, 'message', void 0);
            this.code = code;
            this.message = ''
              .concat(task, ' ')
              .concat(cancelled, ' (reason: ')
              .concat(code, ')');
          }
        };
        // src/listenerMiddleware/utils.ts
        var assertFunction = (func, expected) => {
          if (typeof func !== 'function') {
            throw new TypeError(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : ''.concat(expected, ' is not a function')
            );
          }
        };
        var noop2 = () => {};
        var catchRejection = function (promise) {
          let onError =
            arguments.length > 1 && arguments[1] !== void 0
              ? arguments[1]
              : noop2;
          promise.catch(onError);
          return promise;
        };
        var addAbortSignalListener = (abortSignal, callback) => {
          abortSignal.addEventListener('abort', callback, {
            once: true,
          });
          return () => abortSignal.removeEventListener('abort', callback);
        };
        var abortControllerWithReason = (abortController, reason) => {
          const signal = abortController.signal;
          if (signal.aborted) {
            return;
          }
          if (!('reason' in signal)) {
            Object.defineProperty(signal, 'reason', {
              enumerable: true,
              value: reason,
              configurable: true,
              writable: true,
            });
          }
          abortController.abort(reason);
        };
        // src/listenerMiddleware/task.ts
        var validateActive = (signal) => {
          if (signal.aborted) {
            const { reason } = signal;
            throw new TaskAbortError(reason);
          }
        };
        function raceWithSignal(signal, promise) {
          let cleanup = noop2;
          return new Promise((resolve, reject) => {
            const notifyRejection = () =>
              reject(new TaskAbortError(signal.reason));
            if (signal.aborted) {
              notifyRejection();
              return;
            }
            cleanup = addAbortSignalListener(signal, notifyRejection);
            promise.finally(() => cleanup()).then(resolve, reject);
          }).finally(() => {
            cleanup = noop2;
          });
        }
        var runTask = async (task2, cleanUp) => {
          try {
            await Promise.resolve();
            const value = await task2();
            return {
              status: 'ok',
              value,
            };
          } catch (error) {
            return {
              status:
                error instanceof TaskAbortError ? 'cancelled' : 'rejected',
              error,
            };
          } finally {
            cleanUp === null || cleanUp === void 0 ? void 0 : cleanUp();
          }
        };
        var createPause = (signal) => {
          return (promise) => {
            return catchRejection(
              raceWithSignal(signal, promise).then((output) => {
                validateActive(signal);
                return output;
              })
            );
          };
        };
        var createDelay = (signal) => {
          const pause = createPause(signal);
          return (timeoutMs) => {
            return pause(
              new Promise((resolve) => setTimeout(resolve, timeoutMs))
            );
          };
        };
        // src/listenerMiddleware/index.ts
        var { assign } = Object;
        var INTERNAL_NIL_TOKEN = {};
        var alm = 'listenerMiddleware';
        var createFork = (parentAbortSignal, parentBlockingPromises) => {
          const linkControllers = (controller) =>
            addAbortSignalListener(parentAbortSignal, () =>
              abortControllerWithReason(controller, parentAbortSignal.reason)
            );
          return (taskExecutor, opts) => {
            assertFunction(taskExecutor, 'taskExecutor');
            const childAbortController = new AbortController();
            linkControllers(childAbortController);
            const result = runTask(
              async () => {
                validateActive(parentAbortSignal);
                validateActive(childAbortController.signal);
                const result2 = await taskExecutor({
                  pause: createPause(childAbortController.signal),
                  delay: createDelay(childAbortController.signal),
                  signal: childAbortController.signal,
                });
                validateActive(childAbortController.signal);
                return result2;
              },
              () =>
                abortControllerWithReason(childAbortController, taskCompleted)
            );
            if (opts === null || opts === void 0 ? void 0 : opts.autoJoin) {
              parentBlockingPromises.push(result.catch(noop2));
            }
            return {
              result: createPause(parentAbortSignal)(result),
              cancel() {
                abortControllerWithReason(childAbortController, taskCancelled);
              },
            };
          };
        };
        var createTakePattern = (startListening, signal) => {
          const take = async (predicate, timeout) => {
            validateActive(signal);
            let unsubscribe = () => {};
            const tuplePromise = new Promise((resolve, reject) => {
              let stopListening = startListening({
                predicate,
                effect: (action, listenerApi) => {
                  listenerApi.unsubscribe();
                  resolve([
                    action,
                    listenerApi.getState(),
                    listenerApi.getOriginalState(),
                  ]);
                },
              });
              unsubscribe = () => {
                stopListening();
                reject();
              };
            });
            const promises = [tuplePromise];
            if (timeout != null) {
              promises.push(
                new Promise((resolve) => setTimeout(resolve, timeout, null))
              );
            }
            try {
              const output = await raceWithSignal(
                signal,
                Promise.race(promises)
              );
              validateActive(signal);
              return output;
            } finally {
              unsubscribe();
            }
          };
          return (predicate, timeout) =>
            catchRejection(take(predicate, timeout));
        };
        var getListenerEntryPropsFrom = (options) => {
          let { type, actionCreator, matcher, predicate, effect } = options;
          if (type) {
            predicate = createAction(type).match;
          } else if (actionCreator) {
            type = actionCreator.type;
            predicate = actionCreator.match;
          } else if (matcher) {
            predicate = matcher;
          } else if (predicate) {
          } else {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Creating or removing a listener requires one of the known fields for matching an action'
            );
          }
          assertFunction(effect, 'options.listener');
          return {
            predicate,
            type,
            effect,
          };
        };
        var createListenerEntry = /* @__PURE__ */ assign(
          (options) => {
            const { type, predicate, effect } =
              getListenerEntryPropsFrom(options);
            const entry = {
              id: nanoid(),
              effect,
              type,
              predicate,
              pending: /* @__PURE__ */ new Set(),
              unsubscribe: () => {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'Unsubscribe not initialized'
                );
              },
            };
            return entry;
          },
          {
            withTypes: () => createListenerEntry,
          }
        );
        var findListenerEntry = (listenerMap, options) => {
          const { type, effect, predicate } =
            getListenerEntryPropsFrom(options);
          return Array.from(listenerMap.values()).find((entry) => {
            const matchPredicateOrType =
              typeof type === 'string'
                ? entry.type === type
                : entry.predicate === predicate;
            return matchPredicateOrType && entry.effect === effect;
          });
        };
        var cancelActiveListeners = (entry) => {
          entry.pending.forEach((controller) => {
            abortControllerWithReason(controller, listenerCancelled);
          });
        };
        var createClearListenerMiddleware = (listenerMap) => {
          return () => {
            listenerMap.forEach(cancelActiveListeners);
            listenerMap.clear();
          };
        };
        var safelyNotifyError = (errorHandler, errorToNotify, errorInfo) => {
          try {
            errorHandler(errorToNotify, errorInfo);
          } catch (errorHandlerError) {
            setTimeout(() => {
              throw errorHandlerError;
            }, 0);
          }
        };
        var addListener = /* @__PURE__ */ assign(
          /* @__PURE__ */ createAction(''.concat(alm, '/add')),
          {
            withTypes: () => addListener,
          }
        );
        var clearAllListeners = /* @__PURE__ */ createAction(
          ''.concat(alm, '/removeAll')
        );
        var removeListener = /* @__PURE__ */ assign(
          /* @__PURE__ */ createAction(''.concat(alm, '/remove')),
          {
            withTypes: () => removeListener,
          }
        );
        var defaultErrorHandler = function () {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }
          console.error(''.concat(alm, '/error'), ...args);
        };
        var createListenerMiddleware = function () {
          let middlewareOptions =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          const listenerMap = /* @__PURE__ */ new Map();
          const { extra, onError = defaultErrorHandler } = middlewareOptions;
          assertFunction(onError, 'onError');
          const insertEntry = (entry) => {
            entry.unsubscribe = () => listenerMap.delete(entry.id);
            listenerMap.set(entry.id, entry);
            return (cancelOptions) => {
              entry.unsubscribe();
              if (
                cancelOptions === null || cancelOptions === void 0
                  ? void 0
                  : cancelOptions.cancelActive
              ) {
                cancelActiveListeners(entry);
              }
            };
          };
          const startListening = (options) => {
            var _findListenerEntry;
            const entry =
              (_findListenerEntry = findListenerEntry(listenerMap, options)) !==
                null && _findListenerEntry !== void 0
                ? _findListenerEntry
                : createListenerEntry(options);
            return insertEntry(entry);
          };
          assign(startListening, {
            withTypes: () => startListening,
          });
          const stopListening = (options) => {
            const entry = findListenerEntry(listenerMap, options);
            if (entry) {
              entry.unsubscribe();
              if (options.cancelActive) {
                cancelActiveListeners(entry);
              }
            }
            return !!entry;
          };
          assign(stopListening, {
            withTypes: () => stopListening,
          });
          const notifyListener = async (
            entry,
            action,
            api,
            getOriginalState
          ) => {
            const internalTaskController = new AbortController();
            const take = createTakePattern(
              startListening,
              internalTaskController.signal
            );
            const autoJoinPromises = [];
            try {
              entry.pending.add(internalTaskController);
              await Promise.resolve(
                entry.effect(
                  action, // Use assign() rather than ... to avoid extra helper functions added to bundle
                  assign({}, api, {
                    getOriginalState,
                    condition: (predicate, timeout) =>
                      take(predicate, timeout).then(Boolean),
                    take,
                    delay: createDelay(internalTaskController.signal),
                    pause: createPause(internalTaskController.signal),
                    extra,
                    signal: internalTaskController.signal,
                    fork: createFork(
                      internalTaskController.signal,
                      autoJoinPromises
                    ),
                    unsubscribe: entry.unsubscribe,
                    subscribe: () => {
                      listenerMap.set(entry.id, entry);
                    },
                    cancelActiveListeners: () => {
                      entry.pending.forEach((controller, _, set) => {
                        if (controller !== internalTaskController) {
                          abortControllerWithReason(
                            controller,
                            listenerCancelled
                          );
                          set.delete(controller);
                        }
                      });
                    },
                    cancel: () => {
                      abortControllerWithReason(
                        internalTaskController,
                        listenerCancelled
                      );
                      entry.pending.delete(internalTaskController);
                    },
                    throwIfCancelled: () => {
                      validateActive(internalTaskController.signal);
                    },
                  })
                )
              );
            } catch (listenerError) {
              if (!(listenerError instanceof TaskAbortError)) {
                safelyNotifyError(onError, listenerError, {
                  raisedBy: 'effect',
                });
              }
            } finally {
              await Promise.all(autoJoinPromises);
              abortControllerWithReason(
                internalTaskController,
                listenerCompleted
              );
              entry.pending.delete(internalTaskController);
            }
          };
          const clearListenerMiddleware =
            createClearListenerMiddleware(listenerMap);
          const middleware = (api) => (next) => (action) => {
            if (
              !(0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isAction'
              ])(action)
            ) {
              return next(action);
            }
            if (addListener.match(action)) {
              return startListening(action.payload);
            }
            if (clearAllListeners.match(action)) {
              clearListenerMiddleware();
              return;
            }
            if (removeListener.match(action)) {
              return stopListening(action.payload);
            }
            let originalState = api.getState();
            const getOriginalState = () => {
              if (originalState === INTERNAL_NIL_TOKEN) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : ''.concat(
                        alm,
                        ': getOriginalState can only be called synchronously'
                      )
                );
              }
              return originalState;
            };
            let result;
            try {
              result = next(action);
              if (listenerMap.size > 0) {
                const currentState = api.getState();
                const listenerEntries = Array.from(listenerMap.values());
                for (const entry of listenerEntries) {
                  let runListener = false;
                  try {
                    runListener = entry.predicate(
                      action,
                      currentState,
                      originalState
                    );
                  } catch (predicateError) {
                    runListener = false;
                    safelyNotifyError(onError, predicateError, {
                      raisedBy: 'predicate',
                    });
                  }
                  if (!runListener) {
                    continue;
                  }
                  notifyListener(entry, action, api, getOriginalState);
                }
              }
            } finally {
              originalState = INTERNAL_NIL_TOKEN;
            }
            return result;
          };
          return {
            middleware,
            startListening,
            stopListening,
            clearListeners: clearListenerMiddleware,
          };
        };
        var createMiddlewareEntry = (middleware) => ({
          middleware,
          applied: /* @__PURE__ */ new Map(),
        });
        var matchInstance = (instanceId) => (action) => {
          var _action_meta;
          return (
            (action === null || action === void 0
              ? void 0
              : (_action_meta = action.meta) === null || _action_meta === void 0
                ? void 0
                : _action_meta.instanceId) === instanceId
          );
        };
        var createDynamicMiddleware = () => {
          const instanceId = nanoid();
          const middlewareMap = /* @__PURE__ */ new Map();
          const withMiddleware = Object.assign(
            createAction('dynamicMiddleware/add', function () {
              for (
                var _len = arguments.length,
                  middlewares = new Array(_len),
                  _key = 0;
                _key < _len;
                _key++
              ) {
                middlewares[_key] = arguments[_key];
              }
              return {
                payload: middlewares,
                meta: {
                  instanceId,
                },
              };
            }),
            {
              withTypes: () => withMiddleware,
            }
          );
          const addMiddleware = Object.assign(
            function addMiddleware2() {
              for (
                var _len = arguments.length,
                  middlewares = new Array(_len),
                  _key = 0;
                _key < _len;
                _key++
              ) {
                middlewares[_key] = arguments[_key];
              }
              middlewares.forEach((middleware2) => {
                getOrInsertComputed(
                  middlewareMap,
                  middleware2,
                  createMiddlewareEntry
                );
              });
            },
            {
              withTypes: () => addMiddleware,
            }
          );
          const getFinalMiddleware = (api) => {
            const appliedMiddleware = Array.from(middlewareMap.values()).map(
              (entry) =>
                getOrInsertComputed(entry.applied, api, entry.middleware)
            );
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'compose'
            ])(...appliedMiddleware);
          };
          const isWithMiddleware = isAllOf(
            withMiddleware,
            matchInstance(instanceId)
          );
          const middleware = (api) => (next) => (action) => {
            if (isWithMiddleware(action)) {
              addMiddleware(...action.payload);
              return api.dispatch;
            }
            return getFinalMiddleware(api)(next)(action);
          };
          return {
            middleware,
            addMiddleware,
            withMiddleware,
            instanceId,
          };
        };
        var isSliceLike = (maybeSliceLike) =>
          'reducerPath' in maybeSliceLike &&
          typeof maybeSliceLike.reducerPath === 'string';
        var getReducers = (slices) =>
          slices.flatMap((sliceOrMap) =>
            isSliceLike(sliceOrMap)
              ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]]
              : Object.entries(sliceOrMap)
          );
        var ORIGINAL_STATE = Symbol.for('rtk-state-proxy-original');
        var isStateProxy = (value) => !!value && !!value[ORIGINAL_STATE];
        var stateProxyMap = /* @__PURE__ */ new WeakMap();
        var createStateProxy = (state, reducerMap, initialStateCache) =>
          getOrInsertComputed(
            stateProxyMap,
            state,
            () =>
              new Proxy(state, {
                get: (target, prop, receiver) => {
                  if (prop === ORIGINAL_STATE) return target;
                  const result = Reflect.get(target, prop, receiver);
                  if (typeof result === 'undefined') {
                    const cached = initialStateCache[prop];
                    if (typeof cached !== 'undefined') return cached;
                    const reducer = reducerMap[prop];
                    if (reducer) {
                      const reducerResult = reducer(void 0, {
                        type: nanoid(),
                      });
                      if (typeof reducerResult === 'undefined') {
                        throw new Error(
                          ('TURBOPACK compile-time falsy', 0)
                            ? 'TURBOPACK unreachable'
                            : 'The slice reducer for key "'.concat(
                                prop.toString(),
                                '" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don\'t want to set a value for this reducer, you can use null instead of undefined.'
                              )
                        );
                      }
                      initialStateCache[prop] = reducerResult;
                      return reducerResult;
                    }
                  }
                  return result;
                },
              })
          );
        var original = (state) => {
          if (!isStateProxy(state)) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'original must be used on state Proxy'
            );
          }
          return state[ORIGINAL_STATE];
        };
        var emptyObject = {};
        var noopReducer = function () {
          let state =
            arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : emptyObject;
          return state;
        };
        function combineSlices() {
          for (
            var _len = arguments.length, slices = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            slices[_key] = arguments[_key];
          }
          const reducerMap = Object.fromEntries(getReducers(slices));
          const getReducer = () =>
            Object.keys(reducerMap).length
              ? (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'combineReducers'
                ])(reducerMap)
              : noopReducer;
          let reducer = getReducer();
          function combinedReducer(state, action) {
            return reducer(state, action);
          }
          combinedReducer.withLazyLoadedSlices = () => combinedReducer;
          const initialStateCache = {};
          const inject = function (slice) {
            let config =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
            const { reducerPath, reducer: reducerToInject } = slice;
            const currentReducer = reducerMap[reducerPath];
            if (
              !config.overrideExisting &&
              currentReducer &&
              currentReducer !== reducerToInject
            ) {
              if (
                typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'default'
                ] !== 'undefined' &&
                ('TURBOPACK compile-time value', 'development') ===
                  'development'
              ) {
                console.error(
                  'called `inject` to override already-existing reducer '.concat(
                    reducerPath,
                    ' without specifying `overrideExisting: true`'
                  )
                );
              }
              return combinedReducer;
            }
            if (config.overrideExisting && currentReducer !== reducerToInject) {
              delete initialStateCache[reducerPath];
            }
            reducerMap[reducerPath] = reducerToInject;
            reducer = getReducer();
            return combinedReducer;
          };
          const selector = Object.assign(
            function makeSelector(selectorFn, selectState) {
              return function selector2(state) {
                for (
                  var _len = arguments.length,
                    args = new Array(_len > 1 ? _len - 1 : 0),
                    _key = 1;
                  _key < _len;
                  _key++
                ) {
                  args[_key - 1] = arguments[_key];
                }
                return selectorFn(
                  createStateProxy(
                    selectState ? selectState(state, ...args) : state,
                    reducerMap,
                    initialStateCache
                  ),
                  ...args
                );
              };
            },
            {
              original,
            }
          );
          return Object.assign(combinedReducer, {
            inject,
            selector,
          });
        }
        // src/formatProdErrorMessage.ts
        function formatProdErrorMessage(code) {
          return 'Minified Redux Toolkit error #'
            .concat(code, '; visit https://redux-toolkit.js.org/Errors?code=')
            .concat(
              code,
              ' for the full message or use the non-minified dev environment for full errors. '
            );
        }
        //# sourceMappingURL=redux-toolkit.modern.mjs.map
      },
    '[project]/node_modules/immer/dist/immer.mjs [app-client] (ecmascript) <export produce as createNextState>':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          createNextState: () =>
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'produce'
            ],
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/immer/dist/immer.mjs [app-client] (ecmascript)'
          );
      },
    '[project]/node_modules/@standard-schema/utils/dist/index.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        // src/getDotPath/getDotPath.ts
        __turbopack_context__.s({
          SchemaError: () => SchemaError,
          getDotPath: () => getDotPath,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@swc/helpers/esm/_define_property.js [app-client] (ecmascript)'
          );
        function getDotPath(issue) {
          var _issue_path;
          if (
            (_issue_path = issue.path) === null || _issue_path === void 0
              ? void 0
              : _issue_path.length
          ) {
            let dotPath = '';
            for (const item of issue.path) {
              const key = typeof item === 'object' ? item.key : item;
              if (typeof key === 'string' || typeof key === 'number') {
                if (dotPath) {
                  dotPath += '.'.concat(key);
                } else {
                  dotPath += key;
                }
              } else {
                return null;
              }
            }
            return dotPath;
          }
          return null;
        }
        // src/SchemaError/SchemaError.ts
        var SchemaError = class extends Error {
          /**
           * Creates a schema error with useful information.
           *
           * @param issues The schema issues.
           */ constructor(issues) {
            super(issues[0].message),
              /**
               * The schema issues.
               */ (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$swc$2f$helpers$2f$esm$2f$_define_property$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                '_'
              ])(this, 'issues', void 0);
            this.name = 'SchemaError';
            this.issues = issues;
          }
        };
      },
    '[project]/node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        // src/query/core/apiState.ts
        __turbopack_context__.s({
          NamedSchemaError: () => NamedSchemaError,
          QueryStatus: () => QueryStatus,
          _NEVER: () => _NEVER,
          buildCreateApi: () => buildCreateApi,
          copyWithStructuralSharing: () => copyWithStructuralSharing,
          coreModule: () => coreModule,
          coreModuleName: () => coreModuleName,
          createApi: () => createApi,
          defaultSerializeQueryArgs: () => defaultSerializeQueryArgs,
          fakeBaseQuery: () => fakeBaseQuery,
          fetchBaseQuery: () => fetchBaseQuery,
          retry: () => retry,
          setupListeners: () => setupListeners,
          skipToken: () => skipToken,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          /*#__PURE__*/ __turbopack_context__.i(
            '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
          );
        // src/query/core/rtkImports.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs [app-client] (ecmascript) <locals>'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/reselect/dist/reselect.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/redux/dist/redux.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/immer/dist/immer.mjs [app-client] (ecmascript) <export produce as createNextState>'
          );
        // src/query/core/buildThunks.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/immer/dist/immer.mjs [app-client] (ecmascript)'
          );
        // src/query/standardSchema.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$standard$2d$schema$2f$utils$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@standard-schema/utils/dist/index.js [app-client] (ecmascript)'
          );
        var QueryStatus = /* @__PURE__ */ ((QueryStatus2) => {
          QueryStatus2['uninitialized'] = 'uninitialized';
          QueryStatus2['pending'] = 'pending';
          QueryStatus2['fulfilled'] = 'fulfilled';
          QueryStatus2['rejected'] = 'rejected';
          return QueryStatus2;
        })(QueryStatus || {});
        function getRequestStatusFlags(status) {
          return {
            status,
            isUninitialized: status === 'uninitialized' /* uninitialized */,
            isLoading: status === 'pending' /* pending */,
            isSuccess: status === 'fulfilled' /* fulfilled */,
            isError: status === 'rejected' /* rejected */,
          };
        }
        // src/query/utils/copyWithStructuralSharing.ts
        var isPlainObject2 =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'isPlainObject'
          ];
        function copyWithStructuralSharing(oldObj, newObj) {
          if (
            oldObj === newObj ||
            !(
              (isPlainObject2(oldObj) && isPlainObject2(newObj)) ||
              (Array.isArray(oldObj) && Array.isArray(newObj))
            )
          ) {
            return newObj;
          }
          const newKeys = Object.keys(newObj);
          const oldKeys = Object.keys(oldObj);
          let isSameObject = newKeys.length === oldKeys.length;
          const mergeObj = Array.isArray(newObj) ? [] : {};
          for (const key of newKeys) {
            mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);
            if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];
          }
          return isSameObject ? oldObj : mergeObj;
        }
        // src/query/utils/countObjectKeys.ts
        function countObjectKeys(obj) {
          let count = 0;
          for (const _key in obj) {
            count++;
          }
          return count;
        }
        // src/query/utils/flatten.ts
        var flatten = (arr) => [].concat(...arr);
        // src/query/utils/isAbsoluteUrl.ts
        function isAbsoluteUrl(url) {
          return new RegExp('(^|:)//').test(url);
        }
        // src/query/utils/isDocumentVisible.ts
        function isDocumentVisible() {
          if (typeof document === 'undefined') {
            return true;
          }
          return document.visibilityState !== 'hidden';
        }
        // src/query/utils/isNotNullish.ts
        function isNotNullish(v) {
          return v != null;
        }
        // src/query/utils/isOnline.ts
        function isOnline() {
          return typeof navigator === 'undefined'
            ? true
            : navigator.onLine === void 0
              ? true
              : navigator.onLine;
        }
        // src/query/utils/joinUrls.ts
        var withoutTrailingSlash = (url) => url.replace(/\/$/, '');
        var withoutLeadingSlash = (url) => url.replace(/^\//, '');
        function joinUrls(base, url) {
          if (!base) {
            return url;
          }
          if (!url) {
            return base;
          }
          if (isAbsoluteUrl(url)) {
            return url;
          }
          const delimiter =
            base.endsWith('/') || !url.startsWith('?') ? '/' : '';
          base = withoutTrailingSlash(base);
          url = withoutLeadingSlash(url);
          return ''.concat(base).concat(delimiter).concat(url);
        }
        // src/query/utils/getOrInsert.ts
        function getOrInsert(map, key, value) {
          if (map.has(key)) return map.get(key);
          return map.set(key, value).get(key);
        }
        // src/query/fetchBaseQuery.ts
        var defaultFetchFn = function () {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }
          return fetch(...args);
        };
        var defaultValidateStatus = (response) =>
          response.status >= 200 && response.status <= 299;
        var defaultIsJsonContentType = (headers) =>
          /*applicat*/ /ion\/(vnd\.api\+)?json/.test(
            headers.get('content-type') || ''
          );
        function stripUndefined(obj) {
          if (
            !(0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isPlainObject'
            ])(obj)
          ) {
            return obj;
          }
          const copy = {
            ...obj,
          };
          for (const [k, v] of Object.entries(copy)) {
            if (v === void 0) delete copy[k];
          }
          return copy;
        }
        function fetchBaseQuery() {
          let {
            baseUrl,
            prepareHeaders = (x) => x,
            fetchFn = defaultFetchFn,
            paramsSerializer,
            isJsonContentType = defaultIsJsonContentType,
            jsonContentType = 'application/json',
            jsonReplacer,
            timeout: defaultTimeout,
            responseHandler: globalResponseHandler,
            validateStatus: globalValidateStatus,
            ...baseFetchOptions
          } = arguments.length > 0 && arguments[0] !== void 0
            ? arguments[0]
            : {};
          if (typeof fetch === 'undefined' && fetchFn === defaultFetchFn) {
            console.warn(
              'Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.'
            );
          }
          return async (arg, api, extraOptions) => {
            const { getState, extra, endpoint, forced, type } = api;
            let meta;
            let {
              url,
              headers = new Headers(baseFetchOptions.headers),
              params = void 0,
              responseHandler = globalResponseHandler !== null &&
              globalResponseHandler !== void 0
                ? globalResponseHandler
                : 'json',
              validateStatus = globalValidateStatus !== null &&
              globalValidateStatus !== void 0
                ? globalValidateStatus
                : defaultValidateStatus,
              timeout = defaultTimeout,
              ...rest
            } = typeof arg == 'string'
              ? {
                  url: arg,
                }
              : arg;
            let abortController,
              signal = api.signal;
            if (timeout) {
              abortController = new AbortController();
              api.signal.addEventListener('abort', abortController.abort);
              signal = abortController.signal;
            }
            let config = {
              ...baseFetchOptions,
              signal,
              ...rest,
            };
            headers = new Headers(stripUndefined(headers));
            config.headers =
              (await prepareHeaders(headers, {
                getState,
                arg,
                extra,
                endpoint,
                forced,
                type,
                extraOptions,
              })) || headers;
            const isJsonifiable = (body) =>
              typeof body === 'object' &&
              ((0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isPlainObject'
              ])(body) ||
                Array.isArray(body) ||
                typeof body.toJSON === 'function');
            if (
              !config.headers.has('content-type') &&
              isJsonifiable(config.body)
            ) {
              config.headers.set('content-type', jsonContentType);
            }
            if (
              isJsonifiable(config.body) &&
              isJsonContentType(config.headers)
            ) {
              config.body = JSON.stringify(config.body, jsonReplacer);
            }
            if (params) {
              const divider = ~url.indexOf('?') ? '&' : '?';
              const query = paramsSerializer
                ? paramsSerializer(params)
                : new URLSearchParams(stripUndefined(params));
              url += divider + query;
            }
            url = joinUrls(baseUrl, url);
            const request = new Request(url, config);
            const requestClone = new Request(url, config);
            meta = {
              request: requestClone,
            };
            let response,
              timedOut = false,
              timeoutId =
                abortController &&
                setTimeout(() => {
                  timedOut = true;
                  abortController.abort();
                }, timeout);
            try {
              response = await fetchFn(request);
            } catch (e) {
              return {
                error: {
                  status: timedOut ? 'TIMEOUT_ERROR' : 'FETCH_ERROR',
                  error: String(e),
                },
                meta,
              };
            } finally {
              if (timeoutId) clearTimeout(timeoutId);
              abortController === null || abortController === void 0
                ? void 0
                : abortController.signal.removeEventListener(
                    'abort',
                    abortController.abort
                  );
            }
            const responseClone = response.clone();
            meta.response = responseClone;
            let resultData;
            let responseText = '';
            try {
              let handleResponseError;
              await Promise.all([
                handleResponse(response, responseHandler).then(
                  (r) => (resultData = r),
                  (e) => (handleResponseError = e)
                ),
                // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182
                // we *have* to "use up" both streams at the same time or they will stop running in node-fetch scenarios
                responseClone.text().then(
                  (r) => (responseText = r),
                  () => {}
                ),
              ]);
              if (handleResponseError) throw handleResponseError;
            } catch (e) {
              return {
                error: {
                  status: 'PARSING_ERROR',
                  originalStatus: response.status,
                  data: responseText,
                  error: String(e),
                },
                meta,
              };
            }
            return validateStatus(response, resultData)
              ? {
                  data: resultData,
                  meta,
                }
              : {
                  error: {
                    status: response.status,
                    data: resultData,
                  },
                  meta,
                };
          };
          //TURBOPACK unreachable
          async function handleResponse(response, responseHandler) {
            if (typeof responseHandler === 'function') {
              return responseHandler(response);
            }
            if (responseHandler === 'content-type') {
              responseHandler = isJsonContentType(response.headers)
                ? 'json'
                : 'text';
            }
            if (responseHandler === 'json') {
              const text = await response.text();
              return text.length ? JSON.parse(text) : null;
            }
            return response.text();
          }
        }
        // src/query/HandledError.ts
        var HandledError = class {
          constructor(value, meta = void 0) {
            this.value = value;
            this.meta = meta;
          }
        };
        // src/query/retry.ts
        async function defaultBackoff() {
          let attempt =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : 0,
            maxRetries =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : 5;
          const attempts = Math.min(attempt, maxRetries);
          const timeout = ~~((Math.random() + 0.4) * (300 << attempts));
          await new Promise((resolve) =>
            setTimeout((res) => resolve(res), timeout)
          );
        }
        function fail(error, meta) {
          throw Object.assign(
            new HandledError({
              error,
              meta,
            }),
            {
              throwImmediately: true,
            }
          );
        }
        var EMPTY_OPTIONS = {};
        var retryWithBackoff =
          (baseQuery, defaultOptions) => async (args, api, extraOptions) => {
            const possibleMaxRetries = [
              5,
              (defaultOptions || EMPTY_OPTIONS).maxRetries,
              (extraOptions || EMPTY_OPTIONS).maxRetries,
            ].filter((x) => x !== void 0);
            const [maxRetries] = possibleMaxRetries.slice(-1);
            const defaultRetryCondition = (_, __, param) => {
              let { attempt } = param;
              return attempt <= maxRetries;
            };
            const options = {
              maxRetries,
              backoff: defaultBackoff,
              retryCondition: defaultRetryCondition,
              ...defaultOptions,
              ...extraOptions,
            };
            let retry2 = 0;
            while (true) {
              try {
                const result = await baseQuery(args, api, extraOptions);
                if (result.error) {
                  throw new HandledError(result);
                }
                return result;
              } catch (e) {
                retry2++;
                if (e.throwImmediately) {
                  if (e instanceof HandledError) {
                    return e.value;
                  }
                  throw e;
                }
                if (
                  e instanceof HandledError &&
                  !options.retryCondition(e.value.error, args, {
                    attempt: retry2,
                    baseQueryApi: api,
                    extraOptions,
                  })
                ) {
                  return e.value;
                }
                await options.backoff(retry2, options.maxRetries);
              }
            }
          };
        var retry = /* @__PURE__ */ Object.assign(retryWithBackoff, {
          fail,
        });
        // src/query/core/setupListeners.ts
        var onFocus = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createAction'
        ])('__rtkq/focused');
        var onFocusLost = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createAction'
        ])('__rtkq/unfocused');
        var onOnline = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createAction'
        ])('__rtkq/online');
        var onOffline = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createAction'
        ])('__rtkq/offline');
        var initialized = false;
        function setupListeners(dispatch, customHandler) {
          function defaultHandler() {
            const handleFocus = () => dispatch(onFocus());
            const handleFocusLost = () => dispatch(onFocusLost());
            const handleOnline = () => dispatch(onOnline());
            const handleOffline = () => dispatch(onOffline());
            const handleVisibilityChange = () => {
              if (window.document.visibilityState === 'visible') {
                handleFocus();
              } else {
                handleFocusLost();
              }
            };
            if (!initialized) {
              if (typeof window !== 'undefined' && window.addEventListener) {
                window.addEventListener(
                  'visibilitychange',
                  handleVisibilityChange,
                  false
                );
                window.addEventListener('focus', handleFocus, false);
                window.addEventListener('online', handleOnline, false);
                window.addEventListener('offline', handleOffline, false);
                initialized = true;
              }
            }
            const unsubscribe = () => {
              window.removeEventListener('focus', handleFocus);
              window.removeEventListener(
                'visibilitychange',
                handleVisibilityChange
              );
              window.removeEventListener('online', handleOnline);
              window.removeEventListener('offline', handleOffline);
              initialized = false;
            };
            return unsubscribe;
          }
          return customHandler
            ? customHandler(dispatch, {
                onFocus,
                onFocusLost,
                onOffline,
                onOnline,
              })
            : defaultHandler();
        }
        // src/query/endpointDefinitions.ts
        function isQueryDefinition(e) {
          return e.type === 'query' /* query */;
        }
        function isMutationDefinition(e) {
          return e.type === 'mutation' /* mutation */;
        }
        function isInfiniteQueryDefinition(e) {
          return e.type === 'infinitequery' /* infinitequery */;
        }
        function isAnyQueryDefinition(e) {
          return isQueryDefinition(e) || isInfiniteQueryDefinition(e);
        }
        function calculateProvidedBy(
          description,
          result,
          error,
          queryArg,
          meta,
          assertTagTypes
        ) {
          if (isFunction(description)) {
            return description(result, error, queryArg, meta)
              .filter(isNotNullish)
              .map(expandTagDescription)
              .map(assertTagTypes);
          }
          if (Array.isArray(description)) {
            return description.map(expandTagDescription).map(assertTagTypes);
          }
          return [];
        }
        function isFunction(t) {
          return typeof t === 'function';
        }
        function expandTagDescription(description) {
          return typeof description === 'string'
            ? {
                type: description,
              }
            : description;
        }
        // src/tsHelpers.ts
        function asSafePromise(promise, fallback) {
          return promise.catch(fallback);
        }
        // src/query/core/buildInitiate.ts
        var forceQueryFnSymbol = Symbol('forceQueryFn');
        var isUpsertQuery = (arg) =>
          typeof arg[forceQueryFnSymbol] === 'function';
        function buildInitiate(param) {
          let {
            serializeQueryArgs,
            queryThunk,
            infiniteQueryThunk,
            mutationThunk,
            api,
            context,
          } = param;
          const runningQueries = /* @__PURE__ */ new Map();
          const runningMutations = /* @__PURE__ */ new Map();
          const {
            unsubscribeQueryResult,
            removeMutationResult,
            updateSubscriptionOptions,
          } = api.internalActions;
          return {
            buildInitiateQuery,
            buildInitiateInfiniteQuery,
            buildInitiateMutation,
            getRunningQueryThunk,
            getRunningMutationThunk,
            getRunningQueriesThunk,
            getRunningMutationsThunk,
          };
          //TURBOPACK unreachable
          function getRunningQueryThunk(endpointName, queryArgs) {
            return (dispatch) => {
              var _runningQueries_get;
              const endpointDefinition =
                context.endpointDefinitions[endpointName];
              const queryCacheKey = serializeQueryArgs({
                queryArgs,
                endpointDefinition,
                endpointName,
              });
              return (_runningQueries_get = runningQueries.get(dispatch)) ===
                null || _runningQueries_get === void 0
                ? void 0
                : _runningQueries_get[queryCacheKey];
            };
          }
          function getRunningMutationThunk(
            _endpointName,
            fixedCacheKeyOrRequestId
          ) {
            return (dispatch) => {
              var _runningMutations_get;
              return (_runningMutations_get =
                runningMutations.get(dispatch)) === null ||
                _runningMutations_get === void 0
                ? void 0
                : _runningMutations_get[fixedCacheKeyOrRequestId];
            };
          }
          function getRunningQueriesThunk() {
            return (dispatch) =>
              Object.values(runningQueries.get(dispatch) || {}).filter(
                isNotNullish
              );
          }
          function getRunningMutationsThunk() {
            return (dispatch) =>
              Object.values(runningMutations.get(dispatch) || {}).filter(
                isNotNullish
              );
          }
          function middlewareWarning(dispatch) {
            if (('TURBOPACK compile-time truthy', 1)) {
              if (middlewareWarning.triggered) return;
              const returnedValue = dispatch(
                api.internalActions.internal_getRTKQSubscriptions()
              );
              middlewareWarning.triggered = true;
              if (
                typeof returnedValue !== 'object' ||
                typeof (returnedValue === null || returnedValue === void 0
                  ? void 0
                  : returnedValue.type) === 'string'
              ) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'Warning: Middleware for RTK-Query API at reducerPath "'.concat(
                        api.reducerPath,
                        '" has not been added to the store.\nYou must add the middleware for RTK-Query to function correctly!'
                      )
                );
              }
            }
          }
          function buildInitiateAnyQuery(endpointName, endpointDefinition) {
            const queryAction = function (arg) {
              let {
                subscribe = true,
                forceRefetch,
                subscriptionOptions,
                [forceQueryFnSymbol]: forceQueryFn,
                ...rest
              } = arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
              return (dispatch, getState) => {
                var _runningQueries_get;
                const queryCacheKey = serializeQueryArgs({
                  queryArgs: arg,
                  endpointDefinition,
                  endpointName,
                });
                let thunk;
                const commonThunkArgs = {
                  ...rest,
                  type: 'query',
                  subscribe,
                  forceRefetch,
                  subscriptionOptions,
                  endpointName,
                  originalArgs: arg,
                  queryCacheKey,
                  [forceQueryFnSymbol]: forceQueryFn,
                };
                if (isQueryDefinition(endpointDefinition)) {
                  thunk = queryThunk(commonThunkArgs);
                } else {
                  const { direction, initialPageParam } = rest;
                  thunk = infiniteQueryThunk({
                    ...commonThunkArgs,
                    // Supply these even if undefined. This helps with a field existence
                    // check over in `buildSlice.ts`
                    direction,
                    initialPageParam,
                  });
                }
                const selector = api.endpoints[endpointName].select(arg);
                const thunkResult = dispatch(thunk);
                const stateAfter = selector(getState());
                middlewareWarning(dispatch);
                const { requestId, abort } = thunkResult;
                const skippedSynchronously = stateAfter.requestId !== requestId;
                const runningQuery =
                  (_runningQueries_get = runningQueries.get(dispatch)) ===
                    null || _runningQueries_get === void 0
                    ? void 0
                    : _runningQueries_get[queryCacheKey];
                const selectFromState = () => selector(getState());
                const statePromise = Object.assign(
                  forceQueryFn // a query has been forced (upsertQueryData)
                    ? // -> we want to resolve it once data has been written with the data that will be written
                      thunkResult.then(selectFromState)
                    : skippedSynchronously && !runningQuery // a query has been skipped due to a condition and we do not have any currently running query
                      ? // -> we want to resolve it immediately with the current data
                        Promise.resolve(stateAfter) // query just started or one is already in flight
                      : // -> wait for the running query, then resolve with data from after that
                        Promise.all([runningQuery, thunkResult]).then(
                          selectFromState
                        ),
                  {
                    arg,
                    requestId,
                    subscriptionOptions,
                    queryCacheKey,
                    abort,
                    async unwrap() {
                      const result = await statePromise;
                      if (result.isError) {
                        throw result.error;
                      }
                      return result.data;
                    },
                    refetch: () =>
                      dispatch(
                        queryAction(arg, {
                          subscribe: false,
                          forceRefetch: true,
                        })
                      ),
                    unsubscribe() {
                      if (subscribe)
                        dispatch(
                          unsubscribeQueryResult({
                            queryCacheKey,
                            requestId,
                          })
                        );
                    },
                    updateSubscriptionOptions(options) {
                      statePromise.subscriptionOptions = options;
                      dispatch(
                        updateSubscriptionOptions({
                          endpointName,
                          requestId,
                          queryCacheKey,
                          options,
                        })
                      );
                    },
                  }
                );
                if (!runningQuery && !skippedSynchronously && !forceQueryFn) {
                  const running = getOrInsert(runningQueries, dispatch, {});
                  running[queryCacheKey] = statePromise;
                  statePromise.then(() => {
                    delete running[queryCacheKey];
                    if (!countObjectKeys(running)) {
                      runningQueries.delete(dispatch);
                    }
                  });
                }
                return statePromise;
              };
            };
            return queryAction;
          }
          function buildInitiateQuery(endpointName, endpointDefinition) {
            const queryAction = buildInitiateAnyQuery(
              endpointName,
              endpointDefinition
            );
            return queryAction;
          }
          function buildInitiateInfiniteQuery(
            endpointName,
            endpointDefinition
          ) {
            const infiniteQueryAction = buildInitiateAnyQuery(
              endpointName,
              endpointDefinition
            );
            return infiniteQueryAction;
          }
          function buildInitiateMutation(endpointName) {
            return function (arg) {
              let { track = true, fixedCacheKey } =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              return (dispatch, getState) => {
                const thunk = mutationThunk({
                  type: 'mutation',
                  endpointName,
                  originalArgs: arg,
                  track,
                  fixedCacheKey,
                });
                const thunkResult = dispatch(thunk);
                middlewareWarning(dispatch);
                const { requestId, abort, unwrap } = thunkResult;
                const returnValuePromise = asSafePromise(
                  thunkResult.unwrap().then((data) => ({
                    data,
                  })),
                  (error) => ({
                    error,
                  })
                );
                const reset = () => {
                  dispatch(
                    removeMutationResult({
                      requestId,
                      fixedCacheKey,
                    })
                  );
                };
                const ret = Object.assign(returnValuePromise, {
                  arg: thunkResult.arg,
                  requestId,
                  abort,
                  unwrap,
                  reset,
                });
                const running = runningMutations.get(dispatch) || {};
                runningMutations.set(dispatch, running);
                running[requestId] = ret;
                ret.then(() => {
                  delete running[requestId];
                  if (!countObjectKeys(running)) {
                    runningMutations.delete(dispatch);
                  }
                });
                if (fixedCacheKey) {
                  running[fixedCacheKey] = ret;
                  ret.then(() => {
                    if (running[fixedCacheKey] === ret) {
                      delete running[fixedCacheKey];
                      if (!countObjectKeys(running)) {
                        runningMutations.delete(dispatch);
                      }
                    }
                  });
                }
                return ret;
              };
            };
          }
        }
        var NamedSchemaError = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$standard$2d$schema$2f$utils$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
          'SchemaError'
        ] {
          constructor(issues, value, schemaName, _bqMeta) {
            super(issues);
            this.value = value;
            this.schemaName = schemaName;
            this._bqMeta = _bqMeta;
          }
        };
        async function parseWithSchema(schema, data, schemaName, bqMeta) {
          const result = await schema['~standard'].validate(data);
          if (result.issues) {
            throw new NamedSchemaError(result.issues, data, schemaName, bqMeta);
          }
          return result.value;
        }
        // src/query/core/buildThunks.ts
        function defaultTransformResponse(baseQueryReturnValue) {
          return baseQueryReturnValue;
        }
        var addShouldAutoBatch = function () {
          let arg =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          return {
            ...arg,
            [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'SHOULD_AUTOBATCH'
            ]]: true,
          };
        };
        function buildThunks(param) {
          let {
            reducerPath,
            baseQuery,
            context: { endpointDefinitions },
            serializeQueryArgs,
            api,
            assertTagType,
            selectors,
            onSchemaFailure,
            catchSchemaFailure: globalCatchSchemaFailure,
            skipSchemaValidation: globalSkipSchemaValidation,
          } = param;
          const patchQueryData =
            (endpointName, arg, patches, updateProvided) =>
            (dispatch, getState) => {
              const endpointDefinition = endpointDefinitions[endpointName];
              const queryCacheKey = serializeQueryArgs({
                queryArgs: arg,
                endpointDefinition,
                endpointName,
              });
              dispatch(
                api.internalActions.queryResultPatched({
                  queryCacheKey,
                  patches,
                })
              );
              if (!updateProvided) {
                return;
              }
              const newValue = api.endpoints[endpointName].select(arg)(
                // Work around TS 4.1 mismatch
                getState()
              );
              const providedTags = calculateProvidedBy(
                endpointDefinition.providesTags,
                newValue.data,
                void 0,
                arg,
                {},
                assertTagType
              );
              dispatch(
                api.internalActions.updateProvidedBy([
                  {
                    queryCacheKey,
                    providedTags,
                  },
                ])
              );
            };
          function addToStart(items, item) {
            let max =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : 0;
            const newItems = [item, ...items];
            return max && newItems.length > max
              ? newItems.slice(0, -1)
              : newItems;
          }
          function addToEnd(items, item) {
            let max =
              arguments.length > 2 && arguments[2] !== void 0
                ? arguments[2]
                : 0;
            const newItems = [...items, item];
            return max && newItems.length > max ? newItems.slice(1) : newItems;
          }
          const updateQueryData = function (endpointName, arg, updateRecipe) {
            let updateProvided =
              arguments.length > 3 && arguments[3] !== void 0
                ? arguments[3]
                : true;
            return (dispatch, getState) => {
              const endpointDefinition = api.endpoints[endpointName];
              const currentState = endpointDefinition.select(arg)(
                // Work around TS 4.1 mismatch
                getState()
              );
              const ret = {
                patches: [],
                inversePatches: [],
                undo: () =>
                  dispatch(
                    api.util.patchQueryData(
                      endpointName,
                      arg,
                      ret.inversePatches,
                      updateProvided
                    )
                  ),
              };
              if (currentState.status === 'uninitialized' /* uninitialized */) {
                return ret;
              }
              let newValue;
              if ('data' in currentState) {
                if (
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'isDraftable'
                  ])(currentState.data)
                ) {
                  const [value, patches, inversePatches] = (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'produceWithPatches'
                  ])(currentState.data, updateRecipe);
                  ret.patches.push(...patches);
                  ret.inversePatches.push(...inversePatches);
                  newValue = value;
                } else {
                  newValue = updateRecipe(currentState.data);
                  ret.patches.push({
                    op: 'replace',
                    path: [],
                    value: newValue,
                  });
                  ret.inversePatches.push({
                    op: 'replace',
                    path: [],
                    value: currentState.data,
                  });
                }
              }
              if (ret.patches.length === 0) {
                return ret;
              }
              dispatch(
                api.util.patchQueryData(
                  endpointName,
                  arg,
                  ret.patches,
                  updateProvided
                )
              );
              return ret;
            };
          };
          const upsertQueryData = (endpointName, arg, value) => (dispatch) => {
            const res = dispatch(
              api.endpoints[endpointName].initiate(arg, {
                subscribe: false,
                forceRefetch: true,
                [forceQueryFnSymbol]: () => ({
                  data: value,
                }),
              })
            );
            return res;
          };
          const getTransformCallbackForEndpoint = (
            endpointDefinition,
            transformFieldName
          ) => {
            return endpointDefinition.query &&
              endpointDefinition[transformFieldName]
              ? endpointDefinition[transformFieldName]
              : defaultTransformResponse;
          };
          const executeEndpoint = async (arg, param) => {
            let {
              signal,
              abort,
              rejectWithValue,
              fulfillWithValue,
              dispatch,
              getState,
              extra,
            } = param;
            const endpointDefinition = endpointDefinitions[arg.endpointName];
            const {
              metaSchema,
              skipSchemaValidation = globalSkipSchemaValidation,
            } = endpointDefinition;
            try {
              let transformResponse = getTransformCallbackForEndpoint(
                endpointDefinition,
                'transformResponse'
              );
              const baseQueryApi = {
                signal,
                abort,
                dispatch,
                getState,
                extra,
                endpoint: arg.endpointName,
                type: arg.type,
                forced:
                  arg.type === 'query'
                    ? isForcedQuery(arg, getState())
                    : void 0,
                queryCacheKey:
                  arg.type === 'query' ? arg.queryCacheKey : void 0,
              };
              const forceQueryFn =
                arg.type === 'query' ? arg[forceQueryFnSymbol] : void 0;
              let finalQueryReturnValue;
              const fetchPage = async (data, param, maxPages, previous) => {
                if (param == null && data.pages.length) {
                  return Promise.resolve({
                    data,
                  });
                }
                const finalQueryArg = {
                  queryArg: arg.originalArgs,
                  pageParam: param,
                };
                const pageResponse = await executeRequest(finalQueryArg);
                const addTo = previous ? addToStart : addToEnd;
                return {
                  data: {
                    pages: addTo(data.pages, pageResponse.data, maxPages),
                    pageParams: addTo(data.pageParams, param, maxPages),
                  },
                  meta: pageResponse.meta,
                };
              };
              async function executeRequest(finalQueryArg) {
                let result;
                const {
                  extraOptions,
                  argSchema,
                  rawResponseSchema,
                  responseSchema,
                } = endpointDefinition;
                if (argSchema && !skipSchemaValidation) {
                  finalQueryArg = await parseWithSchema(
                    argSchema,
                    finalQueryArg,
                    'argSchema',
                    {}
                  );
                }
                if (forceQueryFn) {
                  result = forceQueryFn();
                } else if (endpointDefinition.query) {
                  result = await baseQuery(
                    endpointDefinition.query(finalQueryArg),
                    baseQueryApi,
                    extraOptions
                  );
                } else {
                  result = await endpointDefinition.queryFn(
                    finalQueryArg,
                    baseQueryApi,
                    extraOptions,
                    (arg2) => baseQuery(arg2, baseQueryApi, extraOptions)
                  );
                }
                if (
                  typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'default'
                  ] !== 'undefined' &&
                  ('TURBOPACK compile-time value', 'development') ===
                    'development'
                ) {
                  const what = endpointDefinition.query
                    ? '`baseQuery`'
                    : '`queryFn`';
                  let err;
                  if (!result) {
                    err = ''.concat(what, ' did not return anything.');
                  } else if (typeof result !== 'object') {
                    err = ''.concat(what, ' did not return an object.');
                  } else if (result.error && result.data) {
                    err = ''.concat(
                      what,
                      ' returned an object containing both `error` and `result`.'
                    );
                  } else if (
                    result.error === void 0 &&
                    result.data === void 0
                  ) {
                    err = ''.concat(
                      what,
                      ' returned an object containing neither a valid `error` and `result`. At least one of them should not be `undefined`'
                    );
                  } else {
                    for (const key of Object.keys(result)) {
                      if (key !== 'error' && key !== 'data' && key !== 'meta') {
                        err = 'The object returned by '
                          .concat(what, ' has the unknown property ')
                          .concat(key, '.');
                        break;
                      }
                    }
                  }
                  if (err) {
                    console.error(
                      'Error encountered handling the endpoint '
                        .concat(arg.endpointName, '.\n                  ')
                        .concat(
                          err,
                          '\n                  It needs to return an object with either the shape `{ data: <value> }` or `{ error: <value> }` that may contain an optional `meta` property.\n                  Object returned was:'
                        ),
                      result
                    );
                  }
                }
                if (result.error)
                  throw new HandledError(result.error, result.meta);
                let { data } = result;
                if (rawResponseSchema && !skipSchemaValidation) {
                  data = await parseWithSchema(
                    rawResponseSchema,
                    result.data,
                    'rawResponseSchema',
                    result.meta
                  );
                }
                let transformedResponse = await transformResponse(
                  data,
                  result.meta,
                  finalQueryArg
                );
                if (responseSchema && !skipSchemaValidation) {
                  transformedResponse = await parseWithSchema(
                    responseSchema,
                    transformedResponse,
                    'responseSchema',
                    result.meta
                  );
                }
                return {
                  ...result,
                  data: transformedResponse,
                };
              }
              if (
                arg.type === 'query' &&
                'infiniteQueryOptions' in endpointDefinition
              ) {
                var _selectors_selectQueryEntry;
                const { infiniteQueryOptions } = endpointDefinition;
                const { maxPages = Infinity } = infiniteQueryOptions;
                let result;
                const blankData = {
                  pages: [],
                  pageParams: [],
                };
                const cachedData =
                  (_selectors_selectQueryEntry = selectors.selectQueryEntry(
                    getState(),
                    arg.queryCacheKey
                  )) === null || _selectors_selectQueryEntry === void 0
                    ? void 0
                    : _selectors_selectQueryEntry.data;
                const isForcedQueryNeedingRefetch = // arg.forceRefetch
                  isForcedQuery(arg, getState()) && !arg.direction;
                const existingData =
                  isForcedQueryNeedingRefetch || !cachedData
                    ? blankData
                    : cachedData;
                if (
                  'direction' in arg &&
                  arg.direction &&
                  existingData.pages.length
                ) {
                  const previous = arg.direction === 'backward';
                  const pageParamFn = previous
                    ? getPreviousPageParam
                    : getNextPageParam;
                  const param = pageParamFn(
                    infiniteQueryOptions,
                    existingData,
                    arg.originalArgs
                  );
                  result = await fetchPage(
                    existingData,
                    param,
                    maxPages,
                    previous
                  );
                } else {
                  const {
                    initialPageParam = infiniteQueryOptions.initialPageParam,
                  } = arg;
                  var _cachedData_pageParams;
                  const cachedPageParams =
                    (_cachedData_pageParams =
                      cachedData === null || cachedData === void 0
                        ? void 0
                        : cachedData.pageParams) !== null &&
                    _cachedData_pageParams !== void 0
                      ? _cachedData_pageParams
                      : [];
                  var _cachedPageParams_;
                  const firstPageParam =
                    (_cachedPageParams_ = cachedPageParams[0]) !== null &&
                    _cachedPageParams_ !== void 0
                      ? _cachedPageParams_
                      : initialPageParam;
                  const totalPages = cachedPageParams.length;
                  result = await fetchPage(
                    existingData,
                    firstPageParam,
                    maxPages
                  );
                  if (forceQueryFn) {
                    result = {
                      data: result.data.pages[0],
                    };
                  }
                  for (let i = 1; i < totalPages; i++) {
                    const param = getNextPageParam(
                      infiniteQueryOptions,
                      result.data,
                      arg.originalArgs
                    );
                    result = await fetchPage(result.data, param, maxPages);
                  }
                }
                finalQueryReturnValue = result;
              } else {
                finalQueryReturnValue = await executeRequest(arg.originalArgs);
              }
              if (
                metaSchema &&
                !skipSchemaValidation &&
                finalQueryReturnValue.meta
              ) {
                finalQueryReturnValue.meta = await parseWithSchema(
                  metaSchema,
                  finalQueryReturnValue.meta,
                  'metaSchema',
                  finalQueryReturnValue.meta
                );
              }
              return fulfillWithValue(
                finalQueryReturnValue.data,
                addShouldAutoBatch({
                  fulfilledTimeStamp: Date.now(),
                  baseQueryMeta: finalQueryReturnValue.meta,
                })
              );
            } catch (error) {
              let caughtError = error;
              if (caughtError instanceof HandledError) {
                let transformErrorResponse = getTransformCallbackForEndpoint(
                  endpointDefinition,
                  'transformErrorResponse'
                );
                const { rawErrorResponseSchema, errorResponseSchema } =
                  endpointDefinition;
                let { value, meta } = caughtError;
                try {
                  if (rawErrorResponseSchema && !skipSchemaValidation) {
                    value = await parseWithSchema(
                      rawErrorResponseSchema,
                      value,
                      'rawErrorResponseSchema',
                      meta
                    );
                  }
                  if (metaSchema && !skipSchemaValidation) {
                    meta = await parseWithSchema(
                      metaSchema,
                      meta,
                      'metaSchema',
                      meta
                    );
                  }
                  let transformedErrorResponse = await transformErrorResponse(
                    value,
                    meta,
                    arg.originalArgs
                  );
                  if (errorResponseSchema && !skipSchemaValidation) {
                    transformedErrorResponse = await parseWithSchema(
                      errorResponseSchema,
                      transformedErrorResponse,
                      'errorResponseSchema',
                      meta
                    );
                  }
                  return rejectWithValue(
                    transformedErrorResponse,
                    addShouldAutoBatch({
                      baseQueryMeta: meta,
                    })
                  );
                } catch (e) {
                  caughtError = e;
                }
              }
              try {
                if (caughtError instanceof NamedSchemaError) {
                  var _endpointDefinition_onSchemaFailure;
                  const info = {
                    endpoint: arg.endpointName,
                    arg: arg.originalArgs,
                    type: arg.type,
                    queryCacheKey:
                      arg.type === 'query' ? arg.queryCacheKey : void 0,
                  };
                  (_endpointDefinition_onSchemaFailure =
                    endpointDefinition.onSchemaFailure) === null ||
                  _endpointDefinition_onSchemaFailure === void 0
                    ? void 0
                    : _endpointDefinition_onSchemaFailure.call(
                        endpointDefinition,
                        caughtError,
                        info
                      );
                  onSchemaFailure === null || onSchemaFailure === void 0
                    ? void 0
                    : onSchemaFailure(caughtError, info);
                  const { catchSchemaFailure = globalCatchSchemaFailure } =
                    endpointDefinition;
                  if (catchSchemaFailure) {
                    return rejectWithValue(
                      catchSchemaFailure(caughtError, info),
                      addShouldAutoBatch({
                        baseQueryMeta: caughtError._bqMeta,
                      })
                    );
                  }
                }
              } catch (e) {
                caughtError = e;
              }
              if (
                typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'default'
                ] !== 'undefined' &&
                ('TURBOPACK compile-time value', 'development') !== 'production'
              ) {
                console.error(
                  'An unhandled error occurred processing a request for the endpoint "'.concat(
                    arg.endpointName,
                    '".\nIn the case of an unhandled error, no tags will be "provided" or "invalidated".'
                  ),
                  caughtError
                );
              } else {
                console.error(caughtError);
              }
              throw caughtError;
            }
          };
          function isForcedQuery(arg, state) {
            const requestState = selectors.selectQueryEntry(
              state,
              arg.queryCacheKey
            );
            const baseFetchOnMountOrArgChange =
              selectors.selectConfig(state).refetchOnMountOrArgChange;
            const fulfilledVal =
              requestState === null || requestState === void 0
                ? void 0
                : requestState.fulfilledTimeStamp;
            var _arg_forceRefetch;
            const refetchVal =
              (_arg_forceRefetch = arg.forceRefetch) !== null &&
              _arg_forceRefetch !== void 0
                ? _arg_forceRefetch
                : arg.subscribe && baseFetchOnMountOrArgChange;
            if (refetchVal) {
              return (
                refetchVal === true ||
                (Number(/* @__PURE__ */ new Date()) - Number(fulfilledVal)) /
                  1e3 >=
                  refetchVal
              );
            }
            return false;
          }
          const createQueryThunk = () => {
            const generatedQueryThunk = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'createAsyncThunk'
            ])(''.concat(reducerPath, '/executeQuery'), executeEndpoint, {
              getPendingMeta(param) {
                let { arg } = param;
                const endpointDefinition =
                  endpointDefinitions[arg.endpointName];
                return addShouldAutoBatch({
                  startedTimeStamp: Date.now(),
                  ...(isInfiniteQueryDefinition(endpointDefinition)
                    ? {
                        direction: arg.direction,
                      }
                    : {}),
                });
              },
              condition(queryThunkArg, param) {
                let { getState } = param;
                var _endpointDefinition_forceRefetch;
                const state = getState();
                const requestState = selectors.selectQueryEntry(
                  state,
                  queryThunkArg.queryCacheKey
                );
                const fulfilledVal =
                  requestState === null || requestState === void 0
                    ? void 0
                    : requestState.fulfilledTimeStamp;
                const currentArg = queryThunkArg.originalArgs;
                const previousArg =
                  requestState === null || requestState === void 0
                    ? void 0
                    : requestState.originalArgs;
                const endpointDefinition =
                  endpointDefinitions[queryThunkArg.endpointName];
                const direction = queryThunkArg.direction;
                if (isUpsertQuery(queryThunkArg)) {
                  return true;
                }
                if (
                  (requestState === null || requestState === void 0
                    ? void 0
                    : requestState.status) === 'pending'
                ) {
                  return false;
                }
                if (isForcedQuery(queryThunkArg, state)) {
                  return true;
                }
                if (
                  isQueryDefinition(endpointDefinition) &&
                  (endpointDefinition === null || endpointDefinition === void 0
                    ? void 0
                    : (_endpointDefinition_forceRefetch =
                          endpointDefinition.forceRefetch) === null ||
                        _endpointDefinition_forceRefetch === void 0
                      ? void 0
                      : _endpointDefinition_forceRefetch.call(
                          endpointDefinition,
                          {
                            currentArg,
                            previousArg,
                            endpointState: requestState,
                            state,
                          }
                        ))
                ) {
                  return true;
                }
                if (fulfilledVal && !direction) {
                  return false;
                }
                return true;
              },
              dispatchConditionRejection: true,
            });
            return generatedQueryThunk;
          };
          const queryThunk = createQueryThunk();
          const infiniteQueryThunk = createQueryThunk();
          const mutationThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createAsyncThunk'
          ])(''.concat(reducerPath, '/executeMutation'), executeEndpoint, {
            getPendingMeta() {
              return addShouldAutoBatch({
                startedTimeStamp: Date.now(),
              });
            },
          });
          const hasTheForce = (options) => 'force' in options;
          const hasMaxAge = (options) => 'ifOlderThan' in options;
          const prefetch =
            (endpointName, arg, options) => (dispatch, getState) => {
              const force = hasTheForce(options) && options.force;
              const maxAge = hasMaxAge(options) && options.ifOlderThan;
              const queryAction = function () {
                let force2 =
                  arguments.length > 0 && arguments[0] !== void 0
                    ? arguments[0]
                    : true;
                const options2 = {
                  forceRefetch: force2,
                  isPrefetch: true,
                };
                return api.endpoints[endpointName].initiate(arg, options2);
              };
              const latestStateValue =
                api.endpoints[endpointName].select(arg)(getState());
              if (force) {
                dispatch(queryAction());
              } else if (maxAge) {
                const lastFulfilledTs =
                  latestStateValue === null || latestStateValue === void 0
                    ? void 0
                    : latestStateValue.fulfilledTimeStamp;
                if (!lastFulfilledTs) {
                  dispatch(queryAction());
                  return;
                }
                const shouldRetrigger =
                  (Number(/* @__PURE__ */ new Date()) -
                    Number(new Date(lastFulfilledTs))) /
                    1e3 >=
                  maxAge;
                if (shouldRetrigger) {
                  dispatch(queryAction());
                }
              } else {
                dispatch(queryAction(false));
              }
            };
          function matchesEndpoint(endpointName) {
            return (action) => {
              var _action_meta_arg, _action_meta;
              return (
                (action === null || action === void 0
                  ? void 0
                  : (_action_meta = action.meta) === null ||
                      _action_meta === void 0
                    ? void 0
                    : (_action_meta_arg = _action_meta.arg) === null ||
                        _action_meta_arg === void 0
                      ? void 0
                      : _action_meta_arg.endpointName) === endpointName
              );
            };
          }
          function buildMatchThunkActions(thunk, endpointName) {
            return {
              matchPending: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'isAllOf'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'isPending'
                ])(thunk),
                matchesEndpoint(endpointName)
              ),
              matchFulfilled: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'isAllOf'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'isFulfilled'
                ])(thunk),
                matchesEndpoint(endpointName)
              ),
              matchRejected: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'isAllOf'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'isRejected'
                ])(thunk),
                matchesEndpoint(endpointName)
              ),
            };
          }
          return {
            queryThunk,
            mutationThunk,
            infiniteQueryThunk,
            prefetch,
            updateQueryData,
            upsertQueryData,
            patchQueryData,
            buildMatchThunkActions,
          };
        }
        function getNextPageParam(options, param, queryArg) {
          let { pages, pageParams } = param;
          const lastIndex = pages.length - 1;
          return options.getNextPageParam(
            pages[lastIndex],
            pages,
            pageParams[lastIndex],
            pageParams,
            queryArg
          );
        }
        function getPreviousPageParam(options, param, queryArg) {
          let { pages, pageParams } = param;
          var _options_getPreviousPageParam;
          return (_options_getPreviousPageParam =
            options.getPreviousPageParam) === null ||
            _options_getPreviousPageParam === void 0
            ? void 0
            : _options_getPreviousPageParam.call(
                options,
                pages[0],
                pages,
                pageParams[0],
                pageParams,
                queryArg
              );
        }
        function calculateProvidedByThunk(
          action,
          type,
          endpointDefinitions,
          assertTagType
        ) {
          return calculateProvidedBy(
            endpointDefinitions[action.meta.arg.endpointName][type],
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isFulfilled'
            ])(action)
              ? action.payload
              : void 0,
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isRejectedWithValue'
            ])(action)
              ? action.payload
              : void 0,
            action.meta.arg.originalArgs,
            'baseQueryMeta' in action.meta ? action.meta.baseQueryMeta : void 0,
            assertTagType
          );
        }
        function updateQuerySubstateIfExists(state, queryCacheKey, update) {
          const substate = state[queryCacheKey];
          if (substate) {
            update(substate);
          }
        }
        function getMutationCacheKey(id) {
          var _ref;
          return (_ref =
            'arg' in id ? id.arg.fixedCacheKey : id.fixedCacheKey) !== null &&
            _ref !== void 0
            ? _ref
            : id.requestId;
        }
        function updateMutationSubstateIfExists(state, id, update) {
          const substate = state[getMutationCacheKey(id)];
          if (substate) {
            update(substate);
          }
        }
        var initialState = {};
        function buildSlice(param) {
          let {
            reducerPath,
            queryThunk,
            mutationThunk,
            serializeQueryArgs,
            context: {
              endpointDefinitions: definitions,
              apiUid,
              extractRehydrationInfo,
              hasRehydrationInfo,
            },
            assertTagType,
            config,
          } = param;
          const resetApiState = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createAction'
          ])(''.concat(reducerPath, '/resetApiState'));
          function writePendingCacheEntry(draft, arg, upserting, meta) {
            var _draft, _arg_queryCacheKey;
            var _;
            (_ = (_draft = draft)[(_arg_queryCacheKey = arg.queryCacheKey)]) !==
              null && _ !== void 0
              ? _
              : (_draft[_arg_queryCacheKey] = {
                  status: 'uninitialized' /* uninitialized */,
                  endpointName: arg.endpointName,
                });
            updateQuerySubstateIfExists(
              draft,
              arg.queryCacheKey,
              (substate) => {
                substate.status = 'pending' /* pending */;
                substate.requestId =
                  upserting && substate.requestId // for `upsertQuery` **updates**, keep the current `requestId`
                    ? substate.requestId // for normal queries or `upsertQuery` **inserts** always update the `requestId`
                    : meta.requestId;
                if (arg.originalArgs !== void 0) {
                  substate.originalArgs = arg.originalArgs;
                }
                substate.startedTimeStamp = meta.startedTimeStamp;
                const endpointDefinition = definitions[meta.arg.endpointName];
                if (
                  isInfiniteQueryDefinition(endpointDefinition) &&
                  'direction' in arg
                ) {
                  substate.direction = arg.direction;
                }
              }
            );
          }
          function writeFulfilledCacheEntry(draft, meta, payload, upserting) {
            updateQuerySubstateIfExists(
              draft,
              meta.arg.queryCacheKey,
              (substate) => {
                if (substate.requestId !== meta.requestId && !upserting) return;
                const { merge } = definitions[meta.arg.endpointName];
                substate.status = 'fulfilled' /* fulfilled */;
                if (merge) {
                  if (substate.data !== void 0) {
                    const {
                      fulfilledTimeStamp,
                      arg,
                      baseQueryMeta,
                      requestId,
                    } = meta;
                    let newData = (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__[
                      'createNextState'
                    ])(substate.data, (draftSubstateData) => {
                      return merge(draftSubstateData, payload, {
                        arg: arg.originalArgs,
                        baseQueryMeta,
                        fulfilledTimeStamp,
                        requestId,
                      });
                    });
                    substate.data = newData;
                  } else {
                    substate.data = payload;
                  }
                } else {
                  var _definitions_meta_arg_endpointName_structuralSharing;
                  substate.data = (
                    (_definitions_meta_arg_endpointName_structuralSharing =
                      definitions[meta.arg.endpointName].structuralSharing) !==
                      null &&
                    _definitions_meta_arg_endpointName_structuralSharing !==
                      void 0
                      ? _definitions_meta_arg_endpointName_structuralSharing
                      : true
                  )
                    ? copyWithStructuralSharing(
                        (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                          'isDraft'
                        ])(substate.data)
                          ? (0,
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                              'original'
                            ])(substate.data)
                          : substate.data,
                        payload
                      )
                    : payload;
                }
                delete substate.error;
                substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;
              }
            );
          }
          const querySlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/queries'),
            initialState,
            reducers: {
              removeQueryResult: {
                reducer(draft, param) {
                  let {
                    payload: { queryCacheKey },
                  } = param;
                  delete draft[queryCacheKey];
                },
                prepare: (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'prepareAutoBatched'
                ])(),
              },
              cacheEntriesUpserted: {
                reducer(draft, action) {
                  for (const entry of action.payload) {
                    const { queryDescription: arg, value } = entry;
                    writePendingCacheEntry(draft, arg, true, {
                      arg,
                      requestId: action.meta.requestId,
                      startedTimeStamp: action.meta.timestamp,
                    });
                    writeFulfilledCacheEntry(
                      draft,
                      {
                        arg,
                        requestId: action.meta.requestId,
                        fulfilledTimeStamp: action.meta.timestamp,
                        baseQueryMeta: {},
                      },
                      value, // We know we're upserting here
                      true
                    );
                  }
                },
                prepare: (payload) => {
                  const queryDescriptions = payload.map((entry) => {
                    const { endpointName, arg, value } = entry;
                    const endpointDefinition = definitions[endpointName];
                    const queryDescription = {
                      type: 'query',
                      endpointName,
                      originalArgs: entry.arg,
                      queryCacheKey: serializeQueryArgs({
                        queryArgs: arg,
                        endpointDefinition,
                        endpointName,
                      }),
                    };
                    return {
                      queryDescription,
                      value,
                    };
                  });
                  const result = {
                    payload: queryDescriptions,
                    meta: {
                      [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                        'SHOULD_AUTOBATCH'
                      ]]: true,
                      requestId: (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                        'nanoid'
                      ])(),
                      timestamp: Date.now(),
                    },
                  };
                  return result;
                },
              },
              queryResultPatched: {
                reducer(draft, param) {
                  let {
                    payload: { queryCacheKey, patches },
                  } = param;
                  updateQuerySubstateIfExists(
                    draft,
                    queryCacheKey,
                    (substate) => {
                      substate.data = (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'applyPatches'
                      ])(substate.data, patches.concat());
                    }
                  );
                },
                prepare: (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'prepareAutoBatched'
                ])(),
              },
            },
            extraReducers(builder) {
              builder
                .addCase(queryThunk.pending, (draft, param) => {
                  let {
                    meta,
                    meta: { arg },
                  } = param;
                  const upserting = isUpsertQuery(arg);
                  writePendingCacheEntry(draft, arg, upserting, meta);
                })
                .addCase(queryThunk.fulfilled, (draft, param) => {
                  let { meta, payload } = param;
                  const upserting = isUpsertQuery(meta.arg);
                  writeFulfilledCacheEntry(draft, meta, payload, upserting);
                })
                .addCase(queryThunk.rejected, (draft, param) => {
                  let {
                    meta: { condition, arg, requestId },
                    error,
                    payload,
                  } = param;
                  updateQuerySubstateIfExists(
                    draft,
                    arg.queryCacheKey,
                    (substate) => {
                      if (condition) {
                      } else {
                        if (substate.requestId !== requestId) return;
                        substate.status = 'rejected' /* rejected */;
                        substate.error =
                          payload !== null && payload !== void 0
                            ? payload
                            : error;
                      }
                    }
                  );
                })
                .addMatcher(hasRehydrationInfo, (draft, action) => {
                  const { queries } = extractRehydrationInfo(action);
                  for (const [key, entry] of Object.entries(queries)) {
                    if (
                      // do not rehydrate entries that were currently in flight.
                      (entry === null || entry === void 0
                        ? void 0
                        : entry.status) === 'fulfilled' /* fulfilled */ ||
                      (entry === null || entry === void 0
                        ? void 0
                        : entry.status) === 'rejected' /* rejected */
                    ) {
                      draft[key] = entry;
                    }
                  }
                });
            },
          });
          const mutationSlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/mutations'),
            initialState,
            reducers: {
              removeMutationResult: {
                reducer(draft, param) {
                  let { payload } = param;
                  const cacheKey = getMutationCacheKey(payload);
                  if (cacheKey in draft) {
                    delete draft[cacheKey];
                  }
                },
                prepare: (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'prepareAutoBatched'
                ])(),
              },
            },
            extraReducers(builder) {
              builder
                .addCase(mutationThunk.pending, (draft, param) => {
                  let {
                    meta,
                    meta: { requestId, arg, startedTimeStamp },
                  } = param;
                  if (!arg.track) return;
                  draft[getMutationCacheKey(meta)] = {
                    requestId,
                    status: 'pending' /* pending */,
                    endpointName: arg.endpointName,
                    startedTimeStamp,
                  };
                })
                .addCase(mutationThunk.fulfilled, (draft, param) => {
                  let { payload, meta } = param;
                  if (!meta.arg.track) return;
                  updateMutationSubstateIfExists(draft, meta, (substate) => {
                    if (substate.requestId !== meta.requestId) return;
                    substate.status = 'fulfilled' /* fulfilled */;
                    substate.data = payload;
                    substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;
                  });
                })
                .addCase(mutationThunk.rejected, (draft, param) => {
                  let { payload, error, meta } = param;
                  if (!meta.arg.track) return;
                  updateMutationSubstateIfExists(draft, meta, (substate) => {
                    if (substate.requestId !== meta.requestId) return;
                    substate.status = 'rejected' /* rejected */;
                    substate.error =
                      payload !== null && payload !== void 0 ? payload : error;
                  });
                })
                .addMatcher(hasRehydrationInfo, (draft, action) => {
                  const { mutations } = extractRehydrationInfo(action);
                  for (const [key, entry] of Object.entries(mutations)) {
                    if (
                      // do not rehydrate entries that were currently in flight.
                      ((entry === null || entry === void 0
                        ? void 0
                        : entry.status) === 'fulfilled' /* fulfilled */ ||
                        (entry === null || entry === void 0
                          ? void 0
                          : entry.status) === 'rejected') /* rejected */ && // only rehydrate endpoints that were persisted using a `fixedCacheKey`
                      key !==
                        (entry === null || entry === void 0
                          ? void 0
                          : entry.requestId)
                    ) {
                      draft[key] = entry;
                    }
                  }
                });
            },
          });
          const initialInvalidationState = {
            tags: {},
            keys: {},
          };
          const invalidationSlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/invalidation'),
            initialState: initialInvalidationState,
            reducers: {
              updateProvidedBy: {
                reducer(draft, action) {
                  for (const {
                    queryCacheKey,
                    providedTags,
                  } of action.payload) {
                    removeCacheKeyFromTags(draft, queryCacheKey);
                    for (const { type, id } of providedTags) {
                      var _ref, _ref1, _draft_tags, _type;
                      var _, _1;
                      const subscribedQueries =
                        (_1 = (_ref =
                          (_ = (_draft_tags = draft.tags)[(_type = type)]) !==
                            null && _ !== void 0
                            ? _
                            : (_draft_tags[_type] = {}))[
                          (_ref1 = id || '__internal_without_id')
                        ]) !== null && _1 !== void 0
                          ? _1
                          : (_ref[_ref1] = []);
                      const alreadySubscribed =
                        subscribedQueries.includes(queryCacheKey);
                      if (!alreadySubscribed) {
                        subscribedQueries.push(queryCacheKey);
                      }
                    }
                    draft.keys[queryCacheKey] = providedTags;
                  }
                },
                prepare: (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'prepareAutoBatched'
                ])(),
              },
            },
            extraReducers(builder) {
              builder
                .addCase(
                  querySlice.actions.removeQueryResult,
                  (draft, param) => {
                    let {
                      payload: { queryCacheKey },
                    } = param;
                    removeCacheKeyFromTags(draft, queryCacheKey);
                  }
                )
                .addMatcher(hasRehydrationInfo, (draft, action) => {
                  const { provided } = extractRehydrationInfo(action);
                  for (const [type, incomingTags] of Object.entries(provided)) {
                    for (const [id, cacheKeys] of Object.entries(
                      incomingTags
                    )) {
                      var _ref, _ref1, _draft_tags, _type;
                      var _, _1;
                      const subscribedQueries =
                        (_1 = (_ref =
                          (_ = (_draft_tags = draft.tags)[(_type = type)]) !==
                            null && _ !== void 0
                            ? _
                            : (_draft_tags[_type] = {}))[
                          (_ref1 = id || '__internal_without_id')
                        ]) !== null && _1 !== void 0
                          ? _1
                          : (_ref[_ref1] = []);
                      for (const queryCacheKey of cacheKeys) {
                        const alreadySubscribed =
                          subscribedQueries.includes(queryCacheKey);
                        if (!alreadySubscribed) {
                          subscribedQueries.push(queryCacheKey);
                        }
                      }
                    }
                  }
                })
                .addMatcher(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    'isAnyOf'
                  ])(
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                      'isFulfilled'
                    ])(queryThunk),
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                      'isRejectedWithValue'
                    ])(queryThunk)
                  ),
                  (draft, action) => {
                    writeProvidedTagsForQueries(draft, [action]);
                  }
                )
                .addMatcher(
                  querySlice.actions.cacheEntriesUpserted.match,
                  (draft, action) => {
                    const mockActions = action.payload.map((param) => {
                      let { queryDescription, value } = param;
                      return {
                        type: 'UNKNOWN',
                        payload: value,
                        meta: {
                          requestStatus: 'fulfilled',
                          requestId: 'UNKNOWN',
                          arg: queryDescription,
                        },
                      };
                    });
                    writeProvidedTagsForQueries(draft, mockActions);
                  }
                );
            },
          });
          function removeCacheKeyFromTags(draft, queryCacheKey) {
            var _draft_keys_queryCacheKey;
            const existingTags =
              (_draft_keys_queryCacheKey = draft.keys[queryCacheKey]) !==
                null && _draft_keys_queryCacheKey !== void 0
                ? _draft_keys_queryCacheKey
                : [];
            for (const tag of existingTags) {
              var _draft_tags_tagType;
              const tagType = tag.type;
              var _tag_id;
              const tagId =
                (_tag_id = tag.id) !== null && _tag_id !== void 0
                  ? _tag_id
                  : '__internal_without_id';
              const tagSubscriptions =
                (_draft_tags_tagType = draft.tags[tagType]) === null ||
                _draft_tags_tagType === void 0
                  ? void 0
                  : _draft_tags_tagType[tagId];
              if (tagSubscriptions) {
                draft.tags[tagType][tagId] = tagSubscriptions.filter(
                  (qc) => qc !== queryCacheKey
                );
              }
            }
            delete draft.keys[queryCacheKey];
          }
          function writeProvidedTagsForQueries(draft, actions2) {
            const providedByEntries = actions2.map((action) => {
              const providedTags = calculateProvidedByThunk(
                action,
                'providesTags',
                definitions,
                assertTagType
              );
              const { queryCacheKey } = action.meta.arg;
              return {
                queryCacheKey,
                providedTags,
              };
            });
            invalidationSlice.caseReducers.updateProvidedBy(
              draft,
              invalidationSlice.actions.updateProvidedBy(providedByEntries)
            );
          }
          const subscriptionSlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/subscriptions'),
            initialState,
            reducers: {
              updateSubscriptionOptions(d, a) {},
              unsubscribeQueryResult(d, a) {},
              internal_getRTKQSubscriptions() {},
            },
          });
          const internalSubscriptionsSlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/internalSubscriptions'),
            initialState,
            reducers: {
              subscriptionsUpdated: {
                reducer(state, action) {
                  return (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'applyPatches'
                  ])(state, action.payload);
                },
                prepare: (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'prepareAutoBatched'
                ])(),
              },
            },
          });
          const configSlice = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createSlice'
          ])({
            name: ''.concat(reducerPath, '/config'),
            initialState: {
              online: isOnline(),
              focused: isDocumentVisible(),
              middlewareRegistered: false,
              ...config,
            },
            reducers: {
              middlewareRegistered(state, param) {
                let { payload } = param;
                state.middlewareRegistered =
                  state.middlewareRegistered === 'conflict' ||
                  apiUid !== payload
                    ? 'conflict'
                    : true;
              },
            },
            extraReducers: (builder) => {
              builder
                .addCase(onOnline, (state) => {
                  state.online = true;
                })
                .addCase(onOffline, (state) => {
                  state.online = false;
                })
                .addCase(onFocus, (state) => {
                  state.focused = true;
                })
                .addCase(onFocusLost, (state) => {
                  state.focused = false;
                })
                .addMatcher(hasRehydrationInfo, (draft) => ({
                  ...draft,
                }));
            },
          });
          const combinedReducer = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'combineReducers'
          ])({
            queries: querySlice.reducer,
            mutations: mutationSlice.reducer,
            provided: invalidationSlice.reducer,
            subscriptions: internalSubscriptionsSlice.reducer,
            config: configSlice.reducer,
          });
          const reducer = (state, action) =>
            combinedReducer(
              resetApiState.match(action) ? void 0 : state,
              action
            );
          const actions = {
            ...configSlice.actions,
            ...querySlice.actions,
            ...subscriptionSlice.actions,
            ...internalSubscriptionsSlice.actions,
            ...mutationSlice.actions,
            ...invalidationSlice.actions,
            resetApiState,
          };
          return {
            reducer,
            actions,
          };
        }
        // src/query/core/buildSelectors.ts
        var skipToken = /* @__PURE__ */ Symbol.for('RTKQ/skipToken');
        var initialSubState = {
          status: 'uninitialized' /* uninitialized */,
        };
        var defaultQuerySubState = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__[
          'createNextState'
        ])(initialSubState, () => {});
        var defaultMutationSubState = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__[
          'createNextState'
        ])(initialSubState, () => {});
        function buildSelectors(param) {
          let {
            serializeQueryArgs,
            reducerPath,
            createSelector: createSelector2,
          } = param;
          const selectSkippedQuery = (state) => defaultQuerySubState;
          const selectSkippedMutation = (state) => defaultMutationSubState;
          return {
            buildQuerySelector,
            buildInfiniteQuerySelector,
            buildMutationSelector,
            selectInvalidatedBy,
            selectCachedArgsForQuery,
            selectApiState,
            selectQueries,
            selectMutations,
            selectQueryEntry,
            selectConfig,
          };
          //TURBOPACK unreachable
          function withRequestFlags(substate) {
            return {
              ...substate,
              ...getRequestStatusFlags(substate.status),
            };
          }
          function selectApiState(rootState) {
            const state = rootState[reducerPath];
            if (('TURBOPACK compile-time truthy', 1)) {
              if (!state) {
                if (selectApiState.triggered) return state;
                selectApiState.triggered = true;
                console.error(
                  'Error: No data found at `state.'.concat(
                    reducerPath,
                    '`. Did you forget to add the reducer to the store?'
                  )
                );
              }
            }
            return state;
          }
          function selectQueries(rootState) {
            var _selectApiState;
            return (_selectApiState = selectApiState(rootState)) === null ||
              _selectApiState === void 0
              ? void 0
              : _selectApiState.queries;
          }
          function selectQueryEntry(rootState, cacheKey) {
            var _selectQueries;
            return (_selectQueries = selectQueries(rootState)) === null ||
              _selectQueries === void 0
              ? void 0
              : _selectQueries[cacheKey];
          }
          function selectMutations(rootState) {
            var _selectApiState;
            return (_selectApiState = selectApiState(rootState)) === null ||
              _selectApiState === void 0
              ? void 0
              : _selectApiState.mutations;
          }
          function selectConfig(rootState) {
            var _selectApiState;
            return (_selectApiState = selectApiState(rootState)) === null ||
              _selectApiState === void 0
              ? void 0
              : _selectApiState.config;
          }
          function buildAnyQuerySelector(
            endpointName,
            endpointDefinition,
            combiner
          ) {
            return (queryArgs) => {
              if (queryArgs === skipToken) {
                return createSelector2(selectSkippedQuery, combiner);
              }
              const serializedArgs = serializeQueryArgs({
                queryArgs,
                endpointDefinition,
                endpointName,
              });
              const selectQuerySubstate = (state) => {
                var _selectQueryEntry;
                return (_selectQueryEntry = selectQueryEntry(
                  state,
                  serializedArgs
                )) !== null && _selectQueryEntry !== void 0
                  ? _selectQueryEntry
                  : defaultQuerySubState;
              };
              return createSelector2(selectQuerySubstate, combiner);
            };
          }
          function buildQuerySelector(endpointName, endpointDefinition) {
            return buildAnyQuerySelector(
              endpointName,
              endpointDefinition,
              withRequestFlags
            );
          }
          function buildInfiniteQuerySelector(
            endpointName,
            endpointDefinition
          ) {
            const { infiniteQueryOptions } = endpointDefinition;
            function withInfiniteQueryResultFlags(substate) {
              const stateWithRequestFlags = {
                ...substate,
                ...getRequestStatusFlags(substate.status),
              };
              const { isLoading, isError, direction } = stateWithRequestFlags;
              const isForward = direction === 'forward';
              const isBackward = direction === 'backward';
              return {
                ...stateWithRequestFlags,
                hasNextPage: getHasNextPage(
                  infiniteQueryOptions,
                  stateWithRequestFlags.data,
                  stateWithRequestFlags.originalArgs
                ),
                hasPreviousPage: getHasPreviousPage(
                  infiniteQueryOptions,
                  stateWithRequestFlags.data,
                  stateWithRequestFlags.originalArgs
                ),
                isFetchingNextPage: isLoading && isForward,
                isFetchingPreviousPage: isLoading && isBackward,
                isFetchNextPageError: isError && isForward,
                isFetchPreviousPageError: isError && isBackward,
              };
            }
            return buildAnyQuerySelector(
              endpointName,
              endpointDefinition,
              withInfiniteQueryResultFlags
            );
          }
          function buildMutationSelector() {
            return (id) => {
              let mutationId;
              if (typeof id === 'object') {
                var _getMutationCacheKey;
                mutationId =
                  (_getMutationCacheKey = getMutationCacheKey(id)) !== null &&
                  _getMutationCacheKey !== void 0
                    ? _getMutationCacheKey
                    : skipToken;
              } else {
                mutationId = id;
              }
              const selectMutationSubstate = (state) => {
                var _selectApiState_mutations, _selectApiState;
                var _selectApiState_mutations_mutationId;
                return (_selectApiState_mutations_mutationId =
                  (_selectApiState = selectApiState(state)) === null ||
                  _selectApiState === void 0
                    ? void 0
                    : (_selectApiState_mutations =
                          _selectApiState.mutations) === null ||
                        _selectApiState_mutations === void 0
                      ? void 0
                      : _selectApiState_mutations[mutationId]) !== null &&
                  _selectApiState_mutations_mutationId !== void 0
                  ? _selectApiState_mutations_mutationId
                  : defaultMutationSubState;
              };
              const finalSelectMutationSubstate =
                mutationId === skipToken
                  ? selectSkippedMutation
                  : selectMutationSubstate;
              return createSelector2(
                finalSelectMutationSubstate,
                withRequestFlags
              );
            };
          }
          function selectInvalidatedBy(state, tags) {
            const apiState = state[reducerPath];
            const toInvalidate = /* @__PURE__ */ new Set();
            for (const tag of tags
              .filter(isNotNullish)
              .map(expandTagDescription)) {
              const provided = apiState.provided.tags[tag.type];
              if (!provided) {
                continue;
              }
              var _ref;
              let invalidateSubscriptions =
                (_ref =
                  tag.id !== void 0 // id given: invalidate all queries that provide this type & id
                    ? provided[tag.id] // no id: invalidate all queries that provide this type
                    : flatten(Object.values(provided))) !== null &&
                _ref !== void 0
                  ? _ref
                  : [];
              for (const invalidate of invalidateSubscriptions) {
                toInvalidate.add(invalidate);
              }
            }
            return flatten(
              Array.from(toInvalidate.values()).map((queryCacheKey) => {
                const querySubState = apiState.queries[queryCacheKey];
                return querySubState
                  ? [
                      {
                        queryCacheKey,
                        endpointName: querySubState.endpointName,
                        originalArgs: querySubState.originalArgs,
                      },
                    ]
                  : [];
              })
            );
          }
          function selectCachedArgsForQuery(state, queryName) {
            return Object.values(selectQueries(state))
              .filter(
                (entry) =>
                  (entry === null || entry === void 0
                    ? void 0
                    : entry.endpointName) === queryName &&
                  entry.status !== 'uninitialized' /* uninitialized */
              )
              .map((entry) => entry.originalArgs);
          }
          function getHasNextPage(options, data, queryArg) {
            if (!data) return false;
            return getNextPageParam(options, data, queryArg) != null;
          }
          function getHasPreviousPage(options, data, queryArg) {
            if (!data || !options.getPreviousPageParam) return false;
            return getPreviousPageParam(options, data, queryArg) != null;
          }
        }
        // src/query/defaultSerializeQueryArgs.ts
        var cache = WeakMap ? /* @__PURE__ */ new WeakMap() : void 0;
        var defaultSerializeQueryArgs = (param) => {
          let { endpointName, queryArgs } = param;
          let serialized = '';
          const cached =
            cache === null || cache === void 0 ? void 0 : cache.get(queryArgs);
          if (typeof cached === 'string') {
            serialized = cached;
          } else {
            const stringified = JSON.stringify(queryArgs, (key, value) => {
              value =
                typeof value === 'bigint'
                  ? {
                      $bigint: value.toString(),
                    }
                  : value;
              value = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isPlainObject'
              ])(value)
                ? Object.keys(value)
                    .sort()
                    .reduce((acc, key2) => {
                      acc[key2] = value[key2];
                      return acc;
                    }, {})
                : value;
              return value;
            });
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isPlainObject'
              ])(queryArgs)
            ) {
              cache === null || cache === void 0
                ? void 0
                : cache.set(queryArgs, stringified);
            }
            serialized = stringified;
          }
          return ''.concat(endpointName, '(').concat(serialized, ')');
        };
        function buildCreateApi() {
          for (
            var _len = arguments.length, modules = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            modules[_key] = arguments[_key];
          }
          return function baseCreateApi(options) {
            const extractRehydrationInfo = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'weakMapMemoize'
            ])((action) => {
              var _options_extractRehydrationInfo;
              var _options_reducerPath;
              return (_options_extractRehydrationInfo =
                options.extractRehydrationInfo) === null ||
                _options_extractRehydrationInfo === void 0
                ? void 0
                : _options_extractRehydrationInfo.call(options, action, {
                    reducerPath:
                      (_options_reducerPath = options.reducerPath) !== null &&
                      _options_reducerPath !== void 0
                        ? _options_reducerPath
                        : 'api',
                  });
            });
            const optionsWithDefaults = {
              reducerPath: 'api',
              keepUnusedDataFor: 60,
              refetchOnMountOrArgChange: false,
              refetchOnFocus: false,
              refetchOnReconnect: false,
              invalidationBehavior: 'delayed',
              ...options,
              extractRehydrationInfo,
              serializeQueryArgs(queryArgsApi) {
                let finalSerializeQueryArgs = defaultSerializeQueryArgs;
                if ('serializeQueryArgs' in queryArgsApi.endpointDefinition) {
                  const endpointSQA =
                    queryArgsApi.endpointDefinition.serializeQueryArgs;
                  finalSerializeQueryArgs = (queryArgsApi2) => {
                    const initialResult = endpointSQA(queryArgsApi2);
                    if (typeof initialResult === 'string') {
                      return initialResult;
                    } else {
                      return defaultSerializeQueryArgs({
                        ...queryArgsApi2,
                        queryArgs: initialResult,
                      });
                    }
                  };
                } else if (options.serializeQueryArgs) {
                  finalSerializeQueryArgs = options.serializeQueryArgs;
                }
                return finalSerializeQueryArgs(queryArgsApi);
              },
              tagTypes: [...(options.tagTypes || [])],
            };
            const context = {
              endpointDefinitions: {},
              batch(fn) {
                fn();
              },
              apiUid: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'nanoid'
              ])(),
              extractRehydrationInfo,
              hasRehydrationInfo: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'weakMapMemoize'
              ])((action) => extractRehydrationInfo(action) != null),
            };
            const api = {
              injectEndpoints,
              enhanceEndpoints(param) {
                let { addTagTypes, endpoints } = param;
                if (addTagTypes) {
                  for (const eT of addTagTypes) {
                    if (!optionsWithDefaults.tagTypes.includes(eT)) {
                      optionsWithDefaults.tagTypes.push(eT);
                    }
                  }
                }
                if (endpoints) {
                  for (const [
                    endpointName,
                    partialDefinition,
                  ] of Object.entries(endpoints)) {
                    if (typeof partialDefinition === 'function') {
                      partialDefinition(
                        context.endpointDefinitions[endpointName]
                      );
                    } else {
                      Object.assign(
                        context.endpointDefinitions[endpointName] || {},
                        partialDefinition
                      );
                    }
                  }
                }
                return api;
              },
            };
            const initializedModules = modules.map((m) =>
              m.init(api, optionsWithDefaults, context)
            );
            function injectEndpoints(inject) {
              const evaluatedEndpoints = inject.endpoints({
                query: (x) => ({
                  ...x,
                  type: 'query' /* query */,
                }),
                mutation: (x) => ({
                  ...x,
                  type: 'mutation' /* mutation */,
                }),
                infiniteQuery: (x) => ({
                  ...x,
                  type: 'infinitequery' /* infinitequery */,
                }),
              });
              for (const [endpointName, definition] of Object.entries(
                evaluatedEndpoints
              )) {
                if (
                  inject.overrideExisting !== true &&
                  endpointName in context.endpointDefinitions
                ) {
                  if (inject.overrideExisting === 'throw') {
                    throw new Error(
                      ('TURBOPACK compile-time falsy', 0)
                        ? 'TURBOPACK unreachable'
                        : 'called `injectEndpoints` to override already-existing endpointName '.concat(
                            endpointName,
                            ' without specifying `overrideExisting: true`'
                          )
                    );
                  } else if (
                    typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'default'
                    ] !== 'undefined' &&
                    ('TURBOPACK compile-time value', 'development') ===
                      'development'
                  ) {
                    console.error(
                      'called `injectEndpoints` to override already-existing endpointName '.concat(
                        endpointName,
                        ' without specifying `overrideExisting: true`'
                      )
                    );
                  }
                  continue;
                }
                if (
                  typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'default'
                  ] !== 'undefined' &&
                  ('TURBOPACK compile-time value', 'development') ===
                    'development'
                ) {
                  if (isInfiniteQueryDefinition(definition)) {
                    const { infiniteQueryOptions } = definition;
                    const {
                      maxPages,
                      getPreviousPageParam: getPreviousPageParam2,
                    } = infiniteQueryOptions;
                    if (typeof maxPages === 'number') {
                      if (maxPages < 1) {
                        throw new Error(
                          ('TURBOPACK compile-time falsy', 0)
                            ? 'TURBOPACK unreachable'
                            : "maxPages for endpoint '".concat(
                                endpointName,
                                "' must be a number greater than 0"
                              )
                        );
                      }
                      if (typeof getPreviousPageParam2 !== 'function') {
                        throw new Error(
                          ('TURBOPACK compile-time falsy', 0)
                            ? 'TURBOPACK unreachable'
                            : "getPreviousPageParam for endpoint '".concat(
                                endpointName,
                                "' must be a function if maxPages is used"
                              )
                        );
                      }
                    }
                  }
                }
                context.endpointDefinitions[endpointName] = definition;
                for (const m of initializedModules) {
                  m.injectEndpoint(endpointName, definition);
                }
              }
              return api;
            }
            return api.injectEndpoints({
              endpoints: options.endpoints,
            });
          };
        }
        var _NEVER = /* @__PURE__ */ Symbol();
        function fakeBaseQuery() {
          return function () {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.'
            );
          };
        }
        // src/query/tsHelpers.ts
        function assertCast(v) {}
        function safeAssign(target) {
          for (
            var _len = arguments.length,
              args = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key];
          }
          return Object.assign(target, ...args);
        }
        var buildBatchedActionsHandler = (param) => {
          let { api, queryThunk, internalState } = param;
          const subscriptionsPrefix = ''.concat(
            api.reducerPath,
            '/subscriptions'
          );
          let previousSubscriptions = null;
          let updateSyncTimer = null;
          const { updateSubscriptionOptions, unsubscribeQueryResult } =
            api.internalActions;
          const actuallyMutateSubscriptions = (mutableState, action) => {
            if (updateSubscriptionOptions.match(action)) {
              var _mutableState_queryCacheKey;
              const { queryCacheKey, requestId, options } = action.payload;
              if (
                mutableState === null || mutableState === void 0
                  ? void 0
                  : (_mutableState_queryCacheKey =
                        mutableState[queryCacheKey]) === null ||
                      _mutableState_queryCacheKey === void 0
                    ? void 0
                    : _mutableState_queryCacheKey[requestId]
              ) {
                mutableState[queryCacheKey][requestId] = options;
              }
              return true;
            }
            if (unsubscribeQueryResult.match(action)) {
              const { queryCacheKey, requestId } = action.payload;
              if (mutableState[queryCacheKey]) {
                delete mutableState[queryCacheKey][requestId];
              }
              return true;
            }
            if (api.internalActions.removeQueryResult.match(action)) {
              delete mutableState[action.payload.queryCacheKey];
              return true;
            }
            if (queryThunk.pending.match(action)) {
              var _mutableState, _arg_queryCacheKey;
              const {
                meta: { arg, requestId },
              } = action;
              var _;
              const substate =
                (_ = (_mutableState = mutableState)[
                  (_arg_queryCacheKey = arg.queryCacheKey)
                ]) !== null && _ !== void 0
                  ? _
                  : (_mutableState[_arg_queryCacheKey] = {});
              substate[''.concat(requestId, '_running')] = {};
              if (arg.subscribe) {
                var _arg_subscriptionOptions, _ref;
                substate[requestId] =
                  (_ref =
                    (_arg_subscriptionOptions = arg.subscriptionOptions) !==
                      null && _arg_subscriptionOptions !== void 0
                      ? _arg_subscriptionOptions
                      : substate[requestId]) !== null && _ref !== void 0
                    ? _ref
                    : {};
              }
              return true;
            }
            let mutated = false;
            if (
              queryThunk.fulfilled.match(action) ||
              queryThunk.rejected.match(action)
            ) {
              const state = mutableState[action.meta.arg.queryCacheKey] || {};
              const key = ''.concat(action.meta.requestId, '_running');
              mutated || (mutated = !!state[key]);
              delete state[key];
            }
            if (queryThunk.rejected.match(action)) {
              const {
                meta: { condition, arg, requestId },
              } = action;
              if (condition && arg.subscribe) {
                var _mutableState1, _arg_queryCacheKey1;
                var _1;
                const substate =
                  (_1 = (_mutableState1 = mutableState)[
                    (_arg_queryCacheKey1 = arg.queryCacheKey)
                  ]) !== null && _1 !== void 0
                    ? _1
                    : (_mutableState1[_arg_queryCacheKey1] = {});
                var _arg_subscriptionOptions1, _ref1;
                substate[requestId] =
                  (_ref1 =
                    (_arg_subscriptionOptions1 = arg.subscriptionOptions) !==
                      null && _arg_subscriptionOptions1 !== void 0
                      ? _arg_subscriptionOptions1
                      : substate[requestId]) !== null && _ref1 !== void 0
                    ? _ref1
                    : {};
                mutated = true;
              }
            }
            return mutated;
          };
          const getSubscriptions = () => internalState.currentSubscriptions;
          const getSubscriptionCount = (queryCacheKey) => {
            const subscriptions = getSubscriptions();
            var _subscriptions_queryCacheKey;
            const subscriptionsForQueryArg =
              (_subscriptions_queryCacheKey = subscriptions[queryCacheKey]) !==
                null && _subscriptions_queryCacheKey !== void 0
                ? _subscriptions_queryCacheKey
                : {};
            return countObjectKeys(subscriptionsForQueryArg);
          };
          const isRequestSubscribed = (queryCacheKey, requestId) => {
            var _subscriptions_queryCacheKey;
            const subscriptions = getSubscriptions();
            return !!(subscriptions === null || subscriptions === void 0
              ? void 0
              : (_subscriptions_queryCacheKey =
                    subscriptions[queryCacheKey]) === null ||
                  _subscriptions_queryCacheKey === void 0
                ? void 0
                : _subscriptions_queryCacheKey[requestId]);
          };
          const subscriptionSelectors = {
            getSubscriptions,
            getSubscriptionCount,
            isRequestSubscribed,
          };
          return (action, mwApi) => {
            if (!previousSubscriptions) {
              previousSubscriptions = JSON.parse(
                JSON.stringify(internalState.currentSubscriptions)
              );
            }
            if (api.util.resetApiState.match(action)) {
              previousSubscriptions = internalState.currentSubscriptions = {};
              updateSyncTimer = null;
              return [true, false];
            }
            if (
              api.internalActions.internal_getRTKQSubscriptions.match(action)
            ) {
              return [false, subscriptionSelectors];
            }
            const didMutate = actuallyMutateSubscriptions(
              internalState.currentSubscriptions,
              action
            );
            let actionShouldContinue = true;
            if (didMutate) {
              if (!updateSyncTimer) {
                updateSyncTimer = setTimeout(() => {
                  const newSubscriptions = JSON.parse(
                    JSON.stringify(internalState.currentSubscriptions)
                  );
                  const [, patches] = (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'produceWithPatches'
                  ])(previousSubscriptions, () => newSubscriptions);
                  mwApi.next(api.internalActions.subscriptionsUpdated(patches));
                  previousSubscriptions = newSubscriptions;
                  updateSyncTimer = null;
                }, 500);
              }
              const isSubscriptionSliceAction =
                typeof action.type == 'string' &&
                !!action.type.startsWith(subscriptionsPrefix);
              const isAdditionalSubscriptionAction =
                queryThunk.rejected.match(action) &&
                action.meta.condition &&
                !!action.meta.arg.subscribe;
              actionShouldContinue =
                !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;
            }
            return [actionShouldContinue, false];
          };
        };
        // src/query/core/buildMiddleware/cacheCollection.ts
        function isObjectEmpty(obj) {
          for (const k in obj) {
            return false;
          }
          return true;
        }
        var THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;
        var buildCacheCollectionHandler = (param) => {
          let {
            reducerPath,
            api,
            queryThunk,
            context,
            internalState,
            selectors: { selectQueryEntry, selectConfig },
          } = param;
          const {
            removeQueryResult,
            unsubscribeQueryResult,
            cacheEntriesUpserted,
          } = api.internalActions;
          const canTriggerUnsubscribe = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isAnyOf'
          ])(
            unsubscribeQueryResult.match,
            queryThunk.fulfilled,
            queryThunk.rejected,
            cacheEntriesUpserted.match
          );
          function anySubscriptionsRemainingForKey(queryCacheKey) {
            const subscriptions =
              internalState.currentSubscriptions[queryCacheKey];
            return !!subscriptions && !isObjectEmpty(subscriptions);
          }
          const currentRemovalTimeouts = {};
          const handler = (action, mwApi, internalState2) => {
            const state = mwApi.getState();
            const config = selectConfig(state);
            if (canTriggerUnsubscribe(action)) {
              let queryCacheKeys;
              if (cacheEntriesUpserted.match(action)) {
                queryCacheKeys = action.payload.map(
                  (entry) => entry.queryDescription.queryCacheKey
                );
              } else {
                const { queryCacheKey } = unsubscribeQueryResult.match(action)
                  ? action.payload
                  : action.meta.arg;
                queryCacheKeys = [queryCacheKey];
              }
              handleUnsubscribeMany(queryCacheKeys, mwApi, config);
            }
            if (api.util.resetApiState.match(action)) {
              for (const [key, timeout] of Object.entries(
                currentRemovalTimeouts
              )) {
                if (timeout) clearTimeout(timeout);
                delete currentRemovalTimeouts[key];
              }
            }
            if (context.hasRehydrationInfo(action)) {
              const { queries } = context.extractRehydrationInfo(action);
              handleUnsubscribeMany(Object.keys(queries), mwApi, config);
            }
          };
          function handleUnsubscribeMany(cacheKeys, api2, config) {
            const state = api2.getState();
            for (const queryCacheKey of cacheKeys) {
              const entry = selectQueryEntry(state, queryCacheKey);
              handleUnsubscribe(
                queryCacheKey,
                entry === null || entry === void 0
                  ? void 0
                  : entry.endpointName,
                api2,
                config
              );
            }
          }
          function handleUnsubscribe(
            queryCacheKey,
            endpointName,
            api2,
            config
          ) {
            const endpointDefinition =
              context.endpointDefinitions[endpointName];
            var _endpointDefinition_keepUnusedDataFor;
            const keepUnusedDataFor =
              (_endpointDefinition_keepUnusedDataFor =
                endpointDefinition === null || endpointDefinition === void 0
                  ? void 0
                  : endpointDefinition.keepUnusedDataFor) !== null &&
              _endpointDefinition_keepUnusedDataFor !== void 0
                ? _endpointDefinition_keepUnusedDataFor
                : config.keepUnusedDataFor;
            if (keepUnusedDataFor === Infinity) {
              return;
            }
            const finalKeepUnusedDataFor = Math.max(
              0,
              Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS)
            );
            if (!anySubscriptionsRemainingForKey(queryCacheKey)) {
              const currentTimeout = currentRemovalTimeouts[queryCacheKey];
              if (currentTimeout) {
                clearTimeout(currentTimeout);
              }
              currentRemovalTimeouts[queryCacheKey] = setTimeout(() => {
                if (!anySubscriptionsRemainingForKey(queryCacheKey)) {
                  api2.dispatch(
                    removeQueryResult({
                      queryCacheKey,
                    })
                  );
                }
                delete currentRemovalTimeouts[queryCacheKey];
              }, finalKeepUnusedDataFor * 1e3);
            }
          }
          return handler;
        };
        // src/query/core/buildMiddleware/cacheLifecycle.ts
        var neverResolvedError = new Error(
          'Promise never resolved before cacheEntryRemoved.'
        );
        var buildCacheLifecycleHandler = (param) => {
          let {
            api,
            reducerPath,
            context,
            queryThunk,
            mutationThunk,
            internalState,
            selectors: { selectQueryEntry, selectApiState },
          } = param;
          const isQueryThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isAsyncThunkAction'
          ])(queryThunk);
          const isMutationThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isAsyncThunkAction'
          ])(mutationThunk);
          const isFulfilledThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isFulfilled'
          ])(queryThunk, mutationThunk);
          const lifecycleMap = {};
          function resolveLifecycleEntry(cacheKey, data, meta) {
            const lifecycle = lifecycleMap[cacheKey];
            if (
              lifecycle === null || lifecycle === void 0
                ? void 0
                : lifecycle.valueResolved
            ) {
              lifecycle.valueResolved({
                data,
                meta,
              });
              delete lifecycle.valueResolved;
            }
          }
          function removeLifecycleEntry(cacheKey) {
            const lifecycle = lifecycleMap[cacheKey];
            if (lifecycle) {
              delete lifecycleMap[cacheKey];
              lifecycle.cacheEntryRemoved();
            }
          }
          const handler = (action, mwApi, stateBefore) => {
            const cacheKey = getCacheKey(action);
            function checkForNewCacheKey(
              endpointName,
              cacheKey2,
              requestId,
              originalArgs
            ) {
              const oldEntry = selectQueryEntry(stateBefore, cacheKey2);
              const newEntry = selectQueryEntry(mwApi.getState(), cacheKey2);
              if (!oldEntry && newEntry) {
                handleNewKey(
                  endpointName,
                  originalArgs,
                  cacheKey2,
                  mwApi,
                  requestId
                );
              }
            }
            if (queryThunk.pending.match(action)) {
              checkForNewCacheKey(
                action.meta.arg.endpointName,
                cacheKey,
                action.meta.requestId,
                action.meta.arg.originalArgs
              );
            } else if (api.internalActions.cacheEntriesUpserted.match(action)) {
              for (const { queryDescription, value } of action.payload) {
                const { endpointName, originalArgs, queryCacheKey } =
                  queryDescription;
                checkForNewCacheKey(
                  endpointName,
                  queryCacheKey,
                  action.meta.requestId,
                  originalArgs
                );
                resolveLifecycleEntry(queryCacheKey, value, {});
              }
            } else if (mutationThunk.pending.match(action)) {
              const state = mwApi.getState()[reducerPath].mutations[cacheKey];
              if (state) {
                handleNewKey(
                  action.meta.arg.endpointName,
                  action.meta.arg.originalArgs,
                  cacheKey,
                  mwApi,
                  action.meta.requestId
                );
              }
            } else if (isFulfilledThunk(action)) {
              resolveLifecycleEntry(
                cacheKey,
                action.payload,
                action.meta.baseQueryMeta
              );
            } else if (
              api.internalActions.removeQueryResult.match(action) ||
              api.internalActions.removeMutationResult.match(action)
            ) {
              removeLifecycleEntry(cacheKey);
            } else if (api.util.resetApiState.match(action)) {
              for (const cacheKey2 of Object.keys(lifecycleMap)) {
                removeLifecycleEntry(cacheKey2);
              }
            }
          };
          function getCacheKey(action) {
            if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;
            if (isMutationThunk(action)) {
              var _action_meta_arg_fixedCacheKey;
              return (_action_meta_arg_fixedCacheKey =
                action.meta.arg.fixedCacheKey) !== null &&
                _action_meta_arg_fixedCacheKey !== void 0
                ? _action_meta_arg_fixedCacheKey
                : action.meta.requestId;
            }
            if (api.internalActions.removeQueryResult.match(action))
              return action.payload.queryCacheKey;
            if (api.internalActions.removeMutationResult.match(action))
              return getMutationCacheKey(action.payload);
            return '';
          }
          function handleNewKey(
            endpointName,
            originalArgs,
            queryCacheKey,
            mwApi,
            requestId
          ) {
            const endpointDefinition =
              context.endpointDefinitions[endpointName];
            const onCacheEntryAdded =
              endpointDefinition === null || endpointDefinition === void 0
                ? void 0
                : endpointDefinition.onCacheEntryAdded;
            if (!onCacheEntryAdded) return;
            const lifecycle = {};
            const cacheEntryRemoved = new Promise((resolve) => {
              lifecycle.cacheEntryRemoved = resolve;
            });
            const cacheDataLoaded = Promise.race([
              new Promise((resolve) => {
                lifecycle.valueResolved = resolve;
              }),
              cacheEntryRemoved.then(() => {
                throw neverResolvedError;
              }),
            ]);
            cacheDataLoaded.catch(() => {});
            lifecycleMap[queryCacheKey] = lifecycle;
            const selector = api.endpoints[endpointName].select(
              isAnyQueryDefinition(endpointDefinition)
                ? originalArgs
                : queryCacheKey
            );
            const extra = mwApi.dispatch((_, __, extra2) => extra2);
            const lifecycleApi = {
              ...mwApi,
              getCacheEntry: () => selector(mwApi.getState()),
              requestId,
              extra,
              updateCachedData: isAnyQueryDefinition(endpointDefinition)
                ? (updateRecipe) =>
                    mwApi.dispatch(
                      api.util.updateQueryData(
                        endpointName,
                        originalArgs,
                        updateRecipe
                      )
                    )
                : void 0,
              cacheDataLoaded,
              cacheEntryRemoved,
            };
            const runningHandler = onCacheEntryAdded(
              originalArgs,
              lifecycleApi
            );
            Promise.resolve(runningHandler).catch((e) => {
              if (e === neverResolvedError) return;
              throw e;
            });
          }
          return handler;
        };
        // src/query/core/buildMiddleware/devMiddleware.ts
        var buildDevCheckHandler = (param) => {
          let {
            api,
            context: { apiUid },
            reducerPath,
          } = param;
          return (action, mwApi) => {
            if (api.util.resetApiState.match(action)) {
              mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));
            }
            if (
              typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'default'
              ] !== 'undefined' &&
              ('TURBOPACK compile-time value', 'development') === 'development'
            ) {
              var _mwApi_getState_reducerPath_config,
                _mwApi_getState_reducerPath;
              if (
                api.internalActions.middlewareRegistered.match(action) &&
                action.payload === apiUid &&
                ((_mwApi_getState_reducerPath =
                  mwApi.getState()[reducerPath]) === null ||
                _mwApi_getState_reducerPath === void 0
                  ? void 0
                  : (_mwApi_getState_reducerPath_config =
                        _mwApi_getState_reducerPath.config) === null ||
                      _mwApi_getState_reducerPath_config === void 0
                    ? void 0
                    : _mwApi_getState_reducerPath_config.middlewareRegistered) ===
                  'conflict'
              ) {
                console.warn(
                  'There is a mismatch between slice and middleware for the reducerPath "'
                    .concat(
                      reducerPath,
                      '".\nYou can only have one api per reducer path, this will lead to crashes in various situations!'
                    )
                    .concat(
                      reducerPath === 'api'
                        ? '\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!'
                        : ''
                    )
                );
              }
            }
          };
        };
        // src/query/core/buildMiddleware/invalidationByTags.ts
        var buildInvalidationByTagsHandler = (param) => {
          let {
            reducerPath,
            context,
            context: { endpointDefinitions },
            mutationThunk,
            queryThunk,
            api,
            assertTagType,
            refetchQuery,
            internalState,
          } = param;
          const { removeQueryResult } = api.internalActions;
          const isThunkActionWithTags = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isAnyOf'
          ])(
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isFulfilled'
            ])(mutationThunk),
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isRejectedWithValue'
            ])(mutationThunk)
          );
          const isQueryEnd = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isAnyOf'
          ])(
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isFulfilled'
            ])(mutationThunk, queryThunk),
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isRejected'
            ])(mutationThunk, queryThunk)
          );
          let pendingTagInvalidations = [];
          const handler = (action, mwApi) => {
            if (isThunkActionWithTags(action)) {
              invalidateTags(
                calculateProvidedByThunk(
                  action,
                  'invalidatesTags',
                  endpointDefinitions,
                  assertTagType
                ),
                mwApi
              );
            } else if (isQueryEnd(action)) {
              invalidateTags([], mwApi);
            } else if (api.util.invalidateTags.match(action)) {
              invalidateTags(
                calculateProvidedBy(
                  action.payload,
                  void 0,
                  void 0,
                  void 0,
                  void 0,
                  assertTagType
                ),
                mwApi
              );
            }
          };
          function hasPendingRequests(state) {
            const { queries, mutations } = state;
            for (const cacheRecord of [queries, mutations]) {
              for (const key in cacheRecord) {
                var _cacheRecord_key;
                if (
                  ((_cacheRecord_key = cacheRecord[key]) === null ||
                  _cacheRecord_key === void 0
                    ? void 0
                    : _cacheRecord_key.status) === 'pending' /* pending */
                )
                  return true;
              }
            }
            return false;
          }
          function invalidateTags(newTags, mwApi) {
            const rootState = mwApi.getState();
            const state = rootState[reducerPath];
            pendingTagInvalidations.push(...newTags);
            if (
              state.config.invalidationBehavior === 'delayed' &&
              hasPendingRequests(state)
            ) {
              return;
            }
            const tags = pendingTagInvalidations;
            pendingTagInvalidations = [];
            if (tags.length === 0) return;
            const toInvalidate = api.util.selectInvalidatedBy(rootState, tags);
            context.batch(() => {
              const valuesArray = Array.from(toInvalidate.values());
              for (const { queryCacheKey } of valuesArray) {
                const querySubState = state.queries[queryCacheKey];
                var _internalState_currentSubscriptions_queryCacheKey;
                const subscriptionSubState =
                  (_internalState_currentSubscriptions_queryCacheKey =
                    internalState.currentSubscriptions[queryCacheKey]) !==
                    null &&
                  _internalState_currentSubscriptions_queryCacheKey !== void 0
                    ? _internalState_currentSubscriptions_queryCacheKey
                    : {};
                if (querySubState) {
                  if (countObjectKeys(subscriptionSubState) === 0) {
                    mwApi.dispatch(
                      removeQueryResult({
                        queryCacheKey,
                      })
                    );
                  } else if (
                    querySubState.status !== 'uninitialized' /* uninitialized */
                  ) {
                    mwApi.dispatch(refetchQuery(querySubState));
                  }
                }
              }
            });
          }
          return handler;
        };
        // src/query/core/buildMiddleware/polling.ts
        var buildPollingHandler = (param) => {
          let { reducerPath, queryThunk, api, refetchQuery, internalState } =
            param;
          const currentPolls = {};
          const handler = (action, mwApi) => {
            if (
              api.internalActions.updateSubscriptionOptions.match(action) ||
              api.internalActions.unsubscribeQueryResult.match(action)
            ) {
              updatePollingInterval(action.payload, mwApi);
            }
            if (
              queryThunk.pending.match(action) ||
              (queryThunk.rejected.match(action) && action.meta.condition)
            ) {
              updatePollingInterval(action.meta.arg, mwApi);
            }
            if (
              queryThunk.fulfilled.match(action) ||
              (queryThunk.rejected.match(action) && !action.meta.condition)
            ) {
              startNextPoll(action.meta.arg, mwApi);
            }
            if (api.util.resetApiState.match(action)) {
              clearPolls();
            }
          };
          function getCacheEntrySubscriptions(queryCacheKey, api2) {
            const state = api2.getState()[reducerPath];
            const querySubState = state.queries[queryCacheKey];
            const subscriptions =
              internalState.currentSubscriptions[queryCacheKey];
            if (
              !querySubState ||
              querySubState.status === 'uninitialized' /* uninitialized */
            )
              return;
            return subscriptions;
          }
          function startNextPoll(param, api2) {
            let { queryCacheKey } = param;
            const state = api2.getState()[reducerPath];
            const querySubState = state.queries[queryCacheKey];
            const subscriptions =
              internalState.currentSubscriptions[queryCacheKey];
            if (
              !querySubState ||
              querySubState.status === 'uninitialized' /* uninitialized */
            )
              return;
            const { lowestPollingInterval, skipPollingIfUnfocused } =
              findLowestPollingInterval(subscriptions);
            if (!Number.isFinite(lowestPollingInterval)) return;
            const currentPoll = currentPolls[queryCacheKey];
            if (
              currentPoll === null || currentPoll === void 0
                ? void 0
                : currentPoll.timeout
            ) {
              clearTimeout(currentPoll.timeout);
              currentPoll.timeout = void 0;
            }
            const nextPollTimestamp = Date.now() + lowestPollingInterval;
            currentPolls[queryCacheKey] = {
              nextPollTimestamp,
              pollingInterval: lowestPollingInterval,
              timeout: setTimeout(() => {
                if (state.config.focused || !skipPollingIfUnfocused) {
                  api2.dispatch(refetchQuery(querySubState));
                }
                startNextPoll(
                  {
                    queryCacheKey,
                  },
                  api2
                );
              }, lowestPollingInterval),
            };
          }
          function updatePollingInterval(param, api2) {
            let { queryCacheKey } = param;
            const state = api2.getState()[reducerPath];
            const querySubState = state.queries[queryCacheKey];
            const subscriptions =
              internalState.currentSubscriptions[queryCacheKey];
            if (
              !querySubState ||
              querySubState.status === 'uninitialized' /* uninitialized */
            ) {
              return;
            }
            const { lowestPollingInterval } =
              findLowestPollingInterval(subscriptions);
            if (!Number.isFinite(lowestPollingInterval)) {
              cleanupPollForKey(queryCacheKey);
              return;
            }
            const currentPoll = currentPolls[queryCacheKey];
            const nextPollTimestamp = Date.now() + lowestPollingInterval;
            if (
              !currentPoll ||
              nextPollTimestamp < currentPoll.nextPollTimestamp
            ) {
              startNextPoll(
                {
                  queryCacheKey,
                },
                api2
              );
            }
          }
          function cleanupPollForKey(key) {
            const existingPoll = currentPolls[key];
            if (
              existingPoll === null || existingPoll === void 0
                ? void 0
                : existingPoll.timeout
            ) {
              clearTimeout(existingPoll.timeout);
            }
            delete currentPolls[key];
          }
          function clearPolls() {
            for (const key of Object.keys(currentPolls)) {
              cleanupPollForKey(key);
            }
          }
          function findLowestPollingInterval() {
            let subscribers =
              arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {};
            let skipPollingIfUnfocused = false;
            let lowestPollingInterval = Number.POSITIVE_INFINITY;
            for (let key in subscribers) {
              if (!!subscribers[key].pollingInterval) {
                lowestPollingInterval = Math.min(
                  subscribers[key].pollingInterval,
                  lowestPollingInterval
                );
                skipPollingIfUnfocused =
                  subscribers[key].skipPollingIfUnfocused ||
                  skipPollingIfUnfocused;
              }
            }
            return {
              lowestPollingInterval,
              skipPollingIfUnfocused,
            };
          }
          return handler;
        };
        // src/query/core/buildMiddleware/queryLifecycle.ts
        var buildQueryLifecycleHandler = (param) => {
          let { api, context, queryThunk, mutationThunk } = param;
          const isPendingThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isPending'
          ])(queryThunk, mutationThunk);
          const isRejectedThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isRejected'
          ])(queryThunk, mutationThunk);
          const isFullfilledThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isFulfilled'
          ])(queryThunk, mutationThunk);
          const lifecycleMap = {};
          const handler = (action, mwApi) => {
            if (isPendingThunk(action)) {
              const {
                requestId,
                arg: { endpointName, originalArgs },
              } = action.meta;
              const endpointDefinition =
                context.endpointDefinitions[endpointName];
              const onQueryStarted =
                endpointDefinition === null || endpointDefinition === void 0
                  ? void 0
                  : endpointDefinition.onQueryStarted;
              if (onQueryStarted) {
                const lifecycle = {};
                const queryFulfilled = new Promise((resolve, reject) => {
                  lifecycle.resolve = resolve;
                  lifecycle.reject = reject;
                });
                queryFulfilled.catch(() => {});
                lifecycleMap[requestId] = lifecycle;
                const selector = api.endpoints[endpointName].select(
                  isAnyQueryDefinition(endpointDefinition)
                    ? originalArgs
                    : requestId
                );
                const extra = mwApi.dispatch((_, __, extra2) => extra2);
                const lifecycleApi = {
                  ...mwApi,
                  getCacheEntry: () => selector(mwApi.getState()),
                  requestId,
                  extra,
                  updateCachedData: isAnyQueryDefinition(endpointDefinition)
                    ? (updateRecipe) =>
                        mwApi.dispatch(
                          api.util.updateQueryData(
                            endpointName,
                            originalArgs,
                            updateRecipe
                          )
                        )
                    : void 0,
                  queryFulfilled,
                };
                onQueryStarted(originalArgs, lifecycleApi);
              }
            } else if (isFullfilledThunk(action)) {
              var _lifecycleMap_requestId;
              const { requestId, baseQueryMeta } = action.meta;
              (_lifecycleMap_requestId = lifecycleMap[requestId]) === null ||
              _lifecycleMap_requestId === void 0
                ? void 0
                : _lifecycleMap_requestId.resolve({
                    data: action.payload,
                    meta: baseQueryMeta,
                  });
              delete lifecycleMap[requestId];
            } else if (isRejectedThunk(action)) {
              var _lifecycleMap_requestId1;
              const { requestId, rejectedWithValue, baseQueryMeta } =
                action.meta;
              var _action_payload;
              (_lifecycleMap_requestId1 = lifecycleMap[requestId]) === null ||
              _lifecycleMap_requestId1 === void 0
                ? void 0
                : _lifecycleMap_requestId1.reject({
                    error:
                      (_action_payload = action.payload) !== null &&
                      _action_payload !== void 0
                        ? _action_payload
                        : action.error,
                    isUnhandledError: !rejectedWithValue,
                    meta: baseQueryMeta,
                  });
              delete lifecycleMap[requestId];
            }
          };
          return handler;
        };
        // src/query/core/buildMiddleware/windowEventHandling.ts
        var buildWindowEventHandler = (param) => {
          let { reducerPath, context, api, refetchQuery, internalState } =
            param;
          const { removeQueryResult } = api.internalActions;
          const handler = (action, mwApi) => {
            if (onFocus.match(action)) {
              refetchValidQueries(mwApi, 'refetchOnFocus');
            }
            if (onOnline.match(action)) {
              refetchValidQueries(mwApi, 'refetchOnReconnect');
            }
          };
          function refetchValidQueries(api2, type) {
            const state = api2.getState()[reducerPath];
            const queries = state.queries;
            const subscriptions = internalState.currentSubscriptions;
            context.batch(() => {
              for (const queryCacheKey of Object.keys(subscriptions)) {
                const querySubState = queries[queryCacheKey];
                const subscriptionSubState = subscriptions[queryCacheKey];
                if (!subscriptionSubState || !querySubState) continue;
                const shouldRefetch =
                  Object.values(subscriptionSubState).some(
                    (sub) => sub[type] === true
                  ) ||
                  (Object.values(subscriptionSubState).every(
                    (sub) => sub[type] === void 0
                  ) &&
                    state.config[type]);
                if (shouldRefetch) {
                  if (countObjectKeys(subscriptionSubState) === 0) {
                    api2.dispatch(
                      removeQueryResult({
                        queryCacheKey,
                      })
                    );
                  } else if (
                    querySubState.status !== 'uninitialized' /* uninitialized */
                  ) {
                    api2.dispatch(refetchQuery(querySubState));
                  }
                }
              }
            });
          }
          return handler;
        };
        // src/query/core/buildMiddleware/index.ts
        function buildMiddleware(input) {
          const { reducerPath, queryThunk, api, context } = input;
          const { apiUid } = context;
          const actions = {
            invalidateTags: (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'createAction'
            ])(''.concat(reducerPath, '/invalidateTags')),
          };
          const isThisApiSliceAction = (action) =>
            action.type.startsWith(''.concat(reducerPath, '/'));
          const handlerBuilders = [
            buildDevCheckHandler,
            buildCacheCollectionHandler,
            buildInvalidationByTagsHandler,
            buildPollingHandler,
            buildCacheLifecycleHandler,
            buildQueryLifecycleHandler,
          ];
          const middleware = (mwApi) => {
            let initialized2 = false;
            const internalState = {
              currentSubscriptions: {},
            };
            const builderArgs = {
              ...input,
              internalState,
              refetchQuery,
              isThisApiSliceAction,
            };
            const handlers = handlerBuilders.map((build) => build(builderArgs));
            const batchedActionsHandler =
              buildBatchedActionsHandler(builderArgs);
            const windowEventsHandler = buildWindowEventHandler(builderArgs);
            return (next) => {
              return (action) => {
                if (
                  !(0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'isAction'
                  ])(action)
                ) {
                  return next(action);
                }
                if (!initialized2) {
                  initialized2 = true;
                  mwApi.dispatch(
                    api.internalActions.middlewareRegistered(apiUid)
                  );
                }
                const mwApiWithNext = {
                  ...mwApi,
                  next,
                };
                const stateBefore = mwApi.getState();
                const [actionShouldContinue, internalProbeResult] =
                  batchedActionsHandler(action, mwApiWithNext, stateBefore);
                let res;
                if (actionShouldContinue) {
                  res = next(action);
                } else {
                  res = internalProbeResult;
                }
                if (!!mwApi.getState()[reducerPath]) {
                  windowEventsHandler(action, mwApiWithNext, stateBefore);
                  if (
                    isThisApiSliceAction(action) ||
                    context.hasRehydrationInfo(action)
                  ) {
                    for (const handler of handlers) {
                      handler(action, mwApiWithNext, stateBefore);
                    }
                  }
                }
                return res;
              };
            };
          };
          return {
            middleware,
            actions,
          };
          //TURBOPACK unreachable
          function refetchQuery(querySubState) {
            return input.api.endpoints[querySubState.endpointName].initiate(
              querySubState.originalArgs,
              {
                subscribe: false,
                forceRefetch: true,
              }
            );
          }
        }
        // src/query/core/module.ts
        var coreModuleName = /* @__PURE__ */ Symbol();
        var coreModule = function () {
          let {
            createSelector:
              createSelector2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createSelector'
              ],
          } =
            arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          return {
            name: coreModuleName,
            init(api, param, context) {
              let {
                baseQuery,
                tagTypes,
                reducerPath,
                serializeQueryArgs,
                keepUnusedDataFor,
                refetchOnMountOrArgChange,
                refetchOnFocus,
                refetchOnReconnect,
                invalidationBehavior,
                onSchemaFailure,
                catchSchemaFailure,
                skipSchemaValidation,
              } = param;
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'enablePatches'
              ])();
              assertCast(serializeQueryArgs);
              const assertTagType = (tag) => {
                if (
                  typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'default'
                  ] !== 'undefined' &&
                  ('TURBOPACK compile-time value', 'development') ===
                    'development'
                ) {
                  if (!tagTypes.includes(tag.type)) {
                    console.error(
                      "Tag type '".concat(
                        tag.type,
                        "' was used, but not specified in `tagTypes`!"
                      )
                    );
                  }
                }
                return tag;
              };
              Object.assign(api, {
                reducerPath,
                endpoints: {},
                internalActions: {
                  onOnline,
                  onOffline,
                  onFocus,
                  onFocusLost,
                },
                util: {},
              });
              const selectors = buildSelectors({
                serializeQueryArgs,
                reducerPath,
                createSelector: createSelector2,
              });
              const {
                selectInvalidatedBy,
                selectCachedArgsForQuery,
                buildQuerySelector,
                buildInfiniteQuerySelector,
                buildMutationSelector,
              } = selectors;
              safeAssign(api.util, {
                selectInvalidatedBy,
                selectCachedArgsForQuery,
              });
              const {
                queryThunk,
                infiniteQueryThunk,
                mutationThunk,
                patchQueryData,
                updateQueryData,
                upsertQueryData,
                prefetch,
                buildMatchThunkActions,
              } = buildThunks({
                baseQuery,
                reducerPath,
                context,
                api,
                serializeQueryArgs,
                assertTagType,
                selectors,
                onSchemaFailure,
                catchSchemaFailure,
                skipSchemaValidation,
              });
              const { reducer, actions: sliceActions } = buildSlice({
                context,
                queryThunk,
                infiniteQueryThunk,
                mutationThunk,
                serializeQueryArgs,
                reducerPath,
                assertTagType,
                config: {
                  refetchOnFocus,
                  refetchOnReconnect,
                  refetchOnMountOrArgChange,
                  keepUnusedDataFor,
                  reducerPath,
                  invalidationBehavior,
                },
              });
              safeAssign(api.util, {
                patchQueryData,
                updateQueryData,
                upsertQueryData,
                prefetch,
                resetApiState: sliceActions.resetApiState,
                upsertQueryEntries: sliceActions.cacheEntriesUpserted,
              });
              safeAssign(api.internalActions, sliceActions);
              const { middleware, actions: middlewareActions } =
                buildMiddleware({
                  reducerPath,
                  context,
                  queryThunk,
                  mutationThunk,
                  infiniteQueryThunk,
                  api,
                  assertTagType,
                  selectors,
                });
              safeAssign(api.util, middlewareActions);
              safeAssign(api, {
                reducer,
                middleware,
              });
              const {
                buildInitiateQuery,
                buildInitiateInfiniteQuery,
                buildInitiateMutation,
                getRunningMutationThunk,
                getRunningMutationsThunk,
                getRunningQueriesThunk,
                getRunningQueryThunk,
              } = buildInitiate({
                queryThunk,
                mutationThunk,
                infiniteQueryThunk,
                api,
                serializeQueryArgs,
                context,
              });
              safeAssign(api.util, {
                getRunningMutationThunk,
                getRunningMutationsThunk,
                getRunningQueryThunk,
                getRunningQueriesThunk,
              });
              return {
                name: coreModuleName,
                injectEndpoint(endpointName, definition) {
                  var _anyApi_endpoints, _endpointName;
                  const anyApi = api;
                  var _;
                  const endpoint =
                    (_ = (_anyApi_endpoints = anyApi.endpoints)[
                      (_endpointName = endpointName)
                    ]) !== null && _ !== void 0
                      ? _
                      : (_anyApi_endpoints[_endpointName] = {});
                  if (isQueryDefinition(definition)) {
                    safeAssign(
                      endpoint,
                      {
                        name: endpointName,
                        select: buildQuerySelector(endpointName, definition),
                        initiate: buildInitiateQuery(endpointName, definition),
                      },
                      buildMatchThunkActions(queryThunk, endpointName)
                    );
                  }
                  if (isMutationDefinition(definition)) {
                    safeAssign(
                      endpoint,
                      {
                        name: endpointName,
                        select: buildMutationSelector(),
                        initiate: buildInitiateMutation(endpointName),
                      },
                      buildMatchThunkActions(mutationThunk, endpointName)
                    );
                  }
                  if (isInfiniteQueryDefinition(definition)) {
                    safeAssign(
                      endpoint,
                      {
                        name: endpointName,
                        select: buildInfiniteQuerySelector(
                          endpointName,
                          definition
                        ),
                        initiate: buildInitiateInfiniteQuery(
                          endpointName,
                          definition
                        ),
                      },
                      buildMatchThunkActions(queryThunk, endpointName)
                    );
                  }
                },
              };
            },
          };
        };
        // src/query/core/index.ts
        var createApi = /* @__PURE__ */ buildCreateApi(coreModule());
        //# sourceMappingURL=rtk-query.modern.mjs.map
      },
    '[project]/node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          /**
           * @license React
           * use-sync-external-store-with-selector.development.js
           *
           * Copyright (c) Meta Platforms, Inc. and affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          'production' !== ('TURBOPACK compile-time value', 'development') &&
            (function () {
              function is(x, y) {
                return (
                  (x === y && (0 !== x || 1 / x === 1 / y)) ||
                  (x !== x && y !== y)
                );
              }
              'undefined' !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
                'function' ===
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
                  Error()
                );
              var React = __turbopack_context__.r(
                  '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
                ),
                objectIs = 'function' === typeof Object.is ? Object.is : is,
                useSyncExternalStore = React.useSyncExternalStore,
                useRef = React.useRef,
                useEffect = React.useEffect,
                useMemo = React.useMemo,
                useDebugValue = React.useDebugValue;
              exports.useSyncExternalStoreWithSelector = function (
                subscribe,
                getSnapshot,
                getServerSnapshot,
                selector,
                isEqual
              ) {
                var instRef = useRef(null);
                if (null === instRef.current) {
                  var inst = {
                    hasValue: !1,
                    value: null,
                  };
                  instRef.current = inst;
                } else inst = instRef.current;
                instRef = useMemo(
                  function () {
                    function memoizedSelector(nextSnapshot) {
                      if (!hasMemo) {
                        hasMemo = !0;
                        memoizedSnapshot = nextSnapshot;
                        nextSnapshot = selector(nextSnapshot);
                        if (void 0 !== isEqual && inst.hasValue) {
                          var currentSelection = inst.value;
                          if (isEqual(currentSelection, nextSnapshot))
                            return (memoizedSelection = currentSelection);
                        }
                        return (memoizedSelection = nextSnapshot);
                      }
                      currentSelection = memoizedSelection;
                      if (objectIs(memoizedSnapshot, nextSnapshot))
                        return currentSelection;
                      var nextSelection = selector(nextSnapshot);
                      if (
                        void 0 !== isEqual &&
                        isEqual(currentSelection, nextSelection)
                      )
                        return (
                          (memoizedSnapshot = nextSnapshot), currentSelection
                        );
                      memoizedSnapshot = nextSnapshot;
                      return (memoizedSelection = nextSelection);
                    }
                    var hasMemo = !1,
                      memoizedSnapshot,
                      memoizedSelection,
                      maybeGetServerSnapshot =
                        void 0 === getServerSnapshot ? null : getServerSnapshot;
                    return [
                      function () {
                        return memoizedSelector(getSnapshot());
                      },
                      null === maybeGetServerSnapshot
                        ? void 0
                        : function () {
                            return memoizedSelector(maybeGetServerSnapshot());
                          },
                    ];
                  },
                  [getSnapshot, getServerSnapshot, selector, isEqual]
                );
                var value = useSyncExternalStore(
                  subscribe,
                  instRef[0],
                  instRef[1]
                );
                useEffect(
                  function () {
                    inst.hasValue = !0;
                    inst.value = value;
                  },
                  [value]
                );
                useDebugValue(value);
                return value;
              };
              'undefined' !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
                'function' ===
                  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
                  Error()
                );
            })();
        }
      },
    '[project]/node_modules/use-sync-external-store/with-selector.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          if (('TURBOPACK compile-time falsy', 0));
          else {
            //TURBOPACK unreachable
            module.exports = __turbopack_context__.r(
              '[project]/node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.development.js [app-client] (ecmascript)'
            );
          }
        }
      },
    '[project]/node_modules/react-redux/dist/react-redux.mjs [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        // src/utils/react.ts
        __turbopack_context__.s({
          Provider: () => Provider_default,
          ReactReduxContext: () => ReactReduxContext,
          batch: () => batch,
          connect: () => connect_default,
          createDispatchHook: () => createDispatchHook,
          createSelectorHook: () => createSelectorHook,
          createStoreHook: () => createStoreHook,
          shallowEqual: () => shallowEqual,
          useDispatch: () => useDispatch,
          useSelector: () => useSelector,
          useStore: () => useStore,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          /*#__PURE__*/ __turbopack_context__.i(
            '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        // src/hooks/useSelector.ts
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$sync$2d$external$2d$store$2f$with$2d$selector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/use-sync-external-store/with-selector.js [app-client] (ecmascript)'
          );
        // src/utils/react-is.ts
        var IS_REACT_19 =
          /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'version'
          ].startsWith('19');
        var REACT_ELEMENT_TYPE = /* @__PURE__ */ Symbol.for(
          IS_REACT_19 ? 'react.transitional.element' : 'react.element'
        );
        var REACT_PORTAL_TYPE = /* @__PURE__ */ Symbol.for('react.portal');
        var REACT_FRAGMENT_TYPE = /* @__PURE__ */ Symbol.for('react.fragment');
        var REACT_STRICT_MODE_TYPE =
          /* @__PURE__ */ Symbol.for('react.strict_mode');
        var REACT_PROFILER_TYPE = /* @__PURE__ */ Symbol.for('react.profiler');
        var REACT_CONSUMER_TYPE = /* @__PURE__ */ Symbol.for('react.consumer');
        var REACT_CONTEXT_TYPE = /* @__PURE__ */ Symbol.for('react.context');
        var REACT_FORWARD_REF_TYPE =
          /* @__PURE__ */ Symbol.for('react.forward_ref');
        var REACT_SUSPENSE_TYPE = /* @__PURE__ */ Symbol.for('react.suspense');
        var REACT_SUSPENSE_LIST_TYPE = /* @__PURE__ */ Symbol.for(
          'react.suspense_list'
        );
        var REACT_MEMO_TYPE = /* @__PURE__ */ Symbol.for('react.memo');
        var REACT_LAZY_TYPE = /* @__PURE__ */ Symbol.for('react.lazy');
        var REACT_OFFSCREEN_TYPE =
          /* @__PURE__ */ Symbol.for('react.offscreen');
        var REACT_CLIENT_REFERENCE = /* @__PURE__ */ Symbol.for(
          'react.client.reference'
        );
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Memo = REACT_MEMO_TYPE;
        function isValidElementType(type) {
          return typeof type === 'string' ||
            typeof type === 'function' ||
            type === REACT_FRAGMENT_TYPE ||
            type === REACT_PROFILER_TYPE ||
            type === REACT_STRICT_MODE_TYPE ||
            type === REACT_SUSPENSE_TYPE ||
            type === REACT_SUSPENSE_LIST_TYPE ||
            type === REACT_OFFSCREEN_TYPE ||
            (typeof type === 'object' &&
              type !== null &&
              (type.$$typeof === REACT_LAZY_TYPE ||
                type.$$typeof === REACT_MEMO_TYPE ||
                type.$$typeof === REACT_CONTEXT_TYPE ||
                type.$$typeof === REACT_CONSUMER_TYPE ||
                type.$$typeof === REACT_FORWARD_REF_TYPE ||
                type.$$typeof === REACT_CLIENT_REFERENCE ||
                type.getModuleId !== void 0))
            ? true
            : false;
        }
        function typeOf(object) {
          if (typeof object === 'object' && object !== null) {
            const { $$typeof } = object;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                switch (((object = object.type), object)) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return object;
                  default:
                    switch (((object = object && object.$$typeof), object)) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                        return object;
                      case REACT_CONSUMER_TYPE:
                        return object;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
        }
        function isContextConsumer(object) {
          return IS_REACT_19
            ? typeOf(object) === REACT_CONSUMER_TYPE
            : typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        // src/utils/warning.ts
        function warning(message) {
          if (
            typeof console !== 'undefined' &&
            typeof console.error === 'function'
          ) {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (e) {}
        }
        // src/connect/verifySubselectors.ts
        function verify(selector, methodName) {
          if (!selector) {
            throw new Error(
              'Unexpected value for '.concat(methodName, ' in connect.')
            );
          } else if (
            methodName === 'mapStateToProps' ||
            methodName === 'mapDispatchToProps'
          ) {
            if (
              !Object.prototype.hasOwnProperty.call(
                selector,
                'dependsOnOwnProps'
              )
            ) {
              warning(
                'The selector for '.concat(
                  methodName,
                  ' of connect did not specify a value for dependsOnOwnProps.'
                )
              );
            }
          }
        }
        function verifySubselectors(
          mapStateToProps,
          mapDispatchToProps,
          mergeProps
        ) {
          verify(mapStateToProps, 'mapStateToProps');
          verify(mapDispatchToProps, 'mapDispatchToProps');
          verify(mergeProps, 'mergeProps');
        }
        // src/connect/selectorFactory.ts
        function pureFinalPropsSelectorFactory(
          mapStateToProps,
          mapDispatchToProps,
          mergeProps,
          dispatch,
          param
        ) {
          let { areStatesEqual, areOwnPropsEqual, areStatePropsEqual } = param;
          let hasRunAtLeastOnce = false;
          let state;
          let ownProps;
          let stateProps;
          let dispatchProps;
          let mergedProps;
          function handleFirstCall(firstState, firstOwnProps) {
            state = firstState;
            ownProps = firstOwnProps;
            stateProps = mapStateToProps(state, ownProps);
            dispatchProps = mapDispatchToProps(dispatch, ownProps);
            mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
            hasRunAtLeastOnce = true;
            return mergedProps;
          }
          function handleNewPropsAndNewState() {
            stateProps = mapStateToProps(state, ownProps);
            if (mapDispatchToProps.dependsOnOwnProps)
              dispatchProps = mapDispatchToProps(dispatch, ownProps);
            mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
            return mergedProps;
          }
          function handleNewProps() {
            if (mapStateToProps.dependsOnOwnProps)
              stateProps = mapStateToProps(state, ownProps);
            if (mapDispatchToProps.dependsOnOwnProps)
              dispatchProps = mapDispatchToProps(dispatch, ownProps);
            mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
            return mergedProps;
          }
          function handleNewState() {
            const nextStateProps = mapStateToProps(state, ownProps);
            const statePropsChanged = !areStatePropsEqual(
              nextStateProps,
              stateProps
            );
            stateProps = nextStateProps;
            if (statePropsChanged)
              mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
            return mergedProps;
          }
          function handleSubsequentCalls(nextState, nextOwnProps) {
            const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
            const stateChanged = !areStatesEqual(
              nextState,
              state,
              nextOwnProps,
              ownProps
            );
            state = nextState;
            ownProps = nextOwnProps;
            if (propsChanged && stateChanged)
              return handleNewPropsAndNewState();
            if (propsChanged) return handleNewProps();
            if (stateChanged) return handleNewState();
            return mergedProps;
          }
          return function pureFinalPropsSelector(nextState, nextOwnProps) {
            return hasRunAtLeastOnce
              ? handleSubsequentCalls(nextState, nextOwnProps)
              : handleFirstCall(nextState, nextOwnProps);
          };
        }
        function finalPropsSelectorFactory(dispatch, param) {
          let {
            initMapStateToProps,
            initMapDispatchToProps,
            initMergeProps,
            ...options
          } = param;
          const mapStateToProps = initMapStateToProps(dispatch, options);
          const mapDispatchToProps = initMapDispatchToProps(dispatch, options);
          const mergeProps = initMergeProps(dispatch, options);
          if (('TURBOPACK compile-time truthy', 1)) {
            verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps);
          }
          return pureFinalPropsSelectorFactory(
            mapStateToProps,
            mapDispatchToProps,
            mergeProps,
            dispatch,
            options
          );
        }
        // src/utils/bindActionCreators.ts
        function bindActionCreators(actionCreators, dispatch) {
          const boundActionCreators = {};
          for (const key in actionCreators) {
            const actionCreator = actionCreators[key];
            if (typeof actionCreator === 'function') {
              boundActionCreators[key] = function () {
                for (
                  var _len = arguments.length, args = new Array(_len), _key = 0;
                  _key < _len;
                  _key++
                ) {
                  args[_key] = arguments[_key];
                }
                return dispatch(actionCreator(...args));
              };
            }
          }
          return boundActionCreators;
        }
        // src/utils/isPlainObject.ts
        function isPlainObject(obj) {
          if (typeof obj !== 'object' || obj === null) return false;
          const proto = Object.getPrototypeOf(obj);
          if (proto === null) return true;
          let baseProto = proto;
          while (Object.getPrototypeOf(baseProto) !== null) {
            baseProto = Object.getPrototypeOf(baseProto);
          }
          return proto === baseProto;
        }
        // src/utils/verifyPlainObject.ts
        function verifyPlainObject(value, displayName, methodName) {
          if (!isPlainObject(value)) {
            warning(
              ''
                .concat(methodName, '() in ')
                .concat(
                  displayName,
                  ' must return a plain object. Instead received '
                )
                .concat(value, '.')
            );
          }
        }
        // src/connect/wrapMapToProps.ts
        function wrapMapToPropsConstant(getConstant) {
          return function initConstantSelector(dispatch) {
            const constant = getConstant(dispatch);
            function constantSelector() {
              return constant;
            }
            constantSelector.dependsOnOwnProps = false;
            return constantSelector;
          };
        }
        function getDependsOnOwnProps(mapToProps) {
          return mapToProps.dependsOnOwnProps
            ? Boolean(mapToProps.dependsOnOwnProps)
            : mapToProps.length !== 1;
        }
        function wrapMapToPropsFunc(mapToProps, methodName) {
          return function initProxySelector(dispatch, param) {
            let { displayName } = param;
            const proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
              return proxy.dependsOnOwnProps
                ? proxy.mapToProps(stateOrDispatch, ownProps)
                : proxy.mapToProps(stateOrDispatch, void 0);
            };
            proxy.dependsOnOwnProps = true;
            proxy.mapToProps = function detectFactoryAndVerify(
              stateOrDispatch,
              ownProps
            ) {
              proxy.mapToProps = mapToProps;
              proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
              let props = proxy(stateOrDispatch, ownProps);
              if (typeof props === 'function') {
                proxy.mapToProps = props;
                proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
                props = proxy(stateOrDispatch, ownProps);
              }
              if (('TURBOPACK compile-time truthy', 1))
                verifyPlainObject(props, displayName, methodName);
              return props;
            };
            return proxy;
          };
        }
        // src/connect/invalidArgFactory.ts
        function createInvalidArgFactory(arg, name) {
          return (dispatch, options) => {
            throw new Error(
              'Invalid value of type '
                .concat(typeof arg, ' for ')
                .concat(name, ' argument when connecting component ')
                .concat(options.wrappedComponentName, '.')
            );
          };
        }
        // src/connect/mapDispatchToProps.ts
        function mapDispatchToPropsFactory(mapDispatchToProps) {
          return mapDispatchToProps && typeof mapDispatchToProps === 'object'
            ? wrapMapToPropsConstant(
                (
                  dispatch // @ts-ignore
                ) => bindActionCreators(mapDispatchToProps, dispatch)
              )
            : !mapDispatchToProps
              ? wrapMapToPropsConstant((dispatch) => ({
                  dispatch,
                }))
              : typeof mapDispatchToProps === 'function' // @ts-ignore
                ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps')
                : createInvalidArgFactory(
                    mapDispatchToProps,
                    'mapDispatchToProps'
                  );
        }
        // src/connect/mapStateToProps.ts
        function mapStateToPropsFactory(mapStateToProps) {
          return !mapStateToProps
            ? wrapMapToPropsConstant(() => ({}))
            : typeof mapStateToProps === 'function' // @ts-ignore
              ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps')
              : createInvalidArgFactory(mapStateToProps, 'mapStateToProps');
        }
        // src/connect/mergeProps.ts
        function defaultMergeProps(stateProps, dispatchProps, ownProps) {
          return {
            ...ownProps,
            ...stateProps,
            ...dispatchProps,
          };
        }
        function wrapMergePropsFunc(mergeProps) {
          return function initMergePropsProxy(dispatch, param) {
            let { displayName, areMergedPropsEqual } = param;
            let hasRunOnce = false;
            let mergedProps;
            return function mergePropsProxy(
              stateProps,
              dispatchProps,
              ownProps
            ) {
              const nextMergedProps = mergeProps(
                stateProps,
                dispatchProps,
                ownProps
              );
              if (hasRunOnce) {
                if (!areMergedPropsEqual(nextMergedProps, mergedProps))
                  mergedProps = nextMergedProps;
              } else {
                hasRunOnce = true;
                mergedProps = nextMergedProps;
                if (('TURBOPACK compile-time truthy', 1))
                  verifyPlainObject(mergedProps, displayName, 'mergeProps');
              }
              return mergedProps;
            };
          };
        }
        function mergePropsFactory(mergeProps) {
          return !mergeProps
            ? () => defaultMergeProps
            : typeof mergeProps === 'function'
              ? wrapMergePropsFunc(mergeProps)
              : createInvalidArgFactory(mergeProps, 'mergeProps');
        }
        // src/utils/batch.ts
        function defaultNoopBatch(callback) {
          callback();
        }
        // src/utils/Subscription.ts
        function createListenerCollection() {
          let first = null;
          let last = null;
          return {
            clear() {
              first = null;
              last = null;
            },
            notify() {
              defaultNoopBatch(() => {
                let listener = first;
                while (listener) {
                  listener.callback();
                  listener = listener.next;
                }
              });
            },
            get() {
              const listeners = [];
              let listener = first;
              while (listener) {
                listeners.push(listener);
                listener = listener.next;
              }
              return listeners;
            },
            subscribe(callback) {
              let isSubscribed = true;
              const listener = (last = {
                callback,
                next: null,
                prev: last,
              });
              if (listener.prev) {
                listener.prev.next = listener;
              } else {
                first = listener;
              }
              return function unsubscribe() {
                if (!isSubscribed || first === null) return;
                isSubscribed = false;
                if (listener.next) {
                  listener.next.prev = listener.prev;
                } else {
                  last = listener.prev;
                }
                if (listener.prev) {
                  listener.prev.next = listener.next;
                } else {
                  first = listener.next;
                }
              };
            },
          };
        }
        var nullListeners = {
          notify() {},
          get: () => [],
        };
        function createSubscription(store, parentSub) {
          let unsubscribe;
          let listeners = nullListeners;
          let subscriptionsAmount = 0;
          let selfSubscribed = false;
          function addNestedSub(listener) {
            trySubscribe();
            const cleanupListener = listeners.subscribe(listener);
            let removed = false;
            return () => {
              if (!removed) {
                removed = true;
                cleanupListener();
                tryUnsubscribe();
              }
            };
          }
          function notifyNestedSubs() {
            listeners.notify();
          }
          function handleChangeWrapper() {
            if (subscription.onStateChange) {
              subscription.onStateChange();
            }
          }
          function isSubscribed() {
            return selfSubscribed;
          }
          function trySubscribe() {
            subscriptionsAmount++;
            if (!unsubscribe) {
              unsubscribe = parentSub
                ? parentSub.addNestedSub(handleChangeWrapper)
                : store.subscribe(handleChangeWrapper);
              listeners = createListenerCollection();
            }
          }
          function tryUnsubscribe() {
            subscriptionsAmount--;
            if (unsubscribe && subscriptionsAmount === 0) {
              unsubscribe();
              unsubscribe = void 0;
              listeners.clear();
              listeners = nullListeners;
            }
          }
          function trySubscribeSelf() {
            if (!selfSubscribed) {
              selfSubscribed = true;
              trySubscribe();
            }
          }
          function tryUnsubscribeSelf() {
            if (selfSubscribed) {
              selfSubscribed = false;
              tryUnsubscribe();
            }
          }
          const subscription = {
            addNestedSub,
            notifyNestedSubs,
            handleChangeWrapper,
            isSubscribed,
            trySubscribe: trySubscribeSelf,
            tryUnsubscribe: tryUnsubscribeSelf,
            getListeners: () => listeners,
          };
          return subscription;
        }
        // src/utils/useIsomorphicLayoutEffect.ts
        var canUseDOM = () =>
          !!(
            typeof window !== 'undefined' &&
            typeof window.document !== 'undefined' &&
            typeof window.document.createElement !== 'undefined'
          );
        var isDOM = /* @__PURE__ */ canUseDOM();
        var isRunningInReactNative = () =>
          typeof navigator !== 'undefined' &&
          navigator.product === 'ReactNative';
        var isReactNative = /* @__PURE__ */ isRunningInReactNative();
        var getUseIsomorphicLayoutEffect = () =>
          isDOM || isReactNative
            ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useLayoutEffect'
              ]
            : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ];
        var useIsomorphicLayoutEffect =
          /* @__PURE__ */ getUseIsomorphicLayoutEffect();
        // src/utils/shallowEqual.ts
        function is(x, y) {
          if (x === y) {
            return x !== 0 || y !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function shallowEqual(objA, objB) {
          if (is(objA, objB)) return true;
          if (
            typeof objA !== 'object' ||
            objA === null ||
            typeof objB !== 'object' ||
            objB === null
          ) {
            return false;
          }
          const keysA = Object.keys(objA);
          const keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) return false;
          for (let i = 0; i < keysA.length; i++) {
            if (
              !Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||
              !is(objA[keysA[i]], objB[keysA[i]])
            ) {
              return false;
            }
          }
          return true;
        }
        // src/utils/hoistStatics.ts
        var REACT_STATICS = {
          childContextTypes: true,
          contextType: true,
          contextTypes: true,
          defaultProps: true,
          displayName: true,
          getDefaultProps: true,
          getDerivedStateFromError: true,
          getDerivedStateFromProps: true,
          mixins: true,
          propTypes: true,
          type: true,
        };
        var KNOWN_STATICS = {
          name: true,
          length: true,
          prototype: true,
          caller: true,
          callee: true,
          arguments: true,
          arity: true,
        };
        var FORWARD_REF_STATICS = {
          $$typeof: true,
          render: true,
          defaultProps: true,
          displayName: true,
          propTypes: true,
        };
        var MEMO_STATICS = {
          $$typeof: true,
          compare: true,
          defaultProps: true,
          displayName: true,
          propTypes: true,
          type: true,
        };
        var TYPE_STATICS = {
          [ForwardRef]: FORWARD_REF_STATICS,
          [Memo]: MEMO_STATICS,
        };
        function getStatics(component) {
          if (isMemo(component)) {
            return MEMO_STATICS;
          }
          return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
        }
        var defineProperty = Object.defineProperty;
        var getOwnPropertyNames = Object.getOwnPropertyNames;
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var getPrototypeOf = Object.getPrototypeOf;
        var objectPrototype = Object.prototype;
        function hoistNonReactStatics(targetComponent, sourceComponent) {
          if (typeof sourceComponent !== 'string') {
            if (objectPrototype) {
              const inheritedComponent = getPrototypeOf(sourceComponent);
              if (
                inheritedComponent &&
                inheritedComponent !== objectPrototype
              ) {
                hoistNonReactStatics(targetComponent, inheritedComponent);
              }
            }
            let keys = getOwnPropertyNames(sourceComponent);
            if (getOwnPropertySymbols) {
              keys = keys.concat(getOwnPropertySymbols(sourceComponent));
            }
            const targetStatics = getStatics(targetComponent);
            const sourceStatics = getStatics(sourceComponent);
            for (let i = 0; i < keys.length; ++i) {
              const key = keys[i];
              if (
                !KNOWN_STATICS[key] &&
                !(sourceStatics && sourceStatics[key]) &&
                !(targetStatics && targetStatics[key])
              ) {
                const descriptor = getOwnPropertyDescriptor(
                  sourceComponent,
                  key
                );
                try {
                  defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
              }
            }
          }
          return targetComponent;
        }
        // src/components/Context.ts
        var ContextKey = /* @__PURE__ */ Symbol.for('react-redux-context');
        var gT =
          typeof globalThis !== 'undefined'
            ? globalThis
            : /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */ {};
        function getContext() {
          var _gT, _ContextKey;
          if (
            !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createContext'
            ]
          )
            return {};
          var _;
          const contextMap =
            (_ = (_gT = gT)[(_ContextKey = ContextKey)]) !== null &&
            _ !== void 0
              ? _
              : (_gT[_ContextKey] = /* @__PURE__ */ new Map());
          let realContext = contextMap.get(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createContext'
            ]
          );
          if (!realContext) {
            realContext =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createContext'
              ](null);
            if (('TURBOPACK compile-time truthy', 1)) {
              realContext.displayName = 'ReactRedux';
            }
            contextMap.set(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'createContext'
              ],
              realContext
            );
          }
          return realContext;
        }
        var ReactReduxContext = /* @__PURE__ */ getContext();
        // src/components/connect.tsx
        var NO_SUBSCRIPTION_ARRAY = [null, null];
        var stringifyComponent = (Comp) => {
          try {
            return JSON.stringify(Comp);
          } catch (err) {
            return String(Comp);
          }
        };
        function useIsomorphicLayoutEffectWithArgs(
          effectFunc,
          effectArgs,
          dependencies
        ) {
          useIsomorphicLayoutEffect(
            {
              'useIsomorphicLayoutEffectWithArgs.useIsomorphicLayoutEffect':
                () => effectFunc(...effectArgs),
            }['useIsomorphicLayoutEffectWithArgs.useIsomorphicLayoutEffect'],
            dependencies
          );
        }
        function captureWrapperProps(
          lastWrapperProps,
          lastChildProps,
          renderIsScheduled,
          wrapperProps,
          childPropsFromStoreUpdate,
          notifyNestedSubs
        ) {
          lastWrapperProps.current = wrapperProps;
          renderIsScheduled.current = false;
          if (childPropsFromStoreUpdate.current) {
            childPropsFromStoreUpdate.current = null;
            notifyNestedSubs();
          }
        }
        function subscribeUpdates(
          shouldHandleStateChanges,
          store,
          subscription,
          childPropsSelector,
          lastWrapperProps,
          lastChildProps,
          renderIsScheduled,
          isMounted,
          childPropsFromStoreUpdate,
          notifyNestedSubs,
          additionalSubscribeListener
        ) {
          if (!shouldHandleStateChanges) return () => {};
          let didUnsubscribe = false;
          let lastThrownError = null;
          const checkForUpdates = () => {
            if (didUnsubscribe || !isMounted.current) {
              return;
            }
            const latestStoreState = store.getState();
            let newChildProps, error;
            try {
              newChildProps = childPropsSelector(
                latestStoreState,
                lastWrapperProps.current
              );
            } catch (e) {
              error = e;
              lastThrownError = e;
            }
            if (!error) {
              lastThrownError = null;
            }
            if (newChildProps === lastChildProps.current) {
              if (!renderIsScheduled.current) {
                notifyNestedSubs();
              }
            } else {
              lastChildProps.current = newChildProps;
              childPropsFromStoreUpdate.current = newChildProps;
              renderIsScheduled.current = true;
              additionalSubscribeListener();
            }
          };
          subscription.onStateChange = checkForUpdates;
          subscription.trySubscribe();
          checkForUpdates();
          const unsubscribeWrapper = () => {
            didUnsubscribe = true;
            subscription.tryUnsubscribe();
            subscription.onStateChange = null;
            if (lastThrownError) {
              throw lastThrownError;
            }
          };
          return unsubscribeWrapper;
        }
        function strictEqual(a, b) {
          return a === b;
        }
        var hasWarnedAboutDeprecatedPureOption = false;
        function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
          let {
            // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.
            // @ts-ignore
            pure,
            areStatesEqual = strictEqual,
            areOwnPropsEqual = shallowEqual,
            areStatePropsEqual = shallowEqual,
            areMergedPropsEqual = shallowEqual, // use React's forwardRef to expose a ref of the wrapped component
            forwardRef = false, // the context consumer to use
            context = ReactReduxContext,
          } = arguments.length > 3 && arguments[3] !== void 0
            ? arguments[3]
            : {};
          if (('TURBOPACK compile-time truthy', 1)) {
            if (pure !== void 0 && !hasWarnedAboutDeprecatedPureOption) {
              hasWarnedAboutDeprecatedPureOption = true;
              warning(
                'The `pure` option has been removed. `connect` is now always a "pure/memoized" component'
              );
            }
          }
          const Context = context;
          const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);
          const initMapDispatchToProps =
            mapDispatchToPropsFactory(mapDispatchToProps);
          const initMergeProps = mergePropsFactory(mergeProps);
          const shouldHandleStateChanges = Boolean(mapStateToProps);
          const wrapWithConnect = (WrappedComponent) => {
            if (('TURBOPACK compile-time truthy', 1)) {
              const isValid =
                /* @__PURE__ */ isValidElementType(WrappedComponent);
              if (!isValid)
                throw new Error(
                  'You must pass a component to the function returned by connect. Instead received '.concat(
                    stringifyComponent(WrappedComponent)
                  )
                );
            }
            const wrappedComponentName =
              WrappedComponent.displayName ||
              WrappedComponent.name ||
              'Component';
            const displayName = 'Connect('.concat(wrappedComponentName, ')');
            const selectorFactoryOptions = {
              shouldHandleStateChanges,
              displayName,
              wrappedComponentName,
              WrappedComponent,
              // @ts-ignore
              initMapStateToProps,
              initMapDispatchToProps,
              initMergeProps,
              areStatesEqual,
              areStatePropsEqual,
              areOwnPropsEqual,
              areMergedPropsEqual,
            };
            function ConnectFunction(props) {
              const [propsContext, reactReduxForwardedRef, wrapperProps] =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ](
                  {
                    'connect.wrapWithConnect.ConnectFunction.useMemo': () => {
                      const {
                        reactReduxForwardedRef: reactReduxForwardedRef2,
                        ...wrapperProps2
                      } = props;
                      return [
                        props.context,
                        reactReduxForwardedRef2,
                        wrapperProps2,
                      ];
                    },
                  }['connect.wrapWithConnect.ConnectFunction.useMemo'],
                  [props]
                );
              const ContextToUse =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ](
                  {
                    'connect.wrapWithConnect.ConnectFunction.useMemo[ContextToUse]':
                      () => {
                        let ResultContext = Context;
                        if (
                          propsContext === null || propsContext === void 0
                            ? void 0
                            : propsContext.Consumer
                        ) {
                          if (('TURBOPACK compile-time truthy', 1)) {
                            const isValid = /* @__PURE__ */ isContextConsumer(
                              // @ts-ignore
                              /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                                'createElement'
                              ](propsContext.Consumer, null)
                            );
                            if (!isValid) {
                              throw new Error(
                                'You must pass a valid React context consumer as `props.context`'
                              );
                            }
                            ResultContext = propsContext;
                          }
                        }
                        return ResultContext;
                      },
                  }[
                    'connect.wrapWithConnect.ConnectFunction.useMemo[ContextToUse]'
                  ],
                  [propsContext, Context]
                );
              const contextValue =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useContext'
                ](ContextToUse);
              const didStoreComeFromProps =
                Boolean(props.store) &&
                Boolean(props.store.getState) &&
                Boolean(props.store.dispatch);
              const didStoreComeFromContext =
                Boolean(contextValue) && Boolean(contextValue.store);
              if (
                ('TURBOPACK compile-time value', 'development') !==
                  'production' &&
                !didStoreComeFromProps &&
                !didStoreComeFromContext
              ) {
                throw new Error(
                  'Could not find "store" in the context of "'
                    .concat(
                      displayName,
                      '". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '
                    )
                    .concat(displayName, ' in connect options.')
                );
              }
              const store = didStoreComeFromProps
                ? props.store
                : contextValue.store;
              const getServerState = didStoreComeFromContext
                ? contextValue.getServerState
                : store.getState;
              const childPropsSelector =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ](
                  {
                    'connect.wrapWithConnect.ConnectFunction.useMemo[childPropsSelector]':
                      () => {
                        return finalPropsSelectorFactory(
                          store.dispatch,
                          selectorFactoryOptions
                        );
                      },
                  }[
                    'connect.wrapWithConnect.ConnectFunction.useMemo[childPropsSelector]'
                  ],
                  [store]
                );
              const [subscription, notifyNestedSubs] =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ](
                  {
                    'connect.wrapWithConnect.ConnectFunction.useMemo': () => {
                      if (!shouldHandleStateChanges)
                        return NO_SUBSCRIPTION_ARRAY;
                      const subscription2 = createSubscription(
                        store,
                        didStoreComeFromProps
                          ? void 0
                          : contextValue.subscription
                      );
                      const notifyNestedSubs2 =
                        subscription2.notifyNestedSubs.bind(subscription2);
                      return [subscription2, notifyNestedSubs2];
                    },
                  }['connect.wrapWithConnect.ConnectFunction.useMemo'],
                  [store, didStoreComeFromProps, contextValue]
                );
              const overriddenContextValue =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ](
                  {
                    'connect.wrapWithConnect.ConnectFunction.useMemo[overriddenContextValue]':
                      () => {
                        if (didStoreComeFromProps) {
                          return contextValue;
                        }
                        return {
                          ...contextValue,
                          subscription,
                        };
                      },
                  }[
                    'connect.wrapWithConnect.ConnectFunction.useMemo[overriddenContextValue]'
                  ],
                  [didStoreComeFromProps, contextValue, subscription]
                );
              const lastChildProps =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useRef'
                ](void 0);
              const lastWrapperProps =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useRef'
                ](wrapperProps);
              const childPropsFromStoreUpdate =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useRef'
                ](void 0);
              const renderIsScheduled =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useRef'
                ](false);
              const isMounted =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useRef'
                ](false);
              const latestSubscriptionCallbackError =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useRef'
                ](void 0);
              useIsomorphicLayoutEffect(
                {
                  'connect.wrapWithConnect.ConnectFunction.useIsomorphicLayoutEffect':
                    () => {
                      isMounted.current = true;
                      return {
                        'connect.wrapWithConnect.ConnectFunction.useIsomorphicLayoutEffect':
                          () => {
                            isMounted.current = false;
                          },
                      }[
                        'connect.wrapWithConnect.ConnectFunction.useIsomorphicLayoutEffect'
                      ];
                    },
                }[
                  'connect.wrapWithConnect.ConnectFunction.useIsomorphicLayoutEffect'
                ],
                []
              );
              const actualChildPropsSelector =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ](
                  {
                    'connect.wrapWithConnect.ConnectFunction.useMemo[actualChildPropsSelector]':
                      () => {
                        const selector = {
                          'connect.wrapWithConnect.ConnectFunction.useMemo[actualChildPropsSelector].selector':
                            () => {
                              if (
                                childPropsFromStoreUpdate.current &&
                                wrapperProps === lastWrapperProps.current
                              ) {
                                return childPropsFromStoreUpdate.current;
                              }
                              return childPropsSelector(
                                store.getState(),
                                wrapperProps
                              );
                            },
                        }[
                          'connect.wrapWithConnect.ConnectFunction.useMemo[actualChildPropsSelector].selector'
                        ];
                        return selector;
                      },
                  }[
                    'connect.wrapWithConnect.ConnectFunction.useMemo[actualChildPropsSelector]'
                  ],
                  [store, wrapperProps]
                );
              const subscribeForReact =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ](
                  {
                    'connect.wrapWithConnect.ConnectFunction.useMemo[subscribeForReact]':
                      () => {
                        const subscribe = {
                          'connect.wrapWithConnect.ConnectFunction.useMemo[subscribeForReact].subscribe':
                            (reactListener) => {
                              if (!subscription) {
                                return {
                                  'connect.wrapWithConnect.ConnectFunction.useMemo[subscribeForReact].subscribe':
                                    () => {},
                                }[
                                  'connect.wrapWithConnect.ConnectFunction.useMemo[subscribeForReact].subscribe'
                                ];
                              }
                              return subscribeUpdates(
                                shouldHandleStateChanges,
                                store,
                                subscription, // @ts-ignore
                                childPropsSelector,
                                lastWrapperProps,
                                lastChildProps,
                                renderIsScheduled,
                                isMounted,
                                childPropsFromStoreUpdate,
                                notifyNestedSubs,
                                reactListener
                              );
                            },
                        }[
                          'connect.wrapWithConnect.ConnectFunction.useMemo[subscribeForReact].subscribe'
                        ];
                        return subscribe;
                      },
                  }[
                    'connect.wrapWithConnect.ConnectFunction.useMemo[subscribeForReact]'
                  ],
                  [subscription]
                );
              useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [
                lastWrapperProps,
                lastChildProps,
                renderIsScheduled,
                wrapperProps,
                childPropsFromStoreUpdate,
                notifyNestedSubs,
              ]);
              let actualChildProps;
              try {
                actualChildProps =
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'useSyncExternalStore'
                  ](
                    // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing
                    subscribeForReact, // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,
                    // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.
                    actualChildPropsSelector,
                    getServerState
                      ? {
                          'connect.wrapWithConnect.ConnectFunction.useSyncExternalStore':
                            () =>
                              childPropsSelector(
                                getServerState(),
                                wrapperProps
                              ),
                        }[
                          'connect.wrapWithConnect.ConnectFunction.useSyncExternalStore'
                        ]
                      : actualChildPropsSelector
                  );
              } catch (err) {
                if (latestSubscriptionCallbackError.current) {
                  err.message +=
                    '\nThe error may be correlated with this previous error:\n'.concat(
                      latestSubscriptionCallbackError.current.stack,
                      '\n\n'
                    );
                }
                throw err;
              }
              useIsomorphicLayoutEffect(
                {
                  'connect.wrapWithConnect.ConnectFunction.useIsomorphicLayoutEffect':
                    () => {
                      latestSubscriptionCallbackError.current = void 0;
                      childPropsFromStoreUpdate.current = void 0;
                      lastChildProps.current = actualChildProps;
                    },
                }[
                  'connect.wrapWithConnect.ConnectFunction.useIsomorphicLayoutEffect'
                ]
              );
              const renderedWrappedComponent =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ](
                  {
                    'connect.wrapWithConnect.ConnectFunction.useMemo[renderedWrappedComponent]':
                      () => {
                        return (
                          // @ts-ignore
                          /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                            'createElement'
                          ](WrappedComponent, {
                            ...actualChildProps,
                            ref: reactReduxForwardedRef,
                          })
                        );
                      },
                  }[
                    'connect.wrapWithConnect.ConnectFunction.useMemo[renderedWrappedComponent]'
                  ],
                  [reactReduxForwardedRef, WrappedComponent, actualChildProps]
                );
              const renderedChild =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ](
                  {
                    'connect.wrapWithConnect.ConnectFunction.useMemo[renderedChild]':
                      () => {
                        if (shouldHandleStateChanges) {
                          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                            'createElement'
                          ](
                            ContextToUse.Provider,
                            {
                              value: overriddenContextValue,
                            },
                            renderedWrappedComponent
                          );
                        }
                        return renderedWrappedComponent;
                      },
                  }[
                    'connect.wrapWithConnect.ConnectFunction.useMemo[renderedChild]'
                  ],
                  [
                    ContextToUse,
                    renderedWrappedComponent,
                    overriddenContextValue,
                  ]
                );
              return renderedChild;
            }
            const _Connect =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'memo'
              ](ConnectFunction);
            const Connect = _Connect;
            Connect.WrappedComponent = WrappedComponent;
            Connect.displayName = ConnectFunction.displayName = displayName;
            if (forwardRef) {
              const _forwarded =
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'forwardRef'
                ](function forwardConnectRef(props, ref) {
                  return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'createElement'
                  ](Connect, {
                    ...props,
                    reactReduxForwardedRef: ref,
                  });
                });
              const forwarded = _forwarded;
              forwarded.displayName = displayName;
              forwarded.WrappedComponent = WrappedComponent;
              return /* @__PURE__ */ hoistNonReactStatics(
                forwarded,
                WrappedComponent
              );
            }
            return /* @__PURE__ */ hoistNonReactStatics(
              Connect,
              WrappedComponent
            );
          };
          return wrapWithConnect;
        }
        var connect_default = connect;
        // src/components/Provider.tsx
        function Provider(providerProps) {
          const { children, context, serverState, store } = providerProps;
          const contextValue =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'Provider.useMemo[contextValue]': () => {
                  const subscription = createSubscription(store);
                  const baseContextValue = {
                    store,
                    subscription,
                    getServerState: serverState
                      ? {
                          'Provider.useMemo[contextValue]': () => serverState,
                        }['Provider.useMemo[contextValue]']
                      : void 0,
                  };
                  if (('TURBOPACK compile-time falsy', 0));
                  else {
                    //TURBOPACK unreachable
                    const {
                      identityFunctionCheck = 'once',
                      stabilityCheck = 'once',
                    } = providerProps;
                    return /* @__PURE__ */ Object.assign(baseContextValue, {
                      stabilityCheck,
                      identityFunctionCheck,
                    });
                  }
                },
              }['Provider.useMemo[contextValue]'],
              [store, serverState]
            );
          const previousState =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useMemo'
            ](
              {
                'Provider.useMemo[previousState]': () => store.getState(),
              }['Provider.useMemo[previousState]'],
              [store]
            );
          useIsomorphicLayoutEffect(
            {
              'Provider.useIsomorphicLayoutEffect': () => {
                const { subscription } = contextValue;
                subscription.onStateChange = subscription.notifyNestedSubs;
                subscription.trySubscribe();
                if (previousState !== store.getState()) {
                  subscription.notifyNestedSubs();
                }
                return {
                  'Provider.useIsomorphicLayoutEffect': () => {
                    subscription.tryUnsubscribe();
                    subscription.onStateChange = void 0;
                  },
                }['Provider.useIsomorphicLayoutEffect'];
              },
            }['Provider.useIsomorphicLayoutEffect'],
            [contextValue, previousState]
          );
          const Context = context || ReactReduxContext;
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            Context.Provider,
            {
              value: contextValue,
            },
            children
          );
        }
        var Provider_default = Provider;
        // src/hooks/useReduxContext.ts
        function createReduxContextHook() {
          let context =
            arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : ReactReduxContext;
          return function useReduxContext2() {
            const contextValue =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useContext'
              ](context);
            if (
              ('TURBOPACK compile-time value', 'development') !==
                'production' &&
              !contextValue
            ) {
              throw new Error(
                'could not find react-redux context value; please ensure the component is wrapped in a <Provider>'
              );
            }
            return contextValue;
          };
        }
        var useReduxContext = /* @__PURE__ */ createReduxContextHook();
        // src/hooks/useStore.ts
        function createStoreHook() {
          let context =
            arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : ReactReduxContext;
          const useReduxContext2 =
            context === ReactReduxContext
              ? useReduxContext // @ts-ignore
              : createReduxContextHook(context);
          const useStore2 = () => {
            const { store } = useReduxContext2();
            return store;
          };
          Object.assign(useStore2, {
            withTypes: () => useStore2,
          });
          return useStore2;
        }
        var useStore = /* @__PURE__ */ createStoreHook();
        // src/hooks/useDispatch.ts
        function createDispatchHook() {
          let context =
            arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : ReactReduxContext;
          const useStore2 =
            context === ReactReduxContext ? useStore : createStoreHook(context);
          const useDispatch2 = () => {
            const store = useStore2();
            return store.dispatch;
          };
          Object.assign(useDispatch2, {
            withTypes: () => useDispatch2,
          });
          return useDispatch2;
        }
        var useDispatch = /* @__PURE__ */ createDispatchHook();
        var refEquality = (a, b) => a === b;
        function createSelectorHook() {
          let context =
            arguments.length > 0 && arguments[0] !== void 0
              ? arguments[0]
              : ReactReduxContext;
          const useReduxContext2 =
            context === ReactReduxContext
              ? useReduxContext
              : createReduxContextHook(context);
          const useSelector2 = function (selector) {
            let equalityFnOrOptions =
              arguments.length > 1 && arguments[1] !== void 0
                ? arguments[1]
                : {};
            const { equalityFn = refEquality } =
              typeof equalityFnOrOptions === 'function'
                ? {
                    equalityFn: equalityFnOrOptions,
                  }
                : equalityFnOrOptions;
            if (('TURBOPACK compile-time truthy', 1)) {
              if (!selector) {
                throw new Error('You must pass a selector to useSelector');
              }
              if (typeof selector !== 'function') {
                throw new Error(
                  'You must pass a function as a selector to useSelector'
                );
              }
              if (typeof equalityFn !== 'function') {
                throw new Error(
                  'You must pass a function as an equality function to useSelector'
                );
              }
            }
            const reduxContext = useReduxContext2();
            const { store, subscription, getServerState } = reduxContext;
            const firstRun =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ](true);
            const wrappedSelector =
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ](
                {
                  [selector.name](state) {
                    const selected = selector(state);
                    if (('TURBOPACK compile-time truthy', 1)) {
                      const { devModeChecks = {} } =
                        typeof equalityFnOrOptions === 'function'
                          ? {}
                          : equalityFnOrOptions;
                      const { identityFunctionCheck, stabilityCheck } =
                        reduxContext;
                      const {
                        identityFunctionCheck: finalIdentityFunctionCheck,
                        stabilityCheck: finalStabilityCheck,
                      } = {
                        stabilityCheck,
                        identityFunctionCheck,
                        ...devModeChecks,
                      };
                      if (
                        finalStabilityCheck === 'always' ||
                        (finalStabilityCheck === 'once' && firstRun.current)
                      ) {
                        const toCompare = selector(state);
                        if (!equalityFn(selected, toCompare)) {
                          let stack = void 0;
                          try {
                            throw new Error();
                          } catch (e) {
                            ({ stack } = e);
                          }
                          console.warn(
                            'Selector ' +
                              (selector.name || 'unknown') +
                              ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization',
                            {
                              state,
                              selected,
                              selected2: toCompare,
                              stack,
                            }
                          );
                        }
                      }
                      if (
                        finalIdentityFunctionCheck === 'always' ||
                        (finalIdentityFunctionCheck === 'once' &&
                          firstRun.current)
                      ) {
                        if (selected === state) {
                          let stack = void 0;
                          try {
                            throw new Error();
                          } catch (e) {
                            ({ stack } = e);
                          }
                          console.warn(
                            'Selector ' +
                              (selector.name || 'unknown') +
                              ' returned the root state when called. This can lead to unnecessary rerenders.\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.',
                            {
                              stack,
                            }
                          );
                        }
                      }
                      if (firstRun.current) firstRun.current = false;
                    }
                    return selected;
                  },
                }[selector.name],
                [selector]
              );
            const selectedState = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$sync$2d$external$2d$store$2f$with$2d$selector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useSyncExternalStoreWithSelector'
            ])(
              subscription.addNestedSub,
              store.getState,
              getServerState || store.getState,
              wrappedSelector,
              equalityFn
            );
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useDebugValue'
            ](selectedState);
            return selectedState;
          };
          Object.assign(useSelector2, {
            withTypes: () => useSelector2,
          });
          return useSelector2;
        }
        var useSelector = /* @__PURE__ */ createSelectorHook();
        // src/exports.ts
        var batch = defaultNoopBatch;
        //# sourceMappingURL=react-redux.mjs.map
      },
    '[project]/node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs [app-client] (ecmascript) <locals>':
      (__turbopack_context__) => {
        'use strict';

        // src/query/react/index.ts
        __turbopack_context__.s({
          ApiProvider: () => ApiProvider,
          UNINITIALIZED_VALUE: () => UNINITIALIZED_VALUE,
          createApi: () => createApi,
          reactHooksModule: () => reactHooksModule,
          reactHooksModuleName: () => reactHooksModuleName,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          /*#__PURE__*/ __turbopack_context__.i(
            '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/react-redux/dist/react-redux.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/reselect/dist/reselect.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        // src/query/react/ApiProvider.tsx
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs [app-client] (ecmascript) <locals>'
          );
        // src/query/utils/capitalize.ts
        function capitalize(str) {
          return str.replace(str[0], str[0].toUpperCase());
        }
        // src/query/utils/countObjectKeys.ts
        function countObjectKeys(obj) {
          let count = 0;
          for (const _key in obj) {
            count++;
          }
          return count;
        }
        // src/query/endpointDefinitions.ts
        function isQueryDefinition(e) {
          return e.type === 'query' /* query */;
        }
        function isMutationDefinition(e) {
          return e.type === 'mutation' /* mutation */;
        }
        function isInfiniteQueryDefinition(e) {
          return e.type === 'infinitequery' /* infinitequery */;
        }
        // src/query/tsHelpers.ts
        function safeAssign(target) {
          for (
            var _len = arguments.length,
              args = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key];
          }
          return Object.assign(target, ...args);
        }
        // src/query/react/constants.ts
        var UNINITIALIZED_VALUE = Symbol();
        function useStableQueryArgs(
          queryArgs,
          serialize,
          endpointDefinition,
          endpointName
        ) {
          const incoming = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ])(
            {
              'useStableQueryArgs.useMemo[incoming]': () => ({
                queryArgs,
                serialized:
                  typeof queryArgs == 'object'
                    ? serialize({
                        queryArgs,
                        endpointDefinition,
                        endpointName,
                      })
                    : queryArgs,
              }),
            }['useStableQueryArgs.useMemo[incoming]'],
            [queryArgs, serialize, endpointDefinition, endpointName]
          );
          const cache = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useRef'
          ])(incoming);
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ])(
            {
              'useStableQueryArgs.useEffect': () => {
                if (cache.current.serialized !== incoming.serialized) {
                  cache.current = incoming;
                }
              },
            }['useStableQueryArgs.useEffect'],
            [incoming]
          );
          return cache.current.serialized === incoming.serialized
            ? cache.current.queryArgs
            : queryArgs;
        }
        function useShallowStableValue(value) {
          const cache = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useRef'
          ])(value);
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ])(
            {
              'useShallowStableValue.useEffect2': () => {
                if (
                  !(0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'shallowEqual'
                  ])(cache.current, value)
                ) {
                  cache.current = value;
                }
              },
            }['useShallowStableValue.useEffect2'],
            [value]
          );
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'shallowEqual'
          ])(cache.current, value)
            ? cache.current
            : value;
        }
        // src/query/react/buildHooks.ts
        var canUseDOM = () =>
          !!(
            typeof window !== 'undefined' &&
            typeof window.document !== 'undefined' &&
            typeof window.document.createElement !== 'undefined'
          );
        var isDOM = /* @__PURE__ */ canUseDOM();
        var isRunningInReactNative = () =>
          typeof navigator !== 'undefined' &&
          navigator.product === 'ReactNative';
        var isReactNative = /* @__PURE__ */ isRunningInReactNative();
        var getUseIsomorphicLayoutEffect = () =>
          isDOM || isReactNative
            ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useLayoutEffect'
              ]
            : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ];
        var useIsomorphicLayoutEffect =
          /* @__PURE__ */ getUseIsomorphicLayoutEffect();
        var noPendingQueryStateSelector = (selected) => {
          if (selected.isUninitialized) {
            return {
              ...selected,
              isUninitialized: false,
              isFetching: true,
              isLoading: selected.data !== void 0 ? false : true,
              status:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'QueryStatus'
                ].pending,
            };
          }
          return selected;
        };
        function pick(obj) {
          for (
            var _len = arguments.length,
              keys = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            keys[_key - 1] = arguments[_key];
          }
          const ret = {};
          keys.forEach((key) => {
            ret[key] = obj[key];
          });
          return ret;
        }
        var COMMON_HOOK_DEBUG_FIELDS = [
          'data',
          'status',
          'isLoading',
          'isSuccess',
          'isError',
          'error',
        ];
        function buildHooks(param) {
          let {
            api,
            moduleOptions: {
              batch,
              hooks: { useDispatch, useSelector, useStore },
              unstable__sideEffectsInRender,
              createSelector,
            },
            serializeQueryArgs,
            context,
          } = param;
          const usePossiblyImmediateEffect = unstable__sideEffectsInRender
            ? (cb) => cb()
            : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ];
          return {
            buildQueryHooks,
            buildInfiniteQueryHooks,
            buildMutationHook,
            usePrefetch,
          };
          //TURBOPACK unreachable
          function queryStatePreSelector(currentState, lastResult, queryArgs) {
            if (
              (lastResult === null || lastResult === void 0
                ? void 0
                : lastResult.endpointName) &&
              currentState.isUninitialized
            ) {
              const { endpointName } = lastResult;
              const endpointDefinition =
                context.endpointDefinitions[endpointName];
              if (
                queryArgs !==
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'skipToken'
                  ] &&
                serializeQueryArgs({
                  queryArgs: lastResult.originalArgs,
                  endpointDefinition,
                  endpointName,
                }) ===
                  serializeQueryArgs({
                    queryArgs,
                    endpointDefinition,
                    endpointName,
                  })
              )
                lastResult = void 0;
            }
            let data = currentState.isSuccess
              ? currentState.data
              : lastResult === null || lastResult === void 0
                ? void 0
                : lastResult.data;
            if (data === void 0) data = currentState.data;
            const hasData = data !== void 0;
            const isFetching = currentState.isLoading;
            const isLoading =
              (!lastResult ||
                lastResult.isLoading ||
                lastResult.isUninitialized) &&
              !hasData &&
              isFetching;
            const isSuccess =
              currentState.isSuccess ||
              (hasData &&
                ((isFetching &&
                  !(lastResult === null || lastResult === void 0
                    ? void 0
                    : lastResult.isError)) ||
                  currentState.isUninitialized));
            return {
              ...currentState,
              data,
              currentData: currentState.data,
              isFetching,
              isLoading,
              isSuccess,
            };
          }
          function infiniteQueryStatePreSelector(
            currentState,
            lastResult,
            queryArgs
          ) {
            if (
              (lastResult === null || lastResult === void 0
                ? void 0
                : lastResult.endpointName) &&
              currentState.isUninitialized
            ) {
              const { endpointName } = lastResult;
              const endpointDefinition =
                context.endpointDefinitions[endpointName];
              if (
                queryArgs !==
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'skipToken'
                  ] &&
                serializeQueryArgs({
                  queryArgs: lastResult.originalArgs,
                  endpointDefinition,
                  endpointName,
                }) ===
                  serializeQueryArgs({
                    queryArgs,
                    endpointDefinition,
                    endpointName,
                  })
              )
                lastResult = void 0;
            }
            let data = currentState.isSuccess
              ? currentState.data
              : lastResult === null || lastResult === void 0
                ? void 0
                : lastResult.data;
            if (data === void 0) data = currentState.data;
            const hasData = data !== void 0;
            const isFetching = currentState.isLoading;
            const isLoading =
              (!lastResult ||
                lastResult.isLoading ||
                lastResult.isUninitialized) &&
              !hasData &&
              isFetching;
            const isSuccess = currentState.isSuccess || (isFetching && hasData);
            return {
              ...currentState,
              data,
              currentData: currentState.data,
              isFetching,
              isLoading,
              isSuccess,
            };
          }
          function usePrefetch(endpointName, defaultOptions) {
            const dispatch = useDispatch();
            const stableDefaultOptions = useShallowStableValue(defaultOptions);
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useCallback'
            ])(
              {
                'buildHooks.usePrefetch.useCallback': (arg, options) =>
                  dispatch(
                    api.util.prefetch(endpointName, arg, {
                      ...stableDefaultOptions,
                      ...options,
                    })
                  ),
              }['buildHooks.usePrefetch.useCallback'],
              [endpointName, dispatch, stableDefaultOptions]
            );
          }
          function useQuerySubscriptionCommonImpl(endpointName, arg) {
            let {
              refetchOnReconnect,
              refetchOnFocus,
              refetchOnMountOrArgChange,
              skip = false,
              pollingInterval = 0,
              skipPollingIfUnfocused = false,
              ...rest
            } = arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : {};
            const { initiate } = api.endpoints[endpointName];
            const dispatch = useDispatch();
            const subscriptionSelectorsRef = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ])(void 0);
            if (!subscriptionSelectorsRef.current) {
              const returnedValue = dispatch(
                api.internalActions.internal_getRTKQSubscriptions()
              );
              if (('TURBOPACK compile-time truthy', 1)) {
                if (
                  typeof returnedValue !== 'object' ||
                  typeof (returnedValue === null || returnedValue === void 0
                    ? void 0
                    : returnedValue.type) === 'string'
                ) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : 'Warning: Middleware for RTK-Query API at reducerPath "'.concat(
                          api.reducerPath,
                          '" has not been added to the store.\n    You must add the middleware for RTK-Query to function correctly!'
                        )
                  );
                }
              }
              subscriptionSelectorsRef.current = returnedValue;
            }
            const stableArg = useStableQueryArgs(
              skip
                ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'skipToken'
                  ]
                : arg, // Even if the user provided a per-endpoint `serializeQueryArgs` with
              // a consistent return value, _here_ we want to use the default behavior
              // so we can tell if _anything_ actually changed. Otherwise, we can end up
              // with a case where the query args did change but the serialization doesn't,
              // and then we never try to initiate a refetch.
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'defaultSerializeQueryArgs'
              ],
              context.endpointDefinitions[endpointName],
              endpointName
            );
            const stableSubscriptionOptions = useShallowStableValue({
              refetchOnReconnect,
              refetchOnFocus,
              pollingInterval,
              skipPollingIfUnfocused,
            });
            const initialPageParam = rest.initialPageParam;
            const stableInitialPageParam =
              useShallowStableValue(initialPageParam);
            const promiseRef = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useRef'
            ])(void 0);
            let { queryCacheKey, requestId } = promiseRef.current || {};
            let currentRenderHasSubscription = false;
            if (queryCacheKey && requestId) {
              currentRenderHasSubscription =
                subscriptionSelectorsRef.current.isRequestSubscribed(
                  queryCacheKey,
                  requestId
                );
            }
            const subscriptionRemoved =
              !currentRenderHasSubscription && promiseRef.current !== void 0;
            usePossiblyImmediateEffect(
              {
                'buildHooks.useQuerySubscriptionCommonImpl.usePossiblyImmediateEffect':
                  () => {
                    if (subscriptionRemoved) {
                      promiseRef.current = void 0;
                    }
                  },
              }[
                'buildHooks.useQuerySubscriptionCommonImpl.usePossiblyImmediateEffect'
              ],
              [subscriptionRemoved]
            );
            usePossiblyImmediateEffect(
              {
                'buildHooks.useQuerySubscriptionCommonImpl.usePossiblyImmediateEffect':
                  () => {
                    var _promiseRef_current;
                    const lastPromise = promiseRef.current;
                    if (
                      ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
                    );
                    if (
                      stableArg ===
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'skipToken'
                      ]
                    ) {
                      lastPromise === null || lastPromise === void 0
                        ? void 0
                        : lastPromise.unsubscribe();
                      promiseRef.current = void 0;
                      return;
                    }
                    const lastSubscriptionOptions =
                      (_promiseRef_current = promiseRef.current) === null ||
                      _promiseRef_current === void 0
                        ? void 0
                        : _promiseRef_current.subscriptionOptions;
                    if (!lastPromise || lastPromise.arg !== stableArg) {
                      lastPromise === null || lastPromise === void 0
                        ? void 0
                        : lastPromise.unsubscribe();
                      const promise = dispatch(
                        initiate(stableArg, {
                          subscriptionOptions: stableSubscriptionOptions,
                          forceRefetch: refetchOnMountOrArgChange,
                          ...(isInfiniteQueryDefinition(
                            context.endpointDefinitions[endpointName]
                          )
                            ? {
                                initialPageParam: stableInitialPageParam,
                              }
                            : {}),
                        })
                      );
                      promiseRef.current = promise;
                    } else if (
                      stableSubscriptionOptions !== lastSubscriptionOptions
                    ) {
                      lastPromise.updateSubscriptionOptions(
                        stableSubscriptionOptions
                      );
                    }
                  },
              }[
                'buildHooks.useQuerySubscriptionCommonImpl.usePossiblyImmediateEffect'
              ],
              [
                dispatch,
                initiate,
                refetchOnMountOrArgChange,
                stableArg,
                stableSubscriptionOptions,
                subscriptionRemoved,
                stableInitialPageParam,
                endpointName,
              ]
            );
            return [promiseRef, dispatch, initiate, stableSubscriptionOptions];
          }
          function buildUseQueryState(endpointName, preSelector) {
            const useQueryState = function (arg) {
              let { skip = false, selectFromResult } =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              const { select } = api.endpoints[endpointName];
              const stableArg = useStableQueryArgs(
                skip
                  ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'skipToken'
                    ]
                  : arg,
                serializeQueryArgs,
                context.endpointDefinitions[endpointName],
                endpointName
              );
              const lastValue = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ])(void 0);
              const selectDefaultResult = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]':
                    () =>
                      // Normally ts-ignores are bad and should be avoided, but we're
                      // already casting this selector to be `Selector<any>` anyway,
                      // so the inconsistencies don't matter here
                      // @ts-ignore
                      createSelector(
                        [
                          // @ts-ignore
                          select(stableArg),
                          {
                            'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]':
                              (_, lastResult) => lastResult,
                          }[
                            'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]'
                          ],
                          {
                            'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]':
                              (_) => stableArg,
                          }[
                            'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]'
                          ],
                        ],
                        preSelector,
                        {
                          memoizeOptions: {
                            resultEqualityCheck:
                              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                                'shallowEqual'
                              ],
                          },
                        }
                      ),
                }[
                  'buildHooks.buildUseQueryState.useQueryState.useMemo2[selectDefaultResult]'
                ],
                [select, stableArg]
              );
              const querySelector = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildUseQueryState.useQueryState.useMemo2[querySelector]':
                    () =>
                      selectFromResult
                        ? createSelector(
                            [selectDefaultResult],
                            selectFromResult,
                            {
                              devModeChecks: {
                                identityFunctionCheck: 'never',
                              },
                            }
                          )
                        : selectDefaultResult,
                }[
                  'buildHooks.buildUseQueryState.useQueryState.useMemo2[querySelector]'
                ],
                [selectDefaultResult, selectFromResult]
              );
              const currentState = useSelector(
                {
                  'buildHooks.buildUseQueryState.useQueryState.useSelector[currentState]':
                    (state) => querySelector(state, lastValue.current),
                }[
                  'buildHooks.buildUseQueryState.useQueryState.useSelector[currentState]'
                ],
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'shallowEqual'
                ]
              );
              const store = useStore();
              const newLastValue = selectDefaultResult(
                store.getState(),
                lastValue.current
              );
              useIsomorphicLayoutEffect(
                {
                  'buildHooks.buildUseQueryState.useQueryState.useIsomorphicLayoutEffect':
                    () => {
                      lastValue.current = newLastValue;
                    },
                }[
                  'buildHooks.buildUseQueryState.useQueryState.useIsomorphicLayoutEffect'
                ],
                [newLastValue]
              );
              return currentState;
            };
            return useQueryState;
          }
          function usePromiseRefUnsubscribeOnUnmount(promiseRef) {
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useEffect'
            ])(
              {
                'buildHooks.usePromiseRefUnsubscribeOnUnmount.useEffect3':
                  () => {
                    return {
                      'buildHooks.usePromiseRefUnsubscribeOnUnmount.useEffect3':
                        () => {
                          var _promiseRef_current_unsubscribe,
                            _promiseRef_current;
                          (_promiseRef_current = promiseRef.current) === null ||
                          _promiseRef_current === void 0
                            ? void 0
                            : (_promiseRef_current_unsubscribe =
                                  _promiseRef_current.unsubscribe) === null ||
                                _promiseRef_current_unsubscribe === void 0
                              ? void 0
                              : _promiseRef_current_unsubscribe.call(
                                  _promiseRef_current
                                );
                          promiseRef.current = void 0;
                        },
                    }[
                      'buildHooks.usePromiseRefUnsubscribeOnUnmount.useEffect3'
                    ];
                  },
              }['buildHooks.usePromiseRefUnsubscribeOnUnmount.useEffect3'],
              [promiseRef]
            );
          }
          function refetchOrErrorIfUnmounted(promiseRef) {
            if (!promiseRef.current)
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'Cannot refetch a query that has not been started yet.'
              );
            return promiseRef.current.refetch();
          }
          function buildQueryHooks(endpointName) {
            const useQuerySubscription = function (arg) {
              let options =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              const [promiseRef] = useQuerySubscriptionCommonImpl(
                endpointName,
                arg,
                options
              );
              usePromiseRefUnsubscribeOnUnmount(promiseRef);
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildQueryHooks.useQuerySubscription.useMemo2':
                    () => ({
                      /**
                       * A method to manually refetch data for the query
                       */ refetch: {
                        'buildHooks.buildQueryHooks.useQuerySubscription.useMemo2':
                          () => refetchOrErrorIfUnmounted(promiseRef),
                      }[
                        'buildHooks.buildQueryHooks.useQuerySubscription.useMemo2'
                      ],
                    }),
                }['buildHooks.buildQueryHooks.useQuerySubscription.useMemo2'],
                [promiseRef]
              );
            };
            const useLazyQuerySubscription = function () {
              let {
                refetchOnReconnect,
                refetchOnFocus,
                pollingInterval = 0,
                skipPollingIfUnfocused = false,
              } = arguments.length > 0 && arguments[0] !== void 0
                ? arguments[0]
                : {};
              const { initiate } = api.endpoints[endpointName];
              const dispatch = useDispatch();
              const [arg, setArg] = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useState'
              ])(UNINITIALIZED_VALUE);
              const promiseRef = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ])(void 0);
              const stableSubscriptionOptions = useShallowStableValue({
                refetchOnReconnect,
                refetchOnFocus,
                pollingInterval,
                skipPollingIfUnfocused,
              });
              usePossiblyImmediateEffect(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.usePossiblyImmediateEffect':
                    () => {
                      var _promiseRef_current;
                      const lastSubscriptionOptions =
                        (_promiseRef_current = promiseRef.current) === null ||
                        _promiseRef_current === void 0
                          ? void 0
                          : _promiseRef_current.subscriptionOptions;
                      if (
                        stableSubscriptionOptions !== lastSubscriptionOptions
                      ) {
                        var _promiseRef_current1;
                        (_promiseRef_current1 = promiseRef.current) === null ||
                        _promiseRef_current1 === void 0
                          ? void 0
                          : _promiseRef_current1.updateSubscriptionOptions(
                              stableSubscriptionOptions
                            );
                      }
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.usePossiblyImmediateEffect'
                ],
                [stableSubscriptionOptions]
              );
              const subscriptionOptionsRef = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ])(stableSubscriptionOptions);
              usePossiblyImmediateEffect(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.usePossiblyImmediateEffect':
                    () => {
                      subscriptionOptionsRef.current =
                        stableSubscriptionOptions;
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.usePossiblyImmediateEffect'
                ],
                [stableSubscriptionOptions]
              );
              const trigger = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[trigger]':
                    function (arg2) {
                      let preferCacheValue =
                        arguments.length > 1 && arguments[1] !== void 0
                          ? arguments[1]
                          : false;
                      let promise;
                      batch(
                        {
                          'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[trigger]':
                            () => {
                              var _promiseRef_current;
                              (_promiseRef_current = promiseRef.current) ===
                                null || _promiseRef_current === void 0
                                ? void 0
                                : _promiseRef_current.unsubscribe();
                              promiseRef.current = promise = dispatch(
                                initiate(arg2, {
                                  subscriptionOptions:
                                    subscriptionOptionsRef.current,
                                  forceRefetch: !preferCacheValue,
                                })
                              );
                              setArg(arg2);
                            },
                        }[
                          'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[trigger]'
                        ]
                      );
                      return promise;
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[trigger]'
                ],
                [dispatch, initiate]
              );
              const reset = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[reset]':
                    () => {
                      var _promiseRef_current;
                      if (
                        (_promiseRef_current = promiseRef.current) === null ||
                        _promiseRef_current === void 0
                          ? void 0
                          : _promiseRef_current.queryCacheKey
                      ) {
                        var _promiseRef_current1;
                        dispatch(
                          api.internalActions.removeQueryResult({
                            queryCacheKey:
                              (_promiseRef_current1 = promiseRef.current) ===
                                null || _promiseRef_current1 === void 0
                                ? void 0
                                : _promiseRef_current1.queryCacheKey,
                          })
                        );
                      }
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useCallback[reset]'
                ],
                [dispatch]
              );
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ])(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3':
                    () => {
                      return {
                        'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3':
                          () => {
                            var _promiseRef_current;
                            promiseRef === null || promiseRef === void 0
                              ? void 0
                              : (_promiseRef_current = promiseRef.current) ===
                                    null || _promiseRef_current === void 0
                                ? void 0
                                : _promiseRef_current.unsubscribe();
                          },
                      }[
                        'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3'
                      ];
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3'
                ],
                []
              );
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ])(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3':
                    () => {
                      if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {
                        trigger(arg, true);
                      }
                    },
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useEffect3'
                ],
                [arg, trigger]
              );
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useMemo2':
                    () => [
                      trigger,
                      arg,
                      {
                        reset,
                      },
                    ],
                }[
                  'buildHooks.buildQueryHooks.useLazyQuerySubscription.useMemo2'
                ],
                [trigger, arg, reset]
              );
            };
            const useQueryState = buildUseQueryState(
              endpointName,
              queryStatePreSelector
            );
            return {
              useQueryState,
              useQuerySubscription,
              useLazyQuerySubscription,
              useLazyQuery(options) {
                const [trigger, arg, { reset }] =
                  useLazyQuerySubscription(options);
                const queryStateResults = useQueryState(arg, {
                  ...options,
                  skip: arg === UNINITIALIZED_VALUE,
                });
                const info = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ])(
                  {
                    'buildHooks.buildQueryHooks.useMemo2[info]': () => ({
                      lastArg: arg,
                    }),
                  }['buildHooks.buildQueryHooks.useMemo2[info]'],
                  [arg]
                );
                return (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ])(
                  {
                    'buildHooks.buildQueryHooks.useMemo2': () => [
                      trigger,
                      {
                        ...queryStateResults,
                        reset,
                      },
                      info,
                    ],
                  }['buildHooks.buildQueryHooks.useMemo2'],
                  [trigger, queryStateResults, reset, info]
                );
              },
              useQuery(arg, options) {
                const querySubscriptionResults = useQuerySubscription(
                  arg,
                  options
                );
                const queryStateResults = useQueryState(arg, {
                  selectFromResult:
                    arg ===
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'skipToken'
                      ] ||
                    (options === null || options === void 0
                      ? void 0
                      : options.skip)
                      ? void 0
                      : noPendingQueryStateSelector,
                  ...options,
                });
                const debugValue = pick(
                  queryStateResults,
                  ...COMMON_HOOK_DEBUG_FIELDS
                );
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useDebugValue'
                ])(debugValue);
                return (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ])(
                  {
                    'buildHooks.buildQueryHooks.useMemo2': () => ({
                      ...queryStateResults,
                      ...querySubscriptionResults,
                    }),
                  }['buildHooks.buildQueryHooks.useMemo2'],
                  [queryStateResults, querySubscriptionResults]
                );
              },
            };
          }
          function buildInfiniteQueryHooks(endpointName) {
            const useInfiniteQuerySubscription = function (arg) {
              let options =
                arguments.length > 1 && arguments[1] !== void 0
                  ? arguments[1]
                  : {};
              const [
                promiseRef,
                dispatch,
                initiate,
                stableSubscriptionOptions,
              ] = useQuerySubscriptionCommonImpl(endpointName, arg, options);
              const subscriptionOptionsRef = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useRef'
              ])(stableSubscriptionOptions);
              usePossiblyImmediateEffect(
                {
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.usePossiblyImmediateEffect':
                    () => {
                      subscriptionOptionsRef.current =
                        stableSubscriptionOptions;
                    },
                }[
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.usePossiblyImmediateEffect'
                ],
                [stableSubscriptionOptions]
              );
              const trigger = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[trigger]':
                    function (arg2, direction) {
                      let promise;
                      batch(
                        {
                          'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[trigger]':
                            () => {
                              var _promiseRef_current;
                              (_promiseRef_current = promiseRef.current) ===
                                null || _promiseRef_current === void 0
                                ? void 0
                                : _promiseRef_current.unsubscribe();
                              promiseRef.current = promise = dispatch(
                                initiate(arg2, {
                                  subscriptionOptions:
                                    subscriptionOptionsRef.current,
                                  direction,
                                })
                              );
                            },
                        }[
                          'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[trigger]'
                        ]
                      );
                      return promise;
                    },
                }[
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[trigger]'
                ],
                [promiseRef, dispatch, initiate]
              );
              usePromiseRefUnsubscribeOnUnmount(promiseRef);
              const stableArg = useStableQueryArgs(
                options.skip
                  ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'skipToken'
                    ]
                  : arg, // Even if the user provided a per-endpoint `serializeQueryArgs` with
                // a consistent return value, _here_ we want to use the default behavior
                // so we can tell if _anything_ actually changed. Otherwise, we can end up
                // with a case where the query args did change but the serialization doesn't,
                // and then we never try to initiate a refetch.
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'defaultSerializeQueryArgs'
                ],
                context.endpointDefinitions[endpointName],
                endpointName
              );
              const refetch = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[refetch]':
                    () => refetchOrErrorIfUnmounted(promiseRef),
                }[
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useCallback[refetch]'
                ],
                [promiseRef]
              );
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2':
                    () => {
                      const fetchNextPage = {
                        'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2.fetchNextPage':
                          () => {
                            return trigger(stableArg, 'forward');
                          },
                      }[
                        'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2.fetchNextPage'
                      ];
                      const fetchPreviousPage = {
                        'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2.fetchPreviousPage':
                          () => {
                            return trigger(stableArg, 'backward');
                          },
                      }[
                        'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2.fetchPreviousPage'
                      ];
                      return {
                        trigger,
                        /**
                         * A method to manually refetch data for the query
                         */ refetch,
                        fetchNextPage,
                        fetchPreviousPage,
                      };
                    },
                }[
                  'buildHooks.buildInfiniteQueryHooks.useInfiniteQuerySubscription.useMemo2'
                ],
                [refetch, trigger, stableArg]
              );
            };
            const useInfiniteQueryState = buildUseQueryState(
              endpointName,
              infiniteQueryStatePreSelector
            );
            return {
              useInfiniteQueryState,
              useInfiniteQuerySubscription,
              useInfiniteQuery(arg, options) {
                const { refetch, fetchNextPage, fetchPreviousPage } =
                  useInfiniteQuerySubscription(arg, options);
                const queryStateResults = useInfiniteQueryState(arg, {
                  selectFromResult:
                    arg ===
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'skipToken'
                      ] ||
                    (options === null || options === void 0
                      ? void 0
                      : options.skip)
                      ? void 0
                      : noPendingQueryStateSelector,
                  ...options,
                });
                const debugValue = pick(
                  queryStateResults,
                  ...COMMON_HOOK_DEBUG_FIELDS,
                  'hasNextPage',
                  'hasPreviousPage'
                );
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useDebugValue'
                ])(debugValue);
                return (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useMemo'
                ])(
                  {
                    'buildHooks.buildInfiniteQueryHooks.useMemo2': () => ({
                      ...queryStateResults,
                      fetchNextPage,
                      fetchPreviousPage,
                      refetch,
                    }),
                  }['buildHooks.buildInfiniteQueryHooks.useMemo2'],
                  [queryStateResults, fetchNextPage, fetchPreviousPage, refetch]
                );
              },
            };
          }
          function buildMutationHook(name) {
            return function () {
              let { selectFromResult, fixedCacheKey } =
                arguments.length > 0 && arguments[0] !== void 0
                  ? arguments[0]
                  : {};
              const { select, initiate } = api.endpoints[name];
              const dispatch = useDispatch();
              const [promise, setPromise] = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useState'
              ])();
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useEffect'
              ])(
                {
                  'buildHooks.buildMutationHook.useEffect3': () =>
                    ({
                      'buildHooks.buildMutationHook.useEffect3': () => {
                        if (
                          !(promise === null || promise === void 0
                            ? void 0
                            : promise.arg.fixedCacheKey)
                        ) {
                          promise === null || promise === void 0
                            ? void 0
                            : promise.reset();
                        }
                      },
                    })['buildHooks.buildMutationHook.useEffect3'],
                }['buildHooks.buildMutationHook.useEffect3'],
                [promise]
              );
              const triggerMutation = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildMutationHook.useCallback[triggerMutation]':
                    function (arg) {
                      const promise2 = dispatch(
                        initiate(arg, {
                          fixedCacheKey,
                        })
                      );
                      setPromise(promise2);
                      return promise2;
                    },
                }['buildHooks.buildMutationHook.useCallback[triggerMutation]'],
                [dispatch, initiate, fixedCacheKey]
              );
              const { requestId } = promise || {};
              const selectDefaultResult = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildMutationHook.useMemo2[selectDefaultResult]':
                    () =>
                      select({
                        fixedCacheKey,
                        requestId:
                          promise === null || promise === void 0
                            ? void 0
                            : promise.requestId,
                      }),
                }['buildHooks.buildMutationHook.useMemo2[selectDefaultResult]'],
                [fixedCacheKey, promise, select]
              );
              const mutationSelector = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildMutationHook.useMemo2[mutationSelector]':
                    () =>
                      selectFromResult
                        ? createSelector(
                            [selectDefaultResult],
                            selectFromResult
                          )
                        : selectDefaultResult,
                }['buildHooks.buildMutationHook.useMemo2[mutationSelector]'],
                [selectFromResult, selectDefaultResult]
              );
              const currentState = useSelector(
                mutationSelector,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'shallowEqual'
                ]
              );
              const originalArgs =
                fixedCacheKey == null
                  ? promise === null || promise === void 0
                    ? void 0
                    : promise.arg.originalArgs
                  : void 0;
              const reset = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useCallback'
              ])(
                {
                  'buildHooks.buildMutationHook.useCallback[reset]': () => {
                    batch(
                      {
                        'buildHooks.buildMutationHook.useCallback[reset]':
                          () => {
                            if (promise) {
                              setPromise(void 0);
                            }
                            if (fixedCacheKey) {
                              dispatch(
                                api.internalActions.removeMutationResult({
                                  requestId,
                                  fixedCacheKey,
                                })
                              );
                            }
                          },
                      }['buildHooks.buildMutationHook.useCallback[reset]']
                    );
                  },
                }['buildHooks.buildMutationHook.useCallback[reset]'],
                [dispatch, fixedCacheKey, promise, requestId]
              );
              const debugValue = pick(
                currentState,
                ...COMMON_HOOK_DEBUG_FIELDS,
                'endpointName'
              );
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useDebugValue'
              ])(debugValue);
              const finalState = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildMutationHook.useMemo2[finalState]': () => ({
                    ...currentState,
                    originalArgs,
                    reset,
                  }),
                }['buildHooks.buildMutationHook.useMemo2[finalState]'],
                [currentState, originalArgs, reset]
              );
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                {
                  'buildHooks.buildMutationHook.useMemo2': () => [
                    triggerMutation,
                    finalState,
                  ],
                }['buildHooks.buildMutationHook.useMemo2'],
                [triggerMutation, finalState]
              );
            };
          }
        }
        // src/query/react/module.ts
        var reactHooksModuleName = /* @__PURE__ */ Symbol();
        var reactHooksModule = function () {
          let {
            batch = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'batch'
            ],
            hooks = {
              useDispatch:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useDispatch'
                ],
              useSelector:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useSelector'
                ],
              useStore:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'useStore'
                ],
            },
            createSelector = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'createSelector'
            ],
            unstable__sideEffectsInRender = false,
            ...rest
          } = arguments.length > 0 && arguments[0] !== void 0
            ? arguments[0]
            : {};
          if (('TURBOPACK compile-time truthy', 1)) {
            const hookNames = ['useDispatch', 'useSelector', 'useStore'];
            let warned = false;
            for (const hookName of hookNames) {
              if (countObjectKeys(rest) > 0) {
                if (rest[hookName]) {
                  if (!warned) {
                    console.warn(
                      'As of RTK 2.0, the hooks now need to be specified as one object, provided under a `hooks` key:\n`reactHooksModule({ hooks: { useDispatch, useSelector, useStore } })`'
                    );
                    warned = true;
                  }
                }
                hooks[hookName] = rest[hookName];
              }
              if (typeof hooks[hookName] !== 'function') {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : 'When using custom hooks for context, all '
                        .concat(
                          hookNames.length,
                          ' hooks need to be provided: '
                        )
                        .concat(hookNames.join(', '), '.\nHook ')
                        .concat(
                          hookName,
                          ' was either not provided or not a function.'
                        )
                );
              }
            }
          }
          return {
            name: reactHooksModuleName,
            init(api, param, context) {
              let { serializeQueryArgs } = param;
              const anyApi = api;
              const {
                buildQueryHooks,
                buildInfiniteQueryHooks,
                buildMutationHook,
                usePrefetch,
              } = buildHooks({
                api,
                moduleOptions: {
                  batch,
                  hooks,
                  unstable__sideEffectsInRender,
                  createSelector,
                },
                serializeQueryArgs,
                context,
              });
              safeAssign(anyApi, {
                usePrefetch,
              });
              safeAssign(context, {
                batch,
              });
              return {
                injectEndpoint(endpointName, definition) {
                  if (isQueryDefinition(definition)) {
                    const {
                      useQuery,
                      useLazyQuery,
                      useLazyQuerySubscription,
                      useQueryState,
                      useQuerySubscription,
                    } = buildQueryHooks(endpointName);
                    safeAssign(anyApi.endpoints[endpointName], {
                      useQuery,
                      useLazyQuery,
                      useLazyQuerySubscription,
                      useQueryState,
                      useQuerySubscription,
                    });
                    api['use'.concat(capitalize(endpointName), 'Query')] =
                      useQuery;
                    api['useLazy'.concat(capitalize(endpointName), 'Query')] =
                      useLazyQuery;
                  }
                  if (isMutationDefinition(definition)) {
                    const useMutation = buildMutationHook(endpointName);
                    safeAssign(anyApi.endpoints[endpointName], {
                      useMutation,
                    });
                    api['use'.concat(capitalize(endpointName), 'Mutation')] =
                      useMutation;
                  } else if (isInfiniteQueryDefinition(definition)) {
                    const {
                      useInfiniteQuery,
                      useInfiniteQuerySubscription,
                      useInfiniteQueryState,
                    } = buildInfiniteQueryHooks(endpointName);
                    safeAssign(anyApi.endpoints[endpointName], {
                      useInfiniteQuery,
                      useInfiniteQuerySubscription,
                      useInfiniteQueryState,
                    });
                    api[
                      'use'.concat(capitalize(endpointName), 'InfiniteQuery')
                    ] = useInfiniteQuery;
                  }
                },
              };
            },
          };
        };
        function ApiProvider(props) {
          const context =
            props.context ||
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'ReactReduxContext'
            ];
          const existingContext = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useContext'
          ])(context);
          if (existingContext) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Existing Redux context detected. If you already have a store set up, please use the traditional Redux setup.'
            );
          }
          const [store] =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'useState'
            ](
              {
                'ApiProvider.useState': () =>
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    'configureStore'
                  ])({
                    reducer: {
                      [props.api.reducerPath]: props.api.reducer,
                    },
                    middleware: {
                      'ApiProvider.useState': (gDM) =>
                        gDM().concat(props.api.middleware),
                    }['ApiProvider.useState'],
                  }),
              }['ApiProvider.useState']
            );
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ])(
            {
              'ApiProvider.useEffect4': () =>
                props.setupListeners === false
                  ? void 0
                  : (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'setupListeners'
                    ])(store.dispatch, props.setupListeners),
            }['ApiProvider.useEffect4'],
            [props.setupListeners, store.dispatch]
          );
          return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'createElement'
          ](
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$react$2d$redux$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Provider'
            ],
            {
              store,
              context,
            },
            props.children
          );
        }
        // src/query/react/index.ts
        var createApi = /* @__PURE__ */ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
          'buildCreateApi'
        ])(
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'coreModule'
          ])(),
          reactHooksModule()
        );
        //# sourceMappingURL=rtk-query-react.modern.mjs.map
      },
    '[project]/node_modules/tslib/tslib.es6.mjs [app-client] (ecmascript)': (
      __turbopack_context__
    ) => {
      'use strict';

      /******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ __turbopack_context__.s(
        {
          __addDisposableResource: () => __addDisposableResource,
          __assign: () => __assign,
          __asyncDelegator: () => __asyncDelegator,
          __asyncGenerator: () => __asyncGenerator,
          __asyncValues: () => __asyncValues,
          __await: () => __await,
          __awaiter: () => __awaiter,
          __classPrivateFieldGet: () => __classPrivateFieldGet,
          __classPrivateFieldIn: () => __classPrivateFieldIn,
          __classPrivateFieldSet: () => __classPrivateFieldSet,
          __createBinding: () => __createBinding,
          __decorate: () => __decorate,
          __disposeResources: () => __disposeResources,
          __esDecorate: () => __esDecorate,
          __exportStar: () => __exportStar,
          __extends: () => __extends,
          __generator: () => __generator,
          __importDefault: () => __importDefault,
          __importStar: () => __importStar,
          __makeTemplateObject: () => __makeTemplateObject,
          __metadata: () => __metadata,
          __param: () => __param,
          __propKey: () => __propKey,
          __read: () => __read,
          __rest: () => __rest,
          __rewriteRelativeImportExtension: () =>
            __rewriteRelativeImportExtension,
          __runInitializers: () => __runInitializers,
          __setFunctionName: () => __setFunctionName,
          __spread: () => __spread,
          __spreadArray: () => __spreadArray,
          __spreadArrays: () => __spreadArrays,
          __values: () => __values,
          default: () => __TURBOPACK__default__export__,
        }
      );
      var extendStatics = function (d, b) {
        extendStatics =
          Object.setPrototypeOf ||
          ({
            __proto__: [],
          } instanceof Array &&
            function (d, b) {
              d.__proto__ = b;
            }) ||
          function (d, b) {
            for (var p in b)
              if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };
        return extendStatics(d, b);
      };
      function __extends(d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError(
            'Class extends value ' + String(b) + ' is not a constructor or null'
          );
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype =
          b === null
            ? Object.create(b)
            : ((__.prototype = b.prototype), new __());
      }
      var __assign = function () {
        __assign =
          Object.assign ||
          function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
          };
        return __assign.apply(this, arguments);
      };
      function __rest(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (
            var i = 0, p = Object.getOwnPropertySymbols(s);
            i < p.length;
            i++
          ) {
            if (
              e.indexOf(p[i]) < 0 &&
              Object.prototype.propertyIsEnumerable.call(s, p[i])
            )
              t[p[i]] = s[p[i]];
          }
        return t;
      }
      function __decorate(decorators, target, key, desc) {
        var c = arguments.length,
          r =
            c < 3
              ? target
              : desc === null
                ? (desc = Object.getOwnPropertyDescriptor(target, key))
                : desc,
          d;
        if (
          typeof Reflect === 'object' &&
          typeof Reflect.decorate === 'function'
        )
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i]))
              r =
                (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      }
      function __param(paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      }
      function __esDecorate(
        ctor,
        descriptorIn,
        decorators,
        contextIn,
        initializers,
        extraInitializers
      ) {
        function accept(f) {
          if (f !== void 0 && typeof f !== 'function')
            throw new TypeError('Function expected');
          return f;
        }
        var kind = contextIn.kind,
          key = kind === 'getter' ? 'get' : kind === 'setter' ? 'set' : 'value';
        var target =
          !descriptorIn && ctor
            ? contextIn['static']
              ? ctor
              : ctor.prototype
            : null;
        var descriptor =
          descriptorIn ||
          (target
            ? Object.getOwnPropertyDescriptor(target, contextIn.name)
            : {});
        var _,
          done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
          var context = {};
          for (var p in contextIn)
            context[p] = p === 'access' ? {} : contextIn[p];
          for (var p in contextIn.access)
            context.access[p] = contextIn.access[p];
          context.addInitializer = function (f) {
            if (done)
              throw new TypeError(
                'Cannot add initializers after decoration has completed'
              );
            extraInitializers.push(accept(f || null));
          };
          var result = (0, decorators[i])(
            kind === 'accessor'
              ? {
                  get: descriptor.get,
                  set: descriptor.set,
                }
              : descriptor[key],
            context
          );
          if (kind === 'accessor') {
            if (result === void 0) continue;
            if (result === null || typeof result !== 'object')
              throw new TypeError('Object expected');
            if ((_ = accept(result.get))) descriptor.get = _;
            if ((_ = accept(result.set))) descriptor.set = _;
            if ((_ = accept(result.init))) initializers.unshift(_);
          } else if ((_ = accept(result))) {
            if (kind === 'field') initializers.unshift(_);
            else descriptor[key] = _;
          }
        }
        if (target) Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
      }
      function __runInitializers(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
          value = useValue
            ? initializers[i].call(thisArg, value)
            : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
      }
      function __propKey(x) {
        return typeof x === 'symbol' ? x : ''.concat(x);
      }
      function __setFunctionName(f, name, prefix) {
        if (typeof name === 'symbol')
          name = name.description ? '['.concat(name.description, ']') : '';
        return Object.defineProperty(f, 'name', {
          configurable: true,
          value: prefix ? ''.concat(prefix, ' ', name) : name,
        });
      }
      function __metadata(metadataKey, metadataValue) {
        if (
          typeof Reflect === 'object' &&
          typeof Reflect.metadata === 'function'
        )
          return Reflect.metadata(metadataKey, metadataValue);
      }
      function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done
              ? resolve(result.value)
              : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      }
      function __generator(thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g = Object.create(
            (typeof Iterator === 'function' ? Iterator : Object).prototype
          );
        return (
          (g.next = verb(0)),
          (g['throw'] = verb(1)),
          (g['return'] = verb(2)),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        //TURBOPACK unreachable
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while ((g && ((g = 0), op[0] && (_ = 0)), _))
            try {
              if (
                ((f = 1),
                y &&
                  (t =
                    op[0] & 2
                      ? y['return']
                      : op[0]
                        ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                        : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return {
                    value: op[1],
                    done: false,
                  };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (
                    !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                    (op[0] === 6 || op[0] === 2)
                  ) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return {
            value: op[0] ? op[1] : void 0,
            done: true,
          };
        }
      }
      var __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (
              !desc ||
              ('get' in desc
                ? !m.__esModule
                : desc.writable || desc.configurable)
            ) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };
      function __exportStar(m, o) {
        for (var p in m)
          if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      }
      function __values(o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return {
                value: o && o[i++],
                done: !o,
              };
            },
          };
        throw new TypeError(
          s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.'
        );
      }
      function __read(o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = {
            error: error,
          };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      }
      function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      }
      function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      }
      function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      }
      function __await(v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      }
      function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = Object.create(
            (typeof AsyncIterator === 'function' ? AsyncIterator : Object)
              .prototype
          )),
          verb('next'),
          verb('throw'),
          verb('return', awaitReturn),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        //TURBOPACK unreachable
        function awaitReturn(f) {
          return function (v) {
            return Promise.resolve(v).then(f, reject);
          };
        }
        function verb(n, f) {
          if (g[n]) {
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
            if (f) i[n] = f(i[n]);
          }
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await
            ? Promise.resolve(r.value.v).then(fulfill, reject)
            : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      }
      function __asyncDelegator(o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        //TURBOPACK unreachable
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p)
                  ? {
                      value: __await(o[n](v)),
                      done: false,
                    }
                  : f
                    ? f(v)
                    : v;
              }
            : f;
        }
      }
      function __asyncValues(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o =
              typeof __values === 'function'
                ? __values(o)
                : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        //TURBOPACK unreachable
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v) {
            resolve({
              value: v,
              done: d,
            });
          }, reject);
        }
      }
      function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', {
            value: raw,
          });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      }
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', {
              enumerable: true,
              value: v,
            });
          }
        : function (o, v) {
            o['default'] = v;
          };
      var ownKeys = function (o) {
        ownKeys =
          Object.getOwnPropertyNames ||
          function (o) {
            var ar = [];
            for (var k in o)
              if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
          };
        return ownKeys(o);
      };
      function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++)
            if (k[i] !== 'default') __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      }
      function __importDefault(mod) {
        return mod && mod.__esModule
          ? mod
          : {
              default: mod,
            };
      }
      function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === 'a' && !f)
          throw new TypeError('Private accessor was defined without a getter');
        if (
          typeof state === 'function'
            ? receiver !== state || !f
            : !state.has(receiver)
        )
          throw new TypeError(
            'Cannot read private member from an object whose class did not declare it'
          );
        return kind === 'm'
          ? f
          : kind === 'a'
            ? f.call(receiver)
            : f
              ? f.value
              : state.get(receiver);
      }
      function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f)
          throw new TypeError('Private accessor was defined without a setter');
        if (
          typeof state === 'function'
            ? receiver !== state || !f
            : !state.has(receiver)
        )
          throw new TypeError(
            'Cannot write private member to an object whose class did not declare it'
          );
        return (
          kind === 'a'
            ? f.call(receiver, value)
            : f
              ? (f.value = value)
              : state.set(receiver, value),
          value
        );
      }
      function __classPrivateFieldIn(state, receiver) {
        if (
          receiver === null ||
          (typeof receiver !== 'object' && typeof receiver !== 'function')
        )
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function'
          ? receiver === state
          : state.has(receiver);
      }
      function __addDisposableResource(env, value, async) {
        if (value !== null && value !== void 0) {
          if (typeof value !== 'object' && typeof value !== 'function')
            throw new TypeError('Object expected.');
          var dispose, inner;
          if (async) {
            if (!Symbol.asyncDispose)
              throw new TypeError('Symbol.asyncDispose is not defined.');
            dispose = value[Symbol.asyncDispose];
          }
          if (dispose === void 0) {
            if (!Symbol.dispose)
              throw new TypeError('Symbol.dispose is not defined.');
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
          }
          if (typeof dispose !== 'function')
            throw new TypeError('Object not disposable.');
          if (inner)
            dispose = function () {
              try {
                inner.call(this);
              } catch (e) {
                return Promise.reject(e);
              }
            };
          env.stack.push({
            value: value,
            dispose: dispose,
            async: async,
          });
        } else if (async) {
          env.stack.push({
            async: true,
          });
        }
        return value;
      }
      var _SuppressedError =
        typeof SuppressedError === 'function'
          ? SuppressedError
          : function (error, suppressed, message) {
              var e = new Error(message);
              return (
                (e.name = 'SuppressedError'),
                (e.error = error),
                (e.suppressed = suppressed),
                e
              );
            };
      function __disposeResources(env) {
        function fail(e) {
          env.error = env.hasError
            ? new _SuppressedError(
                e,
                env.error,
                'An error was suppressed during disposal.'
              )
            : e;
          env.hasError = true;
        }
        var r,
          s = 0;
        function next() {
          while ((r = env.stack.pop())) {
            try {
              if (!r.async && s === 1)
                return (s = 0), env.stack.push(r), Promise.resolve().then(next);
              if (r.dispose) {
                var result = r.dispose.call(r.value);
                if (r.async)
                  return (
                    (s |= 2),
                    Promise.resolve(result).then(next, function (e) {
                      fail(e);
                      return next();
                    })
                  );
              } else s |= 1;
            } catch (e) {
              fail(e);
            }
          }
          if (s === 1)
            return env.hasError ? Promise.reject(env.error) : Promise.resolve();
          if (env.hasError) throw env.error;
        }
        return next();
      }
      function __rewriteRelativeImportExtension(path, preserveJsx) {
        if (typeof path === 'string' && /^\.\.?\//.test(path)) {
          return path.replace(
            /\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i,
            function (m, tsx, d, ext, cm) {
              return tsx
                ? preserveJsx
                  ? '.jsx'
                  : '.js'
                : d && (!ext || !cm)
                  ? m
                  : d + ext + '.' + cm.toLowerCase() + 'js';
            }
          );
        }
        return path;
      }
      const __TURBOPACK__default__export__ = {
        __extends,
        __assign,
        __rest,
        __decorate,
        __param,
        __esDecorate,
        __runInitializers,
        __propKey,
        __setFunctionName,
        __metadata,
        __awaiter,
        __generator,
        __createBinding,
        __exportStar,
        __values,
        __read,
        __spread,
        __spreadArrays,
        __spreadArray,
        __await,
        __asyncGenerator,
        __asyncDelegator,
        __asyncValues,
        __makeTemplateObject,
        __importStar,
        __importDefault,
        __classPrivateFieldGet,
        __classPrivateFieldSet,
        __classPrivateFieldIn,
        __addDisposableResource,
        __disposeResources,
        __rewriteRelativeImportExtension,
      };
    },
    '[project]/node_modules/@formatjs/fast-memoize/lib/index.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        //
        // Main
        //
        __turbopack_context__.s({
          memoize: () => memoize,
          strategies: () => strategies,
        });
        function memoize(fn, options) {
          var cache = options && options.cache ? options.cache : cacheDefault;
          var serializer =
            options && options.serializer
              ? options.serializer
              : serializerDefault;
          var strategy =
            options && options.strategy ? options.strategy : strategyDefault;
          return strategy(fn, {
            cache: cache,
            serializer: serializer,
          });
        }
        //
        // Strategy
        //
        function isPrimitive(value) {
          return (
            value == null ||
            typeof value === 'number' ||
            typeof value === 'boolean'
          ); // || typeof value === "string" 'unsafe' primitive for our needs
        }
        function monadic(fn, cache, serializer, arg) {
          var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
          var computedValue = cache.get(cacheKey);
          if (typeof computedValue === 'undefined') {
            computedValue = fn.call(this, arg);
            cache.set(cacheKey, computedValue);
          }
          return computedValue;
        }
        function variadic(fn, cache, serializer) {
          var args = Array.prototype.slice.call(arguments, 3);
          var cacheKey = serializer(args);
          var computedValue = cache.get(cacheKey);
          if (typeof computedValue === 'undefined') {
            computedValue = fn.apply(this, args);
            cache.set(cacheKey, computedValue);
          }
          return computedValue;
        }
        function assemble(fn, context, strategy, cache, serialize) {
          return strategy.bind(context, fn, cache, serialize);
        }
        function strategyDefault(fn, options) {
          var strategy = fn.length === 1 ? monadic : variadic;
          return assemble(
            fn,
            this,
            strategy,
            options.cache.create(),
            options.serializer
          );
        }
        function strategyVariadic(fn, options) {
          return assemble(
            fn,
            this,
            variadic,
            options.cache.create(),
            options.serializer
          );
        }
        function strategyMonadic(fn, options) {
          return assemble(
            fn,
            this,
            monadic,
            options.cache.create(),
            options.serializer
          );
        }
        //
        // Serializer
        //
        var serializerDefault = function () {
          return JSON.stringify(arguments);
        };
        //
        // Cache
        //
        var ObjectWithoutPrototypeCache = (function () {
          function ObjectWithoutPrototypeCache() {
            this.cache = Object.create(null);
          }
          ObjectWithoutPrototypeCache.prototype.get = function (key) {
            return this.cache[key];
          };
          ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
            this.cache[key] = value;
          };
          return ObjectWithoutPrototypeCache;
        })();
        var cacheDefault = {
          create: function create() {
            return new ObjectWithoutPrototypeCache();
          },
        };
        var strategies = {
          variadic: strategyVariadic,
          monadic: strategyMonadic,
        };
      },
    '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/error.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          ErrorKind: () => ErrorKind,
        });
        var ErrorKind;
        (function (ErrorKind) {
          /** Argument is unclosed (e.g. `{0`) */ ErrorKind[
            (ErrorKind['EXPECT_ARGUMENT_CLOSING_BRACE'] = 1)
          ] = 'EXPECT_ARGUMENT_CLOSING_BRACE';
          /** Argument is empty (e.g. `{}`). */ ErrorKind[
            (ErrorKind['EMPTY_ARGUMENT'] = 2)
          ] = 'EMPTY_ARGUMENT';
          /** Argument is malformed (e.g. `{foo!}``) */ ErrorKind[
            (ErrorKind['MALFORMED_ARGUMENT'] = 3)
          ] = 'MALFORMED_ARGUMENT';
          /** Expect an argument type (e.g. `{foo,}`) */ ErrorKind[
            (ErrorKind['EXPECT_ARGUMENT_TYPE'] = 4)
          ] = 'EXPECT_ARGUMENT_TYPE';
          /** Unsupported argument type (e.g. `{foo,foo}`) */ ErrorKind[
            (ErrorKind['INVALID_ARGUMENT_TYPE'] = 5)
          ] = 'INVALID_ARGUMENT_TYPE';
          /** Expect an argument style (e.g. `{foo, number, }`) */ ErrorKind[
            (ErrorKind['EXPECT_ARGUMENT_STYLE'] = 6)
          ] = 'EXPECT_ARGUMENT_STYLE';
          /** The number skeleton is invalid. */ ErrorKind[
            (ErrorKind['INVALID_NUMBER_SKELETON'] = 7)
          ] = 'INVALID_NUMBER_SKELETON';
          /** The date time skeleton is invalid. */ ErrorKind[
            (ErrorKind['INVALID_DATE_TIME_SKELETON'] = 8)
          ] = 'INVALID_DATE_TIME_SKELETON';
          /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */ ErrorKind[
            (ErrorKind['EXPECT_NUMBER_SKELETON'] = 9)
          ] = 'EXPECT_NUMBER_SKELETON';
          /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */ ErrorKind[
            (ErrorKind['EXPECT_DATE_TIME_SKELETON'] = 10)
          ] = 'EXPECT_DATE_TIME_SKELETON';
          /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */ ErrorKind[
            (ErrorKind['UNCLOSED_QUOTE_IN_ARGUMENT_STYLE'] = 11)
          ] = 'UNCLOSED_QUOTE_IN_ARGUMENT_STYLE';
          /** Missing select argument options (e.g. `{foo, select}`) */ ErrorKind[
            (ErrorKind['EXPECT_SELECT_ARGUMENT_OPTIONS'] = 12)
          ] = 'EXPECT_SELECT_ARGUMENT_OPTIONS';
          /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */ ErrorKind[
            (ErrorKind['EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE'] = 13)
          ] = 'EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE';
          /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */ ErrorKind[
            (ErrorKind['INVALID_PLURAL_ARGUMENT_OFFSET_VALUE'] = 14)
          ] = 'INVALID_PLURAL_ARGUMENT_OFFSET_VALUE';
          /** Expecting a selector in `select` argument (e.g `{foo, select}`) */ ErrorKind[
            (ErrorKind['EXPECT_SELECT_ARGUMENT_SELECTOR'] = 15)
          ] = 'EXPECT_SELECT_ARGUMENT_SELECTOR';
          /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */ ErrorKind[
            (ErrorKind['EXPECT_PLURAL_ARGUMENT_SELECTOR'] = 16)
          ] = 'EXPECT_PLURAL_ARGUMENT_SELECTOR';
          /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */ ErrorKind[
            (ErrorKind['EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT'] = 17)
          ] = 'EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT';
          /**
           * Expecting a message fragment after the `plural` or `selectordinal` selector
           * (e.g. `{foo, plural, one}`)
           */ ErrorKind[
            (ErrorKind['EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT'] = 18)
          ] = 'EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT';
          /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */ ErrorKind[
            (ErrorKind['INVALID_PLURAL_ARGUMENT_SELECTOR'] = 19)
          ] = 'INVALID_PLURAL_ARGUMENT_SELECTOR';
          /**
           * Duplicate selectors in `plural` or `selectordinal` argument.
           * (e.g. {foo, plural, one {#} one {#}})
           */ ErrorKind[
            (ErrorKind['DUPLICATE_PLURAL_ARGUMENT_SELECTOR'] = 20)
          ] = 'DUPLICATE_PLURAL_ARGUMENT_SELECTOR';
          /** Duplicate selectors in `select` argument.
           * (e.g. {foo, select, apple {apple} apple {apple}})
           */ ErrorKind[
            (ErrorKind['DUPLICATE_SELECT_ARGUMENT_SELECTOR'] = 21)
          ] = 'DUPLICATE_SELECT_ARGUMENT_SELECTOR';
          /** Plural or select argument option must have `other` clause. */ ErrorKind[
            (ErrorKind['MISSING_OTHER_CLAUSE'] = 22)
          ] = 'MISSING_OTHER_CLAUSE';
          /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */ ErrorKind[
            (ErrorKind['INVALID_TAG'] = 23)
          ] = 'INVALID_TAG';
          /** The tag name is invalid. (e.g. `<123>foo</123>`) */ ErrorKind[
            (ErrorKind['INVALID_TAG_NAME'] = 25)
          ] = 'INVALID_TAG_NAME';
          /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */ ErrorKind[
            (ErrorKind['UNMATCHED_CLOSING_TAG'] = 26)
          ] = 'UNMATCHED_CLOSING_TAG';
          /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */ ErrorKind[
            (ErrorKind['UNCLOSED_TAG'] = 27)
          ] = 'UNCLOSED_TAG';
        })(ErrorKind || (ErrorKind = {}));
      },
    '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          SKELETON_TYPE: () => SKELETON_TYPE,
          TYPE: () => TYPE,
          createLiteralElement: () => createLiteralElement,
          createNumberElement: () => createNumberElement,
          isArgumentElement: () => isArgumentElement,
          isDateElement: () => isDateElement,
          isDateTimeSkeleton: () => isDateTimeSkeleton,
          isLiteralElement: () => isLiteralElement,
          isNumberElement: () => isNumberElement,
          isNumberSkeleton: () => isNumberSkeleton,
          isPluralElement: () => isPluralElement,
          isPoundElement: () => isPoundElement,
          isSelectElement: () => isSelectElement,
          isTagElement: () => isTagElement,
          isTimeElement: () => isTimeElement,
        });
        var TYPE;
        (function (TYPE) {
          /**
           * Raw text
           */ TYPE[(TYPE['literal'] = 0)] = 'literal';
          /**
           * Variable w/o any format, e.g `var` in `this is a {var}`
           */ TYPE[(TYPE['argument'] = 1)] = 'argument';
          /**
           * Variable w/ number format
           */ TYPE[(TYPE['number'] = 2)] = 'number';
          /**
           * Variable w/ date format
           */ TYPE[(TYPE['date'] = 3)] = 'date';
          /**
           * Variable w/ time format
           */ TYPE[(TYPE['time'] = 4)] = 'time';
          /**
           * Variable w/ select format
           */ TYPE[(TYPE['select'] = 5)] = 'select';
          /**
           * Variable w/ plural format
           */ TYPE[(TYPE['plural'] = 6)] = 'plural';
          /**
           * Only possible within plural argument.
           * This is the `#` symbol that will be substituted with the count.
           */ TYPE[(TYPE['pound'] = 7)] = 'pound';
          /**
           * XML-like tag
           */ TYPE[(TYPE['tag'] = 8)] = 'tag';
        })(TYPE || (TYPE = {}));
        var SKELETON_TYPE;
        (function (SKELETON_TYPE) {
          SKELETON_TYPE[(SKELETON_TYPE['number'] = 0)] = 'number';
          SKELETON_TYPE[(SKELETON_TYPE['dateTime'] = 1)] = 'dateTime';
        })(SKELETON_TYPE || (SKELETON_TYPE = {}));
        function isLiteralElement(el) {
          return el.type === TYPE.literal;
        }
        function isArgumentElement(el) {
          return el.type === TYPE.argument;
        }
        function isNumberElement(el) {
          return el.type === TYPE.number;
        }
        function isDateElement(el) {
          return el.type === TYPE.date;
        }
        function isTimeElement(el) {
          return el.type === TYPE.time;
        }
        function isSelectElement(el) {
          return el.type === TYPE.select;
        }
        function isPluralElement(el) {
          return el.type === TYPE.plural;
        }
        function isPoundElement(el) {
          return el.type === TYPE.pound;
        }
        function isTagElement(el) {
          return el.type === TYPE.tag;
        }
        function isNumberSkeleton(el) {
          return !!(
            el &&
            typeof el === 'object' &&
            el.type === SKELETON_TYPE.number
          );
        }
        function isDateTimeSkeleton(el) {
          return !!(
            el &&
            typeof el === 'object' &&
            el.type === SKELETON_TYPE.dateTime
          );
        }
        function createLiteralElement(value) {
          return {
            type: TYPE.literal,
            value: value,
          };
        }
        function createNumberElement(value, style) {
          return {
            type: TYPE.number,
            value: value,
            style: style,
          };
        }
      },
    '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        // @generated from regex-gen.ts
        __turbopack_context__.s({
          SPACE_SEPARATOR_REGEX: () => SPACE_SEPARATOR_REGEX,
          WHITE_SPACE_REGEX: () => WHITE_SPACE_REGEX,
        });
        var SPACE_SEPARATOR_REGEX =
          /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
        var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/;
      },
    '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        /**
         * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
         * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
         * with some tweaks
         */ __turbopack_context__.s({
          parseDateTimeSkeleton: () => parseDateTimeSkeleton,
        });
        var DATE_TIME_REGEX =
          /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
        function parseDateTimeSkeleton(skeleton) {
          var result = {};
          skeleton.replace(DATE_TIME_REGEX, function (match) {
            var len = match.length;
            switch (match[0]) {
              // Era
              case 'G':
                result.era =
                  len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                break;
              // Year
              case 'y':
                result.year = len === 2 ? '2-digit' : 'numeric';
                break;
              case 'Y':
              case 'u':
              case 'U':
              case 'r':
                throw new RangeError(
                  '`Y/u/U/r` (year) patterns are not supported, use `y` instead'
                );
              // Quarter
              case 'q':
              case 'Q':
                throw new RangeError(
                  '`q/Q` (quarter) patterns are not supported'
                );
              // Month
              case 'M':
              case 'L':
                result.month = [
                  'numeric',
                  '2-digit',
                  'short',
                  'long',
                  'narrow',
                ][len - 1];
                break;
              // Week
              case 'w':
              case 'W':
                throw new RangeError('`w/W` (week) patterns are not supported');
              case 'd':
                result.day = ['numeric', '2-digit'][len - 1];
                break;
              case 'D':
              case 'F':
              case 'g':
                throw new RangeError(
                  '`D/F/g` (day) patterns are not supported, use `d` instead'
                );
              // Weekday
              case 'E':
                result.weekday =
                  len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                break;
              case 'e':
                if (len < 4) {
                  throw new RangeError(
                    '`e..eee` (weekday) patterns are not supported'
                  );
                }
                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                break;
              case 'c':
                if (len < 4) {
                  throw new RangeError(
                    '`c..ccc` (weekday) patterns are not supported'
                  );
                }
                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                break;
              // Period
              case 'a':
                result.hour12 = true;
                break;
              case 'b':
              case 'B':
                throw new RangeError(
                  '`b/B` (period) patterns are not supported, use `a` instead'
                );
              // Hour
              case 'h':
                result.hourCycle = 'h12';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
              case 'H':
                result.hourCycle = 'h23';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
              case 'K':
                result.hourCycle = 'h11';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
              case 'k':
                result.hourCycle = 'h24';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
              case 'j':
              case 'J':
              case 'C':
                throw new RangeError(
                  '`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead'
                );
              // Minute
              case 'm':
                result.minute = ['numeric', '2-digit'][len - 1];
                break;
              // Second
              case 's':
                result.second = ['numeric', '2-digit'][len - 1];
                break;
              case 'S':
              case 'A':
                throw new RangeError(
                  '`S/A` (second) patterns are not supported, use `s` instead'
                );
              // Zone
              case 'z':
                result.timeZoneName = len < 4 ? 'short' : 'long';
                break;
              case 'Z':
              case 'O':
              case 'v':
              case 'V':
              case 'X':
              case 'x':
                throw new RangeError(
                  '`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead'
                );
            }
            return '';
          });
          return result;
        }
      },
    '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        // @generated from regex-gen.ts
        __turbopack_context__.s({
          WHITE_SPACE_REGEX: () => WHITE_SPACE_REGEX,
        });
        var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;
      },
    '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/number.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          parseNumberSkeleton: () => parseNumberSkeleton,
          parseNumberSkeletonFromString: () => parseNumberSkeletonFromString,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/tslib/tslib.es6.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$regex$2e$generated$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js [app-client] (ecmascript)'
          );
        function parseNumberSkeletonFromString(skeleton) {
          if (skeleton.length === 0) {
            throw new Error('Number skeleton cannot be empty');
          }
          // Parse the skeleton
          var stringTokens = skeleton
            .split(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$regex$2e$generated$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'WHITE_SPACE_REGEX'
              ]
            )
            .filter(function (x) {
              return x.length > 0;
            });
          var tokens = [];
          for (
            var _i = 0, stringTokens_1 = stringTokens;
            _i < stringTokens_1.length;
            _i++
          ) {
            var stringToken = stringTokens_1[_i];
            var stemAndOptions = stringToken.split('/');
            if (stemAndOptions.length === 0) {
              throw new Error('Invalid number skeleton');
            }
            var stem = stemAndOptions[0],
              options = stemAndOptions.slice(1);
            for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
              var option = options_1[_a];
              if (option.length === 0) {
                throw new Error('Invalid number skeleton');
              }
            }
            tokens.push({
              stem: stem,
              options: options,
            });
          }
          return tokens;
        }
        function icuUnitToEcma(unit) {
          return unit.replace(/^(.*?)-/, '');
        }
        var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
        var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
        var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
        var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
        function parseSignificantPrecision(str) {
          var result = {};
          if (str[str.length - 1] === 'r') {
            result.roundingPriority = 'morePrecision';
          } else if (str[str.length - 1] === 's') {
            result.roundingPriority = 'lessPrecision';
          }
          str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
            // @@@ case
            if (typeof g2 !== 'string') {
              result.minimumSignificantDigits = g1.length;
              result.maximumSignificantDigits = g1.length;
            } else if (g2 === '+') {
              result.minimumSignificantDigits = g1.length;
            } else if (g1[0] === '#') {
              result.maximumSignificantDigits = g1.length;
            } else {
              result.minimumSignificantDigits = g1.length;
              result.maximumSignificantDigits =
                g1.length + (typeof g2 === 'string' ? g2.length : 0);
            }
            return '';
          });
          return result;
        }
        function parseSign(str) {
          switch (str) {
            case 'sign-auto':
              return {
                signDisplay: 'auto',
              };
            case 'sign-accounting':
            case '()':
              return {
                currencySign: 'accounting',
              };
            case 'sign-always':
            case '+!':
              return {
                signDisplay: 'always',
              };
            case 'sign-accounting-always':
            case '()!':
              return {
                signDisplay: 'always',
                currencySign: 'accounting',
              };
            case 'sign-except-zero':
            case '+?':
              return {
                signDisplay: 'exceptZero',
              };
            case 'sign-accounting-except-zero':
            case '()?':
              return {
                signDisplay: 'exceptZero',
                currencySign: 'accounting',
              };
            case 'sign-never':
            case '+_':
              return {
                signDisplay: 'never',
              };
          }
        }
        function parseConciseScientificAndEngineeringStem(stem) {
          // Engineering
          var result;
          if (stem[0] === 'E' && stem[1] === 'E') {
            result = {
              notation: 'engineering',
            };
            stem = stem.slice(2);
          } else if (stem[0] === 'E') {
            result = {
              notation: 'scientific',
            };
            stem = stem.slice(1);
          }
          if (result) {
            var signDisplay = stem.slice(0, 2);
            if (signDisplay === '+!') {
              result.signDisplay = 'always';
              stem = stem.slice(2);
            } else if (signDisplay === '+?') {
              result.signDisplay = 'exceptZero';
              stem = stem.slice(2);
            }
            if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
              throw new Error('Malformed concise eng/scientific notation');
            }
            result.minimumIntegerDigits = stem.length;
          }
          return result;
        }
        function parseNotationOptions(opt) {
          var result = {};
          var signOpts = parseSign(opt);
          if (signOpts) {
            return signOpts;
          }
          return result;
        }
        function parseNumberSkeleton(tokens) {
          var result = {};
          for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
            var token = tokens_1[_i];
            switch (token.stem) {
              case 'percent':
              case '%':
                result.style = 'percent';
                continue;
              case '%x100':
                result.style = 'percent';
                result.scale = 100;
                continue;
              case 'currency':
                result.style = 'currency';
                result.currency = token.options[0];
                continue;
              case 'group-off':
              case ',_':
                result.useGrouping = false;
                continue;
              case 'precision-integer':
              case '.':
                result.maximumFractionDigits = 0;
                continue;
              case 'measure-unit':
              case 'unit':
                result.style = 'unit';
                result.unit = icuUnitToEcma(token.options[0]);
                continue;
              case 'compact-short':
              case 'K':
                result.notation = 'compact';
                result.compactDisplay = 'short';
                continue;
              case 'compact-long':
              case 'KK':
                result.notation = 'compact';
                result.compactDisplay = 'long';
                continue;
              case 'scientific':
                result = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    '__assign'
                  ])(
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      '__assign'
                    ])({}, result),
                    {
                      notation: 'scientific',
                    }
                  ),
                  token.options.reduce(function (all, opt) {
                    return (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      '__assign'
                    ])(
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        '__assign'
                      ])({}, all),
                      parseNotationOptions(opt)
                    );
                  }, {})
                );
                continue;
              case 'engineering':
                result = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    '__assign'
                  ])(
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      '__assign'
                    ])({}, result),
                    {
                      notation: 'engineering',
                    }
                  ),
                  token.options.reduce(function (all, opt) {
                    return (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      '__assign'
                    ])(
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        '__assign'
                      ])({}, all),
                      parseNotationOptions(opt)
                    );
                  }, {})
                );
                continue;
              case 'notation-simple':
                result.notation = 'standard';
                continue;
              // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
              case 'unit-width-narrow':
                result.currencyDisplay = 'narrowSymbol';
                result.unitDisplay = 'narrow';
                continue;
              case 'unit-width-short':
                result.currencyDisplay = 'code';
                result.unitDisplay = 'short';
                continue;
              case 'unit-width-full-name':
                result.currencyDisplay = 'name';
                result.unitDisplay = 'long';
                continue;
              case 'unit-width-iso-code':
                result.currencyDisplay = 'symbol';
                continue;
              case 'scale':
                result.scale = parseFloat(token.options[0]);
                continue;
              case 'rounding-mode-floor':
                result.roundingMode = 'floor';
                continue;
              case 'rounding-mode-ceiling':
                result.roundingMode = 'ceil';
                continue;
              case 'rounding-mode-down':
                result.roundingMode = 'trunc';
                continue;
              case 'rounding-mode-up':
                result.roundingMode = 'expand';
                continue;
              case 'rounding-mode-half-even':
                result.roundingMode = 'halfEven';
                continue;
              case 'rounding-mode-half-down':
                result.roundingMode = 'halfTrunc';
                continue;
              case 'rounding-mode-half-up':
                result.roundingMode = 'halfExpand';
                continue;
              // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
              case 'integer-width':
                if (token.options.length > 1) {
                  throw new RangeError(
                    'integer-width stems only accept a single optional option'
                  );
                }
                token.options[0].replace(
                  INTEGER_WIDTH_REGEX,
                  function (_, g1, g2, g3, g4, g5) {
                    if (g1) {
                      result.minimumIntegerDigits = g2.length;
                    } else if (g3 && g4) {
                      throw new Error(
                        'We currently do not support maximum integer digits'
                      );
                    } else if (g5) {
                      throw new Error(
                        'We currently do not support exact integer digits'
                      );
                    }
                    return '';
                  }
                );
                continue;
            }
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
            if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
              result.minimumIntegerDigits = token.stem.length;
              continue;
            }
            if (FRACTION_PRECISION_REGEX.test(token.stem)) {
              // Precision
              // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
              // precision-integer case
              if (token.options.length > 1) {
                throw new RangeError(
                  'Fraction-precision stems only accept a single optional option'
                );
              }
              token.stem.replace(
                FRACTION_PRECISION_REGEX,
                function (_, g1, g2, g3, g4, g5) {
                  // .000* case (before ICU67 it was .000+)
                  if (g2 === '*') {
                    result.minimumFractionDigits = g1.length;
                  } else if (g3 && g3[0] === '#') {
                    result.maximumFractionDigits = g3.length;
                  } else if (g4 && g5) {
                    result.minimumFractionDigits = g4.length;
                    result.maximumFractionDigits = g4.length + g5.length;
                  } else {
                    result.minimumFractionDigits = g1.length;
                    result.maximumFractionDigits = g1.length;
                  }
                  return '';
                }
              );
              var opt = token.options[0];
              // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display
              if (opt === 'w') {
                result = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    '__assign'
                  ])({}, result),
                  {
                    trailingZeroDisplay: 'stripIfInteger',
                  }
                );
              } else if (opt) {
                result = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    '__assign'
                  ])({}, result),
                  parseSignificantPrecision(opt)
                );
              }
              continue;
            }
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision
            if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
              result = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                '__assign'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])({}, result),
                parseSignificantPrecision(token.stem)
              );
              continue;
            }
            var signOpts = parseSign(token.stem);
            if (signOpts) {
              result = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                '__assign'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])({}, result),
                signOpts
              );
            }
            var conciseScientificAndEngineeringOpts =
              parseConciseScientificAndEngineeringStem(token.stem);
            if (conciseScientificAndEngineeringOpts) {
              result = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                '__assign'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])({}, result),
                conciseScientificAndEngineeringOpts
              );
            }
          }
          return result;
        }
      },
    '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/index.js [app-client] (ecmascript) <locals>':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({});
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$date$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/number.js [app-client] (ecmascript)'
          );
      },
    '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/index.js [app-client] (ecmascript) <module evaluation>':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({});
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$date$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/number.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/index.js [app-client] (ecmascript) <locals>'
          );
      },
    '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        // @generated from time-data-gen.ts
        // prettier-ignore
        __turbopack_context__.s({
    "timeData": ()=>timeData
});
        var timeData = {
          '001': ['H', 'h'],
          419: ['h', 'H', 'hB', 'hb'],
          AC: ['H', 'h', 'hb', 'hB'],
          AD: ['H', 'hB'],
          AE: ['h', 'hB', 'hb', 'H'],
          AF: ['H', 'hb', 'hB', 'h'],
          AG: ['h', 'hb', 'H', 'hB'],
          AI: ['H', 'h', 'hb', 'hB'],
          AL: ['h', 'H', 'hB'],
          AM: ['H', 'hB'],
          AO: ['H', 'hB'],
          AR: ['h', 'H', 'hB', 'hb'],
          AS: ['h', 'H'],
          AT: ['H', 'hB'],
          AU: ['h', 'hb', 'H', 'hB'],
          AW: ['H', 'hB'],
          AX: ['H'],
          AZ: ['H', 'hB', 'h'],
          BA: ['H', 'hB', 'h'],
          BB: ['h', 'hb', 'H', 'hB'],
          BD: ['h', 'hB', 'H'],
          BE: ['H', 'hB'],
          BF: ['H', 'hB'],
          BG: ['H', 'hB', 'h'],
          BH: ['h', 'hB', 'hb', 'H'],
          BI: ['H', 'h'],
          BJ: ['H', 'hB'],
          BL: ['H', 'hB'],
          BM: ['h', 'hb', 'H', 'hB'],
          BN: ['hb', 'hB', 'h', 'H'],
          BO: ['h', 'H', 'hB', 'hb'],
          BQ: ['H'],
          BR: ['H', 'hB'],
          BS: ['h', 'hb', 'H', 'hB'],
          BT: ['h', 'H'],
          BW: ['H', 'h', 'hb', 'hB'],
          BY: ['H', 'h'],
          BZ: ['H', 'h', 'hb', 'hB'],
          CA: ['h', 'hb', 'H', 'hB'],
          CC: ['H', 'h', 'hb', 'hB'],
          CD: ['hB', 'H'],
          CF: ['H', 'h', 'hB'],
          CG: ['H', 'hB'],
          CH: ['H', 'hB', 'h'],
          CI: ['H', 'hB'],
          CK: ['H', 'h', 'hb', 'hB'],
          CL: ['h', 'H', 'hB', 'hb'],
          CM: ['H', 'h', 'hB'],
          CN: ['H', 'hB', 'hb', 'h'],
          CO: ['h', 'H', 'hB', 'hb'],
          CP: ['H'],
          CR: ['h', 'H', 'hB', 'hb'],
          CU: ['h', 'H', 'hB', 'hb'],
          CV: ['H', 'hB'],
          CW: ['H', 'hB'],
          CX: ['H', 'h', 'hb', 'hB'],
          CY: ['h', 'H', 'hb', 'hB'],
          CZ: ['H'],
          DE: ['H', 'hB'],
          DG: ['H', 'h', 'hb', 'hB'],
          DJ: ['h', 'H'],
          DK: ['H'],
          DM: ['h', 'hb', 'H', 'hB'],
          DO: ['h', 'H', 'hB', 'hb'],
          DZ: ['h', 'hB', 'hb', 'H'],
          EA: ['H', 'h', 'hB', 'hb'],
          EC: ['h', 'H', 'hB', 'hb'],
          EE: ['H', 'hB'],
          EG: ['h', 'hB', 'hb', 'H'],
          EH: ['h', 'hB', 'hb', 'H'],
          ER: ['h', 'H'],
          ES: ['H', 'hB', 'h', 'hb'],
          ET: ['hB', 'hb', 'h', 'H'],
          FI: ['H'],
          FJ: ['h', 'hb', 'H', 'hB'],
          FK: ['H', 'h', 'hb', 'hB'],
          FM: ['h', 'hb', 'H', 'hB'],
          FO: ['H', 'h'],
          FR: ['H', 'hB'],
          GA: ['H', 'hB'],
          GB: ['H', 'h', 'hb', 'hB'],
          GD: ['h', 'hb', 'H', 'hB'],
          GE: ['H', 'hB', 'h'],
          GF: ['H', 'hB'],
          GG: ['H', 'h', 'hb', 'hB'],
          GH: ['h', 'H'],
          GI: ['H', 'h', 'hb', 'hB'],
          GL: ['H', 'h'],
          GM: ['h', 'hb', 'H', 'hB'],
          GN: ['H', 'hB'],
          GP: ['H', 'hB'],
          GQ: ['H', 'hB', 'h', 'hb'],
          GR: ['h', 'H', 'hb', 'hB'],
          GT: ['h', 'H', 'hB', 'hb'],
          GU: ['h', 'hb', 'H', 'hB'],
          GW: ['H', 'hB'],
          GY: ['h', 'hb', 'H', 'hB'],
          HK: ['h', 'hB', 'hb', 'H'],
          HN: ['h', 'H', 'hB', 'hb'],
          HR: ['H', 'hB'],
          HU: ['H', 'h'],
          IC: ['H', 'h', 'hB', 'hb'],
          ID: ['H'],
          IE: ['H', 'h', 'hb', 'hB'],
          IL: ['H', 'hB'],
          IM: ['H', 'h', 'hb', 'hB'],
          IN: ['h', 'H'],
          IO: ['H', 'h', 'hb', 'hB'],
          IQ: ['h', 'hB', 'hb', 'H'],
          IR: ['hB', 'H'],
          IS: ['H'],
          IT: ['H', 'hB'],
          JE: ['H', 'h', 'hb', 'hB'],
          JM: ['h', 'hb', 'H', 'hB'],
          JO: ['h', 'hB', 'hb', 'H'],
          JP: ['H', 'K', 'h'],
          KE: ['hB', 'hb', 'H', 'h'],
          KG: ['H', 'h', 'hB', 'hb'],
          KH: ['hB', 'h', 'H', 'hb'],
          KI: ['h', 'hb', 'H', 'hB'],
          KM: ['H', 'h', 'hB', 'hb'],
          KN: ['h', 'hb', 'H', 'hB'],
          KP: ['h', 'H', 'hB', 'hb'],
          KR: ['h', 'H', 'hB', 'hb'],
          KW: ['h', 'hB', 'hb', 'H'],
          KY: ['h', 'hb', 'H', 'hB'],
          KZ: ['H', 'hB'],
          LA: ['H', 'hb', 'hB', 'h'],
          LB: ['h', 'hB', 'hb', 'H'],
          LC: ['h', 'hb', 'H', 'hB'],
          LI: ['H', 'hB', 'h'],
          LK: ['H', 'h', 'hB', 'hb'],
          LR: ['h', 'hb', 'H', 'hB'],
          LS: ['h', 'H'],
          LT: ['H', 'h', 'hb', 'hB'],
          LU: ['H', 'h', 'hB'],
          LV: ['H', 'hB', 'hb', 'h'],
          LY: ['h', 'hB', 'hb', 'H'],
          MA: ['H', 'h', 'hB', 'hb'],
          MC: ['H', 'hB'],
          MD: ['H', 'hB'],
          ME: ['H', 'hB', 'h'],
          MF: ['H', 'hB'],
          MG: ['H', 'h'],
          MH: ['h', 'hb', 'H', 'hB'],
          MK: ['H', 'h', 'hb', 'hB'],
          ML: ['H'],
          MM: ['hB', 'hb', 'H', 'h'],
          MN: ['H', 'h', 'hb', 'hB'],
          MO: ['h', 'hB', 'hb', 'H'],
          MP: ['h', 'hb', 'H', 'hB'],
          MQ: ['H', 'hB'],
          MR: ['h', 'hB', 'hb', 'H'],
          MS: ['H', 'h', 'hb', 'hB'],
          MT: ['H', 'h'],
          MU: ['H', 'h'],
          MV: ['H', 'h'],
          MW: ['h', 'hb', 'H', 'hB'],
          MX: ['h', 'H', 'hB', 'hb'],
          MY: ['hb', 'hB', 'h', 'H'],
          MZ: ['H', 'hB'],
          NA: ['h', 'H', 'hB', 'hb'],
          NC: ['H', 'hB'],
          NE: ['H'],
          NF: ['H', 'h', 'hb', 'hB'],
          NG: ['H', 'h', 'hb', 'hB'],
          NI: ['h', 'H', 'hB', 'hb'],
          NL: ['H', 'hB'],
          NO: ['H', 'h'],
          NP: ['H', 'h', 'hB'],
          NR: ['H', 'h', 'hb', 'hB'],
          NU: ['H', 'h', 'hb', 'hB'],
          NZ: ['h', 'hb', 'H', 'hB'],
          OM: ['h', 'hB', 'hb', 'H'],
          PA: ['h', 'H', 'hB', 'hb'],
          PE: ['h', 'H', 'hB', 'hb'],
          PF: ['H', 'h', 'hB'],
          PG: ['h', 'H'],
          PH: ['h', 'hB', 'hb', 'H'],
          PK: ['h', 'hB', 'H'],
          PL: ['H', 'h'],
          PM: ['H', 'hB'],
          PN: ['H', 'h', 'hb', 'hB'],
          PR: ['h', 'H', 'hB', 'hb'],
          PS: ['h', 'hB', 'hb', 'H'],
          PT: ['H', 'hB'],
          PW: ['h', 'H'],
          PY: ['h', 'H', 'hB', 'hb'],
          QA: ['h', 'hB', 'hb', 'H'],
          RE: ['H', 'hB'],
          RO: ['H', 'hB'],
          RS: ['H', 'hB', 'h'],
          RU: ['H'],
          RW: ['H', 'h'],
          SA: ['h', 'hB', 'hb', 'H'],
          SB: ['h', 'hb', 'H', 'hB'],
          SC: ['H', 'h', 'hB'],
          SD: ['h', 'hB', 'hb', 'H'],
          SE: ['H'],
          SG: ['h', 'hb', 'H', 'hB'],
          SH: ['H', 'h', 'hb', 'hB'],
          SI: ['H', 'hB'],
          SJ: ['H'],
          SK: ['H'],
          SL: ['h', 'hb', 'H', 'hB'],
          SM: ['H', 'h', 'hB'],
          SN: ['H', 'h', 'hB'],
          SO: ['h', 'H'],
          SR: ['H', 'hB'],
          SS: ['h', 'hb', 'H', 'hB'],
          ST: ['H', 'hB'],
          SV: ['h', 'H', 'hB', 'hb'],
          SX: ['H', 'h', 'hb', 'hB'],
          SY: ['h', 'hB', 'hb', 'H'],
          SZ: ['h', 'hb', 'H', 'hB'],
          TA: ['H', 'h', 'hb', 'hB'],
          TC: ['h', 'hb', 'H', 'hB'],
          TD: ['h', 'H', 'hB'],
          TF: ['H', 'h', 'hB'],
          TG: ['H', 'hB'],
          TH: ['H', 'h'],
          TJ: ['H', 'h'],
          TL: ['H', 'hB', 'hb', 'h'],
          TM: ['H', 'h'],
          TN: ['h', 'hB', 'hb', 'H'],
          TO: ['h', 'H'],
          TR: ['H', 'hB'],
          TT: ['h', 'hb', 'H', 'hB'],
          TW: ['hB', 'hb', 'h', 'H'],
          TZ: ['hB', 'hb', 'H', 'h'],
          UA: ['H', 'hB', 'h'],
          UG: ['hB', 'hb', 'H', 'h'],
          UM: ['h', 'hb', 'H', 'hB'],
          US: ['h', 'hb', 'H', 'hB'],
          UY: ['h', 'H', 'hB', 'hb'],
          UZ: ['H', 'hB', 'h'],
          VA: ['H', 'h', 'hB'],
          VC: ['h', 'hb', 'H', 'hB'],
          VE: ['h', 'H', 'hB', 'hb'],
          VG: ['h', 'hb', 'H', 'hB'],
          VI: ['h', 'hb', 'H', 'hB'],
          VN: ['H', 'h'],
          VU: ['h', 'H'],
          WF: ['H', 'hB'],
          WS: ['h', 'H'],
          XK: ['H', 'hB', 'h'],
          YE: ['h', 'hB', 'hb', 'H'],
          YT: ['H', 'hB'],
          ZA: ['H', 'h', 'hb', 'hB'],
          ZM: ['h', 'hb', 'H', 'hB'],
          ZW: ['H', 'h'],
          'af-ZA': ['H', 'h', 'hB', 'hb'],
          'ar-001': ['h', 'hB', 'hb', 'H'],
          'ca-ES': ['H', 'h', 'hB'],
          'en-001': ['h', 'hb', 'H', 'hB'],
          'en-HK': ['h', 'hb', 'H', 'hB'],
          'en-IL': ['H', 'h', 'hb', 'hB'],
          'en-MY': ['h', 'hb', 'H', 'hB'],
          'es-BR': ['H', 'h', 'hB', 'hb'],
          'es-ES': ['H', 'h', 'hB', 'hb'],
          'es-GQ': ['H', 'h', 'hB', 'hb'],
          'fr-CA': ['H', 'h', 'hB'],
          'gl-ES': ['H', 'h', 'hB'],
          'gu-IN': ['hB', 'hb', 'h', 'H'],
          'hi-IN': ['hB', 'h', 'H'],
          'it-CH': ['H', 'h', 'hB'],
          'it-IT': ['H', 'h', 'hB'],
          'kn-IN': ['hB', 'h', 'H'],
          'ml-IN': ['hB', 'h', 'H'],
          'mr-IN': ['hB', 'hb', 'h', 'H'],
          'pa-IN': ['hB', 'hb', 'h', 'H'],
          'ta-IN': ['hB', 'h', 'hb', 'H'],
          'te-IN': ['hB', 'h', 'H'],
          'zu-ZA': ['H', 'hB', 'hb', 'h'],
        };
      },
    '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          getBestPattern: () => getBestPattern,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$time$2d$data$2e$generated$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js [app-client] (ecmascript)'
          );
        function getBestPattern(skeleton, locale) {
          var skeletonCopy = '';
          for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
            var patternChar = skeleton.charAt(patternPos);
            if (patternChar === 'j') {
              var extraLength = 0;
              while (
                patternPos + 1 < skeleton.length &&
                skeleton.charAt(patternPos + 1) === patternChar
              ) {
                extraLength++;
                patternPos++;
              }
              var hourLen = 1 + (extraLength & 1);
              var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
              var dayPeriodChar = 'a';
              var hourChar = getDefaultHourSymbolFromLocale(locale);
              if (hourChar == 'H' || hourChar == 'k') {
                dayPeriodLen = 0;
              }
              while (dayPeriodLen-- > 0) {
                skeletonCopy += dayPeriodChar;
              }
              while (hourLen-- > 0) {
                skeletonCopy = hourChar + skeletonCopy;
              }
            } else if (patternChar === 'J') {
              skeletonCopy += 'H';
            } else {
              skeletonCopy += patternChar;
            }
          }
          return skeletonCopy;
        }
        /**
         * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)
         * of the given `locale` to the corresponding time pattern.
         * @param locale
         */ function getDefaultHourSymbolFromLocale(locale) {
          var hourCycle = locale.hourCycle;
          if (
            hourCycle === undefined && // @ts-ignore hourCycle(s) is not identified yet
            locale.hourCycles && // @ts-ignore
            locale.hourCycles.length
          ) {
            // @ts-ignore
            hourCycle = locale.hourCycles[0];
          }
          if (hourCycle) {
            switch (hourCycle) {
              case 'h24':
                return 'k';
              case 'h23':
                return 'H';
              case 'h12':
                return 'h';
              case 'h11':
                return 'K';
              default:
                throw new Error('Invalid hourCycle');
            }
          }
          // TODO: Once hourCycle is fully supported remove the following with data generation
          var languageTag = locale.language;
          var regionTag;
          if (languageTag !== 'root') {
            regionTag = locale.maximize().region;
          }
          var hourCycles =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$time$2d$data$2e$generated$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'timeData'
            ][regionTag || ''] ||
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$time$2d$data$2e$generated$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'timeData'
            ][languageTag || ''] ||
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$time$2d$data$2e$generated$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'timeData'
            ][''.concat(languageTag, '-001')] ||
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$time$2d$data$2e$generated$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'timeData'
            ]['001'];
          return hourCycles[0];
        }
      },
    '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          Parser: () => Parser,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/tslib/tslib.es6.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/error.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$regex$2e$generated$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/index.js [app-client] (ecmascript) <module evaluation>'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/number.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$date$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$date$2d$time$2d$pattern$2d$generator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js [app-client] (ecmascript)'
          );
        var _a;
        var SPACE_SEPARATOR_START_REGEX = new RegExp(
          '^'.concat(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$regex$2e$generated$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'SPACE_SEPARATOR_REGEX'
            ].source,
            '*'
          )
        );
        var SPACE_SEPARATOR_END_REGEX = new RegExp(
          ''.concat(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$regex$2e$generated$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'SPACE_SEPARATOR_REGEX'
            ].source,
            '*$'
          )
        );
        function createLocation(start, end) {
          return {
            start: start,
            end: end,
          };
        }
        // #region Ponyfills
        // Consolidate these variables up top for easier toggling during debugging
        var hasNativeStartsWith =
          !!String.prototype.startsWith && '_a'.startsWith('a', 1);
        var hasNativeFromCodePoint = !!String.fromCodePoint;
        var hasNativeFromEntries = !!Object.fromEntries;
        var hasNativeCodePointAt = !!String.prototype.codePointAt;
        var hasTrimStart = !!String.prototype.trimStart;
        var hasTrimEnd = !!String.prototype.trimEnd;
        var hasNativeIsSafeInteger = !!Number.isSafeInteger;
        var isSafeInteger = hasNativeIsSafeInteger
          ? Number.isSafeInteger
          : function (n) {
              return (
                typeof n === 'number' &&
                isFinite(n) &&
                Math.floor(n) === n &&
                Math.abs(n) <= 0x1fffffffffffff
              );
            };
        // IE11 does not support y and u.
        var REGEX_SUPPORTS_U_AND_Y = true;
        try {
          var re = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
          /**
           * legacy Edge or Xbox One browser
           * Unicode flag support: supported
           * Pattern_Syntax support: not supported
           * See https://github.com/formatjs/formatjs/issues/2822
           */ REGEX_SUPPORTS_U_AND_Y =
            ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) ===
            'a';
        } catch (_) {
          REGEX_SUPPORTS_U_AND_Y = false;
        }
        var startsWith = hasNativeStartsWith
          ? function startsWith(s, search, position) {
              return s.startsWith(search, position);
            }
          : function startsWith(s, search, position) {
              return s.slice(position, position + search.length) === search;
            };
        var fromCodePoint = hasNativeFromCodePoint
          ? String.fromCodePoint
          : function fromCodePoint() {
              var codePoints = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                codePoints[_i] = arguments[_i];
              }
              var elements = '';
              var length = codePoints.length;
              var i = 0;
              var code;
              while (length > i) {
                code = codePoints[i++];
                if (code > 0x10ffff)
                  throw RangeError(code + ' is not a valid code point');
                elements +=
                  code < 0x10000
                    ? String.fromCharCode(code)
                    : String.fromCharCode(
                        ((code -= 0x10000) >> 10) + 0xd800,
                        (code % 0x400) + 0xdc00
                      );
              }
              return elements;
            };
        var fromEntries = // native
          hasNativeFromEntries
            ? Object.fromEntries
            : function fromEntries(entries) {
                var obj = {};
                for (
                  var _i = 0, entries_1 = entries;
                  _i < entries_1.length;
                  _i++
                ) {
                  var _a = entries_1[_i],
                    k = _a[0],
                    v = _a[1];
                  obj[k] = v;
                }
                return obj;
              };
        var codePointAt = hasNativeCodePointAt
          ? function codePointAt(s, index) {
              return s.codePointAt(index);
            }
          : function codePointAt(s, index) {
              var size = s.length;
              if (index < 0 || index >= size) {
                return undefined;
              }
              var first = s.charCodeAt(index);
              var second;
              return first < 0xd800 ||
                first > 0xdbff ||
                index + 1 === size ||
                (second = s.charCodeAt(index + 1)) < 0xdc00 ||
                second > 0xdfff
                ? first
                : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
            };
        var trimStart = hasTrimStart
          ? function trimStart(s) {
              return s.trimStart();
            }
          : function trimStart(s) {
              return s.replace(SPACE_SEPARATOR_START_REGEX, '');
            };
        var trimEnd = hasTrimEnd
          ? function trimEnd(s) {
              return s.trimEnd();
            }
          : function trimEnd(s) {
              return s.replace(SPACE_SEPARATOR_END_REGEX, '');
            };
        // Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.
        function RE(s, flag) {
          return new RegExp(s, flag);
        }
        // #endregion
        var matchIdentifierAtIndex;
        if (REGEX_SUPPORTS_U_AND_Y) {
          // Native
          var IDENTIFIER_PREFIX_RE_1 = RE(
            '([^\\p{White_Space}\\p{Pattern_Syntax}]*)',
            'yu'
          );
          matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
            var _a;
            IDENTIFIER_PREFIX_RE_1.lastIndex = index;
            var match = IDENTIFIER_PREFIX_RE_1.exec(s);
            return (_a = match[1]) !== null && _a !== void 0 ? _a : '';
          };
        } else {
          // IE11
          matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
            var match = [];
            while (true) {
              var c = codePointAt(s, index);
              if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {
                break;
              }
              match.push(c);
              index += c >= 0x10000 ? 2 : 1;
            }
            return fromCodePoint.apply(void 0, match);
          };
        }
        var Parser = (function () {
          function Parser(message, options) {
            if (options === void 0) {
              options = {};
            }
            this.message = message;
            this.position = {
              offset: 0,
              line: 1,
              column: 1,
            };
            this.ignoreTag = !!options.ignoreTag;
            this.locale = options.locale;
            this.requiresOtherClause = !!options.requiresOtherClause;
            this.shouldParseSkeletons = !!options.shouldParseSkeletons;
          }
          Parser.prototype.parse = function () {
            if (this.offset() !== 0) {
              throw Error('parser can only be used once');
            }
            return this.parseMessage(0, '', false);
          };
          Parser.prototype.parseMessage = function (
            nestingLevel,
            parentArgType,
            expectingCloseTag
          ) {
            var elements = [];
            while (!this.isEOF()) {
              var char = this.char();
              if (char === 123 /* `{` */) {
                var result = this.parseArgument(
                  nestingLevel,
                  expectingCloseTag
                );
                if (result.err) {
                  return result;
                }
                elements.push(result.val);
              } else if (char === 125 /* `}` */ && nestingLevel > 0) {
                break;
              } else if (
                char === 35 /* `#` */ &&
                (parentArgType === 'plural' ||
                  parentArgType === 'selectordinal')
              ) {
                var position = this.clonePosition();
                this.bump();
                elements.push({
                  type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'TYPE'
                  ].pound,
                  location: createLocation(position, this.clonePosition()),
                });
              } else if (
                char === 60 /* `<` */ &&
                !this.ignoreTag &&
                this.peek() === 47 // char code for '/'
              ) {
                if (expectingCloseTag) {
                  break;
                } else {
                  return this.error(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].UNMATCHED_CLOSING_TAG,
                    createLocation(this.clonePosition(), this.clonePosition())
                  );
                }
              } else if (
                char === 60 /* `<` */ &&
                !this.ignoreTag &&
                _isAlpha(this.peek() || 0)
              ) {
                var result = this.parseTag(nestingLevel, parentArgType);
                if (result.err) {
                  return result;
                }
                elements.push(result.val);
              } else {
                var result = this.parseLiteral(nestingLevel, parentArgType);
                if (result.err) {
                  return result;
                }
                elements.push(result.val);
              }
            }
            return {
              val: elements,
              err: null,
            };
          };
          /**
           * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the
           * [custom element name][] except that a dash is NOT always mandatory and uppercase letters
           * are accepted:
           *
           * ```
           * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"
           * tagName ::= [a-z] (PENChar)*
           * PENChar ::=
           *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
           *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |
           *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
           * ```
           *
           * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
           * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do
           * since other tag-based engines like React allow it
           */ Parser.prototype.parseTag = function (
            nestingLevel,
            parentArgType
          ) {
            var startPosition = this.clonePosition();
            this.bump(); // `<`
            var tagName = this.parseTagName();
            this.bumpSpace();
            if (this.bumpIf('/>')) {
              // Self closing tag
              return {
                val: {
                  type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'TYPE'
                  ].literal,
                  value: '<'.concat(tagName, '/>'),
                  location: createLocation(startPosition, this.clonePosition()),
                },
                err: null,
              };
            } else if (this.bumpIf('>')) {
              var childrenResult = this.parseMessage(
                nestingLevel + 1,
                parentArgType,
                true
              );
              if (childrenResult.err) {
                return childrenResult;
              }
              var children = childrenResult.val;
              // Expecting a close tag
              var endTagStartPosition = this.clonePosition();
              if (this.bumpIf('</')) {
                if (this.isEOF() || !_isAlpha(this.char())) {
                  return this.error(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].INVALID_TAG,
                    createLocation(endTagStartPosition, this.clonePosition())
                  );
                }
                var closingTagNameStartPosition = this.clonePosition();
                var closingTagName = this.parseTagName();
                if (tagName !== closingTagName) {
                  return this.error(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].UNMATCHED_CLOSING_TAG,
                    createLocation(
                      closingTagNameStartPosition,
                      this.clonePosition()
                    )
                  );
                }
                this.bumpSpace();
                if (!this.bumpIf('>')) {
                  return this.error(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].INVALID_TAG,
                    createLocation(endTagStartPosition, this.clonePosition())
                  );
                }
                return {
                  val: {
                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'TYPE'
                    ].tag,
                    value: tagName,
                    children: children,
                    location: createLocation(
                      startPosition,
                      this.clonePosition()
                    ),
                  },
                  err: null,
                };
              } else {
                return this.error(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].UNCLOSED_TAG,
                  createLocation(startPosition, this.clonePosition())
                );
              }
            } else {
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].INVALID_TAG,
                createLocation(startPosition, this.clonePosition())
              );
            }
          };
          /**
           * This method assumes that the caller has peeked ahead for the first tag character.
           */ Parser.prototype.parseTagName = function () {
            var startOffset = this.offset();
            this.bump(); // the first tag name character
            while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
              this.bump();
            }
            return this.message.slice(startOffset, this.offset());
          };
          Parser.prototype.parseLiteral = function (
            nestingLevel,
            parentArgType
          ) {
            var start = this.clonePosition();
            var value = '';
            while (true) {
              var parseQuoteResult = this.tryParseQuote(parentArgType);
              if (parseQuoteResult) {
                value += parseQuoteResult;
                continue;
              }
              var parseUnquotedResult = this.tryParseUnquoted(
                nestingLevel,
                parentArgType
              );
              if (parseUnquotedResult) {
                value += parseUnquotedResult;
                continue;
              }
              var parseLeftAngleResult = this.tryParseLeftAngleBracket();
              if (parseLeftAngleResult) {
                value += parseLeftAngleResult;
                continue;
              }
              break;
            }
            var location = createLocation(start, this.clonePosition());
            return {
              val: {
                type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'TYPE'
                ].literal,
                value: value,
                location: location,
              },
              err: null,
            };
          };
          Parser.prototype.tryParseLeftAngleBracket = function () {
            if (
              !this.isEOF() &&
              this.char() === 60 /* `<` */ &&
              (this.ignoreTag || // If at the opening tag or closing tag position, bail.
                !_isAlphaOrSlash(this.peek() || 0))
            ) {
              this.bump(); // `<`
              return '<';
            }
            return null;
          };
          /**
           * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes
           * a character that requires quoting (that is, "only where needed"), and works the same in
           * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.
           */ Parser.prototype.tryParseQuote = function (parentArgType) {
            if (this.isEOF() || this.char() !== 39 /* `'` */) {
              return null;
            }
            // Parse escaped char following the apostrophe, or early return if there is no escaped char.
            // Check if is valid escaped character
            switch (this.peek()) {
              case 39 /* `'` */:
                // double quote, should return as a single quote.
                this.bump();
                this.bump();
                return "'";
              // '{', '<', '>', '}'
              case 123:
              case 60:
              case 62:
              case 125:
                break;
              case 35:
                if (
                  parentArgType === 'plural' ||
                  parentArgType === 'selectordinal'
                ) {
                  break;
                }
                return null;
              default:
                return null;
            }
            this.bump(); // apostrophe
            var codePoints = [this.char()]; // escaped char
            this.bump();
            // read chars until the optional closing apostrophe is found
            while (!this.isEOF()) {
              var ch = this.char();
              if (ch === 39 /* `'` */) {
                if (this.peek() === 39 /* `'` */) {
                  codePoints.push(39);
                  // Bump one more time because we need to skip 2 characters.
                  this.bump();
                } else {
                  // Optional closing apostrophe.
                  this.bump();
                  break;
                }
              } else {
                codePoints.push(ch);
              }
              this.bump();
            }
            return fromCodePoint.apply(void 0, codePoints);
          };
          Parser.prototype.tryParseUnquoted = function (
            nestingLevel,
            parentArgType
          ) {
            if (this.isEOF()) {
              return null;
            }
            var ch = this.char();
            if (
              ch === 60 /* `<` */ ||
              ch === 123 /* `{` */ ||
              (ch === 35 /* `#` */ &&
                (parentArgType === 'plural' ||
                  parentArgType === 'selectordinal')) ||
              (ch === 125 /* `}` */ && nestingLevel > 0)
            ) {
              return null;
            } else {
              this.bump();
              return fromCodePoint(ch);
            }
          };
          Parser.prototype.parseArgument = function (
            nestingLevel,
            expectingCloseTag
          ) {
            var openingBracePosition = this.clonePosition();
            this.bump(); // `{`
            this.bumpSpace();
            if (this.isEOF()) {
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].EXPECT_ARGUMENT_CLOSING_BRACE,
                createLocation(openingBracePosition, this.clonePosition())
              );
            }
            if (this.char() === 125 /* `}` */) {
              this.bump();
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].EMPTY_ARGUMENT,
                createLocation(openingBracePosition, this.clonePosition())
              );
            }
            // argument name
            var value = this.parseIdentifierIfPossible().value;
            if (!value) {
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].MALFORMED_ARGUMENT,
                createLocation(openingBracePosition, this.clonePosition())
              );
            }
            this.bumpSpace();
            if (this.isEOF()) {
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].EXPECT_ARGUMENT_CLOSING_BRACE,
                createLocation(openingBracePosition, this.clonePosition())
              );
            }
            switch (this.char()) {
              // Simple argument: `{name}`
              case 125 /* `}` */: {
                this.bump(); // `}`
                return {
                  val: {
                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'TYPE'
                    ].argument,
                    // value does not include the opening and closing braces.
                    value: value,
                    location: createLocation(
                      openingBracePosition,
                      this.clonePosition()
                    ),
                  },
                  err: null,
                };
              }
              // Argument with options: `{name, format, ...}`
              case 44 /* `,` */: {
                this.bump(); // `,`
                this.bumpSpace();
                if (this.isEOF()) {
                  return this.error(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].EXPECT_ARGUMENT_CLOSING_BRACE,
                    createLocation(openingBracePosition, this.clonePosition())
                  );
                }
                return this.parseArgumentOptions(
                  nestingLevel,
                  expectingCloseTag,
                  value,
                  openingBracePosition
                );
              }
              default:
                return this.error(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].MALFORMED_ARGUMENT,
                  createLocation(openingBracePosition, this.clonePosition())
                );
            }
          };
          /**
           * Advance the parser until the end of the identifier, if it is currently on
           * an identifier character. Return an empty string otherwise.
           */ Parser.prototype.parseIdentifierIfPossible = function () {
            var startingPosition = this.clonePosition();
            var startOffset = this.offset();
            var value = matchIdentifierAtIndex(this.message, startOffset);
            var endOffset = startOffset + value.length;
            this.bumpTo(endOffset);
            var endPosition = this.clonePosition();
            var location = createLocation(startingPosition, endPosition);
            return {
              value: value,
              location: location,
            };
          };
          Parser.prototype.parseArgumentOptions = function (
            nestingLevel,
            expectingCloseTag,
            value,
            openingBracePosition
          ) {
            var _a;
            // Parse this range:
            // {name, type, style}
            //        ^---^
            var typeStartPosition = this.clonePosition();
            var argType = this.parseIdentifierIfPossible().value;
            var typeEndPosition = this.clonePosition();
            switch (argType) {
              case '':
                // Expecting a style string number, date, time, plural, selectordinal, or select.
                return this.error(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].EXPECT_ARGUMENT_TYPE,
                  createLocation(typeStartPosition, typeEndPosition)
                );
              case 'number':
              case 'date':
              case 'time': {
                // Parse this range:
                // {name, number, style}
                //              ^-------^
                this.bumpSpace();
                var styleAndLocation = null;
                if (this.bumpIf(',')) {
                  this.bumpSpace();
                  var styleStartPosition = this.clonePosition();
                  var result = this.parseSimpleArgStyleIfPossible();
                  if (result.err) {
                    return result;
                  }
                  var style = trimEnd(result.val);
                  if (style.length === 0) {
                    return this.error(
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'ErrorKind'
                      ].EXPECT_ARGUMENT_STYLE,
                      createLocation(this.clonePosition(), this.clonePosition())
                    );
                  }
                  var styleLocation = createLocation(
                    styleStartPosition,
                    this.clonePosition()
                  );
                  styleAndLocation = {
                    style: style,
                    styleLocation: styleLocation,
                  };
                }
                var argCloseResult =
                  this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                  return argCloseResult;
                }
                var location_1 = createLocation(
                  openingBracePosition,
                  this.clonePosition()
                );
                // Extract style or skeleton
                if (
                  styleAndLocation &&
                  startsWith(
                    styleAndLocation === null || styleAndLocation === void 0
                      ? void 0
                      : styleAndLocation.style,
                    '::',
                    0
                  )
                ) {
                  // Skeleton starts with `::`.
                  var skeleton = trimStart(styleAndLocation.style.slice(2));
                  if (argType === 'number') {
                    var result = this.parseNumberSkeletonFromString(
                      skeleton,
                      styleAndLocation.styleLocation
                    );
                    if (result.err) {
                      return result;
                    }
                    return {
                      val: {
                        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                          'TYPE'
                        ].number,
                        value: value,
                        location: location_1,
                        style: result.val,
                      },
                      err: null,
                    };
                  } else {
                    if (skeleton.length === 0) {
                      return this.error(
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                          'ErrorKind'
                        ].EXPECT_DATE_TIME_SKELETON,
                        location_1
                      );
                    }
                    var dateTimePattern = skeleton;
                    // Get "best match" pattern only if locale is passed, if not, let it
                    // pass as-is where `parseDateTimeSkeleton()` will throw an error
                    // for unsupported patterns.
                    if (this.locale) {
                      dateTimePattern = (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$date$2d$time$2d$pattern$2d$generator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'getBestPattern'
                      ])(skeleton, this.locale);
                    }
                    var style = {
                      type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'SKELETON_TYPE'
                      ].dateTime,
                      pattern: dateTimePattern,
                      location: styleAndLocation.styleLocation,
                      parsedOptions: this.shouldParseSkeletons
                        ? (0,
                          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$date$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                            'parseDateTimeSkeleton'
                          ])(dateTimePattern)
                        : {},
                    };
                    var type =
                      argType === 'date'
                        ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                            'TYPE'
                          ].date
                        : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                            'TYPE'
                          ].time;
                    return {
                      val: {
                        type: type,
                        value: value,
                        location: location_1,
                        style: style,
                      },
                      err: null,
                    };
                  }
                }
                // Regular style or no style.
                return {
                  val: {
                    type:
                      argType === 'number'
                        ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                            'TYPE'
                          ].number
                        : argType === 'date'
                          ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                              'TYPE'
                            ].date
                          : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                              'TYPE'
                            ].time,
                    value: value,
                    location: location_1,
                    style:
                      (_a =
                        styleAndLocation === null || styleAndLocation === void 0
                          ? void 0
                          : styleAndLocation.style) !== null && _a !== void 0
                        ? _a
                        : null,
                  },
                  err: null,
                };
              }
              case 'plural':
              case 'selectordinal':
              case 'select': {
                // Parse this range:
                // {name, plural, options}
                //              ^---------^
                var typeEndPosition_1 = this.clonePosition();
                this.bumpSpace();
                if (!this.bumpIf(',')) {
                  return this.error(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].EXPECT_SELECT_ARGUMENT_OPTIONS,
                    createLocation(
                      typeEndPosition_1,
                      (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        '__assign'
                      ])({}, typeEndPosition_1)
                    )
                  );
                }
                this.bumpSpace();
                // Parse offset:
                // {name, plural, offset:1, options}
                //                ^-----^
                //
                // or the first option:
                //
                // {name, plural, one {...} other {...}}
                //                ^--^
                var identifierAndLocation = this.parseIdentifierIfPossible();
                var pluralOffset = 0;
                if (
                  argType !== 'select' &&
                  identifierAndLocation.value === 'offset'
                ) {
                  if (!this.bumpIf(':')) {
                    return this.error(
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'ErrorKind'
                      ].EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,
                      createLocation(this.clonePosition(), this.clonePosition())
                    );
                  }
                  this.bumpSpace();
                  var result = this.tryParseDecimalInteger(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].INVALID_PLURAL_ARGUMENT_OFFSET_VALUE
                  );
                  if (result.err) {
                    return result;
                  }
                  // Parse another identifier for option parsing
                  this.bumpSpace();
                  identifierAndLocation = this.parseIdentifierIfPossible();
                  pluralOffset = result.val;
                }
                var optionsResult = this.tryParsePluralOrSelectOptions(
                  nestingLevel,
                  argType,
                  expectingCloseTag,
                  identifierAndLocation
                );
                if (optionsResult.err) {
                  return optionsResult;
                }
                var argCloseResult =
                  this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                  return argCloseResult;
                }
                var location_2 = createLocation(
                  openingBracePosition,
                  this.clonePosition()
                );
                if (argType === 'select') {
                  return {
                    val: {
                      type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'TYPE'
                      ].select,
                      value: value,
                      options: fromEntries(optionsResult.val),
                      location: location_2,
                    },
                    err: null,
                  };
                } else {
                  return {
                    val: {
                      type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'TYPE'
                      ].plural,
                      value: value,
                      options: fromEntries(optionsResult.val),
                      offset: pluralOffset,
                      pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',
                      location: location_2,
                    },
                    err: null,
                  };
                }
              }
              default:
                return this.error(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].INVALID_ARGUMENT_TYPE,
                  createLocation(typeStartPosition, typeEndPosition)
                );
            }
          };
          Parser.prototype.tryParseArgumentClose = function (
            openingBracePosition
          ) {
            // Parse: {value, number, ::currency/GBP }
            //
            if (this.isEOF() || this.char() !== 125 /* `}` */) {
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].EXPECT_ARGUMENT_CLOSING_BRACE,
                createLocation(openingBracePosition, this.clonePosition())
              );
            }
            this.bump(); // `}`
            return {
              val: true,
              err: null,
            };
          };
          /**
           * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659
           */ Parser.prototype.parseSimpleArgStyleIfPossible = function () {
            var nestedBraces = 0;
            var startPosition = this.clonePosition();
            while (!this.isEOF()) {
              var ch = this.char();
              switch (ch) {
                case 39 /* `'` */: {
                  // Treat apostrophe as quoting but include it in the style part.
                  // Find the end of the quoted literal text.
                  this.bump();
                  var apostrophePosition = this.clonePosition();
                  if (!this.bumpUntil("'")) {
                    return this.error(
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'ErrorKind'
                      ].UNCLOSED_QUOTE_IN_ARGUMENT_STYLE,
                      createLocation(apostrophePosition, this.clonePosition())
                    );
                  }
                  this.bump();
                  break;
                }
                case 123 /* `{` */: {
                  nestedBraces += 1;
                  this.bump();
                  break;
                }
                case 125 /* `}` */: {
                  if (nestedBraces > 0) {
                    nestedBraces -= 1;
                  } else {
                    return {
                      val: this.message.slice(
                        startPosition.offset,
                        this.offset()
                      ),
                      err: null,
                    };
                  }
                  break;
                }
                default:
                  this.bump();
                  break;
              }
            }
            return {
              val: this.message.slice(startPosition.offset, this.offset()),
              err: null,
            };
          };
          Parser.prototype.parseNumberSkeletonFromString = function (
            skeleton,
            location
          ) {
            var tokens = [];
            try {
              tokens = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'parseNumberSkeletonFromString'
              ])(skeleton);
            } catch (e) {
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].INVALID_NUMBER_SKELETON,
                location
              );
            }
            return {
              val: {
                type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'SKELETON_TYPE'
                ].number,
                tokens: tokens,
                location: location,
                parsedOptions: this.shouldParseSkeletons
                  ? (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$number$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'parseNumberSkeleton'
                    ])(tokens)
                  : {},
              },
              err: null,
            };
          };
          /**
           * @param nesting_level The current nesting level of messages.
           *     This can be positive when parsing message fragment in select or plural argument options.
           * @param parent_arg_type The parent argument's type.
           * @param parsed_first_identifier If provided, this is the first identifier-like selector of
           *     the argument. It is a by-product of a previous parsing attempt.
           * @param expecting_close_tag If true, this message is directly or indirectly nested inside
           *     between a pair of opening and closing tags. The nested message will not parse beyond
           *     the closing tag boundary.
           */ Parser.prototype.tryParsePluralOrSelectOptions = function (
            nestingLevel,
            parentArgType,
            expectCloseTag,
            parsedFirstIdentifier
          ) {
            var _a;
            var hasOtherClause = false;
            var options = [];
            var parsedSelectors = new Set();
            var selector = parsedFirstIdentifier.value,
              selectorLocation = parsedFirstIdentifier.location;
            // Parse:
            // one {one apple}
            // ^--^
            while (true) {
              if (selector.length === 0) {
                var startPosition = this.clonePosition();
                if (parentArgType !== 'select' && this.bumpIf('=')) {
                  // Try parse `={number}` selector
                  var result = this.tryParseDecimalInteger(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].EXPECT_PLURAL_ARGUMENT_SELECTOR,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].INVALID_PLURAL_ARGUMENT_SELECTOR
                  );
                  if (result.err) {
                    return result;
                  }
                  selectorLocation = createLocation(
                    startPosition,
                    this.clonePosition()
                  );
                  selector = this.message.slice(
                    startPosition.offset,
                    this.offset()
                  );
                } else {
                  break;
                }
              }
              // Duplicate selector clauses
              if (parsedSelectors.has(selector)) {
                return this.error(
                  parentArgType === 'select'
                    ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'ErrorKind'
                      ].DUPLICATE_SELECT_ARGUMENT_SELECTOR
                    : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'ErrorKind'
                      ].DUPLICATE_PLURAL_ARGUMENT_SELECTOR,
                  selectorLocation
                );
              }
              if (selector === 'other') {
                hasOtherClause = true;
              }
              // Parse:
              // one {one apple}
              //     ^----------^
              this.bumpSpace();
              var openingBracePosition = this.clonePosition();
              if (!this.bumpIf('{')) {
                return this.error(
                  parentArgType === 'select'
                    ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'ErrorKind'
                      ].EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT
                    : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'ErrorKind'
                      ].EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT,
                  createLocation(this.clonePosition(), this.clonePosition())
                );
              }
              var fragmentResult = this.parseMessage(
                nestingLevel + 1,
                parentArgType,
                expectCloseTag
              );
              if (fragmentResult.err) {
                return fragmentResult;
              }
              var argCloseResult =
                this.tryParseArgumentClose(openingBracePosition);
              if (argCloseResult.err) {
                return argCloseResult;
              }
              options.push([
                selector,
                {
                  value: fragmentResult.val,
                  location: createLocation(
                    openingBracePosition,
                    this.clonePosition()
                  ),
                },
              ]);
              // Keep track of the existing selectors
              parsedSelectors.add(selector);
              // Prep next selector clause.
              this.bumpSpace();
              (_a = this.parseIdentifierIfPossible()),
                (selector = _a.value),
                (selectorLocation = _a.location);
            }
            if (options.length === 0) {
              return this.error(
                parentArgType === 'select'
                  ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].EXPECT_SELECT_ARGUMENT_SELECTOR
                  : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].EXPECT_PLURAL_ARGUMENT_SELECTOR,
                createLocation(this.clonePosition(), this.clonePosition())
              );
            }
            if (this.requiresOtherClause && !hasOtherClause) {
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].MISSING_OTHER_CLAUSE,
                createLocation(this.clonePosition(), this.clonePosition())
              );
            }
            return {
              val: options,
              err: null,
            };
          };
          Parser.prototype.tryParseDecimalInteger = function (
            expectNumberError,
            invalidNumberError
          ) {
            var sign = 1;
            var startingPosition = this.clonePosition();
            if (this.bumpIf('+')) {
            } else if (this.bumpIf('-')) {
              sign = -1;
            }
            var hasDigits = false;
            var decimal = 0;
            while (!this.isEOF()) {
              var ch = this.char();
              if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {
                hasDigits = true;
                decimal = decimal * 10 + (ch - 48);
                this.bump();
              } else {
                break;
              }
            }
            var location = createLocation(
              startingPosition,
              this.clonePosition()
            );
            if (!hasDigits) {
              return this.error(expectNumberError, location);
            }
            decimal *= sign;
            if (!isSafeInteger(decimal)) {
              return this.error(invalidNumberError, location);
            }
            return {
              val: decimal,
              err: null,
            };
          };
          Parser.prototype.offset = function () {
            return this.position.offset;
          };
          Parser.prototype.isEOF = function () {
            return this.offset() === this.message.length;
          };
          Parser.prototype.clonePosition = function () {
            // This is much faster than `Object.assign` or spread.
            return {
              offset: this.position.offset,
              line: this.position.line,
              column: this.position.column,
            };
          };
          /**
           * Return the code point at the current position of the parser.
           * Throws if the index is out of bound.
           */ Parser.prototype.char = function () {
            var offset = this.position.offset;
            if (offset >= this.message.length) {
              throw Error('out of bound');
            }
            var code = codePointAt(this.message, offset);
            if (code === undefined) {
              throw Error(
                'Offset '.concat(
                  offset,
                  ' is at invalid UTF-16 code unit boundary'
                )
              );
            }
            return code;
          };
          Parser.prototype.error = function (kind, location) {
            return {
              val: null,
              err: {
                kind: kind,
                message: this.message,
                location: location,
              },
            };
          };
          /** Bump the parser to the next UTF-16 code unit. */ Parser.prototype.bump =
            function () {
              if (this.isEOF()) {
                return;
              }
              var code = this.char();
              if (code === 10 /* '\n' */) {
                this.position.line += 1;
                this.position.column = 1;
                this.position.offset += 1;
              } else {
                this.position.column += 1;
                // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.
                this.position.offset += code < 0x10000 ? 1 : 2;
              }
            };
          /**
           * If the substring starting at the current position of the parser has
           * the given prefix, then bump the parser to the character immediately
           * following the prefix and return true. Otherwise, don't bump the parser
           * and return false.
           */ Parser.prototype.bumpIf = function (prefix) {
            if (startsWith(this.message, prefix, this.offset())) {
              for (var i = 0; i < prefix.length; i++) {
                this.bump();
              }
              return true;
            }
            return false;
          };
          /**
           * Bump the parser until the pattern character is found and return `true`.
           * Otherwise bump to the end of the file and return `false`.
           */ Parser.prototype.bumpUntil = function (pattern) {
            var currentOffset = this.offset();
            var index = this.message.indexOf(pattern, currentOffset);
            if (index >= 0) {
              this.bumpTo(index);
              return true;
            } else {
              this.bumpTo(this.message.length);
              return false;
            }
          };
          /**
           * Bump the parser to the target offset.
           * If target offset is beyond the end of the input, bump the parser to the end of the input.
           */ Parser.prototype.bumpTo = function (targetOffset) {
            if (this.offset() > targetOffset) {
              throw Error(
                'targetOffset '
                  .concat(
                    targetOffset,
                    ' must be greater than or equal to the current offset '
                  )
                  .concat(this.offset())
              );
            }
            targetOffset = Math.min(targetOffset, this.message.length);
            while (true) {
              var offset = this.offset();
              if (offset === targetOffset) {
                break;
              }
              if (offset > targetOffset) {
                throw Error(
                  'targetOffset '.concat(
                    targetOffset,
                    ' is at invalid UTF-16 code unit boundary'
                  )
                );
              }
              this.bump();
              if (this.isEOF()) {
                break;
              }
            }
          };
          /** advance the parser through all whitespace to the next non-whitespace code unit. */ Parser.prototype.bumpSpace =
            function () {
              while (!this.isEOF() && _isWhiteSpace(this.char())) {
                this.bump();
              }
            };
          /**
           * Peek at the *next* Unicode codepoint in the input without advancing the parser.
           * If the input has been exhausted, then this returns null.
           */ Parser.prototype.peek = function () {
            if (this.isEOF()) {
              return null;
            }
            var code = this.char();
            var offset = this.offset();
            var nextCode = this.message.charCodeAt(
              offset + (code >= 0x10000 ? 2 : 1)
            );
            return nextCode !== null && nextCode !== void 0 ? nextCode : null;
          };
          return Parser;
        })();
        /**
         * This check if codepoint is alphabet (lower & uppercase)
         * @param codepoint
         * @returns
         */ function _isAlpha(codepoint) {
          return (
            (codepoint >= 97 && codepoint <= 122) ||
            (codepoint >= 65 && codepoint <= 90)
          );
        }
        function _isAlphaOrSlash(codepoint) {
          return _isAlpha(codepoint) || codepoint === 47; /* '/' */
        }
        /** See `parseTag` function docs. */ function _isPotentialElementNameChar(
          c
        ) {
          return (
            c === 45 /* '-' */ ||
            c === 46 /* '.' */ ||
            (c >= 48 && c <= 57) ||
            c === 95 /* '_' */ ||
            (c >= 97 && c <= 122) ||
            (c >= 65 && c <= 90) ||
            c == 0xb7 ||
            (c >= 0xc0 && c <= 0xd6) ||
            (c >= 0xd8 && c <= 0xf6) ||
            (c >= 0xf8 && c <= 0x37d) ||
            (c >= 0x37f && c <= 0x1fff) ||
            (c >= 0x200c && c <= 0x200d) ||
            (c >= 0x203f && c <= 0x2040) ||
            (c >= 0x2070 && c <= 0x218f) ||
            (c >= 0x2c00 && c <= 0x2fef) ||
            (c >= 0x3001 && c <= 0xd7ff) ||
            (c >= 0xf900 && c <= 0xfdcf) ||
            (c >= 0xfdf0 && c <= 0xfffd) ||
            (c >= 0x10000 && c <= 0xeffff)
          );
        }
        /**
         * Code point equivalent of regex `\p{White_Space}`.
         * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
         */ function _isWhiteSpace(c) {
          return (
            (c >= 0x0009 && c <= 0x000d) ||
            c === 0x0020 ||
            c === 0x0085 ||
            (c >= 0x200e && c <= 0x200f) ||
            c === 0x2028 ||
            c === 0x2029
          );
        }
        /**
         * Code point equivalent of regex `\p{Pattern_Syntax}`.
         * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
         */ function _isPatternSyntax(c) {
          return (
            (c >= 0x0021 && c <= 0x0023) ||
            c === 0x0024 ||
            (c >= 0x0025 && c <= 0x0027) ||
            c === 0x0028 ||
            c === 0x0029 ||
            c === 0x002a ||
            c === 0x002b ||
            c === 0x002c ||
            c === 0x002d ||
            (c >= 0x002e && c <= 0x002f) ||
            (c >= 0x003a && c <= 0x003b) ||
            (c >= 0x003c && c <= 0x003e) ||
            (c >= 0x003f && c <= 0x0040) ||
            c === 0x005b ||
            c === 0x005c ||
            c === 0x005d ||
            c === 0x005e ||
            c === 0x0060 ||
            c === 0x007b ||
            c === 0x007c ||
            c === 0x007d ||
            c === 0x007e ||
            c === 0x00a1 ||
            (c >= 0x00a2 && c <= 0x00a5) ||
            c === 0x00a6 ||
            c === 0x00a7 ||
            c === 0x00a9 ||
            c === 0x00ab ||
            c === 0x00ac ||
            c === 0x00ae ||
            c === 0x00b0 ||
            c === 0x00b1 ||
            c === 0x00b6 ||
            c === 0x00bb ||
            c === 0x00bf ||
            c === 0x00d7 ||
            c === 0x00f7 ||
            (c >= 0x2010 && c <= 0x2015) ||
            (c >= 0x2016 && c <= 0x2017) ||
            c === 0x2018 ||
            c === 0x2019 ||
            c === 0x201a ||
            (c >= 0x201b && c <= 0x201c) ||
            c === 0x201d ||
            c === 0x201e ||
            c === 0x201f ||
            (c >= 0x2020 && c <= 0x2027) ||
            (c >= 0x2030 && c <= 0x2038) ||
            c === 0x2039 ||
            c === 0x203a ||
            (c >= 0x203b && c <= 0x203e) ||
            (c >= 0x2041 && c <= 0x2043) ||
            c === 0x2044 ||
            c === 0x2045 ||
            c === 0x2046 ||
            (c >= 0x2047 && c <= 0x2051) ||
            c === 0x2052 ||
            c === 0x2053 ||
            (c >= 0x2055 && c <= 0x205e) ||
            (c >= 0x2190 && c <= 0x2194) ||
            (c >= 0x2195 && c <= 0x2199) ||
            (c >= 0x219a && c <= 0x219b) ||
            (c >= 0x219c && c <= 0x219f) ||
            c === 0x21a0 ||
            (c >= 0x21a1 && c <= 0x21a2) ||
            c === 0x21a3 ||
            (c >= 0x21a4 && c <= 0x21a5) ||
            c === 0x21a6 ||
            (c >= 0x21a7 && c <= 0x21ad) ||
            c === 0x21ae ||
            (c >= 0x21af && c <= 0x21cd) ||
            (c >= 0x21ce && c <= 0x21cf) ||
            (c >= 0x21d0 && c <= 0x21d1) ||
            c === 0x21d2 ||
            c === 0x21d3 ||
            c === 0x21d4 ||
            (c >= 0x21d5 && c <= 0x21f3) ||
            (c >= 0x21f4 && c <= 0x22ff) ||
            (c >= 0x2300 && c <= 0x2307) ||
            c === 0x2308 ||
            c === 0x2309 ||
            c === 0x230a ||
            c === 0x230b ||
            (c >= 0x230c && c <= 0x231f) ||
            (c >= 0x2320 && c <= 0x2321) ||
            (c >= 0x2322 && c <= 0x2328) ||
            c === 0x2329 ||
            c === 0x232a ||
            (c >= 0x232b && c <= 0x237b) ||
            c === 0x237c ||
            (c >= 0x237d && c <= 0x239a) ||
            (c >= 0x239b && c <= 0x23b3) ||
            (c >= 0x23b4 && c <= 0x23db) ||
            (c >= 0x23dc && c <= 0x23e1) ||
            (c >= 0x23e2 && c <= 0x2426) ||
            (c >= 0x2427 && c <= 0x243f) ||
            (c >= 0x2440 && c <= 0x244a) ||
            (c >= 0x244b && c <= 0x245f) ||
            (c >= 0x2500 && c <= 0x25b6) ||
            c === 0x25b7 ||
            (c >= 0x25b8 && c <= 0x25c0) ||
            c === 0x25c1 ||
            (c >= 0x25c2 && c <= 0x25f7) ||
            (c >= 0x25f8 && c <= 0x25ff) ||
            (c >= 0x2600 && c <= 0x266e) ||
            c === 0x266f ||
            (c >= 0x2670 && c <= 0x2767) ||
            c === 0x2768 ||
            c === 0x2769 ||
            c === 0x276a ||
            c === 0x276b ||
            c === 0x276c ||
            c === 0x276d ||
            c === 0x276e ||
            c === 0x276f ||
            c === 0x2770 ||
            c === 0x2771 ||
            c === 0x2772 ||
            c === 0x2773 ||
            c === 0x2774 ||
            c === 0x2775 ||
            (c >= 0x2794 && c <= 0x27bf) ||
            (c >= 0x27c0 && c <= 0x27c4) ||
            c === 0x27c5 ||
            c === 0x27c6 ||
            (c >= 0x27c7 && c <= 0x27e5) ||
            c === 0x27e6 ||
            c === 0x27e7 ||
            c === 0x27e8 ||
            c === 0x27e9 ||
            c === 0x27ea ||
            c === 0x27eb ||
            c === 0x27ec ||
            c === 0x27ed ||
            c === 0x27ee ||
            c === 0x27ef ||
            (c >= 0x27f0 && c <= 0x27ff) ||
            (c >= 0x2800 && c <= 0x28ff) ||
            (c >= 0x2900 && c <= 0x2982) ||
            c === 0x2983 ||
            c === 0x2984 ||
            c === 0x2985 ||
            c === 0x2986 ||
            c === 0x2987 ||
            c === 0x2988 ||
            c === 0x2989 ||
            c === 0x298a ||
            c === 0x298b ||
            c === 0x298c ||
            c === 0x298d ||
            c === 0x298e ||
            c === 0x298f ||
            c === 0x2990 ||
            c === 0x2991 ||
            c === 0x2992 ||
            c === 0x2993 ||
            c === 0x2994 ||
            c === 0x2995 ||
            c === 0x2996 ||
            c === 0x2997 ||
            c === 0x2998 ||
            (c >= 0x2999 && c <= 0x29d7) ||
            c === 0x29d8 ||
            c === 0x29d9 ||
            c === 0x29da ||
            c === 0x29db ||
            (c >= 0x29dc && c <= 0x29fb) ||
            c === 0x29fc ||
            c === 0x29fd ||
            (c >= 0x29fe && c <= 0x2aff) ||
            (c >= 0x2b00 && c <= 0x2b2f) ||
            (c >= 0x2b30 && c <= 0x2b44) ||
            (c >= 0x2b45 && c <= 0x2b46) ||
            (c >= 0x2b47 && c <= 0x2b4c) ||
            (c >= 0x2b4d && c <= 0x2b73) ||
            (c >= 0x2b74 && c <= 0x2b75) ||
            (c >= 0x2b76 && c <= 0x2b95) ||
            c === 0x2b96 ||
            (c >= 0x2b97 && c <= 0x2bff) ||
            (c >= 0x2e00 && c <= 0x2e01) ||
            c === 0x2e02 ||
            c === 0x2e03 ||
            c === 0x2e04 ||
            c === 0x2e05 ||
            (c >= 0x2e06 && c <= 0x2e08) ||
            c === 0x2e09 ||
            c === 0x2e0a ||
            c === 0x2e0b ||
            c === 0x2e0c ||
            c === 0x2e0d ||
            (c >= 0x2e0e && c <= 0x2e16) ||
            c === 0x2e17 ||
            (c >= 0x2e18 && c <= 0x2e19) ||
            c === 0x2e1a ||
            c === 0x2e1b ||
            c === 0x2e1c ||
            c === 0x2e1d ||
            (c >= 0x2e1e && c <= 0x2e1f) ||
            c === 0x2e20 ||
            c === 0x2e21 ||
            c === 0x2e22 ||
            c === 0x2e23 ||
            c === 0x2e24 ||
            c === 0x2e25 ||
            c === 0x2e26 ||
            c === 0x2e27 ||
            c === 0x2e28 ||
            c === 0x2e29 ||
            (c >= 0x2e2a && c <= 0x2e2e) ||
            c === 0x2e2f ||
            (c >= 0x2e30 && c <= 0x2e39) ||
            (c >= 0x2e3a && c <= 0x2e3b) ||
            (c >= 0x2e3c && c <= 0x2e3f) ||
            c === 0x2e40 ||
            c === 0x2e41 ||
            c === 0x2e42 ||
            (c >= 0x2e43 && c <= 0x2e4f) ||
            (c >= 0x2e50 && c <= 0x2e51) ||
            c === 0x2e52 ||
            (c >= 0x2e53 && c <= 0x2e7f) ||
            (c >= 0x3001 && c <= 0x3003) ||
            c === 0x3008 ||
            c === 0x3009 ||
            c === 0x300a ||
            c === 0x300b ||
            c === 0x300c ||
            c === 0x300d ||
            c === 0x300e ||
            c === 0x300f ||
            c === 0x3010 ||
            c === 0x3011 ||
            (c >= 0x3012 && c <= 0x3013) ||
            c === 0x3014 ||
            c === 0x3015 ||
            c === 0x3016 ||
            c === 0x3017 ||
            c === 0x3018 ||
            c === 0x3019 ||
            c === 0x301a ||
            c === 0x301b ||
            c === 0x301c ||
            c === 0x301d ||
            (c >= 0x301e && c <= 0x301f) ||
            c === 0x3020 ||
            c === 0x3030 ||
            c === 0xfd3e ||
            c === 0xfd3f ||
            (c >= 0xfe45 && c <= 0xfe46)
          );
        }
      },
    '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          hoistSelectors: () => hoistSelectors,
          isStructurallySame: () => isStructurallySame,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/tslib/tslib.es6.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-client] (ecmascript)'
          );
        function cloneDeep(obj) {
          if (Array.isArray(obj)) {
            // @ts-expect-error meh
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '__spreadArray'
            ])([], obj.map(cloneDeep), true);
          }
          if (obj !== null && typeof obj === 'object') {
            // @ts-expect-error meh
            return Object.keys(obj).reduce(function (cloned, k) {
              // @ts-expect-error meh
              cloned[k] = cloneDeep(obj[k]);
              return cloned;
            }, {});
          }
          return obj;
        }
        function hoistPluralOrSelectElement(ast, el, positionToInject) {
          // pull this out of the ast and move it to the top
          var cloned = cloneDeep(el);
          var options = cloned.options;
          cloned.options = Object.keys(options).reduce(function (all, k) {
            var newValue = hoistSelectors(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                '__spreadArray'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__spreadArray'
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    '__spreadArray'
                  ])([], ast.slice(0, positionToInject), true),
                  options[k].value,
                  true
                ),
                ast.slice(positionToInject + 1),
                true
              )
            );
            all[k] = {
              value: newValue,
            };
            return all;
          }, {});
          return cloned;
        }
        function isPluralOrSelectElement(el) {
          return (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isPluralElement'
            ])(el) ||
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isSelectElement'
            ])(el)
          );
        }
        function findPluralOrSelectElement(ast) {
          return !!ast.find(function (el) {
            if (isPluralOrSelectElement(el)) {
              return true;
            }
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isTagElement'
              ])(el)
            ) {
              return findPluralOrSelectElement(el.children);
            }
            return false;
          });
        }
        function hoistSelectors(ast) {
          for (var i = 0; i < ast.length; i++) {
            var el = ast[i];
            if (isPluralOrSelectElement(el)) {
              return [hoistPluralOrSelectElement(ast, el, i)];
            }
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isTagElement'
              ])(el) &&
              findPluralOrSelectElement([el])
            ) {
              throw new Error(
                'Cannot hoist plural/select within a tag element. Please put the tag element inside each plural/select option'
              );
            }
          }
          return ast;
        }
        /**
         * Collect all variables in an AST to Record<string, TYPE>
         * @param ast AST to collect variables from
         * @param vars Record of variable name to variable type
         */ function collectVariables(ast, vars) {
          if (vars === void 0) {
            vars = new Map();
          }
          ast.forEach(function (el) {
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isArgumentElement'
              ])(el) ||
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isDateElement'
              ])(el) ||
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isTimeElement'
              ])(el) ||
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isNumberElement'
              ])(el)
            ) {
              if (el.value in vars && vars.get(el.value) !== el.type) {
                throw new Error(
                  'Variable '.concat(el.value, ' has conflicting types')
                );
              }
              vars.set(el.value, el.type);
            }
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isPluralElement'
              ])(el) ||
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isSelectElement'
              ])(el)
            ) {
              vars.set(el.value, el.type);
              Object.keys(el.options).forEach(function (k) {
                collectVariables(el.options[k].value, vars);
              });
            }
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isTagElement'
              ])(el)
            ) {
              vars.set(el.value, el.type);
              collectVariables(el.children, vars);
            }
          });
        }
        function isStructurallySame(a, b) {
          var aVars = new Map();
          var bVars = new Map();
          collectVariables(a, aVars);
          collectVariables(b, bVars);
          if (aVars.size !== bVars.size) {
            return {
              success: false,
              error: new Error(
                'Different number of variables: ['
                  .concat(Array.from(aVars.keys()).join(', '), '] vs [')
                  .concat(Array.from(bVars.keys()).join(', '), ']')
              ),
            };
          }
          return Array.from(aVars.entries()).reduce(
            function (result, _a) {
              var key = _a[0],
                type = _a[1];
              if (!result.success) {
                return result;
              }
              var bType = bVars.get(key);
              if (bType == null) {
                return {
                  success: false,
                  error: new Error(
                    'Missing variable '.concat(key, ' in message')
                  ),
                };
              }
              if (bType !== type) {
                return {
                  success: false,
                  error: new Error(
                    'Variable '
                      .concat(key, ' has conflicting types: ')
                      .concat(
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                          'TYPE'
                        ][type],
                        ' vs '
                      )
                      .concat(
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                          'TYPE'
                        ][bType]
                      )
                  ),
                };
              }
              return result;
            },
            {
              success: true,
            }
          );
        }
      },
    '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-client] (ecmascript) <locals>':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          _Parser: () => _Parser,
          parse: () => parse,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/tslib/tslib.es6.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/error.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$manipulator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js [app-client] (ecmascript)'
          );
        function pruneLocation(els) {
          els.forEach(function (el) {
            delete el.location;
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isSelectElement'
              ])(el) ||
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isPluralElement'
              ])(el)
            ) {
              for (var k in el.options) {
                delete el.options[k].location;
                pruneLocation(el.options[k].value);
              }
            } else if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isNumberElement'
              ])(el) &&
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isNumberSkeleton'
              ])(el.style)
            ) {
              delete el.style.location;
            } else if (
              ((0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isDateElement'
              ])(el) ||
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'isTimeElement'
                ])(el)) &&
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isDateTimeSkeleton'
              ])(el.style)
            ) {
              delete el.style.location;
            } else if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isTagElement'
              ])(el)
            ) {
              pruneLocation(el.children);
            }
          });
        }
        function parse(message, opts) {
          if (opts === void 0) {
            opts = {};
          }
          opts = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            '__assign'
          ])(
            {
              shouldParseSkeletons: true,
              requiresOtherClause: true,
            },
            opts
          );
          var result =
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'Parser'
            ](message, opts).parse();
          if (result.err) {
            var error = SyntaxError(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'ErrorKind'
              ][result.err.kind]
            );
            // @ts-expect-error Assign to error object
            error.location = result.err.location;
            // @ts-expect-error Assign to error object
            error.originalMessage = result.err.message;
            throw error;
          }
          if (
            !(opts === null || opts === void 0 ? void 0 : opts.captureLocation)
          ) {
            pruneLocation(result.val);
          }
          return result.val;
        }
        var _Parser =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'Parser'
          ];
      },
    '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-client] (ecmascript) <module evaluation>':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({});
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/error.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$manipulator$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-client] (ecmascript) <locals>'
          );
      },
    '[project]/node_modules/intl-messageformat/lib/src/error.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          ErrorCode: () => ErrorCode,
          FormatError: () => FormatError,
          InvalidValueError: () => InvalidValueError,
          InvalidValueTypeError: () => InvalidValueTypeError,
          MissingValueError: () => MissingValueError,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/tslib/tslib.es6.mjs [app-client] (ecmascript)'
          );
        var ErrorCode;
        (function (ErrorCode) {
          // When we have a placeholder but no value to format
          ErrorCode['MISSING_VALUE'] = 'MISSING_VALUE';
          // When value supplied is invalid
          ErrorCode['INVALID_VALUE'] = 'INVALID_VALUE';
          // When we need specific Intl API but it's not available
          ErrorCode['MISSING_INTL_API'] = 'MISSING_INTL_API';
        })(ErrorCode || (ErrorCode = {}));
        var FormatError = (function (_super) {
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            '__extends'
          ])(FormatError, _super);
          function FormatError(msg, code, originalMessage) {
            var _this = _super.call(this, msg) || this;
            _this.code = code;
            _this.originalMessage = originalMessage;
            return _this;
          }
          FormatError.prototype.toString = function () {
            return '[formatjs Error: '
              .concat(this.code, '] ')
              .concat(this.message);
          };
          return FormatError;
        })(Error);
        var InvalidValueError = (function (_super) {
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            '__extends'
          ])(InvalidValueError, _super);
          function InvalidValueError(
            variableId,
            value,
            options,
            originalMessage
          ) {
            return (
              _super.call(
                this,
                'Invalid values for "'
                  .concat(variableId, '": "')
                  .concat(value, '". Options are "')
                  .concat(Object.keys(options).join('", "'), '"'),
                ErrorCode.INVALID_VALUE,
                originalMessage
              ) || this
            );
          }
          return InvalidValueError;
        })(FormatError);
        var InvalidValueTypeError = (function (_super) {
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            '__extends'
          ])(InvalidValueTypeError, _super);
          function InvalidValueTypeError(value, type, originalMessage) {
            return (
              _super.call(
                this,
                'Value for "'.concat(value, '" must be of type ').concat(type),
                ErrorCode.INVALID_VALUE,
                originalMessage
              ) || this
            );
          }
          return InvalidValueTypeError;
        })(FormatError);
        var MissingValueError = (function (_super) {
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            '__extends'
          ])(MissingValueError, _super);
          function MissingValueError(variableId, originalMessage) {
            return (
              _super.call(
                this,
                'The intl string context variable "'
                  .concat(variableId, '" was not provided to the string "')
                  .concat(originalMessage, '"'),
                ErrorCode.MISSING_VALUE,
                originalMessage
              ) || this
            );
          }
          return MissingValueError;
        })(FormatError);
      },
    '[project]/node_modules/intl-messageformat/lib/src/formatters.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          PART_TYPE: () => PART_TYPE,
          formatToParts: () => formatToParts,
          isFormatXMLElementFn: () => isFormatXMLElementFn,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-client] (ecmascript) <module evaluation>'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/intl-messageformat/lib/src/error.js [app-client] (ecmascript)'
          );
        var PART_TYPE;
        (function (PART_TYPE) {
          PART_TYPE[(PART_TYPE['literal'] = 0)] = 'literal';
          PART_TYPE[(PART_TYPE['object'] = 1)] = 'object';
        })(PART_TYPE || (PART_TYPE = {}));
        function mergeLiteral(parts) {
          if (parts.length < 2) {
            return parts;
          }
          return parts.reduce(function (all, part) {
            var lastPart = all[all.length - 1];
            if (
              !lastPart ||
              lastPart.type !== PART_TYPE.literal ||
              part.type !== PART_TYPE.literal
            ) {
              all.push(part);
            } else {
              lastPart.value += part.value;
            }
            return all;
          }, []);
        }
        function isFormatXMLElementFn(el) {
          return typeof el === 'function';
        }
        function formatToParts(
          els,
          locales,
          formatters,
          formats,
          values,
          currentPluralValue, // For debugging
          originalMessage
        ) {
          // Hot path for straight simple msg translations
          if (
            els.length === 1 &&
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'isLiteralElement'
            ])(els[0])
          ) {
            return [
              {
                type: PART_TYPE.literal,
                value: els[0].value,
              },
            ];
          }
          var result = [];
          for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
            var el = els_1[_i];
            // Exit early for string parts.
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isLiteralElement'
              ])(el)
            ) {
              result.push({
                type: PART_TYPE.literal,
                value: el.value,
              });
              continue;
            }
            // TODO: should this part be literal type?
            // Replace `#` in plural rules with the actual numeric value.
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isPoundElement'
              ])(el)
            ) {
              if (typeof currentPluralValue === 'number') {
                result.push({
                  type: PART_TYPE.literal,
                  value: formatters
                    .getNumberFormat(locales)
                    .format(currentPluralValue),
                });
              }
              continue;
            }
            var varName = el.value;
            // Enforce that all required values are provided by the caller.
            if (!(values && varName in values)) {
              throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'MissingValueError'
              ](varName, originalMessage);
            }
            var value = values[varName];
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isArgumentElement'
              ])(el)
            ) {
              if (
                !value ||
                typeof value === 'string' ||
                typeof value === 'number'
              ) {
                value =
                  typeof value === 'string' || typeof value === 'number'
                    ? String(value)
                    : '';
              }
              result.push({
                type:
                  typeof value === 'string'
                    ? PART_TYPE.literal
                    : PART_TYPE.object,
                value: value,
              });
              continue;
            }
            // Recursively format plural and select parts' option — which can be a
            // nested pattern structure. The choosing of the option to use is
            // abstracted-by and delegated-to the part helper object.
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isDateElement'
              ])(el)
            ) {
              var style =
                typeof el.style === 'string'
                  ? formats.date[el.style]
                  : (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'isDateTimeSkeleton'
                      ])(el.style)
                    ? el.style.parsedOptions
                    : undefined;
              result.push({
                type: PART_TYPE.literal,
                value: formatters
                  .getDateTimeFormat(locales, style)
                  .format(value),
              });
              continue;
            }
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isTimeElement'
              ])(el)
            ) {
              var style =
                typeof el.style === 'string'
                  ? formats.time[el.style]
                  : (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'isDateTimeSkeleton'
                      ])(el.style)
                    ? el.style.parsedOptions
                    : formats.time.medium;
              result.push({
                type: PART_TYPE.literal,
                value: formatters
                  .getDateTimeFormat(locales, style)
                  .format(value),
              });
              continue;
            }
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isNumberElement'
              ])(el)
            ) {
              var style =
                typeof el.style === 'string'
                  ? formats.number[el.style]
                  : (0,
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                        'isNumberSkeleton'
                      ])(el.style)
                    ? el.style.parsedOptions
                    : undefined;
              if (style && style.scale) {
                value = value * (style.scale || 1);
              }
              result.push({
                type: PART_TYPE.literal,
                value: formatters.getNumberFormat(locales, style).format(value),
              });
              continue;
            }
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isTagElement'
              ])(el)
            ) {
              var children = el.children,
                value_1 = el.value;
              var formatFn = values[value_1];
              if (!isFormatXMLElementFn(formatFn)) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'InvalidValueTypeError'
                ](value_1, 'function', originalMessage);
              }
              var parts = formatToParts(
                children,
                locales,
                formatters,
                formats,
                values,
                currentPluralValue
              );
              var chunks = formatFn(
                parts.map(function (p) {
                  return p.value;
                })
              );
              if (!Array.isArray(chunks)) {
                chunks = [chunks];
              }
              result.push.apply(
                result,
                chunks.map(function (c) {
                  return {
                    type:
                      typeof c === 'string'
                        ? PART_TYPE.literal
                        : PART_TYPE.object,
                    value: c,
                  };
                })
              );
            }
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isSelectElement'
              ])(el)
            ) {
              var opt = el.options[value] || el.options.other;
              if (!opt) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'InvalidValueError'
                ](el.value, value, Object.keys(el.options), originalMessage);
              }
              result.push.apply(
                result,
                formatToParts(opt.value, locales, formatters, formats, values)
              );
              continue;
            }
            if (
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isPluralElement'
              ])(el)
            ) {
              var opt = el.options['='.concat(value)];
              if (!opt) {
                if (!Intl.PluralRules) {
                  throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'FormatError'
                  ](
                    'Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n',
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'ErrorCode'
                    ].MISSING_INTL_API,
                    originalMessage
                  );
                }
                var rule = formatters
                  .getPluralRules(locales, {
                    type: el.pluralType,
                  })
                  .select(value - (el.offset || 0));
                opt = el.options[rule] || el.options.other;
              }
              if (!opt) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'InvalidValueError'
                ](el.value, value, Object.keys(el.options), originalMessage);
              }
              result.push.apply(
                result,
                formatToParts(
                  opt.value,
                  locales,
                  formatters,
                  formats,
                  values,
                  value - (el.offset || 0)
                )
              );
              continue;
            }
          }
          return mergeLiteral(result);
        }
      },
    '[project]/node_modules/intl-messageformat/lib/src/core.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        /*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/ __turbopack_context__.s({
          IntlMessageFormat: () => IntlMessageFormat,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/tslib/tslib.es6.mjs [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/fast-memoize/lib/index.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-client] (ecmascript) <module evaluation>'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-client] (ecmascript) <locals>'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$formatters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/intl-messageformat/lib/src/formatters.js [app-client] (ecmascript)'
          );
        // -- MessageFormat --------------------------------------------------------
        function mergeConfig(c1, c2) {
          if (!c2) {
            return c1;
          }
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            '__assign'
          ])(
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '__assign'
            ])(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                '__assign'
              ])({}, c1 || {}),
              c2 || {}
            ),
            Object.keys(c1).reduce(function (all, k) {
              all[k] = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                '__assign'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])({}, c1[k]),
                c2[k] || {}
              );
              return all;
            }, {})
          );
        }
        function mergeConfigs(defaultConfig, configs) {
          if (!configs) {
            return defaultConfig;
          }
          return Object.keys(defaultConfig).reduce(
            function (all, k) {
              all[k] = mergeConfig(defaultConfig[k], configs[k]);
              return all;
            },
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              '__assign'
            ])({}, defaultConfig)
          );
        }
        function createFastMemoizeCache(store) {
          return {
            create: function () {
              return {
                get: function (key) {
                  return store[key];
                },
                set: function (key, value) {
                  store[key] = value;
                },
              };
            },
          };
        }
        function createDefaultFormatters(cache) {
          if (cache === void 0) {
            cache = {
              number: {},
              dateTime: {},
              pluralRules: {},
            };
          }
          return {
            getNumberFormat: (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'memoize'
            ])(
              function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }
                return new ((_a = Intl.NumberFormat).bind.apply(
                  _a,
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    '__spreadArray'
                  ])([void 0], args, false)
                ))();
              },
              {
                cache: createFastMemoizeCache(cache.number),
                strategy:
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'strategies'
                  ].variadic,
              }
            ),
            getDateTimeFormat: (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'memoize'
            ])(
              function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }
                return new ((_a = Intl.DateTimeFormat).bind.apply(
                  _a,
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    '__spreadArray'
                  ])([void 0], args, false)
                ))();
              },
              {
                cache: createFastMemoizeCache(cache.dateTime),
                strategy:
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'strategies'
                  ].variadic,
              }
            ),
            getPluralRules: (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'memoize'
            ])(
              function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }
                return new ((_a = Intl.PluralRules).bind.apply(
                  _a,
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    '__spreadArray'
                  ])([void 0], args, false)
                ))();
              },
              {
                cache: createFastMemoizeCache(cache.pluralRules),
                strategy:
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'strategies'
                  ].variadic,
              }
            ),
          };
        }
        var IntlMessageFormat = (function () {
          function IntlMessageFormat(message, locales, overrideFormats, opts) {
            if (locales === void 0) {
              locales = IntlMessageFormat.defaultLocale;
            }
            var _this = this;
            this.formatterCache = {
              number: {},
              dateTime: {},
              pluralRules: {},
            };
            this.format = function (values) {
              var parts = _this.formatToParts(values);
              // Hot path for straight simple msg translations
              if (parts.length === 1) {
                return parts[0].value;
              }
              var result = parts.reduce(function (all, part) {
                if (
                  !all.length ||
                  part.type !==
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$formatters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'PART_TYPE'
                    ].literal ||
                  typeof all[all.length - 1] !== 'string'
                ) {
                  all.push(part.value);
                } else {
                  all[all.length - 1] += part.value;
                }
                return all;
              }, []);
              if (result.length <= 1) {
                return result[0] || '';
              }
              return result;
            };
            this.formatToParts = function (values) {
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$formatters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'formatToParts'
              ])(
                _this.ast,
                _this.locales,
                _this.formatters,
                _this.formats,
                values,
                undefined,
                _this.message
              );
            };
            this.resolvedOptions = function () {
              var _a;
              return {
                locale:
                  ((_a = _this.resolvedLocale) === null || _a === void 0
                    ? void 0
                    : _a.toString()) ||
                  Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],
              };
            };
            this.getAst = function () {
              return _this.ast;
            };
            // Defined first because it's used to build the format pattern.
            this.locales = locales;
            this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);
            if (typeof message === 'string') {
              this.message = message;
              if (!IntlMessageFormat.__parse) {
                throw new TypeError(
                  'IntlMessageFormat.__parse must be set to process `message` of type `string`'
                );
              }
              var _a = opts || {},
                formatters = _a.formatters,
                parseOpts = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__rest'
                ])(_a, ['formatters']);
              // Parse string messages into an AST.
              this.ast = IntlMessageFormat.__parse(
                message,
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    '__assign'
                  ])({}, parseOpts),
                  {
                    locale: this.resolvedLocale,
                  }
                )
              );
            } else {
              this.ast = message;
            }
            if (!Array.isArray(this.ast)) {
              throw new TypeError(
                'A message must be provided as a String or AST.'
              );
            }
            // Creates a new object with the specified `formats` merged with the default
            // formats.
            this.formats = mergeConfigs(
              IntlMessageFormat.formats,
              overrideFormats
            );
            this.formatters =
              (opts && opts.formatters) ||
              createDefaultFormatters(this.formatterCache);
          }
          Object.defineProperty(IntlMessageFormat, 'defaultLocale', {
            get: function () {
              if (!IntlMessageFormat.memoizedDefaultLocale) {
                IntlMessageFormat.memoizedDefaultLocale =
                  new Intl.NumberFormat().resolvedOptions().locale;
              }
              return IntlMessageFormat.memoizedDefaultLocale;
            },
            enumerable: false,
            configurable: true,
          });
          IntlMessageFormat.memoizedDefaultLocale = null;
          IntlMessageFormat.resolveLocale = function (locales) {
            if (typeof Intl.Locale === 'undefined') {
              return;
            }
            var supportedLocales =
              Intl.NumberFormat.supportedLocalesOf(locales);
            if (supportedLocales.length > 0) {
              return new Intl.Locale(supportedLocales[0]);
            }
            return new Intl.Locale(
              typeof locales === 'string' ? locales : locales[0]
            );
          };
          IntlMessageFormat.__parse =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'parse'
            ];
          // Default format options used as the prototype of the `formats` provided to the
          // constructor. These are used when constructing the internal Intl.NumberFormat
          // and Intl.DateTimeFormat instances.
          IntlMessageFormat.formats = {
            number: {
              integer: {
                maximumFractionDigits: 0,
              },
              currency: {
                style: 'currency',
              },
              percent: {
                style: 'percent',
              },
            },
            date: {
              short: {
                month: 'numeric',
                day: 'numeric',
                year: '2-digit',
              },
              medium: {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
              },
              long: {
                month: 'long',
                day: 'numeric',
                year: 'numeric',
              },
              full: {
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                year: 'numeric',
              },
            },
            time: {
              short: {
                hour: 'numeric',
                minute: 'numeric',
              },
              medium: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
              },
              long: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short',
              },
              full: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short',
              },
            },
          };
          return IntlMessageFormat;
        })();
      },
    '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          I: () => IntlError,
          a: () => IntlErrorCode,
          b: () => createIntlFormatters,
          c: () => createFormatter,
          d: () => createCache,
          e: () => createBaseTranslator,
          f: () => defaultGetMessageFallback,
          g: () => defaultOnError,
          i: () => initializeConfig,
          r: () => resolveNamespace,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/intl-messageformat/lib/src/core.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/@formatjs/fast-memoize/lib/index.js [app-client] (ecmascript)'
          );
        class IntlError extends Error {
          constructor(code, originalMessage) {
            let message = code;
            if (originalMessage) {
              message += ': ' + originalMessage;
            }
            super(message);
            this.code = code;
            if (originalMessage) {
              this.originalMessage = originalMessage;
            }
          }
        }
        var IntlErrorCode = /*#__PURE__*/ (function (IntlErrorCode) {
          IntlErrorCode['MISSING_MESSAGE'] = 'MISSING_MESSAGE';
          IntlErrorCode['MISSING_FORMAT'] = 'MISSING_FORMAT';
          IntlErrorCode['ENVIRONMENT_FALLBACK'] = 'ENVIRONMENT_FALLBACK';
          IntlErrorCode['INSUFFICIENT_PATH'] = 'INSUFFICIENT_PATH';
          IntlErrorCode['INVALID_MESSAGE'] = 'INVALID_MESSAGE';
          IntlErrorCode['INVALID_KEY'] = 'INVALID_KEY';
          IntlErrorCode['FORMATTING_ERROR'] = 'FORMATTING_ERROR';
          return IntlErrorCode;
        })(IntlErrorCode || {});
        /**
         * `intl-messageformat` uses separate keys for `date` and `time`, but there's
         * only one native API: `Intl.DateTimeFormat`. Additionally you might want to
         * include both a time and a date in a value, therefore the separation doesn't
         * seem so useful. We offer a single `dateTime` namespace instead, but we have
         * to convert the format before `intl-messageformat` can be used.
         */ function convertFormatsToIntlMessageFormat(
          globalFormats,
          inlineFormats,
          timeZone
        ) {
          const mfDateDefaults =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'IntlMessageFormat'
            ].formats.date;
          const mfTimeDefaults =
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'IntlMessageFormat'
            ].formats.time;
          const dateTimeFormats = {
            ...(globalFormats === null || globalFormats === void 0
              ? void 0
              : globalFormats.dateTime),
            ...(inlineFormats === null || inlineFormats === void 0
              ? void 0
              : inlineFormats.dateTime),
          };
          const allFormats = {
            date: {
              ...mfDateDefaults,
              ...dateTimeFormats,
            },
            time: {
              ...mfTimeDefaults,
              ...dateTimeFormats,
            },
            number: {
              ...(globalFormats === null || globalFormats === void 0
                ? void 0
                : globalFormats.number),
              ...(inlineFormats === null || inlineFormats === void 0
                ? void 0
                : inlineFormats.number),
            },
          };
          if (timeZone) {
            // The only way to set a time zone with `intl-messageformat` is to merge it into the formats
            // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15
            ['date', 'time'].forEach((property) => {
              const formats = allFormats[property];
              for (const [key, value] of Object.entries(formats)) {
                formats[key] = {
                  timeZone,
                  ...value,
                };
              }
            });
          }
          return allFormats;
        }
        function joinPath() {
          for (
            var _len = arguments.length, parts = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            parts[_key] = arguments[_key];
          }
          return parts.filter(Boolean).join('.');
        }
        /**
         * Contains defaults that are used for all entry points into the core.
         * See also `InitializedIntlConfiguration`.
         */ function defaultGetMessageFallback(props) {
          return joinPath(props.namespace, props.key);
        }
        function defaultOnError(error) {
          console.error(error);
        }
        function createCache() {
          return {
            dateTime: {},
            number: {},
            message: {},
            relativeTime: {},
            pluralRules: {},
            list: {},
            displayNames: {},
          };
        }
        function createMemoCache(store) {
          return {
            create() {
              return {
                get(key) {
                  return store[key];
                },
                set(key, value) {
                  store[key] = value;
                },
              };
            },
          };
        }
        function memoFn(fn, cache) {
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'memoize'
          ])(fn, {
            cache: createMemoCache(cache),
            strategy:
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'strategies'
              ].variadic,
          });
        }
        function memoConstructor(ConstructorFn, cache) {
          return memoFn(function () {
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }
            return new ConstructorFn(...args);
          }, cache);
        }
        function createIntlFormatters(cache) {
          const getDateTimeFormat = memoConstructor(
            Intl.DateTimeFormat,
            cache.dateTime
          );
          const getNumberFormat = memoConstructor(
            Intl.NumberFormat,
            cache.number
          );
          const getPluralRules = memoConstructor(
            Intl.PluralRules,
            cache.pluralRules
          );
          const getRelativeTimeFormat = memoConstructor(
            Intl.RelativeTimeFormat,
            cache.relativeTime
          );
          const getListFormat = memoConstructor(Intl.ListFormat, cache.list);
          const getDisplayNames = memoConstructor(
            Intl.DisplayNames,
            cache.displayNames
          );
          return {
            getDateTimeFormat,
            getNumberFormat,
            getPluralRules,
            getRelativeTimeFormat,
            getListFormat,
            getDisplayNames,
          };
        }
        // Placed here for improved tree shaking. Somehow when this is placed in
        // `formatters.tsx`, then it can't be shaken off from `next-intl`.
        function createMessageFormatter(cache, intlFormatters) {
          const getMessageFormat = memoFn(function () {
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$core$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'IntlMessageFormat'
            ](args[0], args[1], args[2], {
              formatters: intlFormatters,
              ...args[3],
            });
          }, cache.message);
          return getMessageFormat;
        }
        function resolvePath(locale, messages, key, namespace) {
          const fullKey = joinPath(namespace, key);
          if (!messages) {
            throw new Error(
              'No messages available at `'.concat(namespace, '`.')
            );
          }
          let message = messages;
          key.split('.').forEach((part) => {
            const next = message[part];
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (part == null || next == null) {
              throw new Error(
                'Could not resolve `'
                  .concat(fullKey, '` in messages for locale `')
                  .concat(locale, '`.')
              );
            }
            message = next;
          });
          return message;
        }
        function prepareTranslationValues(values) {
          // Workaround for https://github.com/formatjs/formatjs/issues/1467
          const transformedValues = {};
          Object.keys(values).forEach((key) => {
            let index = 0;
            const value = values[key];
            let transformed;
            if (typeof value === 'function') {
              transformed = (chunks) => {
                const result = value(chunks);
                return /*#__PURE__*/ (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'isValidElement'
                ])(result)
                  ? /*#__PURE__*/ (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                      'cloneElement'
                    ])(result, {
                      key: key + index++,
                    })
                  : result;
              };
            } else {
              transformed = value;
            }
            transformedValues[key] = transformed;
          });
          return transformedValues;
        }
        function getMessagesOrError(locale, messages, namespace) {
          let onError =
            arguments.length > 3 && arguments[3] !== void 0
              ? arguments[3]
              : defaultOnError;
          try {
            if (!messages) {
              throw new Error('No messages were configured.');
            }
            const retrievedMessages = namespace
              ? resolvePath(locale, messages, namespace)
              : messages;
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (!retrievedMessages) {
              throw new Error(
                'No messages for namespace `'.concat(namespace, '` found.')
              );
            }
            return retrievedMessages;
          } catch (error) {
            const intlError = new IntlError(
              IntlErrorCode.MISSING_MESSAGE,
              error.message
            );
            onError(intlError);
            return intlError;
          }
        }
        function getPlainMessage(candidate, values) {
          // To improve runtime performance, only compile message if:
          return (
            // 1. Values are provided
            values || // 2. There are escaped braces (e.g. "'{name'}")
              /'[{}]/.test(candidate) || // 3. There are missing arguments or tags (dev-only error handling)
              /<|{/.test(candidate)
              ? undefined // Compile
              : candidate // Don't compile
          );
        }
        function createBaseTranslator(config) {
          const messagesOrError = getMessagesOrError(
            config.locale,
            config.messages,
            config.namespace,
            config.onError
          );
          return createBaseTranslatorImpl({
            ...config,
            messagesOrError,
          });
        }
        function createBaseTranslatorImpl(param) {
          let {
            cache,
            formats: globalFormats,
            formatters,
            getMessageFallback = defaultGetMessageFallback,
            locale,
            messagesOrError,
            namespace,
            onError,
            timeZone,
          } = param;
          const hasMessagesError = messagesOrError instanceof IntlError;
          function getFallbackFromErrorAndNotify(key, code, message) {
            const error = new IntlError(code, message);
            onError(error);
            return getMessageFallback({
              error,
              key,
              namespace,
            });
          }
          function translateBaseFn(
            /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key,
            /** Key value pairs for values to interpolate into the message. */ values,
            /** Provide custom formats for numbers, dates and times. */ formats
          ) {
            if (hasMessagesError) {
              // We have already warned about this during render
              return getMessageFallback({
                error: messagesOrError,
                key,
                namespace,
              });
            }
            const messages = messagesOrError;
            let message;
            try {
              message = resolvePath(locale, messages, key, namespace);
            } catch (error) {
              return getFallbackFromErrorAndNotify(
                key,
                IntlErrorCode.MISSING_MESSAGE,
                error.message
              );
            }
            if (typeof message === 'object') {
              let code, errorMessage;
              if (Array.isArray(message)) {
                code = IntlErrorCode.INVALID_MESSAGE;
                {
                  errorMessage = 'Message at `'.concat(
                    joinPath(namespace, key),
                    '` resolved to an array, but only strings are supported. See https://next-intl.dev/docs/usage/messages#arrays-of-messages'
                  );
                }
              } else {
                code = IntlErrorCode.INSUFFICIENT_PATH;
                {
                  errorMessage = 'Message at `'.concat(
                    joinPath(namespace, key),
                    '` resolved to an object, but only strings are supported. Use a `.` to retrieve nested messages. See https://next-intl.dev/docs/usage/messages#structuring-messages'
                  );
                }
              }
              return getFallbackFromErrorAndNotify(key, code, errorMessage);
            }
            let messageFormat;
            // Hot path that avoids creating an `IntlMessageFormat` instance
            const plainMessage = getPlainMessage(message, values);
            if (plainMessage) return plainMessage;
            // Lazy init the message formatter for better tree
            // shaking in case message formatting is not used.
            if (!formatters.getMessageFormat) {
              formatters.getMessageFormat = createMessageFormatter(
                cache,
                formatters
              );
            }
            try {
              messageFormat = formatters.getMessageFormat(
                message,
                locale,
                convertFormatsToIntlMessageFormat(
                  globalFormats,
                  formats,
                  timeZone
                ),
                {
                  formatters: {
                    ...formatters,
                    getDateTimeFormat(locales, options) {
                      // Workaround for https://github.com/formatjs/formatjs/issues/4279
                      return formatters.getDateTimeFormat(locales, {
                        timeZone,
                        ...options,
                      });
                    },
                  },
                }
              );
            } catch (error) {
              const thrownError = error;
              return getFallbackFromErrorAndNotify(
                key,
                IntlErrorCode.INVALID_MESSAGE,
                thrownError.message +
                  ('originalMessage' in thrownError
                    ? ' ('.concat(thrownError.originalMessage, ')')
                    : '')
              );
            }
            try {
              const formattedMessage = messageFormat.format(
                // @ts-expect-error `intl-messageformat` expects a different format
                // for rich text elements since a recent minor update. This
                // needs to be evaluated in detail, possibly also in regards
                // to be able to format to parts.
                values ? prepareTranslationValues(values) : values
              );
              if (formattedMessage == null) {
                throw new Error(
                  'Unable to format `'
                    .concat(key, '` in ')
                    .concat(
                      namespace
                        ? 'namespace `'.concat(namespace, '`')
                        : 'messages'
                    )
                );
              }
              // Limit the function signature to return strings or React elements
              return /*#__PURE__*/ (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'isValidElement'
              ])(formattedMessage) || // Arrays of React elements
                Array.isArray(formattedMessage) ||
                typeof formattedMessage === 'string'
                ? formattedMessage
                : String(formattedMessage);
            } catch (error) {
              return getFallbackFromErrorAndNotify(
                key,
                IntlErrorCode.FORMATTING_ERROR,
                error.message
              );
            }
          }
          function translateFn(
            /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key,
            /** Key value pairs for values to interpolate into the message. */ values,
            /** Provide custom formats for numbers, dates and times. */ formats
          ) {
            const result = translateBaseFn(key, values, formats);
            if (typeof result !== 'string') {
              return getFallbackFromErrorAndNotify(
                key,
                IntlErrorCode.INVALID_MESSAGE,
                'The message `'
                  .concat(key, '` in ')
                  .concat(
                    namespace
                      ? 'namespace `'.concat(namespace, '`')
                      : 'messages',
                    " didn't resolve to a string. If you want to format rich text, use `t.rich` instead."
                  )
              );
            }
            return result;
          }
          translateFn.rich = translateBaseFn;
          // Augment `translateBaseFn` to return plain strings
          translateFn.markup = (key, values, formats) => {
            const result = translateBaseFn(
              key, // @ts-expect-error -- `MarkupTranslationValues` is practically a sub type
              // of `RichTranslationValues` but TypeScript isn't smart enough here.
              values,
              formats
            );
            if (typeof result !== 'string') {
              const error = new IntlError(
                IntlErrorCode.FORMATTING_ERROR,
                "`t.markup` only accepts functions for formatting that receive and return strings.\n\nE.g. t.markup('markup', {b: (chunks) => `<b>${chunks}</b>`})"
              );
              onError(error);
              return getMessageFallback({
                error,
                key,
                namespace,
              });
            }
            return result;
          };
          translateFn.raw = (key) => {
            if (hasMessagesError) {
              // We have already warned about this during render
              return getMessageFallback({
                error: messagesOrError,
                key,
                namespace,
              });
            }
            const messages = messagesOrError;
            try {
              return resolvePath(locale, messages, key, namespace);
            } catch (error) {
              return getFallbackFromErrorAndNotify(
                key,
                IntlErrorCode.MISSING_MESSAGE,
                error.message
              );
            }
          };
          translateFn.has = (key) => {
            if (hasMessagesError) {
              return false;
            }
            try {
              resolvePath(locale, messagesOrError, key, namespace);
              return true;
            } catch (e) {
              return false;
            }
          };
          return translateFn;
        }
        /**
         * For the strictly typed messages to work we have to wrap the namespace into
         * a mandatory prefix. See https://stackoverflow.com/a/71529575/343045
         */ function resolveNamespace(namespace, namespacePrefix) {
          return namespace === namespacePrefix
            ? undefined
            : namespace.slice((namespacePrefix + '.').length);
        }
        const SECOND = 1;
        const MINUTE = SECOND * 60;
        const HOUR = MINUTE * 60;
        const DAY = HOUR * 24;
        const WEEK = DAY * 7;
        const MONTH = DAY * (365 / 12); // Approximation
        const QUARTER = MONTH * 3;
        const YEAR = DAY * 365;
        const UNIT_SECONDS = {
          second: SECOND,
          seconds: SECOND,
          minute: MINUTE,
          minutes: MINUTE,
          hour: HOUR,
          hours: HOUR,
          day: DAY,
          days: DAY,
          week: WEEK,
          weeks: WEEK,
          month: MONTH,
          months: MONTH,
          quarter: QUARTER,
          quarters: QUARTER,
          year: YEAR,
          years: YEAR,
        };
        function resolveRelativeTimeUnit(seconds) {
          const absValue = Math.abs(seconds);
          if (absValue < MINUTE) {
            return 'second';
          } else if (absValue < HOUR) {
            return 'minute';
          } else if (absValue < DAY) {
            return 'hour';
          } else if (absValue < WEEK) {
            return 'day';
          } else if (absValue < MONTH) {
            return 'week';
          } else if (absValue < YEAR) {
            return 'month';
          }
          return 'year';
        }
        function calculateRelativeTimeValue(seconds, unit) {
          // We have to round the resulting values, as `Intl.RelativeTimeFormat`
          // will include fractions like '2.1 hours ago'.
          return Math.round(seconds / UNIT_SECONDS[unit]);
        }
        function createFormatter(props) {
          const {
            _cache: cache = createCache(),
            _formatters: formatters = createIntlFormatters(cache),
            formats,
            locale,
            onError = defaultOnError,
            timeZone: globalTimeZone,
          } = props;
          function applyTimeZone(options) {
            if (
              !(options === null || options === void 0
                ? void 0
                : options.timeZone)
            ) {
              if (globalTimeZone) {
                options = {
                  ...options,
                  timeZone: globalTimeZone,
                };
              } else {
                onError(
                  new IntlError(
                    IntlErrorCode.ENVIRONMENT_FALLBACK,
                    "The `timeZone` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl.dev/docs/configuration#time-zone"
                  )
                );
              }
            }
            return options;
          }
          function resolveFormatOrOptions(
            typeFormats,
            formatOrOptions,
            overrides
          ) {
            let options;
            if (typeof formatOrOptions === 'string') {
              const formatName = formatOrOptions;
              options =
                typeFormats === null || typeFormats === void 0
                  ? void 0
                  : typeFormats[formatName];
              if (!options) {
                const error = new IntlError(
                  IntlErrorCode.MISSING_FORMAT,
                  'Format `'.concat(formatName, '` is not available.')
                );
                onError(error);
                throw error;
              }
            } else {
              options = formatOrOptions;
            }
            if (overrides) {
              options = {
                ...options,
                ...overrides,
              };
            }
            return options;
          }
          function getFormattedValue(
            formatOrOptions,
            overrides,
            typeFormats,
            formatter,
            getFallback
          ) {
            let options;
            try {
              options = resolveFormatOrOptions(
                typeFormats,
                formatOrOptions,
                overrides
              );
            } catch (e) {
              return getFallback();
            }
            try {
              return formatter(options);
            } catch (error) {
              onError(
                new IntlError(IntlErrorCode.FORMATTING_ERROR, error.message)
              );
              return getFallback();
            }
          }
          function dateTime(value, formatOrOptions, overrides) {
            return getFormattedValue(
              formatOrOptions,
              overrides,
              formats === null || formats === void 0
                ? void 0
                : formats.dateTime,
              (options) => {
                options = applyTimeZone(options);
                return formatters
                  .getDateTimeFormat(locale, options)
                  .format(value);
              },
              () => String(value)
            );
          }
          function dateTimeRange(start, end, formatOrOptions, overrides) {
            return getFormattedValue(
              formatOrOptions,
              overrides,
              formats === null || formats === void 0
                ? void 0
                : formats.dateTime,
              (options) => {
                options = applyTimeZone(options);
                return formatters
                  .getDateTimeFormat(locale, options)
                  .formatRange(start, end);
              },
              () => [dateTime(start), dateTime(end)].join(' – ')
            );
          }
          function number(value, formatOrOptions, overrides) {
            return getFormattedValue(
              formatOrOptions,
              overrides,
              formats === null || formats === void 0 ? void 0 : formats.number,
              (options) =>
                formatters.getNumberFormat(locale, options).format(value),
              () => String(value)
            );
          }
          function getGlobalNow() {
            // Only read when necessary to avoid triggering a `dynamicIO` error
            // unnecessarily (`now` is only needed for `format.relativeTime`)
            if (props.now) {
              return props.now;
            } else {
              onError(
                new IntlError(
                  IntlErrorCode.ENVIRONMENT_FALLBACK,
                  "The `now` parameter wasn't provided to `relativeTime` and there is no global default configured, therefore the current time will be used as a fallback. See https://next-intl.dev/docs/usage/dates-times#relative-times-usenow"
                )
              );
              return new Date();
            }
          }
          function relativeTime(date, nowOrOptions) {
            try {
              let nowDate, unit;
              const opts = {};
              if (
                nowOrOptions instanceof Date ||
                typeof nowOrOptions === 'number'
              ) {
                nowDate = new Date(nowOrOptions);
              } else if (nowOrOptions) {
                if (nowOrOptions.now != null) {
                  nowDate = new Date(nowOrOptions.now);
                } else {
                  nowDate = getGlobalNow();
                }
                unit = nowOrOptions.unit;
                opts.style = nowOrOptions.style;
                // @ts-expect-error -- Types are slightly outdated
                opts.numberingSystem = nowOrOptions.numberingSystem;
              }
              if (!nowDate) {
                nowDate = getGlobalNow();
              }
              const dateDate = new Date(date);
              const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;
              if (!unit) {
                unit = resolveRelativeTimeUnit(seconds);
              }
              // `numeric: 'auto'` can theoretically produce output like "yesterday",
              // but it only works with integers. E.g. -1 day will produce "yesterday",
              // but -1.1 days will produce "-1.1 days". Rounding before formatting is
              // not desired, as the given dates might cross a threshold were the
              // output isn't correct anymore. Example: 2024-01-08T23:00:00.000Z and
              // 2024-01-08T01:00:00.000Z would produce "yesterday", which is not the
              // case. By using `always` we can ensure correct output. The only exception
              // is the formatting of times <1 second as "now".
              opts.numeric = unit === 'second' ? 'auto' : 'always';
              const value = calculateRelativeTimeValue(seconds, unit);
              return formatters
                .getRelativeTimeFormat(locale, opts)
                .format(value, unit);
            } catch (error) {
              onError(
                new IntlError(IntlErrorCode.FORMATTING_ERROR, error.message)
              );
              return String(date);
            }
          }
          function list(value, formatOrOptions, overrides) {
            const serializedValue = [];
            const richValues = new Map();
            // `formatToParts` only accepts strings, therefore we have to temporarily
            // replace React elements with a placeholder ID that can be used to retrieve
            // the original value afterwards.
            let index = 0;
            for (const item of value) {
              let serializedItem;
              if (typeof item === 'object') {
                serializedItem = String(index);
                richValues.set(serializedItem, item);
              } else {
                serializedItem = String(item);
              }
              serializedValue.push(serializedItem);
              index++;
            }
            return getFormattedValue(
              formatOrOptions,
              overrides,
              formats === null || formats === void 0 ? void 0 : formats.list, // @ts-expect-error -- `richValues.size` is used to determine the return type, but TypeScript can't infer the meaning of this correctly
              (options) => {
                const result = formatters
                  .getListFormat(locale, options)
                  .formatToParts(serializedValue)
                  .map((part) =>
                    part.type === 'literal'
                      ? part.value
                      : richValues.get(part.value) || part.value
                  );
                if (richValues.size > 0) {
                  return result;
                } else {
                  return result.join('');
                }
              },
              () => String(value)
            );
          }
          return {
            dateTime,
            number,
            relativeTime,
            list,
            dateTimeRange,
          };
        }
        function validateMessagesSegment(
          messages,
          invalidKeyLabels,
          parentPath
        ) {
          Object.entries(messages).forEach((param) => {
            let [key, messageOrMessages] = param;
            if (key.includes('.')) {
              let keyLabel = key;
              if (parentPath) keyLabel += ' (at '.concat(parentPath, ')');
              invalidKeyLabels.push(keyLabel);
            }
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (
              messageOrMessages != null &&
              typeof messageOrMessages === 'object'
            ) {
              validateMessagesSegment(
                messageOrMessages,
                invalidKeyLabels,
                joinPath(parentPath, key)
              );
            }
          });
        }
        function validateMessages(messages, onError) {
          const invalidKeyLabels = [];
          validateMessagesSegment(messages, invalidKeyLabels);
          if (invalidKeyLabels.length > 0) {
            onError(
              new IntlError(
                IntlErrorCode.INVALID_KEY,
                'Namespace keys can not contain the character "." as this is used to express nesting. Please remove it or replace it with another character.\n\nInvalid '
                  .concat(invalidKeyLabels.length === 1 ? 'key' : 'keys', ': ')
                  .concat(
                    invalidKeyLabels.join(', '),
                    '\n\nIf you\'re migrating from a flat structure, you can convert your messages as follows:\n\nimport {set} from "lodash";\n\nconst input = {\n  "one.one": "1.1",\n  "one.two": "1.2",\n  "two.one.one": "2.1.1"\n};\n\nconst output = Object.entries(input).reduce(\n  (acc, [key, value]) => set(acc, key, value),\n  {}\n);\n\n// Output:\n//\n// {\n//   "one": {\n//     "one": "1.1",\n//     "two": "1.2"\n//   },\n//   "two": {\n//     "one": {\n//       "one": "2.1.1"\n//     }\n//   }\n// }\n'
                  )
              )
            );
          }
        }
        /**
         * Enhances the incoming props with defaults.
         */ function initializeConfig(param) {
          let { formats, getMessageFallback, messages, onError, ...rest } =
            param;
          const finalOnError = onError || defaultOnError;
          const finalGetMessageFallback =
            getMessageFallback || defaultGetMessageFallback;
          {
            if (messages) {
              validateMessages(messages, finalOnError);
            }
          }
          return {
            ...rest,
            formats: formats || undefined,
            messages: messages || undefined,
            onError: finalOnError,
            getMessageFallback: finalGetMessageFallback,
          };
        }
      },
    '[project]/node_modules/use-intl/dist/esm/development/react.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          IntlProvider: () => IntlProvider,
          useFormatter: () => useFormatter,
          useLocale: () => useLocale,
          useMessages: () => useMessages,
          useNow: () => useNow,
          useTimeZone: () => useTimeZone,
          useTranslations: () => useTranslations,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
        const IntlContext = /*#__PURE__*/ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
          'createContext'
        ])(undefined);
        function IntlProvider(param) {
          let {
            children,
            formats,
            getMessageFallback,
            locale,
            messages,
            now,
            onError,
            timeZone,
          } = param;
          const prevContext = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useContext'
          ])(IntlContext);
          // The formatter cache is released when the locale changes. For
          // long-running apps with a persistent `IntlProvider` at the root,
          // this can reduce the memory footprint (e.g. in React Native).
          const cache = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ])(
            {
              'IntlProvider.useMemo[cache]': () => {
                return (
                  (prevContext === null || prevContext === void 0
                    ? void 0
                    : prevContext.cache) ||
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                    'd'
                  ])()
                );
              },
            }['IntlProvider.useMemo[cache]'],
            [
              locale,
              prevContext === null || prevContext === void 0
                ? void 0
                : prevContext.cache,
            ]
          );
          const formatters = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ])(
            {
              'IntlProvider.useMemo[formatters]': () =>
                (prevContext === null || prevContext === void 0
                  ? void 0
                  : prevContext.formatters) ||
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'b'
                ])(cache),
            }['IntlProvider.useMemo[formatters]'],
            [
              cache,
              prevContext === null || prevContext === void 0
                ? void 0
                : prevContext.formatters,
            ]
          );
          // Memoizing this value helps to avoid triggering a re-render of all
          // context consumers in case the configuration didn't change. However,
          // if some of the non-primitive values change, a re-render will still
          // be triggered. Note that there's no need to put `memo` on `IntlProvider`
          // itself, because the `children` typically change on every render.
          // There's some burden on the consumer side if it's important to reduce
          // re-renders, put that's how React works.
          // See: https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/#context-updates-and-render-optimizations
          const value = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ])(
            {
              'IntlProvider.useMemo[value]': () => ({
                ...(0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'i'
                ])({
                  locale,
                  // (required by provider)
                  formats:
                    formats === undefined
                      ? prevContext === null || prevContext === void 0
                        ? void 0
                        : prevContext.formats
                      : formats,
                  getMessageFallback:
                    getMessageFallback ||
                    (prevContext === null || prevContext === void 0
                      ? void 0
                      : prevContext.getMessageFallback),
                  messages:
                    messages === undefined
                      ? prevContext === null || prevContext === void 0
                        ? void 0
                        : prevContext.messages
                      : messages,
                  now:
                    now ||
                    (prevContext === null || prevContext === void 0
                      ? void 0
                      : prevContext.now),
                  onError:
                    onError ||
                    (prevContext === null || prevContext === void 0
                      ? void 0
                      : prevContext.onError),
                  timeZone:
                    timeZone ||
                    (prevContext === null || prevContext === void 0
                      ? void 0
                      : prevContext.timeZone),
                }),
                formatters,
                cache,
              }),
            }['IntlProvider.useMemo[value]'],
            [
              cache,
              formats,
              formatters,
              getMessageFallback,
              locale,
              messages,
              now,
              onError,
              prevContext,
              timeZone,
            ]
          );
          return /*#__PURE__*/ (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'jsx'
          ])(IntlContext.Provider, {
            value: value,
            children: children,
          });
        }
        function useIntlContext() {
          const context = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useContext'
          ])(IntlContext);
          if (!context) {
            throw new Error(
              'No intl context found. Have you configured the provider? See https://next-intl.dev/docs/usage/configuration#server-client-components'
            );
          }
          return context;
        }
        let hasWarnedForMissingTimezone = false;
        const isServer = typeof window === 'undefined';
        function useTranslationsImpl(
          allMessagesPrefixed,
          namespacePrefixed,
          namespacePrefix
        ) {
          const {
            cache,
            formats: globalFormats,
            formatters,
            getMessageFallback,
            locale,
            onError,
            timeZone,
          } = useIntlContext();
          // The `namespacePrefix` is part of the type system.
          // See the comment in the hook invocation.
          const allMessages = allMessagesPrefixed[namespacePrefix];
          const namespace = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'r'
          ])(namespacePrefixed, namespacePrefix);
          if (!timeZone && !hasWarnedForMissingTimezone && isServer) {
            // eslint-disable-next-line react-compiler/react-compiler
            hasWarnedForMissingTimezone = true;
            onError(
              new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                'I'
              ](
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'a'
                ].ENVIRONMENT_FALLBACK,
                'There is no `timeZone` configured, this can lead to markup mismatches caused by environment differences. Consider adding a global default: https://next-intl.dev/docs/configuration#time-zone'
              )
            );
          }
          const translate = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ])(
            {
              'useTranslationsImpl.useMemo[translate]': () =>
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'e'
                ])({
                  cache,
                  formatters,
                  getMessageFallback,
                  messages: allMessages,
                  namespace,
                  onError,
                  formats: globalFormats,
                  locale,
                  timeZone,
                }),
            }['useTranslationsImpl.useMemo[translate]'],
            [
              cache,
              formatters,
              getMessageFallback,
              allMessages,
              namespace,
              onError,
              globalFormats,
              locale,
              timeZone,
            ]
          );
          return translate;
        }
        /**
         * Translates messages from the given namespace by using the ICU syntax.
         * See https://formatjs.io/docs/core-concepts/icu-syntax.
         *
         * If no namespace is provided, all available messages are returned.
         * The namespace can also indicate nesting by using a dot
         * (e.g. `namespace.Component`).
         */ function useTranslations(namespace) {
          const context = useIntlContext();
          const messages = context.messages;
          // We have to wrap the actual hook so the type inference for the optional
          // namespace works correctly. See https://stackoverflow.com/a/71529575/343045
          // The prefix ("!") is arbitrary.
          // @ts-expect-error Use the explicit annotation instead
          return useTranslationsImpl(
            {
              '!': messages,
            }, // @ts-expect-error
            namespace ? '!.'.concat(namespace) : '!',
            '!'
          );
        }
        function useLocale() {
          return useIntlContext().locale;
        }
        function getNow() {
          return new Date();
        }
        /**
         * @see https://next-intl.dev/docs/usage/dates-times#relative-times-usenow
         */ function useNow(options) {
          const updateInterval =
            options === null || options === void 0
              ? void 0
              : options.updateInterval;
          const { now: globalNow } = useIntlContext();
          const [now, setNow] = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useState'
          ])(globalNow || getNow());
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useEffect'
          ])(
            {
              'useNow.useEffect': () => {
                if (!updateInterval) return;
                const intervalId = setInterval(
                  {
                    'useNow.useEffect.intervalId': () => {
                      setNow(getNow());
                    },
                  }['useNow.useEffect.intervalId'],
                  updateInterval
                );
                return {
                  'useNow.useEffect': () => {
                    clearInterval(intervalId);
                  },
                }['useNow.useEffect'];
              },
            }['useNow.useEffect'],
            [globalNow, updateInterval]
          );
          return updateInterval == null && globalNow ? globalNow : now;
        }
        function useTimeZone() {
          return useIntlContext().timeZone;
        }
        function useMessages() {
          const context = useIntlContext();
          if (!context.messages) {
            throw new Error(
              'No messages found. Have you configured them correctly? See https://next-intl.dev/docs/configuration#messages'
            );
          }
          return context.messages;
        }
        function useFormatter() {
          const {
            formats,
            formatters,
            locale,
            now: globalNow,
            onError,
            timeZone,
          } = useIntlContext();
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'useMemo'
          ])(
            {
              'useFormatter.useMemo': () =>
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
                  'c'
                ])({
                  formats,
                  locale,
                  now: globalNow,
                  onError,
                  timeZone,
                  _formatters: formatters,
                }),
            }['useFormatter.useMemo'],
            [formats, formatters, globalNow, locale, onError, timeZone]
          );
        }
      },
    '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          default: () => NextIntlClientProvider,
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/use-intl/dist/esm/development/react.js [app-client] (ecmascript)'
          );
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
        ('use client');
        function NextIntlClientProvider(param) {
          let { locale, ...rest } = param;
          if (!locale) {
            throw new Error(
              "Couldn't infer the `locale` prop in `NextIntlClientProvider`, please provide it explicitly.\n\nSee https://next-intl.dev/docs/configuration#locale"
            );
          }
          return /*#__PURE__*/ (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$jsx$2d$runtime$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
            'jsx'
          ])(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'IntlProvider'
            ],
            {
              locale: locale,
              ...rest,
            }
          );
        }
      },
    '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js [app-client] (ecmascript) <export default as NextIntlClientProvider>':
      (__turbopack_context__) => {
        'use strict';

        __turbopack_context__.s({
          NextIntlClientProvider: () =>
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$NextIntlClientProvider$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[
              'default'
            ],
        });
        var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$NextIntlClientProvider$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
          __turbopack_context__.i(
            '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js [app-client] (ecmascript)'
          );
      },
    '[project]/node_modules/next/dist/shared/lib/router/utils/disable-smooth-scroll.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(
            exports,
            'disableSmoothScrollDuringRouteTransition',
            {
              enumerable: true,
              get: function () {
                return disableSmoothScrollDuringRouteTransition;
              },
            }
          );
          const _warnonce = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils/warn-once.js [app-client] (ecmascript)'
          );
          function disableSmoothScrollDuringRouteTransition(fn, options) {
            if (options === void 0) options = {};
            // if only the hash is changed, we don't need to disable smooth scrolling
            // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
            if (options.onlyHashChange) {
              fn();
              return;
            }
            const htmlElement = document.documentElement;
            const hasDataAttribute =
              htmlElement.dataset.scrollBehavior === 'smooth';
            // Since this is a breaking change, this is temporarily flagged
            // and will be false by default.
            // In the next major (v16), this will be automatically enabled
            if (('TURBOPACK compile-time falsy', 0));
            else {
              //TURBOPACK unreachable
              // Old behavior: always manipulate styles, but warn about upcoming change
              // Warn if smooth scrolling is detected but no data attribute is present
              if (
                ('TURBOPACK compile-time value', 'development') ===
                  'development' &&
                !hasDataAttribute &&
                getComputedStyle(htmlElement).scrollBehavior === 'smooth'
              ) {
                (0, _warnonce.warnOnce)(
                  'Detected `scroll-behavior: smooth` on the `<html>` element. In a future version, ' +
                    'Next.js will no longer automatically disable smooth scrolling during route transitions. ' +
                    'To prepare for this change, add `data-scroll-behavior="smooth"` to your <html> element. ' +
                    'Learn more: https://nextjs.org/docs/messages/missing-data-scroll-behavior'
                );
              }
            }
            // Proceed with temporarily disabling smooth scrolling
            const existing = htmlElement.style.scrollBehavior;
            htmlElement.style.scrollBehavior = 'auto';
            if (!options.dontForceLayout) {
              // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
              // Otherwise it will not pickup the change in scrollBehavior
              // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
              htmlElement.getClientRects();
            }
            fn();
            htmlElement.style.scrollBehavior = existing;
          } //# sourceMappingURL=disable-smooth-scroll.js.map
        }
      },
    '[project]/node_modules/next/dist/client/components/bfcache.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'useRouterBFCache', {
            enumerable: true,
            get: function () {
              return useRouterBFCache;
            },
          });
          const _react = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
          // When the flag is disabled, only track the currently active tree
          const MAX_BF_CACHE_ENTRIES = ('TURBOPACK compile-time falsy', 0)
            ? 'TURBOPACK unreachable'
            : 1;
          function useRouterBFCache(activeTree, activeStateKey) {
            // The currently active entry. The entries form a linked list, sorted in
            // order of most recently active. This allows us to reuse parts of the list
            // without cloning, unless there's a reordering or removal.
            // TODO: Once we start tracking back/forward history at each route level,
            // we should use the history order instead. In other words, when traversing
            // to an existing entry as a result of a popstate event, we should maintain
            // the existing order instead of moving it to the front of the list. I think
            // an initial implementation of this could be to pass an incrementing id
            // to history.pushState/replaceState, then use that here for ordering.
            const [prevActiveEntry, setPrevActiveEntry] = (0, _react.useState)(
              () => {
                const initialEntry = {
                  tree: activeTree,
                  stateKey: activeStateKey,
                  next: null,
                };
                return initialEntry;
              }
            );
            if (prevActiveEntry.tree === activeTree) {
              // Fast path. The active tree hasn't changed, so we can reuse the
              // existing state.
              return prevActiveEntry;
            }
            // The route tree changed. Note that this doesn't mean that the tree changed
            // *at this level* — the change may be due to a child route. Either way, we
            // need to either add or update the router tree in the bfcache.
            //
            // The rest of the code looks more complicated than it actually is because we
            // can't mutate the state in place; we have to copy-on-write.
            // Create a new entry for the active cache key. This is the head of the new
            // linked list.
            const newActiveEntry = {
              tree: activeTree,
              stateKey: activeStateKey,
              next: null,
            };
            // We need to append the old list onto the new list. If the head of the new
            // list was already present in the cache, then we'll need to clone everything
            // that came before it. Then we can reuse the rest.
            let n = 1;
            let oldEntry = prevActiveEntry;
            let clonedEntry = newActiveEntry;
            while (oldEntry !== null && n < MAX_BF_CACHE_ENTRIES) {
              if (oldEntry.stateKey === activeStateKey) {
                // Fast path. This entry in the old list that corresponds to the key that
                // is now active. We've already placed a clone of this entry at the front
                // of the new list. We can reuse the rest of the old list without cloning.
                // NOTE: We don't need to worry about eviction in this case because we
                // haven't increased the size of the cache, and we assume the max size
                // is constant across renders. If we were to change it to a dynamic limit,
                // then the implementation would need to account for that.
                clonedEntry.next = oldEntry.next;
                break;
              } else {
                // Clone the entry and append it to the list.
                n++;
                const entry = {
                  tree: oldEntry.tree,
                  stateKey: oldEntry.stateKey,
                  next: null,
                };
                clonedEntry.next = entry;
                clonedEntry = entry;
              }
              oldEntry = oldEntry.next;
            }
            setPrevActiveEntry(newActiveEntry);
            return newActiveEntry;
          }
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=bfcache.js.map
        }
      },
    '[project]/node_modules/next/dist/client/components/layout-router.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use client');
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(
            exports,
            /**
             * OuterLayoutRouter handles the current segment as well as <Offscreen> rendering of other segments.
             * It can be rendered next to each other with a different `parallelRouterKey`, allowing for Parallel routes.
             */ 'default',
            {
              enumerable: true,
              get: function () {
                return OuterLayoutRouter;
              },
            }
          );
          const _interop_require_default = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)'
          );
          const _interop_require_wildcard = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)'
          );
          const _jsxruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
          const _routerreducertypes = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/router-reducer/router-reducer-types.js [app-client] (ecmascript)'
          );
          const _react = /*#__PURE__*/ _interop_require_wildcard._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
            )
          );
          const _reactdom = /*#__PURE__*/ _interop_require_default._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)'
            )
          );
          const _approutercontextsharedruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/app-router-context.shared-runtime.js [app-client] (ecmascript)'
          );
          const _fetchserverresponse = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/router-reducer/fetch-server-response.js [app-client] (ecmascript)'
          );
          const _unresolvedthenable = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/unresolved-thenable.js [app-client] (ecmascript)'
          );
          const _errorboundary = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/error-boundary.js [app-client] (ecmascript)'
          );
          const _matchsegments = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/match-segments.js [app-client] (ecmascript)'
          );
          const _disablesmoothscroll = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/router/utils/disable-smooth-scroll.js [app-client] (ecmascript)'
          );
          const _redirectboundary = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/redirect-boundary.js [app-client] (ecmascript)'
          );
          const _errorboundary1 = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/http-access-fallback/error-boundary.js [app-client] (ecmascript)'
          );
          const _createroutercachekey = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/router-reducer/create-router-cache-key.js [app-client] (ecmascript)'
          );
          const _hasinterceptionrouteincurrenttree = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/router-reducer/reducers/has-interception-route-in-current-tree.js [app-client] (ecmascript)'
          );
          const _useactionqueue = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/use-action-queue.js [app-client] (ecmascript)'
          );
          const _bfcache = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/bfcache.js [app-client] (ecmascript)'
          );
          const _apppaths = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/router/utils/app-paths.js [app-client] (ecmascript)'
          );
          const Activity = ('TURBOPACK compile-time falsy', 0)
            ? 'TURBOPACK unreachable'
            : null;
          /**
           * Add refetch marker to router state at the point of the current layout segment.
           * This ensures the response returned is not further down than the current layout segment.
           */ function walkAddRefetch(segmentPathToWalk, treeToRecreate) {
            if (segmentPathToWalk) {
              const [segment, parallelRouteKey] = segmentPathToWalk;
              const isLast = segmentPathToWalk.length === 2;
              if (
                (0, _matchsegments.matchSegment)(treeToRecreate[0], segment)
              ) {
                if (treeToRecreate[1].hasOwnProperty(parallelRouteKey)) {
                  if (isLast) {
                    const subTree = walkAddRefetch(
                      undefined,
                      treeToRecreate[1][parallelRouteKey]
                    );
                    return [
                      treeToRecreate[0],
                      {
                        ...treeToRecreate[1],
                        [parallelRouteKey]: [
                          subTree[0],
                          subTree[1],
                          subTree[2],
                          'refetch',
                        ],
                      },
                    ];
                  }
                  return [
                    treeToRecreate[0],
                    {
                      ...treeToRecreate[1],
                      [parallelRouteKey]: walkAddRefetch(
                        segmentPathToWalk.slice(2),
                        treeToRecreate[1][parallelRouteKey]
                      ),
                    },
                  ];
                }
              }
            }
            return treeToRecreate;
          }
          const __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
            _reactdom.default
              .__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
          // TODO-APP: Replace with new React API for finding dom nodes without a `ref` when available
          /**
           * Wraps ReactDOM.findDOMNode with additional logic to hide React Strict Mode warning
           */ function findDOMNode(instance) {
            // Tree-shake for server bundle
            if (typeof window === 'undefined') return null;
            // __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode is null during module init.
            // We need to lazily reference it.
            const internal_reactDOMfindDOMNode =
              __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode;
            return internal_reactDOMfindDOMNode(instance);
          }
          const rectProperties = [
            'bottom',
            'height',
            'left',
            'right',
            'top',
            'width',
            'x',
            'y',
          ];
          /**
           * Check if a HTMLElement is hidden or fixed/sticky position
           */ function shouldSkipElement(element) {
            // we ignore fixed or sticky positioned elements since they'll likely pass the "in-viewport" check
            // and will result in a situation we bail on scroll because of something like a fixed nav,
            // even though the actual page content is offscreen
            if (
              ['sticky', 'fixed'].includes(getComputedStyle(element).position)
            ) {
              if (('TURBOPACK compile-time truthy', 1)) {
                console.warn(
                  'Skipping auto-scroll behavior due to `position: sticky` or `position: fixed` on element:',
                  element
                );
              }
              return true;
            }
            // Uses `getBoundingClientRect` to check if the element is hidden instead of `offsetParent`
            // because `offsetParent` doesn't consider document/body
            const rect = element.getBoundingClientRect();
            return rectProperties.every((item) => rect[item] === 0);
          }
          /**
           * Check if the top corner of the HTMLElement is in the viewport.
           */ function topOfElementInViewport(element, viewportHeight) {
            const rect = element.getBoundingClientRect();
            return rect.top >= 0 && rect.top <= viewportHeight;
          }
          /**
           * Find the DOM node for a hash fragment.
           * If `top` the page has to scroll to the top of the page. This mirrors the browser's behavior.
           * If the hash fragment is an id, the page has to scroll to the element with that id.
           * If the hash fragment is a name, the page has to scroll to the first element with that name.
           */ function getHashFragmentDomNode(hashFragment) {
            // If the hash fragment is `top` the page has to scroll to the top of the page.
            if (hashFragment === 'top') {
              return document.body;
            }
            var _document_getElementById;
            // If the hash fragment is an id, the page has to scroll to the element with that id.
            return (_document_getElementById =
              document.getElementById(hashFragment)) != null
              ? _document_getElementById
              : document.getElementsByName(hashFragment)[0];
          }
          class InnerScrollAndFocusHandler extends _react.default.Component {
            componentDidMount() {
              this.handlePotentialScroll();
            }
            componentDidUpdate() {
              // Because this property is overwritten in handlePotentialScroll it's fine to always run it when true as it'll be set to false for subsequent renders.
              if (this.props.focusAndScrollRef.apply) {
                this.handlePotentialScroll();
              }
            }
            render() {
              return this.props.children;
            }
            constructor(...args) {
              super(...args),
                (this.handlePotentialScroll = () => {
                  // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.
                  const { focusAndScrollRef, segmentPath } = this.props;
                  if (focusAndScrollRef.apply) {
                    // segmentPaths is an array of segment paths that should be scrolled to
                    // if the current segment path is not in the array, the scroll is not applied
                    // unless the array is empty, in which case the scroll is always applied
                    if (
                      focusAndScrollRef.segmentPaths.length !== 0 &&
                      !focusAndScrollRef.segmentPaths.some(
                        (scrollRefSegmentPath) =>
                          segmentPath.every((segment, index) =>
                            (0, _matchsegments.matchSegment)(
                              segment,
                              scrollRefSegmentPath[index]
                            )
                          )
                      )
                    ) {
                      return;
                    }
                    let domNode = null;
                    const hashFragment = focusAndScrollRef.hashFragment;
                    if (hashFragment) {
                      domNode = getHashFragmentDomNode(hashFragment);
                    }
                    // `findDOMNode` is tricky because it returns just the first child if the component is a fragment.
                    // This already caused a bug where the first child was a <link/> in head.
                    if (!domNode) {
                      domNode = findDOMNode(this);
                    }
                    // If there is no DOM node this layout-router level is skipped. It'll be handled higher-up in the tree.
                    if (!(domNode instanceof Element)) {
                      return;
                    }
                    // Verify if the element is a HTMLElement and if we want to consider it for scroll behavior.
                    // If the element is skipped, try to select the next sibling and try again.
                    while (
                      !(domNode instanceof HTMLElement) ||
                      shouldSkipElement(domNode)
                    ) {
                      if (('TURBOPACK compile-time truthy', 1)) {
                        var _domNode_parentElement;
                        if (
                          ((_domNode_parentElement = domNode.parentElement) ==
                          null
                            ? void 0
                            : _domNode_parentElement.localName) === 'head'
                        ) {
                          // TODO: We enter this state when metadata was rendered as part of the page or via Next.js.
                          // This is always a bug in Next.js and caused by React hoisting metadata.
                          // We need to replace `findDOMNode` in favor of Fragment Refs (when available) so that we can skip over metadata.
                        }
                      }
                      // No siblings found that match the criteria are found, so handle scroll higher up in the tree instead.
                      if (domNode.nextElementSibling === null) {
                        return;
                      }
                      domNode = domNode.nextElementSibling;
                    }
                    // State is mutated to ensure that the focus and scroll is applied only once.
                    focusAndScrollRef.apply = false;
                    focusAndScrollRef.hashFragment = null;
                    focusAndScrollRef.segmentPaths = [];
                    (0,
                    _disablesmoothscroll.disableSmoothScrollDuringRouteTransition)(
                      () => {
                        // In case of hash scroll, we only need to scroll the element into view
                        if (hashFragment) {
                          domNode.scrollIntoView();
                          return;
                        }
                        // Store the current viewport height because reading `clientHeight` causes a reflow,
                        // and it won't change during this function.
                        const htmlElement = document.documentElement;
                        const viewportHeight = htmlElement.clientHeight;
                        // If the element's top edge is already in the viewport, exit early.
                        if (topOfElementInViewport(domNode, viewportHeight)) {
                          return;
                        }
                        // Otherwise, try scrolling go the top of the document to be backward compatible with pages
                        // scrollIntoView() called on `<html/>` element scrolls horizontally on chrome and firefox (that shouldn't happen)
                        // We could use it to scroll horizontally following RTL but that also seems to be broken - it will always scroll left
                        // scrollLeft = 0 also seems to ignore RTL and manually checking for RTL is too much hassle so we will scroll just vertically
                        htmlElement.scrollTop = 0;
                        // Scroll to domNode if domNode is not in viewport when scrolled to top of document
                        if (!topOfElementInViewport(domNode, viewportHeight)) {
                          // Scroll into view doesn't scroll horizontally by default when not needed
                          domNode.scrollIntoView();
                        }
                      },
                      {
                        // We will force layout by querying domNode position
                        dontForceLayout: true,
                        onlyHashChange: focusAndScrollRef.onlyHashChange,
                      }
                    );
                    // Mutate after scrolling so that it can be read by `disableSmoothScrollDuringRouteTransition`
                    focusAndScrollRef.onlyHashChange = false;
                    // Set focus on the element
                    domNode.focus();
                  }
                });
            }
          }
          function ScrollAndFocusHandler(param) {
            let { segmentPath, children } = param;
            const context = (0, _react.useContext)(
              _approutercontextsharedruntime.GlobalLayoutRouterContext
            );
            if (!context) {
              throw Object.defineProperty(
                new Error('invariant global layout router not mounted'),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E473',
                  enumerable: false,
                  configurable: true,
                }
              );
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(
              InnerScrollAndFocusHandler,
              {
                segmentPath: segmentPath,
                focusAndScrollRef: context.focusAndScrollRef,
                children: children,
              }
            );
          }
          /**
           * InnerLayoutRouter handles rendering the provided segment based on the cache.
           */ function InnerLayoutRouter(param) {
            let { tree, segmentPath, cacheNode, url } = param;
            const context = (0, _react.useContext)(
              _approutercontextsharedruntime.GlobalLayoutRouterContext
            );
            if (!context) {
              throw Object.defineProperty(
                new Error('invariant global layout router not mounted'),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E473',
                  enumerable: false,
                  configurable: true,
                }
              );
            }
            const { tree: fullTree } = context;
            // `rsc` represents the renderable node for this segment.
            // If this segment has a `prefetchRsc`, it's the statically prefetched data.
            // We should use that on initial render instead of `rsc`. Then we'll switch
            // to `rsc` when the dynamic response streams in.
            //
            // If no prefetch data is available, then we go straight to rendering `rsc`.
            const resolvedPrefetchRsc =
              cacheNode.prefetchRsc !== null
                ? cacheNode.prefetchRsc
                : cacheNode.rsc;
            // We use `useDeferredValue` to handle switching between the prefetched and
            // final values. The second argument is returned on initial render, then it
            // re-renders with the first argument.
            const rsc = (0, _react.useDeferredValue)(
              cacheNode.rsc,
              resolvedPrefetchRsc
            );
            // `rsc` is either a React node or a promise for a React node, except we
            // special case `null` to represent that this segment's data is missing. If
            // it's a promise, we need to unwrap it so we can determine whether or not the
            // data is missing.
            const resolvedRsc =
              typeof rsc === 'object' &&
              rsc !== null &&
              typeof rsc.then === 'function'
                ? (0, _react.use)(rsc)
                : rsc;
            if (!resolvedRsc) {
              // The data for this segment is not available, and there's no pending
              // navigation that will be able to fulfill it. We need to fetch more from
              // the server and patch the cache.
              // Check if there's already a pending request.
              let lazyData = cacheNode.lazyData;
              if (lazyData === null) {
                /**
                 * Router state with refetch marker added
                 */ // TODO-APP: remove ''
                const refetchTree = walkAddRefetch(
                  ['', ...segmentPath],
                  fullTree
                );
                const includeNextUrl = (0,
                _hasinterceptionrouteincurrenttree.hasInterceptionRouteInCurrentTree)(
                  fullTree
                );
                const navigatedAt = Date.now();
                cacheNode.lazyData = lazyData = (0,
                _fetchserverresponse.fetchServerResponse)(
                  new URL(url, location.origin),
                  {
                    flightRouterState: refetchTree,
                    nextUrl: includeNextUrl ? context.nextUrl : null,
                  }
                ).then((serverResponse) => {
                  (0, _react.startTransition)(() => {
                    (0, _useactionqueue.dispatchAppRouterAction)({
                      type: _routerreducertypes.ACTION_SERVER_PATCH,
                      previousTree: fullTree,
                      serverResponse,
                      navigatedAt,
                    });
                  });
                  return serverResponse;
                });
                // Suspend while waiting for lazyData to resolve
                (0, _react.use)(lazyData);
              }
              // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.
              // A falsey `resolvedRsc` indicates missing data -- we should not commit that branch, and we need to wait for the data to arrive.
              (0, _react.use)(_unresolvedthenable.unresolvedThenable);
            }
            // If we get to this point, then we know we have something we can render.
            const subtree = /*#__PURE__*/ (0, _jsxruntime.jsx)(
              _approutercontextsharedruntime.LayoutRouterContext.Provider,
              {
                value: {
                  parentTree: tree,
                  parentCacheNode: cacheNode,
                  parentSegmentPath: segmentPath,
                  // TODO-APP: overriding of url for parallel routes
                  url: url,
                },
                children: resolvedRsc,
              }
            );
            // Ensure root layout is not wrapped in a div as the root layout renders `<html>`
            return subtree;
          }
          /**
           * Renders suspense boundary with the provided "loading" property as the fallback.
           * If no loading property is provided it renders the children without a suspense boundary.
           */ function LoadingBoundary(param) {
            let { loading, children } = param;
            // If loading is a promise, unwrap it. This happens in cases where we haven't
            // yet received the loading data from the server — which includes whether or
            // not this layout has a loading component at all.
            //
            // It's OK to suspend here instead of inside the fallback because this
            // promise will resolve simultaneously with the data for the segment itself.
            // So it will never suspend for longer than it would have if we didn't use
            // a Suspense fallback at all.
            let loadingModuleData;
            if (
              typeof loading === 'object' &&
              loading !== null &&
              typeof loading.then === 'function'
            ) {
              const promiseForLoading = loading;
              loadingModuleData = (0, _react.use)(promiseForLoading);
            } else {
              loadingModuleData = loading;
            }
            if (loadingModuleData) {
              const loadingRsc = loadingModuleData[0];
              const loadingStyles = loadingModuleData[1];
              const loadingScripts = loadingModuleData[2];
              return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Suspense, {
                fallback: /*#__PURE__*/ (0, _jsxruntime.jsxs)(
                  _jsxruntime.Fragment,
                  {
                    children: [loadingStyles, loadingScripts, loadingRsc],
                  }
                ),
                children: children,
              });
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
              children: children,
            });
          }
          function RenderChildren(param) {
            let { children } = param;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
              children: children,
            });
          }
          function OuterLayoutRouter(param) {
            let {
              parallelRouterKey,
              error,
              errorStyles,
              errorScripts,
              templateStyles,
              templateScripts,
              template,
              notFound,
              forbidden,
              unauthorized,
              gracefullyDegrade,
              segmentViewBoundaries,
            } = param;
            const context = (0, _react.useContext)(
              _approutercontextsharedruntime.LayoutRouterContext
            );
            if (!context) {
              throw Object.defineProperty(
                new Error('invariant expected layout router to be mounted'),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E56',
                  enumerable: false,
                  configurable: true,
                }
              );
            }
            const { parentTree, parentCacheNode, parentSegmentPath, url } =
              context;
            // Get the CacheNode for this segment by reading it from the parent segment's
            // child map.
            const parentParallelRoutes = parentCacheNode.parallelRoutes;
            let segmentMap = parentParallelRoutes.get(parallelRouterKey);
            // If the parallel router cache node does not exist yet, create it.
            // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.
            if (!segmentMap) {
              segmentMap = new Map();
              parentParallelRoutes.set(parallelRouterKey, segmentMap);
            }
            const parentTreeSegment = parentTree[0];
            const segmentPath =
              parentSegmentPath === null // the code. We should clean this up.
                ? [parallelRouterKey]
                : parentSegmentPath.concat([
                    parentTreeSegment,
                    parallelRouterKey,
                  ]);
            // The "state" key of a segment is the one passed to React — it represents the
            // identity of the UI tree. Whenever the state key changes, the tree is
            // recreated and the state is reset. In the App Router model, search params do
            // not cause state to be lost, so two segments with the same segment path but
            // different search params should have the same state key.
            //
            // The "cache" key of a segment, however, *does* include the search params, if
            // it's possible that the segment accessed the search params on the server.
            // (This only applies to page segments; layout segments cannot access search
            // params on the server.)
            const activeTree = parentTree[1][parallelRouterKey];
            const activeSegment = activeTree[0];
            const activeStateKey = (0,
            _createroutercachekey.createRouterCacheKey)(activeSegment, true); // no search params
            // At each level of the route tree, not only do we render the currently
            // active segment — we also render the last N segments that were active at
            // this level inside a hidden <Activity> boundary, to preserve their state
            // if or when the user navigates to them again.
            //
            // bfcacheEntry is a linked list of FlightRouterStates.
            let bfcacheEntry = (0, _bfcache.useRouterBFCache)(
              activeTree,
              activeStateKey
            );
            let children = [];
            do {
              const tree = bfcacheEntry.tree;
              const stateKey = bfcacheEntry.stateKey;
              const segment = tree[0];
              const cacheKey = (0, _createroutercachekey.createRouterCacheKey)(
                segment
              );
              // Read segment path from the parallel router cache node.
              let cacheNode = segmentMap.get(cacheKey);
              if (cacheNode === undefined) {
                // When data is not available during rendering client-side we need to fetch
                // it from the server.
                const newLazyCacheNode = {
                  lazyData: null,
                  rsc: null,
                  prefetchRsc: null,
                  head: null,
                  prefetchHead: null,
                  parallelRoutes: new Map(),
                  loading: null,
                  navigatedAt: -1,
                };
                // Flight data fetch kicked off during render and put into the cache.
                cacheNode = newLazyCacheNode;
                segmentMap.set(cacheKey, newLazyCacheNode);
              }
              /*
    - Error boundary
      - Only renders error boundary if error component is provided.
      - Rendered for each segment to ensure they have their own error state.
      - When gracefully degrade for bots, skip rendering error boundary.
    - Loading boundary
      - Only renders suspense boundary if loading components is provided.
      - Rendered for each segment to ensure they have their own loading state.
      - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.
  */ const ErrorBoundaryComponent = gracefullyDegrade
                ? RenderChildren
                : _errorboundary.ErrorBoundary;
              let segmentBoundaryTriggerNode = null;
              let segmentViewStateNode = null;
              if (
                ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
              );
              // TODO: The loading module data for a segment is stored on the parent, then
              // applied to each of that parent segment's parallel route slots. In the
              // simple case where there's only one parallel route (the `children` slot),
              // this is no different from if the loading module data where stored on the
              // child directly. But I'm not sure this actually makes sense when there are
              // multiple parallel routes. It's not a huge issue because you always have
              // the option to define a narrower loading boundary for a particular slot. But
              // this sort of smells like an implementation accident to me.
              const loadingModuleData = parentCacheNode.loading;
              let child = /*#__PURE__*/ (0, _jsxruntime.jsxs)(
                _approutercontextsharedruntime.TemplateContext.Provider,
                {
                  value: /*#__PURE__*/ (0, _jsxruntime.jsxs)(
                    ScrollAndFocusHandler,
                    {
                      segmentPath: segmentPath,
                      children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(
                          ErrorBoundaryComponent,
                          {
                            errorComponent: error,
                            errorStyles: errorStyles,
                            errorScripts: errorScripts,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(
                              LoadingBoundary,
                              {
                                loading: loadingModuleData,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(
                                  _errorboundary1.HTTPAccessFallbackBoundary,
                                  {
                                    notFound: notFound,
                                    forbidden: forbidden,
                                    unauthorized: unauthorized,
                                    children: /*#__PURE__*/ (0,
                                    _jsxruntime.jsxs)(
                                      _redirectboundary.RedirectBoundary,
                                      {
                                        children: [
                                          /*#__PURE__*/ (0, _jsxruntime.jsx)(
                                            InnerLayoutRouter,
                                            {
                                              url: url,
                                              tree: tree,
                                              cacheNode: cacheNode,
                                              segmentPath: segmentPath,
                                            }
                                          ),
                                          segmentBoundaryTriggerNode,
                                        ],
                                      }
                                    ),
                                  }
                                ),
                              }
                            ),
                          }
                        ),
                        segmentViewStateNode,
                      ],
                    }
                  ),
                  children: [templateStyles, templateScripts, template],
                },
                stateKey
              );
              if (('TURBOPACK compile-time truthy', 1)) {
                const { SegmentStateProvider } = __turbopack_context__.r(
                  '[project]/node_modules/next/dist/next-devtools/userspace/app/segment-explorer-node.js [app-client] (ecmascript)'
                );
                child = /*#__PURE__*/ (0, _jsxruntime.jsxs)(
                  SegmentStateProvider,
                  {
                    children: [child, segmentViewBoundaries],
                  },
                  stateKey
                );
              }
              if (
                ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
              );
              children.push(child);
              bfcacheEntry = bfcacheEntry.next;
            } while (bfcacheEntry !== null);
            return children;
          }
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=layout-router.js.map
        }
      },
    '[project]/node_modules/next/dist/client/components/render-from-template-context.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'default', {
            enumerable: true,
            get: function () {
              return RenderFromTemplateContext;
            },
          });
          const _interop_require_wildcard = __turbopack_context__.r(
            '[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)'
          );
          const _jsxruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
          const _react = /*#__PURE__*/ _interop_require_wildcard._(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
            )
          );
          const _approutercontextsharedruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/app-router-context.shared-runtime.js [app-client] (ecmascript)'
          );
          function RenderFromTemplateContext() {
            const children = (0, _react.useContext)(
              _approutercontextsharedruntime.TemplateContext
            );
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
              children: children,
            });
          }
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=render-from-template-context.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'InvariantError', {
            enumerable: true,
            get: function () {
              return InvariantError;
            },
          });
          class InvariantError extends Error {
            constructor(message, options) {
              super(
                'Invariant: ' +
                  (message.endsWith('.') ? message : message + '.') +
                  ' This is a bug in Next.js.',
                options
              );
              this.name = 'InvariantError';
            }
          } //# sourceMappingURL=invariant-error.js.map
        }
      },
    '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'ReflectAdapter', {
            enumerable: true,
            get: function () {
              return ReflectAdapter;
            },
          });
          class ReflectAdapter {
            static get(target, prop, receiver) {
              const value = Reflect.get(target, prop, receiver);
              if (typeof value === 'function') {
                return value.bind(target);
              }
              return value;
            }
            static set(target, prop, value, receiver) {
              return Reflect.set(target, prop, value, receiver);
            }
            static has(target, prop) {
              return Reflect.has(target, prop);
            }
            static deleteProperty(target, prop) {
              return Reflect.deleteProperty(target, prop);
            }
          } //# sourceMappingURL=reflect.js.map
        }
      },
    '[project]/node_modules/next/dist/shared/lib/utils/reflect-utils.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          // This regex will have fast negatives meaning valid identifiers may not pass
          // this test. However this is only used during static generation to provide hints
          // about why a page bailed out of some or all prerendering and we can use bracket notation
          // for example while `ಠ_ಠ` is a valid identifier it's ok to print `searchParams['ಠ_ಠ']`
          // even if this would have been fine too `searchParams.ಠ_ಠ`
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              describeHasCheckingStringProperty: null,
              describeStringPropertyAccess: null,
              wellKnownProperties: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            describeHasCheckingStringProperty: function () {
              return describeHasCheckingStringProperty;
            },
            describeStringPropertyAccess: function () {
              return describeStringPropertyAccess;
            },
            wellKnownProperties: function () {
              return wellKnownProperties;
            },
          });
          const isDefinitelyAValidIdentifier = /^[A-Za-z_$][A-Za-z0-9_$]*$/;
          function describeStringPropertyAccess(target, prop) {
            if (isDefinitelyAValidIdentifier.test(prop)) {
              return '`' + target + '.' + prop + '`';
            }
            return '`' + target + '[' + JSON.stringify(prop) + ']`';
          }
          function describeHasCheckingStringProperty(target, prop) {
            const stringifiedProp = JSON.stringify(prop);
            return (
              '`Reflect.has(' +
              target +
              ', ' +
              stringifiedProp +
              ')`, `' +
              stringifiedProp +
              ' in ' +
              target +
              '`, or similar'
            );
          }
          const wellKnownProperties = new Set([
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'toString',
            'valueOf',
            'toLocaleString',
            // Promise prototype
            // fallthrough
            'then',
            'catch',
            'finally',
            // React Promise extension
            // fallthrough
            'status',
            // React introspection
            'displayName',
            '_debugInfo',
            // Common tested properties
            // fallthrough
            'toJSON',
            '$$typeof',
            '__esModule',
          ]); //# sourceMappingURL=reflect-utils.js.map
        }
      },
    '[project]/node_modules/next/dist/client/request/search-params.browser.dev.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'createRenderSearchParamsFromClient', {
            enumerable: true,
            get: function () {
              return createRenderSearchParamsFromClient;
            },
          });
          const _reflect = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-client] (ecmascript)'
          );
          const _reflectutils = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils/reflect-utils.js [app-client] (ecmascript)'
          );
          const CachedSearchParams = new WeakMap();
          function makeUntrackedExoticSearchParamsWithDevWarnings(
            underlyingSearchParams
          ) {
            const cachedSearchParams = CachedSearchParams.get(
              underlyingSearchParams
            );
            if (cachedSearchParams) {
              return cachedSearchParams;
            }
            const proxiedProperties = new Set();
            const unproxiedProperties = [];
            const promise = Promise.resolve(underlyingSearchParams);
            Object.keys(underlyingSearchParams).forEach((prop) => {
              if (_reflectutils.wellKnownProperties.has(prop)) {
                // These properties cannot be shadowed because they need to be the
                // true underlying value for Promises to work correctly at runtime
                unproxiedProperties.push(prop);
              } else {
                proxiedProperties.add(prop);
                promise[prop] = underlyingSearchParams[prop];
              }
            });
            const proxiedPromise = new Proxy(promise, {
              get(target, prop, receiver) {
                if (typeof prop === 'string') {
                  if (
                    !_reflectutils.wellKnownProperties.has(prop) &&
                    (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                      // the underlying searchParams.
                      Reflect.has(target, prop) === false)
                  ) {
                    const expression = (0,
                    _reflectutils.describeStringPropertyAccess)(
                      'searchParams',
                      prop
                    );
                    warnForSyncAccess(expression);
                  }
                }
                return _reflect.ReflectAdapter.get(target, prop, receiver);
              },
              set(target, prop, value, receiver) {
                if (typeof prop === 'string') {
                  proxiedProperties.delete(prop);
                }
                return Reflect.set(target, prop, value, receiver);
              },
              has(target, prop) {
                if (typeof prop === 'string') {
                  if (
                    !_reflectutils.wellKnownProperties.has(prop) &&
                    (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                      // the underlying searchParams.
                      Reflect.has(target, prop) === false)
                  ) {
                    const expression = (0,
                    _reflectutils.describeHasCheckingStringProperty)(
                      'searchParams',
                      prop
                    );
                    warnForSyncAccess(expression);
                  }
                }
                return Reflect.has(target, prop);
              },
              ownKeys(target) {
                warnForSyncSpread();
                return Reflect.ownKeys(target);
              },
            });
            CachedSearchParams.set(underlyingSearchParams, proxiedPromise);
            return proxiedPromise;
          }
          // Similar to `makeUntrackedExoticSearchParamsWithDevWarnings`, but just logging
          // the sync access without actually defining the search params on the promise.
          function makeUntrackedSearchParamsWithDevWarnings(
            underlyingSearchParams
          ) {
            const cachedSearchParams = CachedSearchParams.get(
              underlyingSearchParams
            );
            if (cachedSearchParams) {
              return cachedSearchParams;
            }
            const proxiedProperties = new Set();
            const unproxiedProperties = [];
            const promise = Promise.resolve(underlyingSearchParams);
            Object.keys(underlyingSearchParams).forEach((prop) => {
              if (_reflectutils.wellKnownProperties.has(prop)) {
                // These properties cannot be shadowed because they need to be the
                // true underlying value for Promises to work correctly at runtime
                unproxiedProperties.push(prop);
              } else {
                proxiedProperties.add(prop);
              }
            });
            const proxiedPromise = new Proxy(promise, {
              get(target, prop, receiver) {
                if (typeof prop === 'string') {
                  if (
                    !_reflectutils.wellKnownProperties.has(prop) &&
                    (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                      // the underlying searchParams.
                      Reflect.has(target, prop) === false)
                  ) {
                    const expression = (0,
                    _reflectutils.describeStringPropertyAccess)(
                      'searchParams',
                      prop
                    );
                    warnForSyncAccess(expression);
                  }
                }
                return _reflect.ReflectAdapter.get(target, prop, receiver);
              },
              set(target, prop, value, receiver) {
                if (typeof prop === 'string') {
                  proxiedProperties.delete(prop);
                }
                return Reflect.set(target, prop, value, receiver);
              },
              has(target, prop) {
                if (typeof prop === 'string') {
                  if (
                    !_reflectutils.wellKnownProperties.has(prop) &&
                    (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                      // the underlying searchParams.
                      Reflect.has(target, prop) === false)
                  ) {
                    const expression = (0,
                    _reflectutils.describeHasCheckingStringProperty)(
                      'searchParams',
                      prop
                    );
                    warnForSyncAccess(expression);
                  }
                }
                return Reflect.has(target, prop);
              },
              ownKeys(target) {
                warnForSyncSpread();
                return Reflect.ownKeys(target);
              },
            });
            CachedSearchParams.set(underlyingSearchParams, proxiedPromise);
            return proxiedPromise;
          }
          function warnForSyncAccess(expression) {
            console.error(
              'A searchParam property was accessed directly with ' +
                expression +
                '. ' +
                '`searchParams` should be unwrapped with `React.use()` before accessing its properties. ' +
                'Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis'
            );
          }
          function warnForSyncSpread() {
            console.error(
              'The keys of `searchParams` were accessed directly. ' +
                '`searchParams` should be unwrapped with `React.use()` before accessing its properties. ' +
                'Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis'
            );
          }
          function createRenderSearchParamsFromClient(underlyingSearchParams) {
            if (
              ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
            );
            return makeUntrackedExoticSearchParamsWithDevWarnings(
              underlyingSearchParams
            );
          }
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=search-params.browser.dev.js.map
        }
      },
    '[project]/node_modules/next/dist/client/request/search-params.browser.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'createRenderSearchParamsFromClient', {
            enumerable: true,
            get: function () {
              return createRenderSearchParamsFromClient;
            },
          });
          const createRenderSearchParamsFromClient =
            ('TURBOPACK compile-time truthy', 1)
              ? __turbopack_context__.r(
                  '[project]/node_modules/next/dist/client/request/search-params.browser.dev.js [app-client] (ecmascript)'
                ).createRenderSearchParamsFromClient
              : 'TURBOPACK unreachable';
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=search-params.browser.js.map
        }
      },
    '[project]/node_modules/next/dist/client/request/params.browser.dev.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'createRenderParamsFromClient', {
            enumerable: true,
            get: function () {
              return createRenderParamsFromClient;
            },
          });
          const _reflect = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-client] (ecmascript)'
          );
          const _invarianterror = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)'
          );
          const _reflectutils = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils/reflect-utils.js [app-client] (ecmascript)'
          );
          const CachedParams = new WeakMap();
          function makeDynamicallyTrackedExoticParamsWithDevWarnings(
            underlyingParams
          ) {
            const cachedParams = CachedParams.get(underlyingParams);
            if (cachedParams) {
              return cachedParams;
            }
            // We don't use makeResolvedReactPromise here because params
            // supports copying with spread and we don't want to unnecessarily
            // instrument the promise with spreadable properties of ReactPromise.
            const promise = Promise.resolve(underlyingParams);
            const proxiedProperties = new Set();
            const unproxiedProperties = [];
            Object.keys(underlyingParams).forEach((prop) => {
              if (_reflectutils.wellKnownProperties.has(prop)) {
                // These properties cannot be shadowed because they need to be the
                // true underlying value for Promises to work correctly at runtime
              } else {
                proxiedProperties.add(prop);
                promise[prop] = underlyingParams[prop];
              }
            });
            const proxiedPromise = new Proxy(promise, {
              get(target, prop, receiver) {
                if (typeof prop === 'string') {
                  if (proxiedProperties.has(prop)) {
                    const expression = (0,
                    _reflectutils.describeStringPropertyAccess)('params', prop);
                    warnForSyncAccess(expression);
                  }
                }
                return _reflect.ReflectAdapter.get(target, prop, receiver);
              },
              set(target, prop, value, receiver) {
                if (typeof prop === 'string') {
                  proxiedProperties.delete(prop);
                }
                return _reflect.ReflectAdapter.set(
                  target,
                  prop,
                  value,
                  receiver
                );
              },
              ownKeys(target) {
                warnForEnumeration(unproxiedProperties);
                return Reflect.ownKeys(target);
              },
            });
            CachedParams.set(underlyingParams, proxiedPromise);
            return proxiedPromise;
          }
          // Similar to `makeDynamicallyTrackedExoticParamsWithDevWarnings`, but just
          // logging the sync access without actually defining the params on the promise.
          function makeDynamicallyTrackedParamsWithDevWarnings(
            underlyingParams
          ) {
            const cachedParams = CachedParams.get(underlyingParams);
            if (cachedParams) {
              return cachedParams;
            }
            // We don't use makeResolvedReactPromise here because params
            // supports copying with spread and we don't want to unnecessarily
            // instrument the promise with spreadable properties of ReactPromise.
            const promise = Promise.resolve(underlyingParams);
            const proxiedProperties = new Set();
            const unproxiedProperties = [];
            Object.keys(underlyingParams).forEach((prop) => {
              if (_reflectutils.wellKnownProperties.has(prop)) {
                // These properties cannot be shadowed because they need to be the
                // true underlying value for Promises to work correctly at runtime
              } else {
                proxiedProperties.add(prop);
              }
            });
            const proxiedPromise = new Proxy(promise, {
              get(target, prop, receiver) {
                if (typeof prop === 'string') {
                  if (proxiedProperties.has(prop)) {
                    const expression = (0,
                    _reflectutils.describeStringPropertyAccess)('params', prop);
                    warnForSyncAccess(expression);
                  }
                }
                return _reflect.ReflectAdapter.get(target, prop, receiver);
              },
              set(target, prop, value, receiver) {
                if (typeof prop === 'string') {
                  proxiedProperties.delete(prop);
                }
                return _reflect.ReflectAdapter.set(
                  target,
                  prop,
                  value,
                  receiver
                );
              },
              ownKeys(target) {
                warnForEnumeration(unproxiedProperties);
                return Reflect.ownKeys(target);
              },
            });
            CachedParams.set(underlyingParams, proxiedPromise);
            return proxiedPromise;
          }
          function warnForSyncAccess(expression) {
            console.error(
              'A param property was accessed directly with ' +
                expression +
                '. `params` is now a Promise and should be unwrapped with `React.use()` before accessing properties of the underlying params object. In this version of Next.js direct access to param properties is still supported to facilitate migration but in a future version you will be required to unwrap `params` with `React.use()`.'
            );
          }
          function warnForEnumeration(missingProperties) {
            if (missingProperties.length) {
              const describedMissingProperties =
                describeListOfPropertyNames(missingProperties);
              console.error(
                'params are being enumerated incompletely missing these properties: ' +
                  describedMissingProperties +
                  '. ' +
                  '`params` should be unwrapped with `React.use()` before using its value. ' +
                  'Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis'
              );
            } else {
              console.error(
                'params are being enumerated. ' +
                  '`params` should be unwrapped with `React.use()` before using its value. ' +
                  'Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis'
              );
            }
          }
          function describeListOfPropertyNames(properties) {
            switch (properties.length) {
              case 0:
                throw Object.defineProperty(
                  new _invarianterror.InvariantError(
                    'Expected describeListOfPropertyNames to be called with a non-empty list of strings.'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E531',
                    enumerable: false,
                    configurable: true,
                  }
                );
              case 1:
                return '`' + properties[0] + '`';
              case 2:
                return '`' + properties[0] + '` and `' + properties[1] + '`';
              default: {
                let description = '';
                for (let i = 0; i < properties.length - 1; i++) {
                  description += '`' + properties[i] + '`, ';
                }
                description +=
                  ', and `' + properties[properties.length - 1] + '`';
                return description;
              }
            }
          }
          function createRenderParamsFromClient(clientParams) {
            if (
              ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
            );
            return makeDynamicallyTrackedExoticParamsWithDevWarnings(
              clientParams
            );
          }
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=params.browser.dev.js.map
        }
      },
    '[project]/node_modules/next/dist/client/request/params.browser.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'createRenderParamsFromClient', {
            enumerable: true,
            get: function () {
              return createRenderParamsFromClient;
            },
          });
          const createRenderParamsFromClient = ('TURBOPACK compile-time truthy',
          1)
            ? __turbopack_context__.r(
                '[project]/node_modules/next/dist/client/request/params.browser.dev.js [app-client] (ecmascript)'
              ).createRenderParamsFromClient
            : 'TURBOPACK unreachable';
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=params.browser.js.map
        }
      },
    '[project]/node_modules/next/dist/server/create-deduped-by-callsite-server-error-logger.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(
            exports,
            'createDedupedByCallsiteServerErrorLoggerDev',
            {
              enumerable: true,
              get: function () {
                return createDedupedByCallsiteServerErrorLoggerDev;
              },
            }
          );
          const _react = /*#__PURE__*/ _interop_require_wildcard(
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
            )
          );
          function _getRequireWildcardCache(nodeInterop) {
            if (typeof WeakMap !== 'function') return null;
            var cacheBabelInterop = new WeakMap();
            var cacheNodeInterop = new WeakMap();
            return (_getRequireWildcardCache = function (nodeInterop) {
              return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
            })(nodeInterop);
          }
          function _interop_require_wildcard(obj, nodeInterop) {
            if (!nodeInterop && obj && obj.__esModule) {
              return obj;
            }
            if (
              obj === null ||
              (typeof obj !== 'object' && typeof obj !== 'function')
            ) {
              return {
                default: obj,
              };
            }
            var cache = _getRequireWildcardCache(nodeInterop);
            if (cache && cache.has(obj)) {
              return cache.get(obj);
            }
            var newObj = {
              __proto__: null,
            };
            var hasPropertyDescriptor =
              Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var key in obj) {
              if (
                key !== 'default' &&
                Object.prototype.hasOwnProperty.call(obj, key)
              ) {
                var desc = hasPropertyDescriptor
                  ? Object.getOwnPropertyDescriptor(obj, key)
                  : null;
                if (desc && (desc.get || desc.set)) {
                  Object.defineProperty(newObj, key, desc);
                } else {
                  newObj[key] = obj[key];
                }
              }
            }
            newObj.default = obj;
            if (cache) {
              cache.set(obj, newObj);
            }
            return newObj;
          }
          const errorRef = {
            current: null,
          };
          // React.cache is currently only available in canary/experimental React channels.
          const cache =
            typeof _react.cache === 'function' ? _react.cache : (fn) => fn;
          // When Dynamic IO is enabled, we record these as errors so that they
          // are captured by the dev overlay as it's more critical to fix these
          // when enabled.
          const logErrorOrWarn = ('TURBOPACK compile-time falsy', 0)
            ? 'TURBOPACK unreachable'
            : console.warn;
          // We don't want to dedupe across requests.
          // The developer might've just attempted to fix the warning so we should warn again if it still happens.
          const flushCurrentErrorIfNew = cache((key) => {
            try {
              logErrorOrWarn(errorRef.current);
            } finally {
              errorRef.current = null;
            }
          });
          function createDedupedByCallsiteServerErrorLoggerDev(getMessage) {
            return function logDedupedError() {
              for (
                var _len = arguments.length, args = new Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }
              const message = getMessage(...args);
              if (('TURBOPACK compile-time truthy', 1)) {
                var _stack;
                const callStackFrames =
                  (_stack = new Error().stack) == null
                    ? void 0
                    : _stack.split('\n');
                if (
                  callStackFrames === undefined ||
                  callStackFrames.length < 4
                ) {
                  logErrorOrWarn(message);
                } else {
                  // Error:
                  //   logDedupedError
                  //   asyncApiBeingAccessedSynchronously
                  //   <userland callsite>
                  // TODO: This breaks if sourcemaps with ignore lists are enabled.
                  const key = callStackFrames[4];
                  errorRef.current = message;
                  flushCurrentErrorIfNew(key);
                }
              } //TURBOPACK unreachable
              else;
            };
          } //# sourceMappingURL=create-deduped-by-callsite-server-error-logger.js.map
        }
      },
    '[project]/node_modules/next/dist/server/app-render/after-task-async-storage-instance.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'afterTaskAsyncStorageInstance', {
            enumerable: true,
            get: function () {
              return afterTaskAsyncStorageInstance;
            },
          });
          const _asynclocalstorage = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/app-render/async-local-storage.js [app-client] (ecmascript)'
          );
          const afterTaskAsyncStorageInstance = (0,
          _asynclocalstorage.createAsyncLocalStorage)(); //# sourceMappingURL=after-task-async-storage-instance.js.map
        }
      },
    '[project]/node_modules/next/dist/server/app-render/after-task-async-storage.external.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'afterTaskAsyncStorage', {
            enumerable: true,
            get: function () {
              return _aftertaskasyncstorageinstance.afterTaskAsyncStorageInstance;
            },
          });
          const _aftertaskasyncstorageinstance = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/app-render/after-task-async-storage-instance.js [app-client] (ecmascript)'
          ); //# sourceMappingURL=after-task-async-storage.external.js.map
        }
      },
    '[project]/node_modules/next/dist/server/request/utils.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              isRequestAPICallableInsideAfter: null,
              throwForSearchParamsAccessInUseCache: null,
              throwWithStaticGenerationBailoutError: null,
              throwWithStaticGenerationBailoutErrorWithDynamicError: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            isRequestAPICallableInsideAfter: function () {
              return isRequestAPICallableInsideAfter;
            },
            throwForSearchParamsAccessInUseCache: function () {
              return throwForSearchParamsAccessInUseCache;
            },
            throwWithStaticGenerationBailoutError: function () {
              return throwWithStaticGenerationBailoutError;
            },
            throwWithStaticGenerationBailoutErrorWithDynamicError: function () {
              return throwWithStaticGenerationBailoutErrorWithDynamicError;
            },
          });
          const _staticgenerationbailout = __turbopack_context__.r(
            '[project]/node_modules/next/dist/client/components/static-generation-bailout.js [app-client] (ecmascript)'
          );
          const _aftertaskasyncstorageexternal = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/app-render/after-task-async-storage.external.js [app-client] (ecmascript)'
          );
          function throwWithStaticGenerationBailoutError(route, expression) {
            throw Object.defineProperty(
              new _staticgenerationbailout.StaticGenBailoutError(
                'Route '
                  .concat(
                    route,
                    " couldn't be rendered statically because it used "
                  )
                  .concat(
                    expression,
                    '. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering'
                  )
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E576',
                enumerable: false,
                configurable: true,
              }
            );
          }
          function throwWithStaticGenerationBailoutErrorWithDynamicError(
            route,
            expression
          ) {
            throw Object.defineProperty(
              new _staticgenerationbailout.StaticGenBailoutError(
                'Route '
                  .concat(
                    route,
                    ' with `dynamic = "error"` couldn\'t be rendered statically because it used '
                  )
                  .concat(
                    expression,
                    '. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering'
                  )
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E543',
                enumerable: false,
                configurable: true,
              }
            );
          }
          function throwForSearchParamsAccessInUseCache(
            workStore,
            constructorOpt
          ) {
            var _workStore;
            const error = Object.defineProperty(
              new Error(
                'Route '.concat(
                  workStore.route,
                  ' used "searchParams" inside "use cache". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "searchParams" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache'
                )
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E634',
                enumerable: false,
                configurable: true,
              }
            );
            Error.captureStackTrace(error, constructorOpt);
            var _invalidDynamicUsageError;
            (_invalidDynamicUsageError = (_workStore = workStore)
              .invalidDynamicUsageError) !== null &&
            _invalidDynamicUsageError !== void 0
              ? _invalidDynamicUsageError
              : (_workStore.invalidDynamicUsageError = error);
            throw error;
          }
          function isRequestAPICallableInsideAfter() {
            const afterTaskStore =
              _aftertaskasyncstorageexternal.afterTaskAsyncStorage.getStore();
            return (
              (afterTaskStore == null
                ? void 0
                : afterTaskStore.rootTaskSpawnPhase) === 'action'
            );
          } //# sourceMappingURL=utils.js.map
        }
      },
    '[project]/node_modules/next/dist/server/request/search-params.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              createPrerenderSearchParamsForClientPage: null,
              createSearchParamsFromClient: null,
              createServerSearchParamsForMetadata: null,
              createServerSearchParamsForServerPage: null,
              makeErroringExoticSearchParamsForUseCache: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            createPrerenderSearchParamsForClientPage: function () {
              return createPrerenderSearchParamsForClientPage;
            },
            createSearchParamsFromClient: function () {
              return createSearchParamsFromClient;
            },
            createServerSearchParamsForMetadata: function () {
              return createServerSearchParamsForMetadata;
            },
            createServerSearchParamsForServerPage: function () {
              return createServerSearchParamsForServerPage;
            },
            makeErroringExoticSearchParamsForUseCache: function () {
              return makeErroringExoticSearchParamsForUseCache;
            },
          });
          const _reflect = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-client] (ecmascript)'
          );
          const _dynamicrendering = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/app-render/dynamic-rendering.js [app-client] (ecmascript)'
          );
          const _workunitasyncstorageexternal = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js [app-client] (ecmascript)'
          );
          const _invarianterror = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)'
          );
          const _dynamicrenderingutils = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/dynamic-rendering-utils.js [app-client] (ecmascript)'
          );
          const _creatededupedbycallsiteservererrorlogger =
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/server/create-deduped-by-callsite-server-error-logger.js [app-client] (ecmascript)'
            );
          const _reflectutils = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils/reflect-utils.js [app-client] (ecmascript)'
          );
          const _utils = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/request/utils.js [app-client] (ecmascript)'
          );
          const _scheduler = __turbopack_context__.r(
            '[project]/node_modules/next/dist/lib/scheduler.js [app-client] (ecmascript)'
          );
          function createSearchParamsFromClient(
            underlyingSearchParams,
            workStore
          ) {
            const workUnitStore =
              _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
            if (workUnitStore) {
              switch (workUnitStore.type) {
                case 'prerender':
                case 'prerender-client':
                case 'prerender-ppr':
                case 'prerender-legacy':
                  return createPrerenderSearchParams(workStore, workUnitStore);
                default:
              }
            }
            return createRenderSearchParams(underlyingSearchParams, workStore);
          }
          const createServerSearchParamsForMetadata =
            createServerSearchParamsForServerPage;
          function createServerSearchParamsForServerPage(
            underlyingSearchParams,
            workStore
          ) {
            const workUnitStore =
              _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
            if (workUnitStore) {
              switch (workUnitStore.type) {
                case 'prerender':
                case 'prerender-client':
                case 'prerender-ppr':
                case 'prerender-legacy':
                  return createPrerenderSearchParams(workStore, workUnitStore);
                default:
              }
            }
            return createRenderSearchParams(underlyingSearchParams, workStore);
          }
          function createPrerenderSearchParamsForClientPage(workStore) {
            if (workStore.forceStatic) {
              // When using forceStatic we override all other logic and always just return an empty
              // dictionary object.
              return Promise.resolve({});
            }
            const prerenderStore =
              _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
            if (
              prerenderStore &&
              (prerenderStore.type === 'prerender' ||
                prerenderStore.type === 'prerender-client')
            ) {
              // dynamicIO Prerender
              // We're prerendering in a mode that aborts (dynamicIO) and should stall
              // the promise to ensure the RSC side is considered dynamic
              return (0, _dynamicrenderingutils.makeHangingPromise)(
                prerenderStore.renderSignal,
                '`searchParams`'
              );
            }
            // We're prerendering in a mode that does not aborts. We resolve the promise without
            // any tracking because we're just transporting a value from server to client where the tracking
            // will be applied.
            return Promise.resolve({});
          }
          function createPrerenderSearchParams(workStore, prerenderStore) {
            if (workStore.forceStatic) {
              // When using forceStatic we override all other logic and always just return an empty
              // dictionary object.
              return Promise.resolve({});
            }
            switch (prerenderStore.type) {
              case 'prerender':
              case 'prerender-client':
                // We are in a dynamicIO (PPR or otherwise) prerender
                return makeHangingSearchParams(prerenderStore);
              default:
                // The remaining cases are prerender-ppr and prerender-legacy
                // We are in a legacy static generation and need to interrupt the prerender
                // when search params are accessed.
                return makeErroringExoticSearchParams(
                  workStore,
                  prerenderStore
                );
            }
          }
          function createRenderSearchParams(underlyingSearchParams, workStore) {
            if (workStore.forceStatic) {
              // When using forceStatic we override all other logic and always just return an empty
              // dictionary object.
              return Promise.resolve({});
            } else {
              if (
                ('TURBOPACK compile-time value', 'development') ===
                  'development' &&
                !workStore.isPrefetchRequest
              ) {
                if (
                  ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
                );
                return makeDynamicallyTrackedExoticSearchParamsWithDevWarnings(
                  underlyingSearchParams,
                  workStore
                );
              } else {
                if (
                  ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
                );
                return makeUntrackedExoticSearchParams(
                  underlyingSearchParams,
                  workStore
                );
              }
            }
          }
          const CachedSearchParams = new WeakMap();
          const CachedSearchParamsForUseCache = new WeakMap();
          function makeHangingSearchParams(prerenderStore) {
            const cachedSearchParams = CachedSearchParams.get(prerenderStore);
            if (cachedSearchParams) {
              return cachedSearchParams;
            }
            const promise = (0, _dynamicrenderingutils.makeHangingPromise)(
              prerenderStore.renderSignal,
              '`searchParams`'
            );
            const proxiedPromise = new Proxy(promise, {
              get(target, prop, receiver) {
                if (Object.hasOwn(promise, prop)) {
                  // The promise has this property directly. we must return it.
                  // We know it isn't a dynamic access because it can only be something
                  // that was previously written to the promise and thus not an underlying searchParam value
                  return _reflect.ReflectAdapter.get(target, prop, receiver);
                }
                switch (prop) {
                  case 'then': {
                    const expression =
                      '`await searchParams`, `searchParams.then`, or similar';
                    (0, _dynamicrendering.annotateDynamicAccess)(
                      expression,
                      prerenderStore
                    );
                    return _reflect.ReflectAdapter.get(target, prop, receiver);
                  }
                  case 'status': {
                    const expression =
                      '`use(searchParams)`, `searchParams.status`, or similar';
                    (0, _dynamicrendering.annotateDynamicAccess)(
                      expression,
                      prerenderStore
                    );
                    return _reflect.ReflectAdapter.get(target, prop, receiver);
                  }
                  default: {
                    return _reflect.ReflectAdapter.get(target, prop, receiver);
                  }
                }
              },
            });
            CachedSearchParams.set(prerenderStore, proxiedPromise);
            return proxiedPromise;
          }
          function makeErroringExoticSearchParams(workStore, prerenderStore) {
            const cachedSearchParams = CachedSearchParams.get(workStore);
            if (cachedSearchParams) {
              return cachedSearchParams;
            }
            const underlyingSearchParams = {};
            // For search params we don't construct a ReactPromise because we want to interrupt
            // rendering on any property access that was not set from outside and so we only want
            // to have properties like value and status if React sets them.
            const promise = Promise.resolve(underlyingSearchParams);
            const proxiedPromise = new Proxy(promise, {
              get(target, prop, receiver) {
                if (Object.hasOwn(promise, prop)) {
                  // The promise has this property directly. we must return it.
                  // We know it isn't a dynamic access because it can only be something
                  // that was previously written to the promise and thus not an underlying searchParam value
                  return _reflect.ReflectAdapter.get(target, prop, receiver);
                }
                switch (prop) {
                  case 'then': {
                    const expression =
                      '`await searchParams`, `searchParams.then`, or similar';
                    if (workStore.dynamicShouldError) {
                      (0,
                      _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(
                        workStore.route,
                        expression
                      );
                    } else if (prerenderStore.type === 'prerender-ppr') {
                      // PPR Prerender (no dynamicIO)
                      (0, _dynamicrendering.postponeWithTracking)(
                        workStore.route,
                        expression,
                        prerenderStore.dynamicTracking
                      );
                    } else {
                      // Legacy Prerender
                      (0, _dynamicrendering.throwToInterruptStaticGeneration)(
                        expression,
                        workStore,
                        prerenderStore
                      );
                    }
                    return;
                  }
                  case 'status': {
                    const expression =
                      '`use(searchParams)`, `searchParams.status`, or similar';
                    if (workStore.dynamicShouldError) {
                      (0,
                      _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(
                        workStore.route,
                        expression
                      );
                    } else if (prerenderStore.type === 'prerender-ppr') {
                      // PPR Prerender (no dynamicIO)
                      (0, _dynamicrendering.postponeWithTracking)(
                        workStore.route,
                        expression,
                        prerenderStore.dynamicTracking
                      );
                    } else {
                      // Legacy Prerender
                      (0, _dynamicrendering.throwToInterruptStaticGeneration)(
                        expression,
                        workStore,
                        prerenderStore
                      );
                    }
                    return;
                  }
                  default: {
                    if (
                      typeof prop === 'string' &&
                      !_reflectutils.wellKnownProperties.has(prop)
                    ) {
                      const expression = (0,
                      _reflectutils.describeStringPropertyAccess)(
                        'searchParams',
                        prop
                      );
                      if (workStore.dynamicShouldError) {
                        (0,
                        _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(
                          workStore.route,
                          expression
                        );
                      } else if (prerenderStore.type === 'prerender-ppr') {
                        // PPR Prerender (no dynamicIO)
                        (0, _dynamicrendering.postponeWithTracking)(
                          workStore.route,
                          expression,
                          prerenderStore.dynamicTracking
                        );
                      } else {
                        // Legacy Prerender
                        (0, _dynamicrendering.throwToInterruptStaticGeneration)(
                          expression,
                          workStore,
                          prerenderStore
                        );
                      }
                    }
                    return _reflect.ReflectAdapter.get(target, prop, receiver);
                  }
                }
              },
              has(target, prop) {
                // We don't expect key checking to be used except for testing the existence of
                // searchParams so we make all has tests trigger dynamic. this means that `promise.then`
                // can resolve to the then function on the Promise prototype but 'then' in promise will assume
                // you are testing whether the searchParams has a 'then' property.
                if (typeof prop === 'string') {
                  const expression = (0,
                  _reflectutils.describeHasCheckingStringProperty)(
                    'searchParams',
                    prop
                  );
                  if (workStore.dynamicShouldError) {
                    (0,
                    _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(
                      workStore.route,
                      expression
                    );
                  } else if (prerenderStore.type === 'prerender-ppr') {
                    // PPR Prerender (no dynamicIO)
                    (0, _dynamicrendering.postponeWithTracking)(
                      workStore.route,
                      expression,
                      prerenderStore.dynamicTracking
                    );
                  } else {
                    // Legacy Prerender
                    (0, _dynamicrendering.throwToInterruptStaticGeneration)(
                      expression,
                      workStore,
                      prerenderStore
                    );
                  }
                  return false;
                }
                return _reflect.ReflectAdapter.has(target, prop);
              },
              ownKeys() {
                const expression =
                  '`{...searchParams}`, `Object.keys(searchParams)`, or similar';
                if (workStore.dynamicShouldError) {
                  (0,
                  _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(
                    workStore.route,
                    expression
                  );
                } else if (prerenderStore.type === 'prerender-ppr') {
                  // PPR Prerender (no dynamicIO)
                  (0, _dynamicrendering.postponeWithTracking)(
                    workStore.route,
                    expression,
                    prerenderStore.dynamicTracking
                  );
                } else {
                  // Legacy Prerender
                  (0, _dynamicrendering.throwToInterruptStaticGeneration)(
                    expression,
                    workStore,
                    prerenderStore
                  );
                }
              },
            });
            CachedSearchParams.set(workStore, proxiedPromise);
            return proxiedPromise;
          }
          function makeErroringExoticSearchParamsForUseCache(workStore) {
            const cachedSearchParams =
              CachedSearchParamsForUseCache.get(workStore);
            if (cachedSearchParams) {
              return cachedSearchParams;
            }
            const promise = Promise.resolve({});
            const proxiedPromise = new Proxy(promise, {
              get: function get(target, prop, receiver) {
                if (Object.hasOwn(promise, prop)) {
                  // The promise has this property directly. we must return it. We know it
                  // isn't a dynamic access because it can only be something that was
                  // previously written to the promise and thus not an underlying
                  // searchParam value
                  return _reflect.ReflectAdapter.get(target, prop, receiver);
                }
                if (
                  typeof prop === 'string' &&
                  (prop === 'then' ||
                    !_reflectutils.wellKnownProperties.has(prop))
                ) {
                  (0, _utils.throwForSearchParamsAccessInUseCache)(
                    workStore,
                    get
                  );
                }
                return _reflect.ReflectAdapter.get(target, prop, receiver);
              },
              has: function has(target, prop) {
                // We don't expect key checking to be used except for testing the existence of
                // searchParams so we make all has tests throw an error. this means that `promise.then`
                // can resolve to the then function on the Promise prototype but 'then' in promise will assume
                // you are testing whether the searchParams has a 'then' property.
                if (
                  typeof prop === 'string' &&
                  (prop === 'then' ||
                    !_reflectutils.wellKnownProperties.has(prop))
                ) {
                  (0, _utils.throwForSearchParamsAccessInUseCache)(
                    workStore,
                    has
                  );
                }
                return _reflect.ReflectAdapter.has(target, prop);
              },
              ownKeys: function ownKeys() {
                (0, _utils.throwForSearchParamsAccessInUseCache)(
                  workStore,
                  ownKeys
                );
              },
            });
            CachedSearchParamsForUseCache.set(workStore, proxiedPromise);
            return proxiedPromise;
          }
          function makeUntrackedExoticSearchParams(
            underlyingSearchParams,
            store
          ) {
            const cachedSearchParams = CachedSearchParams.get(
              underlyingSearchParams
            );
            if (cachedSearchParams) {
              return cachedSearchParams;
            }
            // We don't use makeResolvedReactPromise here because searchParams
            // supports copying with spread and we don't want to unnecessarily
            // instrument the promise with spreadable properties of ReactPromise.
            const promise = Promise.resolve(underlyingSearchParams);
            CachedSearchParams.set(underlyingSearchParams, promise);
            Object.keys(underlyingSearchParams).forEach((prop) => {
              if (!_reflectutils.wellKnownProperties.has(prop)) {
                Object.defineProperty(promise, prop, {
                  get() {
                    const workUnitStore =
                      _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
                    (0, _dynamicrendering.trackDynamicDataInDynamicRender)(
                      store,
                      workUnitStore
                    );
                    return underlyingSearchParams[prop];
                  },
                  set(value) {
                    Object.defineProperty(promise, prop, {
                      value,
                      writable: true,
                      enumerable: true,
                    });
                  },
                  enumerable: true,
                  configurable: true,
                });
              }
            });
            return promise;
          }
          function makeUntrackedSearchParams(underlyingSearchParams) {
            const cachedSearchParams = CachedSearchParams.get(
              underlyingSearchParams
            );
            if (cachedSearchParams) {
              return cachedSearchParams;
            }
            const promise = Promise.resolve(underlyingSearchParams);
            CachedSearchParams.set(underlyingSearchParams, promise);
            return promise;
          }
          function makeDynamicallyTrackedExoticSearchParamsWithDevWarnings(
            underlyingSearchParams,
            store
          ) {
            const cachedSearchParams = CachedSearchParams.get(
              underlyingSearchParams
            );
            if (cachedSearchParams) {
              return cachedSearchParams;
            }
            const proxiedProperties = new Set();
            const unproxiedProperties = [];
            // We have an unfortunate sequence of events that requires this initialization logic. We want to instrument the underlying
            // searchParams object to detect if you are accessing values in dev. This is used for warnings and for things like the static prerender
            // indicator. However when we pass this proxy to our Promise.resolve() below the VM checks if the resolved value is a promise by looking
            // at the `.then` property. To our dynamic tracking logic this is indistinguishable from a `then` searchParam and so we would normally trigger
            // dynamic tracking. However we know that this .then is not real dynamic access, it's just how thenables resolve in sequence. So we introduce
            // this initialization concept so we omit the dynamic check until after we've constructed our resolved promise.
            let promiseInitialized = false;
            const proxiedUnderlying = new Proxy(underlyingSearchParams, {
              get(target, prop, receiver) {
                if (typeof prop === 'string' && promiseInitialized) {
                  if (store.dynamicShouldError) {
                    const expression = (0,
                    _reflectutils.describeStringPropertyAccess)(
                      'searchParams',
                      prop
                    );
                    (0,
                    _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(
                      store.route,
                      expression
                    );
                  }
                  const workUnitStore =
                    _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
                  (0, _dynamicrendering.trackDynamicDataInDynamicRender)(
                    store,
                    workUnitStore
                  );
                }
                return _reflect.ReflectAdapter.get(target, prop, receiver);
              },
              has(target, prop) {
                if (typeof prop === 'string') {
                  if (store.dynamicShouldError) {
                    const expression = (0,
                    _reflectutils.describeHasCheckingStringProperty)(
                      'searchParams',
                      prop
                    );
                    (0,
                    _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(
                      store.route,
                      expression
                    );
                  }
                }
                return Reflect.has(target, prop);
              },
              ownKeys(target) {
                if (store.dynamicShouldError) {
                  const expression =
                    '`{...searchParams}`, `Object.keys(searchParams)`, or similar';
                  (0,
                  _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(
                    store.route,
                    expression
                  );
                }
                return Reflect.ownKeys(target);
              },
            });
            // We don't use makeResolvedReactPromise here because searchParams
            // supports copying with spread and we don't want to unnecessarily
            // instrument the promise with spreadable properties of ReactPromise.
            const promise = new Promise((resolve) =>
              (0, _scheduler.scheduleImmediate)(() =>
                resolve(underlyingSearchParams)
              )
            );
            promise.then(() => {
              promiseInitialized = true;
            });
            Object.keys(underlyingSearchParams).forEach((prop) => {
              if (_reflectutils.wellKnownProperties.has(prop)) {
                // These properties cannot be shadowed because they need to be the
                // true underlying value for Promises to work correctly at runtime
                unproxiedProperties.push(prop);
              } else {
                proxiedProperties.add(prop);
                Object.defineProperty(promise, prop, {
                  get() {
                    return proxiedUnderlying[prop];
                  },
                  set(newValue) {
                    Object.defineProperty(promise, prop, {
                      value: newValue,
                      writable: true,
                      enumerable: true,
                    });
                  },
                  enumerable: true,
                  configurable: true,
                });
              }
            });
            const proxiedPromise = new Proxy(promise, {
              get(target, prop, receiver) {
                if (prop === 'then' && store.dynamicShouldError) {
                  const expression = '`searchParams.then`';
                  (0,
                  _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(
                    store.route,
                    expression
                  );
                }
                if (typeof prop === 'string') {
                  if (
                    !_reflectutils.wellKnownProperties.has(prop) &&
                    (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                      // the underlying searchParams.
                      Reflect.has(target, prop) === false)
                  ) {
                    const expression = (0,
                    _reflectutils.describeStringPropertyAccess)(
                      'searchParams',
                      prop
                    );
                    syncIODev(store.route, expression);
                  }
                }
                return _reflect.ReflectAdapter.get(target, prop, receiver);
              },
              set(target, prop, value, receiver) {
                if (typeof prop === 'string') {
                  proxiedProperties.delete(prop);
                }
                return Reflect.set(target, prop, value, receiver);
              },
              has(target, prop) {
                if (typeof prop === 'string') {
                  if (
                    !_reflectutils.wellKnownProperties.has(prop) &&
                    (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                      // the underlying searchParams.
                      Reflect.has(target, prop) === false)
                  ) {
                    const expression = (0,
                    _reflectutils.describeHasCheckingStringProperty)(
                      'searchParams',
                      prop
                    );
                    syncIODev(store.route, expression);
                  }
                }
                return Reflect.has(target, prop);
              },
              ownKeys(target) {
                const expression = '`Object.keys(searchParams)` or similar';
                syncIODev(store.route, expression, unproxiedProperties);
                return Reflect.ownKeys(target);
              },
            });
            CachedSearchParams.set(underlyingSearchParams, proxiedPromise);
            return proxiedPromise;
          }
          // Similar to `makeDynamicallyTrackedExoticSearchParamsWithDevWarnings`, but
          // just logging the sync access without actually defining the search params on
          // the promise.
          function makeUntrackedSearchParamsWithDevWarnings(
            underlyingSearchParams,
            store
          ) {
            const cachedSearchParams = CachedSearchParams.get(
              underlyingSearchParams
            );
            if (cachedSearchParams) {
              return cachedSearchParams;
            }
            const proxiedProperties = new Set();
            const unproxiedProperties = [];
            const promise = Promise.resolve(underlyingSearchParams);
            Object.keys(underlyingSearchParams).forEach((prop) => {
              if (_reflectutils.wellKnownProperties.has(prop)) {
                // These properties cannot be shadowed because they need to be the
                // true underlying value for Promises to work correctly at runtime
                unproxiedProperties.push(prop);
              } else {
                proxiedProperties.add(prop);
              }
            });
            const proxiedPromise = new Proxy(promise, {
              get(target, prop, receiver) {
                if (typeof prop === 'string') {
                  if (
                    !_reflectutils.wellKnownProperties.has(prop) &&
                    (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                      // the underlying searchParams.
                      Reflect.has(target, prop) === false)
                  ) {
                    const expression = (0,
                    _reflectutils.describeStringPropertyAccess)(
                      'searchParams',
                      prop
                    );
                    warnForSyncAccess(store.route, expression);
                  }
                }
                return _reflect.ReflectAdapter.get(target, prop, receiver);
              },
              set(target, prop, value, receiver) {
                if (typeof prop === 'string') {
                  proxiedProperties.delete(prop);
                }
                return Reflect.set(target, prop, value, receiver);
              },
              has(target, prop) {
                if (typeof prop === 'string') {
                  if (
                    !_reflectutils.wellKnownProperties.has(prop) &&
                    (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                      // the underlying searchParams.
                      Reflect.has(target, prop) === false)
                  ) {
                    const expression = (0,
                    _reflectutils.describeHasCheckingStringProperty)(
                      'searchParams',
                      prop
                    );
                    warnForSyncAccess(store.route, expression);
                  }
                }
                return Reflect.has(target, prop);
              },
              ownKeys(target) {
                const expression = '`Object.keys(searchParams)` or similar';
                warnForIncompleteEnumeration(
                  store.route,
                  expression,
                  unproxiedProperties
                );
                return Reflect.ownKeys(target);
              },
            });
            CachedSearchParams.set(underlyingSearchParams, proxiedPromise);
            return proxiedPromise;
          }
          function syncIODev(route, expression, missingProperties) {
            // In all cases we warn normally
            if (missingProperties && missingProperties.length > 0) {
              warnForIncompleteEnumeration(
                route,
                expression,
                missingProperties
              );
            } else {
              warnForSyncAccess(route, expression);
            }
            const workUnitStore =
              _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
            if (
              workUnitStore &&
              workUnitStore.type === 'request' &&
              workUnitStore.prerenderPhase === true
            ) {
              // When we're rendering dynamically in dev we need to advance out of the
              // Prerender environment when we read Request data synchronously
              const requestStore = workUnitStore;
              (0, _dynamicrendering.trackSynchronousRequestDataAccessInDev)(
                requestStore
              );
            }
          }
          const warnForSyncAccess = (0,
          _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(
            createSearchAccessError
          );
          const warnForIncompleteEnumeration = (0,
          _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(
            createIncompleteEnumerationError
          );
          function createSearchAccessError(route, expression) {
            const prefix = route
              ? 'Route "'.concat(route, '" ')
              : 'This route ';
            return Object.defineProperty(
              new Error(
                ''.concat(prefix, 'used ').concat(expression, '. ') +
                  '`searchParams` should be awaited before using its properties. ' +
                  'Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis'
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E249',
                enumerable: false,
                configurable: true,
              }
            );
          }
          function createIncompleteEnumerationError(
            route,
            expression,
            missingProperties
          ) {
            const prefix = route
              ? 'Route "'.concat(route, '" ')
              : 'This route ';
            return Object.defineProperty(
              new Error(
                ''.concat(prefix, 'used ').concat(expression, '. ') +
                  '`searchParams` should be awaited before using its properties. ' +
                  'The following properties were not available through enumeration ' +
                  'because they conflict with builtin or well-known property names: ' +
                  ''.concat(
                    describeListOfPropertyNames(missingProperties),
                    '. '
                  ) +
                  'Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis'
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E2',
                enumerable: false,
                configurable: true,
              }
            );
          }
          function describeListOfPropertyNames(properties) {
            switch (properties.length) {
              case 0:
                throw Object.defineProperty(
                  new _invarianterror.InvariantError(
                    'Expected describeListOfPropertyNames to be called with a non-empty list of strings.'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E531',
                    enumerable: false,
                    configurable: true,
                  }
                );
              case 1:
                return '`'.concat(properties[0], '`');
              case 2:
                return '`'
                  .concat(properties[0], '` and `')
                  .concat(properties[1], '`');
              default: {
                let description = '';
                for (let i = 0; i < properties.length - 1; i++) {
                  description += '`'.concat(properties[i], '`, ');
                }
                description += ', and `'.concat(
                  properties[properties.length - 1],
                  '`'
                );
                return description;
              }
            }
          } //# sourceMappingURL=search-params.js.map
        }
      },
    '[project]/node_modules/next/dist/server/app-render/dynamic-access-async-storage-instance.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'dynamicAccessAsyncStorageInstance', {
            enumerable: true,
            get: function () {
              return dynamicAccessAsyncStorageInstance;
            },
          });
          const _asynclocalstorage = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/app-render/async-local-storage.js [app-client] (ecmascript)'
          );
          const dynamicAccessAsyncStorageInstance = (0,
          _asynclocalstorage.createAsyncLocalStorage)(); //# sourceMappingURL=dynamic-access-async-storage-instance.js.map
        }
      },
    '[project]/node_modules/next/dist/server/app-render/dynamic-access-async-storage.external.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'dynamicAccessAsyncStorage', {
            enumerable: true,
            get: function () {
              return _dynamicaccessasyncstorageinstance.dynamicAccessAsyncStorageInstance;
            },
          });
          const _dynamicaccessasyncstorageinstance = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/app-render/dynamic-access-async-storage-instance.js [app-client] (ecmascript)'
          ); //# sourceMappingURL=dynamic-access-async-storage.external.js.map
        }
      },
    '[project]/node_modules/next/dist/server/request/params.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ =
            /*#__PURE__*/ __turbopack_context__.i(
              '[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)'
            );
          ('use strict');
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              createParamsFromClient: null,
              createPrerenderParamsForClientSegment: null,
              createServerParamsForMetadata: null,
              createServerParamsForRoute: null,
              createServerParamsForServerSegment: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            createParamsFromClient: function () {
              return createParamsFromClient;
            },
            createPrerenderParamsForClientSegment: function () {
              return createPrerenderParamsForClientSegment;
            },
            createServerParamsForMetadata: function () {
              return createServerParamsForMetadata;
            },
            createServerParamsForRoute: function () {
              return createServerParamsForRoute;
            },
            createServerParamsForServerSegment: function () {
              return createServerParamsForServerSegment;
            },
          });
          const _reflect = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-client] (ecmascript)'
          );
          const _dynamicrendering = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/app-render/dynamic-rendering.js [app-client] (ecmascript)'
          );
          const _workunitasyncstorageexternal = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js [app-client] (ecmascript)'
          );
          const _invarianterror = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)'
          );
          const _reflectutils = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/utils/reflect-utils.js [app-client] (ecmascript)'
          );
          const _dynamicrenderingutils = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/dynamic-rendering-utils.js [app-client] (ecmascript)'
          );
          const _creatededupedbycallsiteservererrorlogger =
            __turbopack_context__.r(
              '[project]/node_modules/next/dist/server/create-deduped-by-callsite-server-error-logger.js [app-client] (ecmascript)'
            );
          const _scheduler = __turbopack_context__.r(
            '[project]/node_modules/next/dist/lib/scheduler.js [app-client] (ecmascript)'
          );
          const _dynamicaccessasyncstorageexternal = __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/app-render/dynamic-access-async-storage.external.js [app-client] (ecmascript)'
          );
          function createParamsFromClient(underlyingParams, workStore) {
            const workUnitStore =
              _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
            if (workUnitStore) {
              switch (workUnitStore.type) {
                case 'prerender':
                case 'prerender-client':
                case 'prerender-ppr':
                case 'prerender-legacy':
                  return createPrerenderParams(
                    underlyingParams,
                    workStore,
                    workUnitStore
                  );
                default:
              }
            }
            return createRenderParams(underlyingParams, workStore);
          }
          const createServerParamsForMetadata =
            createServerParamsForServerSegment;
          function createServerParamsForRoute(underlyingParams, workStore) {
            const workUnitStore =
              _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
            if (workUnitStore) {
              switch (workUnitStore.type) {
                case 'prerender':
                case 'prerender-client':
                case 'prerender-ppr':
                case 'prerender-legacy':
                  return createPrerenderParams(
                    underlyingParams,
                    workStore,
                    workUnitStore
                  );
                default:
              }
            }
            return createRenderParams(underlyingParams, workStore);
          }
          function createServerParamsForServerSegment(
            underlyingParams,
            workStore
          ) {
            const workUnitStore =
              _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
            if (workUnitStore) {
              switch (workUnitStore.type) {
                case 'prerender':
                case 'prerender-client':
                case 'prerender-ppr':
                case 'prerender-legacy':
                  return createPrerenderParams(
                    underlyingParams,
                    workStore,
                    workUnitStore
                  );
                default:
              }
            }
            return createRenderParams(underlyingParams, workStore);
          }
          function createPrerenderParamsForClientSegment(
            underlyingParams,
            workStore
          ) {
            const prerenderStore =
              _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
            if (
              prerenderStore &&
              (prerenderStore.type === 'prerender' ||
                prerenderStore.type === 'prerender-client')
            ) {
              const fallbackParams = workStore.fallbackRouteParams;
              if (fallbackParams) {
                for (let key in underlyingParams) {
                  if (fallbackParams.has(key)) {
                    // This params object has one of more fallback params so we need to consider
                    // the awaiting of this params object "dynamic". Since we are in dynamicIO mode
                    // we encode this as a promise that never resolves
                    return (0, _dynamicrenderingutils.makeHangingPromise)(
                      prerenderStore.renderSignal,
                      '`params`'
                    );
                  }
                }
              }
            }
            // We're prerendering in a mode that does not abort. We resolve the promise without
            // any tracking because we're just transporting a value from server to client where the tracking
            // will be applied.
            return Promise.resolve(underlyingParams);
          }
          function createPrerenderParams(
            underlyingParams,
            workStore,
            prerenderStore
          ) {
            const fallbackParams = workStore.fallbackRouteParams;
            if (fallbackParams) {
              let hasSomeFallbackParams = false;
              for (const key in underlyingParams) {
                if (fallbackParams.has(key)) {
                  hasSomeFallbackParams = true;
                  break;
                }
              }
              if (hasSomeFallbackParams) {
                // params need to be treated as dynamic because we have at least one fallback param
                switch (prerenderStore.type) {
                  case 'prerender':
                  case 'prerender-client':
                    // We are in a dynamicIO prerender
                    return makeHangingParams(underlyingParams, prerenderStore);
                  default:
                    return makeErroringExoticParams(
                      underlyingParams,
                      fallbackParams,
                      workStore,
                      prerenderStore
                    );
                }
              }
            }
            // We don't have any fallback params so we have an entirely static safe params object
            return makeUntrackedExoticParams(underlyingParams);
          }
          function createRenderParams(underlyingParams, workStore) {
            if (
              ('TURBOPACK compile-time value', 'development') ===
                'development' &&
              !workStore.isPrefetchRequest
            ) {
              if (
                ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
              );
              return makeDynamicallyTrackedExoticParamsWithDevWarnings(
                underlyingParams,
                workStore
              );
            } else {
              if (
                ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
              );
              return makeUntrackedExoticParams(underlyingParams);
            }
          }
          const CachedParams = new WeakMap();
          const fallbackParamsProxyHandler = {
            get: function get(target, prop, receiver) {
              if (prop === 'then' || prop === 'catch' || prop === 'finally') {
                const originalMethod = _reflect.ReflectAdapter.get(
                  target,
                  prop,
                  receiver
                );
                return {
                  [prop]: function () {
                    for (
                      var _len = arguments.length,
                        args = new Array(_len),
                        _key = 0;
                      _key < _len;
                      _key++
                    ) {
                      args[_key] = arguments[_key];
                    }
                    const store =
                      _dynamicaccessasyncstorageexternal.dynamicAccessAsyncStorage.getStore();
                    if (store) {
                      store.abortController.abort(
                        Object.defineProperty(
                          new Error(
                            'Accessed fallback `params` during prerendering.'
                          ),
                          '__NEXT_ERROR_CODE',
                          {
                            value: 'E691',
                            enumerable: false,
                            configurable: true,
                          }
                        )
                      );
                    }
                    return new Proxy(
                      originalMethod.apply(target, args),
                      fallbackParamsProxyHandler
                    );
                  },
                }[prop];
              }
              return _reflect.ReflectAdapter.get(target, prop, receiver);
            },
          };
          function makeHangingParams(underlyingParams, prerenderStore) {
            const cachedParams = CachedParams.get(underlyingParams);
            if (cachedParams) {
              return cachedParams;
            }
            const promise = new Proxy(
              (0, _dynamicrenderingutils.makeHangingPromise)(
                prerenderStore.renderSignal,
                '`params`'
              ),
              fallbackParamsProxyHandler
            );
            CachedParams.set(underlyingParams, promise);
            return promise;
          }
          function makeErroringExoticParams(
            underlyingParams,
            fallbackParams,
            workStore,
            prerenderStore
          ) {
            const cachedParams = CachedParams.get(underlyingParams);
            if (cachedParams) {
              return cachedParams;
            }
            const augmentedUnderlying = {
              ...underlyingParams,
            };
            // We don't use makeResolvedReactPromise here because params
            // supports copying with spread and we don't want to unnecessarily
            // instrument the promise with spreadable properties of ReactPromise.
            const promise = Promise.resolve(augmentedUnderlying);
            CachedParams.set(underlyingParams, promise);
            Object.keys(underlyingParams).forEach((prop) => {
              if (_reflectutils.wellKnownProperties.has(prop)) {
                // These properties cannot be shadowed because they need to be the
                // true underlying value for Promises to work correctly at runtime
              } else {
                if (fallbackParams.has(prop)) {
                  Object.defineProperty(augmentedUnderlying, prop, {
                    get() {
                      const expression = (0,
                      _reflectutils.describeStringPropertyAccess)(
                        'params',
                        prop
                      );
                      // In most dynamic APIs we also throw if `dynamic = "error"` however
                      // for params is only dynamic when we're generating a fallback shell
                      // and even when `dynamic = "error"` we still support generating dynamic
                      // fallback shells
                      // TODO remove this comment when dynamicIO is the default since there
                      // will be no `dynamic = "error"`
                      if (prerenderStore.type === 'prerender-ppr') {
                        // PPR Prerender (no dynamicIO)
                        (0, _dynamicrendering.postponeWithTracking)(
                          workStore.route,
                          expression,
                          prerenderStore.dynamicTracking
                        );
                      } else {
                        // Legacy Prerender
                        (0, _dynamicrendering.throwToInterruptStaticGeneration)(
                          expression,
                          workStore,
                          prerenderStore
                        );
                      }
                    },
                    enumerable: true,
                  });
                  Object.defineProperty(promise, prop, {
                    get() {
                      const expression = (0,
                      _reflectutils.describeStringPropertyAccess)(
                        'params',
                        prop
                      );
                      // In most dynamic APIs we also throw if `dynamic = "error"` however
                      // for params is only dynamic when we're generating a fallback shell
                      // and even when `dynamic = "error"` we still support generating dynamic
                      // fallback shells
                      // TODO remove this comment when dynamicIO is the default since there
                      // will be no `dynamic = "error"`
                      if (prerenderStore.type === 'prerender-ppr') {
                        // PPR Prerender (no dynamicIO)
                        (0, _dynamicrendering.postponeWithTracking)(
                          workStore.route,
                          expression,
                          prerenderStore.dynamicTracking
                        );
                      } else {
                        // Legacy Prerender
                        (0, _dynamicrendering.throwToInterruptStaticGeneration)(
                          expression,
                          workStore,
                          prerenderStore
                        );
                      }
                    },
                    set(newValue) {
                      Object.defineProperty(promise, prop, {
                        value: newValue,
                        writable: true,
                        enumerable: true,
                      });
                    },
                    enumerable: true,
                    configurable: true,
                  });
                } else {
                  promise[prop] = underlyingParams[prop];
                }
              }
            });
            return promise;
          }
          function makeUntrackedExoticParams(underlyingParams) {
            const cachedParams = CachedParams.get(underlyingParams);
            if (cachedParams) {
              return cachedParams;
            }
            // We don't use makeResolvedReactPromise here because params
            // supports copying with spread and we don't want to unnecessarily
            // instrument the promise with spreadable properties of ReactPromise.
            const promise = Promise.resolve(underlyingParams);
            CachedParams.set(underlyingParams, promise);
            Object.keys(underlyingParams).forEach((prop) => {
              if (_reflectutils.wellKnownProperties.has(prop)) {
                // These properties cannot be shadowed because they need to be the
                // true underlying value for Promises to work correctly at runtime
              } else {
                promise[prop] = underlyingParams[prop];
              }
            });
            return promise;
          }
          function makeUntrackedParams(underlyingParams) {
            const cachedParams = CachedParams.get(underlyingParams);
            if (cachedParams) {
              return cachedParams;
            }
            const promise = Promise.resolve(underlyingParams);
            CachedParams.set(underlyingParams, promise);
            return promise;
          }
          function makeDynamicallyTrackedExoticParamsWithDevWarnings(
            underlyingParams,
            store
          ) {
            const cachedParams = CachedParams.get(underlyingParams);
            if (cachedParams) {
              return cachedParams;
            }
            // We don't use makeResolvedReactPromise here because params
            // supports copying with spread and we don't want to unnecessarily
            // instrument the promise with spreadable properties of ReactPromise.
            const promise = new Promise((resolve) =>
              (0, _scheduler.scheduleImmediate)(() => resolve(underlyingParams))
            );
            const proxiedProperties = new Set();
            const unproxiedProperties = [];
            Object.keys(underlyingParams).forEach((prop) => {
              if (_reflectutils.wellKnownProperties.has(prop)) {
                // These properties cannot be shadowed because they need to be the
                // true underlying value for Promises to work correctly at runtime
                unproxiedProperties.push(prop);
              } else {
                proxiedProperties.add(prop);
                promise[prop] = underlyingParams[prop];
              }
            });
            const proxiedPromise = new Proxy(promise, {
              get(target, prop, receiver) {
                if (typeof prop === 'string') {
                  if (proxiedProperties.has(prop)) {
                    const expression = (0,
                    _reflectutils.describeStringPropertyAccess)('params', prop);
                    syncIODev(store.route, expression);
                  }
                }
                return _reflect.ReflectAdapter.get(target, prop, receiver);
              },
              set(target, prop, value, receiver) {
                if (typeof prop === 'string') {
                  proxiedProperties.delete(prop);
                }
                return _reflect.ReflectAdapter.set(
                  target,
                  prop,
                  value,
                  receiver
                );
              },
              ownKeys(target) {
                const expression = '`...params` or similar expression';
                syncIODev(store.route, expression, unproxiedProperties);
                return Reflect.ownKeys(target);
              },
            });
            CachedParams.set(underlyingParams, proxiedPromise);
            return proxiedPromise;
          }
          // Similar to `makeDynamicallyTrackedExoticParamsWithDevWarnings`, but just
          // logging the sync access without actually defining the params on the promise.
          function makeDynamicallyTrackedParamsWithDevWarnings(
            underlyingParams,
            store
          ) {
            const cachedParams = CachedParams.get(underlyingParams);
            if (cachedParams) {
              return cachedParams;
            }
            // We don't use makeResolvedReactPromise here because params
            // supports copying with spread and we don't want to unnecessarily
            // instrument the promise with spreadable properties of ReactPromise.
            const promise = new Promise((resolve) =>
              (0, _scheduler.scheduleImmediate)(() => resolve(underlyingParams))
            );
            const proxiedProperties = new Set();
            const unproxiedProperties = [];
            Object.keys(underlyingParams).forEach((prop) => {
              if (_reflectutils.wellKnownProperties.has(prop)) {
                // These properties cannot be shadowed because they need to be the
                // true underlying value for Promises to work correctly at runtime
                unproxiedProperties.push(prop);
              } else {
                proxiedProperties.add(prop);
              }
            });
            const proxiedPromise = new Proxy(promise, {
              get(target, prop, receiver) {
                if (typeof prop === 'string') {
                  if (proxiedProperties.has(prop)) {
                    const expression = (0,
                    _reflectutils.describeStringPropertyAccess)('params', prop);
                    warnForSyncAccess(store.route, expression);
                  }
                }
                return _reflect.ReflectAdapter.get(target, prop, receiver);
              },
              set(target, prop, value, receiver) {
                if (typeof prop === 'string') {
                  proxiedProperties.delete(prop);
                }
                return _reflect.ReflectAdapter.set(
                  target,
                  prop,
                  value,
                  receiver
                );
              },
              ownKeys(target) {
                const expression = '`...params` or similar expression';
                warnForIncompleteEnumeration(
                  store.route,
                  expression,
                  unproxiedProperties
                );
                return Reflect.ownKeys(target);
              },
            });
            CachedParams.set(underlyingParams, proxiedPromise);
            return proxiedPromise;
          }
          function syncIODev(route, expression, missingProperties) {
            const workUnitStore =
              _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
            if (
              workUnitStore &&
              workUnitStore.type === 'request' &&
              workUnitStore.prerenderPhase === true
            ) {
              // When we're rendering dynamically in dev we need to advance out of the
              // Prerender environment when we read Request data synchronously
              const requestStore = workUnitStore;
              (0, _dynamicrendering.trackSynchronousRequestDataAccessInDev)(
                requestStore
              );
            }
            // In all cases we warn normally
            if (missingProperties && missingProperties.length > 0) {
              warnForIncompleteEnumeration(
                route,
                expression,
                missingProperties
              );
            } else {
              warnForSyncAccess(route, expression);
            }
          }
          const warnForSyncAccess = (0,
          _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(
            createParamsAccessError
          );
          const warnForIncompleteEnumeration = (0,
          _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(
            createIncompleteEnumerationError
          );
          function createParamsAccessError(route, expression) {
            const prefix = route
              ? 'Route "'.concat(route, '" ')
              : 'This route ';
            return Object.defineProperty(
              new Error(
                ''.concat(prefix, 'used ').concat(expression, '. ') +
                  '`params` should be awaited before using its properties. ' +
                  'Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis'
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E307',
                enumerable: false,
                configurable: true,
              }
            );
          }
          function createIncompleteEnumerationError(
            route,
            expression,
            missingProperties
          ) {
            const prefix = route
              ? 'Route "'.concat(route, '" ')
              : 'This route ';
            return Object.defineProperty(
              new Error(
                ''.concat(prefix, 'used ').concat(expression, '. ') +
                  '`params` should be awaited before using its properties. ' +
                  'The following properties were not available through enumeration ' +
                  'because they conflict with builtin property names: ' +
                  ''.concat(
                    describeListOfPropertyNames(missingProperties),
                    '. '
                  ) +
                  'Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis'
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E482',
                enumerable: false,
                configurable: true,
              }
            );
          }
          function describeListOfPropertyNames(properties) {
            switch (properties.length) {
              case 0:
                throw Object.defineProperty(
                  new _invarianterror.InvariantError(
                    'Expected describeListOfPropertyNames to be called with a non-empty list of strings.'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E531',
                    enumerable: false,
                    configurable: true,
                  }
                );
              case 1:
                return '`'.concat(properties[0], '`');
              case 2:
                return '`'
                  .concat(properties[0], '` and `')
                  .concat(properties[1], '`');
              default: {
                let description = '';
                for (let i = 0; i < properties.length - 1; i++) {
                  description += '`'.concat(properties[i], '`, ');
                }
                description += ', and `'.concat(
                  properties[properties.length - 1],
                  '`'
                );
                return description;
              }
            }
          } //# sourceMappingURL=params.js.map
        }
      },
    '[project]/node_modules/next/dist/client/components/client-page.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'ClientPageRoot', {
            enumerable: true,
            get: function () {
              return ClientPageRoot;
            },
          });
          const _jsxruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
          const _invarianterror = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)'
          );
          function ClientPageRoot(param) {
            let { Component, searchParams, params, promises } = param;
            if (typeof window === 'undefined') {
              const { workAsyncStorage } = __turbopack_context__.r(
                '[project]/node_modules/next/dist/server/app-render/work-async-storage.external.js [app-client] (ecmascript)'
              );
              let clientSearchParams;
              let clientParams;
              // We are going to instrument the searchParams prop with tracking for the
              // appropriate context. We wrap differently in prerendering vs rendering
              const store = workAsyncStorage.getStore();
              if (!store) {
                throw Object.defineProperty(
                  new _invarianterror.InvariantError(
                    'Expected workStore to exist when handling searchParams in a client Page.'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E564',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              const { createSearchParamsFromClient } = __turbopack_context__.r(
                '[project]/node_modules/next/dist/server/request/search-params.js [app-client] (ecmascript)'
              );
              clientSearchParams = createSearchParamsFromClient(
                searchParams,
                store
              );
              const { createParamsFromClient } = __turbopack_context__.r(
                '[project]/node_modules/next/dist/server/request/params.js [app-client] (ecmascript)'
              );
              clientParams = createParamsFromClient(params, store);
              return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
                params: clientParams,
                searchParams: clientSearchParams,
              });
            } else {
              const { createRenderSearchParamsFromClient } =
                __turbopack_context__.r(
                  '[project]/node_modules/next/dist/client/request/search-params.browser.js [app-client] (ecmascript)'
                );
              const clientSearchParams =
                createRenderSearchParamsFromClient(searchParams);
              const { createRenderParamsFromClient } = __turbopack_context__.r(
                '[project]/node_modules/next/dist/client/request/params.browser.js [app-client] (ecmascript)'
              );
              const clientParams = createRenderParamsFromClient(params);
              return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
                params: clientParams,
                searchParams: clientSearchParams,
              });
            }
          }
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=client-page.js.map
        }
      },
    '[project]/node_modules/next/dist/client/components/client-segment.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'ClientSegmentRoot', {
            enumerable: true,
            get: function () {
              return ClientSegmentRoot;
            },
          });
          const _jsxruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
          const _invarianterror = __turbopack_context__.r(
            '[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)'
          );
          function ClientSegmentRoot(param) {
            let { Component, slots, params, promise } = param;
            if (typeof window === 'undefined') {
              const { workAsyncStorage } = __turbopack_context__.r(
                '[project]/node_modules/next/dist/server/app-render/work-async-storage.external.js [app-client] (ecmascript)'
              );
              let clientParams;
              // We are going to instrument the searchParams prop with tracking for the
              // appropriate context. We wrap differently in prerendering vs rendering
              const store = workAsyncStorage.getStore();
              if (!store) {
                throw Object.defineProperty(
                  new _invarianterror.InvariantError(
                    'Expected workStore to exist when handling params in a client segment such as a Layout or Template.'
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E600',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
              const { createParamsFromClient } = __turbopack_context__.r(
                '[project]/node_modules/next/dist/server/request/params.js [app-client] (ecmascript)'
              );
              clientParams = createParamsFromClient(params, store);
              return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
                ...slots,
                params: clientParams,
              });
            } else {
              const { createRenderParamsFromClient } = __turbopack_context__.r(
                '[project]/node_modules/next/dist/client/request/params.browser.js [app-client] (ecmascript)'
              );
              const clientParams = createRenderParamsFromClient(params);
              return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
                ...slots,
                params: clientParams,
              });
            }
          }
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=client-segment.js.map
        }
      },
    '[project]/node_modules/next/dist/lib/metadata/generate/icon-mark.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'IconMark', {
            enumerable: true,
            get: function () {
              return IconMark;
            },
          });
          const _jsxruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
          const IconMark = () => {
            if (typeof window !== 'undefined') {
              return null;
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsx)('meta', {
              name: '\xabnxt-icon\xbb',
            });
          }; //# sourceMappingURL=icon-mark.js.map
        }
      },
    '[project]/node_modules/next/dist/client/components/metadata/async-metadata.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          Object.defineProperty(exports, 'AsyncMetadataOutlet', {
            enumerable: true,
            get: function () {
              return AsyncMetadataOutlet;
            },
          });
          const _jsxruntime = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)'
          );
          const _react = __turbopack_context__.r(
            '[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)'
          );
          function MetadataOutlet(param) {
            let { promise } = param;
            const { error, digest } = (0, _react.use)(promise);
            if (error) {
              if (digest) {
                // The error will lose its original digest after passing from server layer to client layer；
                // We recover the digest property here to override the React created one if original digest exists.
                error.digest = digest;
              }
              throw error;
            }
            return null;
          }
          function AsyncMetadataOutlet(param) {
            let { promise } = param;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Suspense, {
              fallback: null,
              children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MetadataOutlet, {
                promise: promise,
              }),
            });
          }
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=async-metadata.js.map
        }
      },
    '[project]/node_modules/next/dist/client/components/metadata/metadata-boundary.js [app-client] (ecmascript)':
      (__turbopack_context__) => {
        'use strict';

        var { m: module, e: exports } = __turbopack_context__;
        {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          0 &&
            (module.exports = {
              MetadataBoundary: null,
              OutletBoundary: null,
              ViewportBoundary: null,
            });
          function _export(target, all) {
            for (var name in all)
              Object.defineProperty(target, name, {
                enumerable: true,
                get: all[name],
              });
          }
          _export(exports, {
            MetadataBoundary: function () {
              return MetadataBoundary;
            },
            OutletBoundary: function () {
              return OutletBoundary;
            },
            ViewportBoundary: function () {
              return ViewportBoundary;
            },
          });
          const _metadataconstants = __turbopack_context__.r(
            '[project]/node_modules/next/dist/lib/metadata/metadata-constants.js [app-client] (ecmascript)'
          );
          // We use a namespace object to allow us to recover the name of the function
          // at runtime even when production bundling/minification is used.
          const NameSpace = {
            [_metadataconstants.METADATA_BOUNDARY_NAME]: function (param) {
              let { children } = param;
              return children;
            },
            [_metadataconstants.VIEWPORT_BOUNDARY_NAME]: function (param) {
              let { children } = param;
              return children;
            },
            [_metadataconstants.OUTLET_BOUNDARY_NAME]: function (param) {
              let { children } = param;
              return children;
            },
          };
          const MetadataBoundary = // so it retains the name inferred from the namespace object
            NameSpace[_metadataconstants.METADATA_BOUNDARY_NAME.slice(0)];
          const ViewportBoundary = // so it retains the name inferred from the namespace object
            NameSpace[_metadataconstants.VIEWPORT_BOUNDARY_NAME.slice(0)];
          const OutletBoundary = // so it retains the name inferred from the namespace object
            NameSpace[_metadataconstants.OUTLET_BOUNDARY_NAME.slice(0)];
          if (
            (typeof exports.default === 'function' ||
              (typeof exports.default === 'object' &&
                exports.default !== null)) &&
            typeof exports.default.__esModule === 'undefined'
          ) {
            Object.defineProperty(exports.default, '__esModule', {
              value: true,
            });
            Object.assign(exports.default, exports);
            module.exports = exports.default;
          } //# sourceMappingURL=metadata-boundary.js.map
        }
      },
  },
]);

//# sourceMappingURL=node_modules_0c243741._.js.map
