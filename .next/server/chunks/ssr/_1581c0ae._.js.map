{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Asya_Danilova/Desktop/rs-react-course/src/context/ThemeContext.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const ThemeProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call ThemeProvider() from the server but ThemeProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/context/ThemeContext.tsx <module evaluation>\",\n    \"ThemeProvider\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,8DACA","debugId":null}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Asya_Danilova/Desktop/rs-react-course/src/context/ThemeContext.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const ThemeProvider = registerClientReference(\n    function() { throw new Error(\"Attempted to call ThemeProvider() from the server but ThemeProvider is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/context/ThemeContext.tsx\",\n    \"ThemeProvider\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,0CACA","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Asya_Danilova/Desktop/rs-react-course/app/%5Blocale%5D/layout.tsx"],"sourcesContent":["import React from 'react';\nimport { NextIntlClientProvider } from 'next-intl';\nimport { ThemeProvider } from '../../src/context/ThemeContext';\nimport en from '../../messages/en.json';\nimport ru from '../../messages/ru.json';\nimport '../../src/index.scss';\n\nconst MESSAGES: Record<string, typeof en | typeof ru> = { en, ru };\nconst SUPPORTED_LOCALES = ['en', 'ru'];\n\nexport default async function ResultsLayout({\n  children,\n  params,\n}: {\n  children: React.ReactNode;\n  params: Promise<{ locale: string }>;\n}) {\n  const { locale } = await params;\n  const safeLocale = SUPPORTED_LOCALES.includes(locale) ? locale : 'en';\n  const messages = MESSAGES[safeLocale];\n\n  return (\n    <ThemeProvider>\n      <NextIntlClientProvider\n        locale={safeLocale}\n        messages={messages}\n        timeZone=\"Europe/Moscow\"\n      >\n        <main>{children}</main>\n      </NextIntlClientProvider>\n    </ThemeProvider>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;;;;;;;AAGA,MAAM,WAAkD;IAAE,IAAA,sFAAA,CAAA,UAAE;IAAE,IAAA,sFAAA,CAAA,UAAE;AAAC;AACjE,MAAM,oBAAoB;IAAC;IAAM;CAAK;AAEvB,eAAe,cAAc,EAC1C,QAAQ,EACR,MAAM,EAIP;IACC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM;IACzB,MAAM,aAAa,kBAAkB,QAAQ,CAAC,UAAU,SAAS;IACjE,MAAM,WAAW,QAAQ,CAAC,WAAW;IAErC,qBACE,8OAAC,+HAAA,CAAA,gBAAa;kBACZ,cAAA,8OAAC,kQAAA,CAAA,yBAAsB;YACrB,QAAQ;YACR,UAAU;YACV,UAAS;sBAET,cAAA,8OAAC;0BAAM;;;;;;;;;;;;;;;;AAIf","debugId":null}}]
}