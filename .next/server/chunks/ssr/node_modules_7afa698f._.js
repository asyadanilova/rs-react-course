module.exports = {
  '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        module.exports = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/route-modules/app-page/module.compiled.js [app-rsc] (ecmascript)'
        ).vendored['react-rsc'].ReactJsxDevRuntime; //# sourceMappingURL=react-jsx-dev-runtime.js.map
      }
    },
  '[project]/node_modules/react-redux/dist/rsc.mjs [app-rsc] (ecmascript)': (
    __turbopack_context__
  ) => {
    'use strict';

    // src/utils/shallowEqual.ts
    __turbopack_context__.s({
      Provider: () => throwNotSupportedError,
      ReactReduxContext: () => ReactReduxContext,
      batch: () => throwNotSupportedError,
      connect: () => throwNotSupportedError,
      createDispatchHook: () => throwNotSupportedError,
      createSelectorHook: () => throwNotSupportedError,
      createStoreHook: () => throwNotSupportedError,
      shallowEqual: () => shallowEqual,
      useDispatch: () => throwNotSupportedError,
      useSelector: () => throwNotSupportedError,
      useStore: () => throwNotSupportedError,
    });
    function is(x, y) {
      if (x === y) {
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function shallowEqual(objA, objB) {
      if (is(objA, objB)) return true;
      if (
        typeof objA !== 'object' ||
        objA === null ||
        typeof objB !== 'object' ||
        objB === null
      ) {
        return false;
      }
      const keysA = Object.keys(objA);
      const keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) return false;
      for (let i = 0; i < keysA.length; i++) {
        if (
          !Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||
          !is(objA[keysA[i]], objB[keysA[i]])
        ) {
          return false;
        }
      }
      return true;
    }
    // src/index-rsc.ts
    var throwNotSupportedError = (...args) => {
      throw new Error(
        'This function is not supported in React Server Components. Please only use this export in a Client Component.'
      );
    };
    var ReactReduxContext = {};
    //# sourceMappingURL=rsc.mjs.map
  },
  '[project]/node_modules/immer/dist/immer.mjs [app-rsc] (ecmascript)': (
    __turbopack_context__
  ) => {
    'use strict';

    // src/utils/env.ts
    __turbopack_context__.s({
      Immer: () => Immer2,
      applyPatches: () => applyPatches,
      castDraft: () => castDraft,
      castImmutable: () => castImmutable,
      createDraft: () => createDraft,
      current: () => current,
      enableMapSet: () => enableMapSet,
      enablePatches: () => enablePatches,
      finishDraft: () => finishDraft,
      freeze: () => freeze,
      immerable: () => DRAFTABLE,
      isDraft: () => isDraft,
      isDraftable: () => isDraftable,
      nothing: () => NOTHING,
      original: () => original,
      produce: () => produce,
      produceWithPatches: () => produceWithPatches,
      setAutoFreeze: () => setAutoFreeze,
      setUseStrictShallowCopy: () => setUseStrictShallowCopy,
    });
    var NOTHING = Symbol.for('immer-nothing');
    var DRAFTABLE = Symbol.for('immer-draftable');
    var DRAFT_STATE = Symbol.for('immer-state');
    // src/utils/errors.ts
    var errors = ('TURBOPACK compile-time truthy', 1)
      ? [
          // All error codes, starting by 0:
          function (plugin) {
            return `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \`enable${plugin}()\` when initializing your application.`;
          },
          function (thing) {
            return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`;
          },
          'This object has been frozen and should not be mutated',
          function (data) {
            return (
              'Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? ' +
              data
            );
          },
          'An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.',
          'Immer forbids circular references',
          'The first or second argument to `produce` must be a function',
          'The third argument to `produce` must be a function or undefined',
          'First argument to `createDraft` must be a plain object, an array, or an immerable object',
          'First argument to `finishDraft` must be a draft returned by `createDraft`',
          function (thing) {
            return `'current' expects a draft, got: ${thing}`;
          },
          'Object.defineProperty() cannot be used on an Immer draft',
          'Object.setPrototypeOf() cannot be used on an Immer draft',
          'Immer only supports deleting array indices',
          "Immer only supports setting array indices and the 'length' property",
          function (thing) {
            return `'original' expects a draft, got: ${thing}`;
          },
        ]
      : 'TURBOPACK unreachable';
    function die(error, ...args) {
      if (('TURBOPACK compile-time truthy', 1)) {
        const e = errors[error];
        const msg = typeof e === 'function' ? e.apply(null, args) : e;
        throw new Error(`[Immer] ${msg}`);
      }
      throw new Error(
        `[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`
      );
    }
    // src/utils/common.ts
    var getPrototypeOf = Object.getPrototypeOf;
    function isDraft(value) {
      return !!value && !!value[DRAFT_STATE];
    }
    function isDraftable(value) {
      if (!value) return false;
      return (
        isPlainObject(value) ||
        Array.isArray(value) ||
        !!value[DRAFTABLE] ||
        !!value.constructor?.[DRAFTABLE] ||
        isMap(value) ||
        isSet(value)
      );
    }
    var objectCtorString = Object.prototype.constructor.toString();
    function isPlainObject(value) {
      if (!value || typeof value !== 'object') return false;
      const proto = getPrototypeOf(value);
      if (proto === null) {
        return true;
      }
      const Ctor =
        Object.hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      if (Ctor === Object) return true;
      return (
        typeof Ctor == 'function' &&
        Function.toString.call(Ctor) === objectCtorString
      );
    }
    function original(value) {
      if (!isDraft(value)) die(15, value);
      return value[DRAFT_STATE].base_;
    }
    function each(obj, iter) {
      if (getArchtype(obj) === 0 /* Object */) {
        Reflect.ownKeys(obj).forEach((key) => {
          iter(key, obj[key], obj);
        });
      } else {
        obj.forEach((entry, index) => iter(index, entry, obj));
      }
    }
    function getArchtype(thing) {
      const state = thing[DRAFT_STATE];
      return state
        ? state.type_
        : Array.isArray(thing)
          ? 1 /* Array */
          : isMap(thing)
            ? 2 /* Map */
            : isSet(thing)
              ? 3 /* Set */
              : 0 /* Object */;
    }
    function has(thing, prop) {
      return getArchtype(thing) === 2 /* Map */
        ? thing.has(prop)
        : Object.prototype.hasOwnProperty.call(thing, prop);
    }
    function get(thing, prop) {
      return getArchtype(thing) === 2 /* Map */ ? thing.get(prop) : thing[prop];
    }
    function set(thing, propOrOldValue, value) {
      const t = getArchtype(thing);
      if (t === 2 /* Map */) thing.set(propOrOldValue, value);
      else if (t === 3 /* Set */) {
        thing.add(value);
      } else thing[propOrOldValue] = value;
    }
    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function isMap(target) {
      return target instanceof Map;
    }
    function isSet(target) {
      return target instanceof Set;
    }
    function latest(state) {
      return state.copy_ || state.base_;
    }
    function shallowCopy(base, strict) {
      if (isMap(base)) {
        return new Map(base);
      }
      if (isSet(base)) {
        return new Set(base);
      }
      if (Array.isArray(base)) return Array.prototype.slice.call(base);
      const isPlain = isPlainObject(base);
      if (strict === true || (strict === 'class_only' && !isPlain)) {
        const descriptors = Object.getOwnPropertyDescriptors(base);
        delete descriptors[DRAFT_STATE];
        let keys = Reflect.ownKeys(descriptors);
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const desc = descriptors[key];
          if (desc.writable === false) {
            desc.writable = true;
            desc.configurable = true;
          }
          if (desc.get || desc.set)
            descriptors[key] = {
              configurable: true,
              writable: true,
              // could live with !!desc.set as well here...
              enumerable: desc.enumerable,
              value: base[key],
            };
        }
        return Object.create(getPrototypeOf(base), descriptors);
      } else {
        const proto = getPrototypeOf(base);
        if (proto !== null && isPlain) {
          return {
            ...base,
          };
        }
        const obj = Object.create(proto);
        return Object.assign(obj, base);
      }
    }
    function freeze(obj, deep = false) {
      if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj;
      if (getArchtype(obj) > 1) {
        obj.set =
          obj.add =
          obj.clear =
          obj.delete =
            dontMutateFrozenCollections;
      }
      Object.freeze(obj);
      if (deep)
        Object.entries(obj).forEach(([key, value]) => freeze(value, true));
      return obj;
    }
    function dontMutateFrozenCollections() {
      die(2);
    }
    function isFrozen(obj) {
      return Object.isFrozen(obj);
    }
    // src/utils/plugins.ts
    var plugins = {};
    function getPlugin(pluginKey) {
      const plugin = plugins[pluginKey];
      if (!plugin) {
        die(0, pluginKey);
      }
      return plugin;
    }
    function loadPlugin(pluginKey, implementation) {
      if (!plugins[pluginKey]) plugins[pluginKey] = implementation;
    }
    // src/core/scope.ts
    var currentScope;
    function getCurrentScope() {
      return currentScope;
    }
    function createScope(parent_, immer_) {
      return {
        drafts_: [],
        parent_,
        immer_,
        // Whenever the modified draft contains a draft from another scope, we
        // need to prevent auto-freezing so the unowned draft can be finalized.
        canAutoFreeze_: true,
        unfinalizedDrafts_: 0,
      };
    }
    function usePatchesInScope(scope, patchListener) {
      if (patchListener) {
        getPlugin('Patches');
        scope.patches_ = [];
        scope.inversePatches_ = [];
        scope.patchListener_ = patchListener;
      }
    }
    function revokeScope(scope) {
      leaveScope(scope);
      scope.drafts_.forEach(revokeDraft);
      scope.drafts_ = null;
    }
    function leaveScope(scope) {
      if (scope === currentScope) {
        currentScope = scope.parent_;
      }
    }
    function enterScope(immer2) {
      return (currentScope = createScope(currentScope, immer2));
    }
    function revokeDraft(draft) {
      const state = draft[DRAFT_STATE];
      if (state.type_ === 0 /* Object */ || state.type_ === 1 /* Array */)
        state.revoke_();
      else state.revoked_ = true;
    }
    // src/core/finalize.ts
    function processResult(result, scope) {
      scope.unfinalizedDrafts_ = scope.drafts_.length;
      const baseDraft = scope.drafts_[0];
      const isReplaced = result !== void 0 && result !== baseDraft;
      if (isReplaced) {
        if (baseDraft[DRAFT_STATE].modified_) {
          revokeScope(scope);
          die(4);
        }
        if (isDraftable(result)) {
          result = finalize(scope, result);
          if (!scope.parent_) maybeFreeze(scope, result);
        }
        if (scope.patches_) {
          getPlugin('Patches').generateReplacementPatches_(
            baseDraft[DRAFT_STATE].base_,
            result,
            scope.patches_,
            scope.inversePatches_
          );
        }
      } else {
        result = finalize(scope, baseDraft, []);
      }
      revokeScope(scope);
      if (scope.patches_) {
        scope.patchListener_(scope.patches_, scope.inversePatches_);
      }
      return result !== NOTHING ? result : void 0;
    }
    function finalize(rootScope, value, path) {
      if (isFrozen(value)) return value;
      const state = value[DRAFT_STATE];
      if (!state) {
        each(value, (key, childValue) =>
          finalizeProperty(rootScope, state, value, key, childValue, path)
        );
        return value;
      }
      if (state.scope_ !== rootScope) return value;
      if (!state.modified_) {
        maybeFreeze(rootScope, state.base_, true);
        return state.base_;
      }
      if (!state.finalized_) {
        state.finalized_ = true;
        state.scope_.unfinalizedDrafts_--;
        const result = state.copy_;
        let resultEach = result;
        let isSet2 = false;
        if (state.type_ === 3 /* Set */) {
          resultEach = new Set(result);
          result.clear();
          isSet2 = true;
        }
        each(resultEach, (key, childValue) =>
          finalizeProperty(
            rootScope,
            state,
            result,
            key,
            childValue,
            path,
            isSet2
          )
        );
        maybeFreeze(rootScope, result, false);
        if (path && rootScope.patches_) {
          getPlugin('Patches').generatePatches_(
            state,
            path,
            rootScope.patches_,
            rootScope.inversePatches_
          );
        }
      }
      return state.copy_;
    }
    function finalizeProperty(
      rootScope,
      parentState,
      targetObject,
      prop,
      childValue,
      rootPath,
      targetIsSet
    ) {
      if (
        ('TURBOPACK compile-time value', 'development') !== 'production' &&
        childValue === targetObject
      )
        die(5);
      if (isDraft(childValue)) {
        const path =
          rootPath &&
          parentState &&
          parentState.type_ !== 3 /* Set */ && // Set objects are atomic since they have no keys.
          !has(parentState.assigned_, prop)
            ? rootPath.concat(prop)
            : void 0;
        const res = finalize(rootScope, childValue, path);
        set(targetObject, prop, res);
        if (isDraft(res)) {
          rootScope.canAutoFreeze_ = false;
        } else return;
      } else if (targetIsSet) {
        targetObject.add(childValue);
      }
      if (isDraftable(childValue) && !isFrozen(childValue)) {
        if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {
          return;
        }
        finalize(rootScope, childValue);
        if (
          (!parentState || !parentState.scope_.parent_) &&
          typeof prop !== 'symbol' &&
          Object.prototype.propertyIsEnumerable.call(targetObject, prop)
        )
          maybeFreeze(rootScope, childValue);
      }
    }
    function maybeFreeze(scope, value, deep = false) {
      if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {
        freeze(value, deep);
      }
    }
    // src/core/proxy.ts
    function createProxyProxy(base, parent) {
      const isArray = Array.isArray(base);
      const state = {
        type_: isArray ? 1 /* Array */ : 0 /* Object */,
        // Track which produce call this is associated with.
        scope_: parent ? parent.scope_ : getCurrentScope(),
        // True for both shallow and deep changes.
        modified_: false,
        // Used during finalization.
        finalized_: false,
        // Track which properties have been assigned (true) or deleted (false).
        assigned_: {},
        // The parent draft state.
        parent_: parent,
        // The base state.
        base_: base,
        // The base proxy.
        draft_: null,
        // set below
        // The base copy with any updated values.
        copy_: null,
        // Called by the `produce` function.
        revoke_: null,
        isManual_: false,
      };
      let target = state;
      let traps = objectTraps;
      if (isArray) {
        target = [state];
        traps = arrayTraps;
      }
      const { revoke, proxy } = Proxy.revocable(target, traps);
      state.draft_ = proxy;
      state.revoke_ = revoke;
      return proxy;
    }
    var objectTraps = {
      get(state, prop) {
        if (prop === DRAFT_STATE) return state;
        const source = latest(state);
        if (!has(source, prop)) {
          return readPropFromProto(state, source, prop);
        }
        const value = source[prop];
        if (state.finalized_ || !isDraftable(value)) {
          return value;
        }
        if (value === peek(state.base_, prop)) {
          prepareCopy(state);
          return (state.copy_[prop] = createProxy(value, state));
        }
        return value;
      },
      has(state, prop) {
        return prop in latest(state);
      },
      ownKeys(state) {
        return Reflect.ownKeys(latest(state));
      },
      set(state, prop, value) {
        const desc = getDescriptorFromProto(latest(state), prop);
        if (desc?.set) {
          desc.set.call(state.draft_, value);
          return true;
        }
        if (!state.modified_) {
          const current2 = peek(latest(state), prop);
          const currentState = current2?.[DRAFT_STATE];
          if (currentState && currentState.base_ === value) {
            state.copy_[prop] = value;
            state.assigned_[prop] = false;
            return true;
          }
          if (
            is(value, current2) &&
            (value !== void 0 || has(state.base_, prop))
          )
            return true;
          prepareCopy(state);
          markChanged(state);
        }
        if (
          (state.copy_[prop] === value && // special case: handle new props with value 'undefined'
            (value !== void 0 || prop in state.copy_)) || // special case: NaN
          (Number.isNaN(value) && Number.isNaN(state.copy_[prop]))
        )
          return true;
        state.copy_[prop] = value;
        state.assigned_[prop] = true;
        return true;
      },
      deleteProperty(state, prop) {
        if (peek(state.base_, prop) !== void 0 || prop in state.base_) {
          state.assigned_[prop] = false;
          prepareCopy(state);
          markChanged(state);
        } else {
          delete state.assigned_[prop];
        }
        if (state.copy_) {
          delete state.copy_[prop];
        }
        return true;
      },
      // Note: We never coerce `desc.value` into an Immer draft, because we can't make
      // the same guarantee in ES5 mode.
      getOwnPropertyDescriptor(state, prop) {
        const owner = latest(state);
        const desc = Reflect.getOwnPropertyDescriptor(owner, prop);
        if (!desc) return desc;
        return {
          writable: true,
          configurable: state.type_ !== 1 /* Array */ || prop !== 'length',
          enumerable: desc.enumerable,
          value: owner[prop],
        };
      },
      defineProperty() {
        die(11);
      },
      getPrototypeOf(state) {
        return getPrototypeOf(state.base_);
      },
      setPrototypeOf() {
        die(12);
      },
    };
    var arrayTraps = {};
    each(objectTraps, (key, fn) => {
      arrayTraps[key] = function () {
        arguments[0] = arguments[0][0];
        return fn.apply(this, arguments);
      };
    });
    arrayTraps.deleteProperty = function (state, prop) {
      if (
        ('TURBOPACK compile-time value', 'development') !== 'production' &&
        isNaN(parseInt(prop))
      )
        die(13);
      return arrayTraps.set.call(this, state, prop, void 0);
    };
    arrayTraps.set = function (state, prop, value) {
      if (
        ('TURBOPACK compile-time value', 'development') !== 'production' &&
        prop !== 'length' &&
        isNaN(parseInt(prop))
      )
        die(14);
      return objectTraps.set.call(this, state[0], prop, value, state[0]);
    };
    function peek(draft, prop) {
      const state = draft[DRAFT_STATE];
      const source = state ? latest(state) : draft;
      return source[prop];
    }
    function readPropFromProto(state, source, prop) {
      const desc = getDescriptorFromProto(source, prop);
      return desc
        ? `value` in desc
          ? desc.value // This is a very special case, if the prop is a getter defined by the
          : // prototype, we should invoke it with the draft as context!
            desc.get?.call(state.draft_)
        : void 0;
    }
    function getDescriptorFromProto(source, prop) {
      if (!(prop in source)) return void 0;
      let proto = getPrototypeOf(source);
      while (proto) {
        const desc = Object.getOwnPropertyDescriptor(proto, prop);
        if (desc) return desc;
        proto = getPrototypeOf(proto);
      }
      return void 0;
    }
    function markChanged(state) {
      if (!state.modified_) {
        state.modified_ = true;
        if (state.parent_) {
          markChanged(state.parent_);
        }
      }
    }
    function prepareCopy(state) {
      if (!state.copy_) {
        state.copy_ = shallowCopy(
          state.base_,
          state.scope_.immer_.useStrictShallowCopy_
        );
      }
    }
    // src/core/immerClass.ts
    var Immer2 = class {
      constructor(config) {
        this.autoFreeze_ = true;
        this.useStrictShallowCopy_ = false;
        /**
         * The `produce` function takes a value and a "recipe function" (whose
         * return value often depends on the base state). The recipe function is
         * free to mutate its first argument however it wants. All mutations are
         * only ever applied to a __copy__ of the base state.
         *
         * Pass only a function to create a "curried producer" which relieves you
         * from passing the recipe function every time.
         *
         * Only plain objects and arrays are made mutable. All other objects are
         * considered uncopyable.
         *
         * Note: This function is __bound__ to its `Immer` instance.
         *
         * @param {any} base - the initial state
         * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified
         * @param {Function} patchListener - optional function that will be called with all the patches produced here
         * @returns {any} a new state, or the initial state if nothing was modified
         */ this.produce = (base, recipe, patchListener) => {
          if (typeof base === 'function' && typeof recipe !== 'function') {
            const defaultBase = recipe;
            recipe = base;
            const self = this;
            return function curriedProduce(base2 = defaultBase, ...args) {
              return self.produce(base2, (draft) =>
                recipe.call(this, draft, ...args)
              );
            };
          }
          if (typeof recipe !== 'function') die(6);
          if (patchListener !== void 0 && typeof patchListener !== 'function')
            die(7);
          let result;
          if (isDraftable(base)) {
            const scope = enterScope(this);
            const proxy = createProxy(base, void 0);
            let hasError = true;
            try {
              result = recipe(proxy);
              hasError = false;
            } finally {
              if (hasError) revokeScope(scope);
              else leaveScope(scope);
            }
            usePatchesInScope(scope, patchListener);
            return processResult(result, scope);
          } else if (!base || typeof base !== 'object') {
            result = recipe(base);
            if (result === void 0) result = base;
            if (result === NOTHING) result = void 0;
            if (this.autoFreeze_) freeze(result, true);
            if (patchListener) {
              const p = [];
              const ip = [];
              getPlugin('Patches').generateReplacementPatches_(
                base,
                result,
                p,
                ip
              );
              patchListener(p, ip);
            }
            return result;
          } else die(1, base);
        };
        this.produceWithPatches = (base, recipe) => {
          if (typeof base === 'function') {
            return (state, ...args) =>
              this.produceWithPatches(state, (draft) => base(draft, ...args));
          }
          let patches, inversePatches;
          const result = this.produce(base, recipe, (p, ip) => {
            patches = p;
            inversePatches = ip;
          });
          return [result, patches, inversePatches];
        };
        if (typeof config?.autoFreeze === 'boolean')
          this.setAutoFreeze(config.autoFreeze);
        if (typeof config?.useStrictShallowCopy === 'boolean')
          this.setUseStrictShallowCopy(config.useStrictShallowCopy);
      }
      createDraft(base) {
        if (!isDraftable(base)) die(8);
        if (isDraft(base)) base = current(base);
        const scope = enterScope(this);
        const proxy = createProxy(base, void 0);
        proxy[DRAFT_STATE].isManual_ = true;
        leaveScope(scope);
        return proxy;
      }
      finishDraft(draft, patchListener) {
        const state = draft && draft[DRAFT_STATE];
        if (!state || !state.isManual_) die(9);
        const { scope_: scope } = state;
        usePatchesInScope(scope, patchListener);
        return processResult(void 0, scope);
      }
      /**
       * Pass true to automatically freeze all copies created by Immer.
       *
       * By default, auto-freezing is enabled.
       */ setAutoFreeze(value) {
        this.autoFreeze_ = value;
      }
      /**
       * Pass true to enable strict shallow copy.
       *
       * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
       */ setUseStrictShallowCopy(value) {
        this.useStrictShallowCopy_ = value;
      }
      applyPatches(base, patches) {
        let i;
        for (i = patches.length - 1; i >= 0; i--) {
          const patch = patches[i];
          if (patch.path.length === 0 && patch.op === 'replace') {
            base = patch.value;
            break;
          }
        }
        if (i > -1) {
          patches = patches.slice(i + 1);
        }
        const applyPatchesImpl = getPlugin('Patches').applyPatches_;
        if (isDraft(base)) {
          return applyPatchesImpl(base, patches);
        }
        return this.produce(base, (draft) => applyPatchesImpl(draft, patches));
      }
    };
    function createProxy(value, parent) {
      const draft = isMap(value)
        ? getPlugin('MapSet').proxyMap_(value, parent)
        : isSet(value)
          ? getPlugin('MapSet').proxySet_(value, parent)
          : createProxyProxy(value, parent);
      const scope = parent ? parent.scope_ : getCurrentScope();
      scope.drafts_.push(draft);
      return draft;
    }
    // src/core/current.ts
    function current(value) {
      if (!isDraft(value)) die(10, value);
      return currentImpl(value);
    }
    function currentImpl(value) {
      if (!isDraftable(value) || isFrozen(value)) return value;
      const state = value[DRAFT_STATE];
      let copy;
      if (state) {
        if (!state.modified_) return state.base_;
        state.finalized_ = true;
        copy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);
      } else {
        copy = shallowCopy(value, true);
      }
      each(copy, (key, childValue) => {
        set(copy, key, currentImpl(childValue));
      });
      if (state) {
        state.finalized_ = false;
      }
      return copy;
    }
    // src/plugins/patches.ts
    function enablePatches() {
      const errorOffset = 16;
      if (('TURBOPACK compile-time truthy', 1)) {
        errors.push(
          'Sets cannot have "replace" patches.',
          function (op) {
            return 'Unsupported patch operation: ' + op;
          },
          function (path) {
            return "Cannot apply patch, path doesn't resolve: " + path;
          },
          'Patching reserved attributes like __proto__, prototype and constructor is not allowed'
        );
      }
      const REPLACE = 'replace';
      const ADD = 'add';
      const REMOVE = 'remove';
      function generatePatches_(state, basePath, patches, inversePatches) {
        switch (state.type_) {
          case 0 /* Object */:
          case 2 /* Map */:
            return generatePatchesFromAssigned(
              state,
              basePath,
              patches,
              inversePatches
            );
          case 1 /* Array */:
            return generateArrayPatches(
              state,
              basePath,
              patches,
              inversePatches
            );
          case 3 /* Set */:
            return generateSetPatches(state, basePath, patches, inversePatches);
        }
      }
      function generateArrayPatches(state, basePath, patches, inversePatches) {
        let { base_, assigned_ } = state;
        let copy_ = state.copy_;
        if (copy_.length < base_.length) {
          [base_, copy_] = [copy_, base_];
          [patches, inversePatches] = [inversePatches, patches];
        }
        for (let i = 0; i < base_.length; i++) {
          if (assigned_[i] && copy_[i] !== base_[i]) {
            const path = basePath.concat([i]);
            patches.push({
              op: REPLACE,
              path,
              // Need to maybe clone it, as it can in fact be the original value
              // due to the base/copy inversion at the start of this function
              value: clonePatchValueIfNeeded(copy_[i]),
            });
            inversePatches.push({
              op: REPLACE,
              path,
              value: clonePatchValueIfNeeded(base_[i]),
            });
          }
        }
        for (let i = base_.length; i < copy_.length; i++) {
          const path = basePath.concat([i]);
          patches.push({
            op: ADD,
            path,
            // Need to maybe clone it, as it can in fact be the original value
            // due to the base/copy inversion at the start of this function
            value: clonePatchValueIfNeeded(copy_[i]),
          });
        }
        for (let i = copy_.length - 1; base_.length <= i; --i) {
          const path = basePath.concat([i]);
          inversePatches.push({
            op: REMOVE,
            path,
          });
        }
      }
      function generatePatchesFromAssigned(
        state,
        basePath,
        patches,
        inversePatches
      ) {
        const { base_, copy_ } = state;
        each(state.assigned_, (key, assignedValue) => {
          const origValue = get(base_, key);
          const value = get(copy_, key);
          const op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;
          if (origValue === value && op === REPLACE) return;
          const path = basePath.concat(key);
          patches.push(
            op === REMOVE
              ? {
                  op,
                  path,
                }
              : {
                  op,
                  path,
                  value,
                }
          );
          inversePatches.push(
            op === ADD
              ? {
                  op: REMOVE,
                  path,
                }
              : op === REMOVE
                ? {
                    op: ADD,
                    path,
                    value: clonePatchValueIfNeeded(origValue),
                  }
                : {
                    op: REPLACE,
                    path,
                    value: clonePatchValueIfNeeded(origValue),
                  }
          );
        });
      }
      function generateSetPatches(state, basePath, patches, inversePatches) {
        let { base_, copy_ } = state;
        let i = 0;
        base_.forEach((value) => {
          if (!copy_.has(value)) {
            const path = basePath.concat([i]);
            patches.push({
              op: REMOVE,
              path,
              value,
            });
            inversePatches.unshift({
              op: ADD,
              path,
              value,
            });
          }
          i++;
        });
        i = 0;
        copy_.forEach((value) => {
          if (!base_.has(value)) {
            const path = basePath.concat([i]);
            patches.push({
              op: ADD,
              path,
              value,
            });
            inversePatches.unshift({
              op: REMOVE,
              path,
              value,
            });
          }
          i++;
        });
      }
      function generateReplacementPatches_(
        baseValue,
        replacement,
        patches,
        inversePatches
      ) {
        patches.push({
          op: REPLACE,
          path: [],
          value: replacement === NOTHING ? void 0 : replacement,
        });
        inversePatches.push({
          op: REPLACE,
          path: [],
          value: baseValue,
        });
      }
      function applyPatches_(draft, patches) {
        patches.forEach((patch) => {
          const { path, op } = patch;
          let base = draft;
          for (let i = 0; i < path.length - 1; i++) {
            const parentType = getArchtype(base);
            let p = path[i];
            if (typeof p !== 'string' && typeof p !== 'number') {
              p = '' + p;
            }
            if (
              (parentType === 0 /* Object */ || parentType === 1) /* Array */ &&
              (p === '__proto__' || p === 'constructor')
            )
              die(errorOffset + 3);
            if (typeof base === 'function' && p === 'prototype')
              die(errorOffset + 3);
            base = get(base, p);
            if (typeof base !== 'object') die(errorOffset + 2, path.join('/'));
          }
          const type = getArchtype(base);
          const value = deepClonePatchValue(patch.value);
          const key = path[path.length - 1];
          switch (op) {
            case REPLACE:
              switch (type) {
                case 2 /* Map */:
                  return base.set(key, value);
                case 3 /* Set */:
                  die(errorOffset);
                default:
                  return (base[key] = value);
              }
            case ADD:
              switch (type) {
                case 1 /* Array */:
                  return key === '-'
                    ? base.push(value)
                    : base.splice(key, 0, value);
                case 2 /* Map */:
                  return base.set(key, value);
                case 3 /* Set */:
                  return base.add(value);
                default:
                  return (base[key] = value);
              }
            case REMOVE:
              switch (type) {
                case 1 /* Array */:
                  return base.splice(key, 1);
                case 2 /* Map */:
                  return base.delete(key);
                case 3 /* Set */:
                  return base.delete(patch.value);
                default:
                  return delete base[key];
              }
            default:
              die(errorOffset + 1, op);
          }
        });
        return draft;
      }
      function deepClonePatchValue(obj) {
        if (!isDraftable(obj)) return obj;
        if (Array.isArray(obj)) return obj.map(deepClonePatchValue);
        if (isMap(obj))
          return new Map(
            Array.from(obj.entries()).map(([k, v]) => [
              k,
              deepClonePatchValue(v),
            ])
          );
        if (isSet(obj))
          return new Set(Array.from(obj).map(deepClonePatchValue));
        const cloned = Object.create(getPrototypeOf(obj));
        for (const key in obj) cloned[key] = deepClonePatchValue(obj[key]);
        if (has(obj, DRAFTABLE)) cloned[DRAFTABLE] = obj[DRAFTABLE];
        return cloned;
      }
      function clonePatchValueIfNeeded(obj) {
        if (isDraft(obj)) {
          return deepClonePatchValue(obj);
        } else return obj;
      }
      loadPlugin('Patches', {
        applyPatches_,
        generatePatches_,
        generateReplacementPatches_,
      });
    }
    // src/plugins/mapset.ts
    function enableMapSet() {
      class DraftMap extends Map {
        constructor(target, parent) {
          super();
          this[DRAFT_STATE] = {
            type_: 2 /* Map */,
            parent_: parent,
            scope_: parent ? parent.scope_ : getCurrentScope(),
            modified_: false,
            finalized_: false,
            copy_: void 0,
            assigned_: void 0,
            base_: target,
            draft_: this,
            isManual_: false,
            revoked_: false,
          };
        }
        get size() {
          return latest(this[DRAFT_STATE]).size;
        }
        has(key) {
          return latest(this[DRAFT_STATE]).has(key);
        }
        set(key, value) {
          const state = this[DRAFT_STATE];
          assertUnrevoked(state);
          if (!latest(state).has(key) || latest(state).get(key) !== value) {
            prepareMapCopy(state);
            markChanged(state);
            state.assigned_.set(key, true);
            state.copy_.set(key, value);
            state.assigned_.set(key, true);
          }
          return this;
        }
        delete(key) {
          if (!this.has(key)) {
            return false;
          }
          const state = this[DRAFT_STATE];
          assertUnrevoked(state);
          prepareMapCopy(state);
          markChanged(state);
          if (state.base_.has(key)) {
            state.assigned_.set(key, false);
          } else {
            state.assigned_.delete(key);
          }
          state.copy_.delete(key);
          return true;
        }
        clear() {
          const state = this[DRAFT_STATE];
          assertUnrevoked(state);
          if (latest(state).size) {
            prepareMapCopy(state);
            markChanged(state);
            state.assigned_ = /* @__PURE__ */ new Map();
            each(state.base_, (key) => {
              state.assigned_.set(key, false);
            });
            state.copy_.clear();
          }
        }
        forEach(cb, thisArg) {
          const state = this[DRAFT_STATE];
          latest(state).forEach((_value, key, _map) => {
            cb.call(thisArg, this.get(key), key, this);
          });
        }
        get(key) {
          const state = this[DRAFT_STATE];
          assertUnrevoked(state);
          const value = latest(state).get(key);
          if (state.finalized_ || !isDraftable(value)) {
            return value;
          }
          if (value !== state.base_.get(key)) {
            return value;
          }
          const draft = createProxy(value, state);
          prepareMapCopy(state);
          state.copy_.set(key, draft);
          return draft;
        }
        keys() {
          return latest(this[DRAFT_STATE]).keys();
        }
        values() {
          const iterator = this.keys();
          return {
            [Symbol.iterator]: () => this.values(),
            next: () => {
              const r = iterator.next();
              if (r.done) return r;
              const value = this.get(r.value);
              return {
                done: false,
                value,
              };
            },
          };
        }
        entries() {
          const iterator = this.keys();
          return {
            [Symbol.iterator]: () => this.entries(),
            next: () => {
              const r = iterator.next();
              if (r.done) return r;
              const value = this.get(r.value);
              return {
                done: false,
                value: [r.value, value],
              };
            },
          };
        }
        [(DRAFT_STATE, Symbol.iterator)]() {
          return this.entries();
        }
      }
      function proxyMap_(target, parent) {
        return new DraftMap(target, parent);
      }
      function prepareMapCopy(state) {
        if (!state.copy_) {
          state.assigned_ = /* @__PURE__ */ new Map();
          state.copy_ = new Map(state.base_);
        }
      }
      class DraftSet extends Set {
        constructor(target, parent) {
          super();
          this[DRAFT_STATE] = {
            type_: 3 /* Set */,
            parent_: parent,
            scope_: parent ? parent.scope_ : getCurrentScope(),
            modified_: false,
            finalized_: false,
            copy_: void 0,
            base_: target,
            draft_: this,
            drafts_: /* @__PURE__ */ new Map(),
            revoked_: false,
            isManual_: false,
          };
        }
        get size() {
          return latest(this[DRAFT_STATE]).size;
        }
        has(value) {
          const state = this[DRAFT_STATE];
          assertUnrevoked(state);
          if (!state.copy_) {
            return state.base_.has(value);
          }
          if (state.copy_.has(value)) return true;
          if (
            state.drafts_.has(value) &&
            state.copy_.has(state.drafts_.get(value))
          )
            return true;
          return false;
        }
        add(value) {
          const state = this[DRAFT_STATE];
          assertUnrevoked(state);
          if (!this.has(value)) {
            prepareSetCopy(state);
            markChanged(state);
            state.copy_.add(value);
          }
          return this;
        }
        delete(value) {
          if (!this.has(value)) {
            return false;
          }
          const state = this[DRAFT_STATE];
          assertUnrevoked(state);
          prepareSetCopy(state);
          markChanged(state);
          return (
            state.copy_.delete(value) ||
            (state.drafts_.has(value)
              ? state.copy_.delete(state.drafts_.get(value))
              : /* istanbul ignore next */ false)
          );
        }
        clear() {
          const state = this[DRAFT_STATE];
          assertUnrevoked(state);
          if (latest(state).size) {
            prepareSetCopy(state);
            markChanged(state);
            state.copy_.clear();
          }
        }
        values() {
          const state = this[DRAFT_STATE];
          assertUnrevoked(state);
          prepareSetCopy(state);
          return state.copy_.values();
        }
        entries() {
          const state = this[DRAFT_STATE];
          assertUnrevoked(state);
          prepareSetCopy(state);
          return state.copy_.entries();
        }
        keys() {
          return this.values();
        }
        [(DRAFT_STATE, Symbol.iterator)]() {
          return this.values();
        }
        forEach(cb, thisArg) {
          const iterator = this.values();
          let result = iterator.next();
          while (!result.done) {
            cb.call(thisArg, result.value, result.value, this);
            result = iterator.next();
          }
        }
      }
      function proxySet_(target, parent) {
        return new DraftSet(target, parent);
      }
      function prepareSetCopy(state) {
        if (!state.copy_) {
          state.copy_ = /* @__PURE__ */ new Set();
          state.base_.forEach((value) => {
            if (isDraftable(value)) {
              const draft = createProxy(value, state);
              state.drafts_.set(value, draft);
              state.copy_.add(draft);
            } else {
              state.copy_.add(value);
            }
          });
        }
      }
      function assertUnrevoked(state) {
        if (state.revoked_) die(3, JSON.stringify(latest(state)));
      }
      loadPlugin('MapSet', {
        proxyMap_,
        proxySet_,
      });
    }
    // src/immer.ts
    var immer = new Immer2();
    var produce = immer.produce;
    var produceWithPatches = immer.produceWithPatches.bind(immer);
    var setAutoFreeze = immer.setAutoFreeze.bind(immer);
    var setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer);
    var applyPatches = immer.applyPatches.bind(immer);
    var createDraft = immer.createDraft.bind(immer);
    var finishDraft = immer.finishDraft.bind(immer);
    function castDraft(value) {
      return value;
    }
    function castImmutable(value) {
      return value;
    }
    //# sourceMappingURL=immer.mjs.map
  },
  '[project]/node_modules/reselect/dist/reselect.mjs [app-rsc] (ecmascript)': (
    __turbopack_context__
  ) => {
    'use strict';

    // src/devModeChecks/identityFunctionCheck.ts
    __turbopack_context__.s({
      createSelector: () => createSelector,
      createSelectorCreator: () => createSelectorCreator,
      createStructuredSelector: () => createStructuredSelector,
      lruMemoize: () => lruMemoize,
      referenceEqualityCheck: () => referenceEqualityCheck,
      setGlobalDevModeChecks: () => setGlobalDevModeChecks,
      unstable_autotrackMemoize: () => autotrackMemoize,
      weakMapMemoize: () => weakMapMemoize,
    });
    var runIdentityFunctionCheck = (
      resultFunc,
      inputSelectorsResults,
      outputSelectorResult
    ) => {
      if (
        inputSelectorsResults.length === 1 &&
        inputSelectorsResults[0] === outputSelectorResult
      ) {
        let isInputSameAsOutput = false;
        try {
          const emptyObject = {};
          if (resultFunc(emptyObject) === emptyObject)
            isInputSameAsOutput = true;
        } catch {}
        if (isInputSameAsOutput) {
          let stack = void 0;
          try {
            throw new Error();
          } catch (e) {
            ({ stack } = e);
          }
          console.warn(
            'The result function returned its own inputs without modification. e.g\n`createSelector([state => state.todos], todos => todos)`\nThis could lead to inefficient memoization and unnecessary re-renders.\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.',
            {
              stack,
            }
          );
        }
      }
    };
    // src/devModeChecks/inputStabilityCheck.ts
    var runInputStabilityCheck = (
      inputSelectorResultsObject,
      options,
      inputSelectorArgs
    ) => {
      const { memoize, memoizeOptions } = options;
      const { inputSelectorResults, inputSelectorResultsCopy } =
        inputSelectorResultsObject;
      const createAnEmptyObject = memoize(() => ({}), ...memoizeOptions);
      const areInputSelectorResultsEqual =
        createAnEmptyObject.apply(null, inputSelectorResults) ===
        createAnEmptyObject.apply(null, inputSelectorResultsCopy);
      if (!areInputSelectorResultsEqual) {
        let stack = void 0;
        try {
          throw new Error();
        } catch (e) {
          ({ stack } = e);
        }
        console.warn(
          'An input selector returned a different result when passed same arguments.\nThis means your output selector will likely run more frequently than intended.\nAvoid returning a new reference inside your input selector, e.g.\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`',
          {
            arguments: inputSelectorArgs,
            firstInputs: inputSelectorResults,
            secondInputs: inputSelectorResultsCopy,
            stack,
          }
        );
      }
    };
    // src/devModeChecks/setGlobalDevModeChecks.ts
    var globalDevModeChecks = {
      inputStabilityCheck: 'once',
      identityFunctionCheck: 'once',
    };
    var setGlobalDevModeChecks = (devModeChecks) => {
      Object.assign(globalDevModeChecks, devModeChecks);
    };
    // src/utils.ts
    var NOT_FOUND = /* @__PURE__ */ Symbol('NOT_FOUND');
    function assertIsFunction(
      func,
      errorMessage = `expected a function, instead received ${typeof func}`
    ) {
      if (typeof func !== 'function') {
        throw new TypeError(errorMessage);
      }
    }
    function assertIsObject(
      object,
      errorMessage = `expected an object, instead received ${typeof object}`
    ) {
      if (typeof object !== 'object') {
        throw new TypeError(errorMessage);
      }
    }
    function assertIsArrayOfFunctions(
      array,
      errorMessage = `expected all items to be functions, instead received the following types: `
    ) {
      if (!array.every((item) => typeof item === 'function')) {
        const itemTypes = array
          .map((item) =>
            typeof item === 'function'
              ? `function ${item.name || 'unnamed'}()`
              : typeof item
          )
          .join(', ');
        throw new TypeError(`${errorMessage}[${itemTypes}]`);
      }
    }
    var ensureIsArray = (item) => {
      return Array.isArray(item) ? item : [item];
    };
    function getDependencies(createSelectorArgs) {
      const dependencies = Array.isArray(createSelectorArgs[0])
        ? createSelectorArgs[0]
        : createSelectorArgs;
      assertIsArrayOfFunctions(
        dependencies,
        `createSelector expects all input-selectors to be functions, but received the following types: `
      );
      return dependencies;
    }
    function collectInputSelectorResults(dependencies, inputSelectorArgs) {
      const inputSelectorResults = [];
      const { length } = dependencies;
      for (let i = 0; i < length; i++) {
        inputSelectorResults.push(
          dependencies[i].apply(null, inputSelectorArgs)
        );
      }
      return inputSelectorResults;
    }
    var getDevModeChecksExecutionInfo = (firstRun, devModeChecks) => {
      const { identityFunctionCheck, inputStabilityCheck } = {
        ...globalDevModeChecks,
        ...devModeChecks,
      };
      return {
        identityFunctionCheck: {
          shouldRun:
            identityFunctionCheck === 'always' ||
            (identityFunctionCheck === 'once' && firstRun),
          run: runIdentityFunctionCheck,
        },
        inputStabilityCheck: {
          shouldRun:
            inputStabilityCheck === 'always' ||
            (inputStabilityCheck === 'once' && firstRun),
          run: runInputStabilityCheck,
        },
      };
    };
    // src/autotrackMemoize/autotracking.ts
    var $REVISION = 0;
    var CURRENT_TRACKER = null;
    var Cell = class {
      revision = $REVISION;
      _value;
      _lastValue;
      _isEqual = tripleEq;
      constructor(initialValue, isEqual = tripleEq) {
        this._value = this._lastValue = initialValue;
        this._isEqual = isEqual;
      }
      // Whenever a storage value is read, it'll add itself to the current tracker if
      // one exists, entangling its state with that cache.
      get value() {
        CURRENT_TRACKER?.add(this);
        return this._value;
      }
      // Whenever a storage value is updated, we bump the global revision clock,
      // assign the revision for this storage to the new value, _and_ we schedule a
      // rerender. This is important, and it's what makes autotracking  _pull_
      // based. We don't actively tell the caches which depend on the storage that
      // anything has happened. Instead, we recompute the caches when needed.
      set value(newValue) {
        if (this.value === newValue) return;
        this._value = newValue;
        this.revision = ++$REVISION;
      }
    };
    function tripleEq(a, b) {
      return a === b;
    }
    var TrackingCache = class {
      _cachedValue;
      _cachedRevision = -1;
      _deps = [];
      hits = 0;
      fn;
      constructor(fn) {
        this.fn = fn;
      }
      clear() {
        this._cachedValue = void 0;
        this._cachedRevision = -1;
        this._deps = [];
        this.hits = 0;
      }
      get value() {
        if (this.revision > this._cachedRevision) {
          const { fn } = this;
          const currentTracker = /* @__PURE__ */ new Set();
          const prevTracker = CURRENT_TRACKER;
          CURRENT_TRACKER = currentTracker;
          this._cachedValue = fn();
          CURRENT_TRACKER = prevTracker;
          this.hits++;
          this._deps = Array.from(currentTracker);
          this._cachedRevision = this.revision;
        }
        CURRENT_TRACKER?.add(this);
        return this._cachedValue;
      }
      get revision() {
        return Math.max(...this._deps.map((d) => d.revision), 0);
      }
    };
    function getValue(cell) {
      if (!(cell instanceof Cell)) {
        console.warn('Not a valid cell! ', cell);
      }
      return cell.value;
    }
    function setValue(storage, value) {
      if (!(storage instanceof Cell)) {
        throw new TypeError(
          'setValue must be passed a tracked store created with `createStorage`.'
        );
      }
      storage.value = storage._lastValue = value;
    }
    function createCell(initialValue, isEqual = tripleEq) {
      return new Cell(initialValue, isEqual);
    }
    function createCache(fn) {
      assertIsFunction(
        fn,
        'the first parameter to `createCache` must be a function'
      );
      return new TrackingCache(fn);
    }
    // src/autotrackMemoize/tracking.ts
    var neverEq = (a, b) => false;
    function createTag() {
      return createCell(null, neverEq);
    }
    function dirtyTag(tag, value) {
      setValue(tag, value);
    }
    var consumeCollection = (node) => {
      let tag = node.collectionTag;
      if (tag === null) {
        tag = node.collectionTag = createTag();
      }
      getValue(tag);
    };
    var dirtyCollection = (node) => {
      const tag = node.collectionTag;
      if (tag !== null) {
        dirtyTag(tag, null);
      }
    };
    // src/autotrackMemoize/proxy.ts
    var REDUX_PROXY_LABEL = Symbol();
    var nextId = 0;
    var proto = Object.getPrototypeOf({});
    var ObjectTreeNode = class {
      constructor(value) {
        this.value = value;
        this.value = value;
        this.tag.value = value;
      }
      proxy = new Proxy(this, objectProxyHandler);
      tag = createTag();
      tags = {};
      children = {};
      collectionTag = null;
      id = nextId++;
    };
    var objectProxyHandler = {
      get(node, key) {
        function calculateResult() {
          const { value } = node;
          const childValue = Reflect.get(value, key);
          if (typeof key === 'symbol') {
            return childValue;
          }
          if (key in proto) {
            return childValue;
          }
          if (typeof childValue === 'object' && childValue !== null) {
            let childNode = node.children[key];
            if (childNode === void 0) {
              childNode = node.children[key] = createNode(childValue);
            }
            if (childNode.tag) {
              getValue(childNode.tag);
            }
            return childNode.proxy;
          } else {
            let tag = node.tags[key];
            if (tag === void 0) {
              tag = node.tags[key] = createTag();
              tag.value = childValue;
            }
            getValue(tag);
            return childValue;
          }
        }
        const res = calculateResult();
        return res;
      },
      ownKeys(node) {
        consumeCollection(node);
        return Reflect.ownKeys(node.value);
      },
      getOwnPropertyDescriptor(node, prop) {
        return Reflect.getOwnPropertyDescriptor(node.value, prop);
      },
      has(node, prop) {
        return Reflect.has(node.value, prop);
      },
    };
    var ArrayTreeNode = class {
      constructor(value) {
        this.value = value;
        this.value = value;
        this.tag.value = value;
      }
      proxy = new Proxy([this], arrayProxyHandler);
      tag = createTag();
      tags = {};
      children = {};
      collectionTag = null;
      id = nextId++;
    };
    var arrayProxyHandler = {
      get([node], key) {
        if (key === 'length') {
          consumeCollection(node);
        }
        return objectProxyHandler.get(node, key);
      },
      ownKeys([node]) {
        return objectProxyHandler.ownKeys(node);
      },
      getOwnPropertyDescriptor([node], prop) {
        return objectProxyHandler.getOwnPropertyDescriptor(node, prop);
      },
      has([node], prop) {
        return objectProxyHandler.has(node, prop);
      },
    };
    function createNode(value) {
      if (Array.isArray(value)) {
        return new ArrayTreeNode(value);
      }
      return new ObjectTreeNode(value);
    }
    function updateNode(node, newValue) {
      const { value, tags, children } = node;
      node.value = newValue;
      if (
        Array.isArray(value) &&
        Array.isArray(newValue) &&
        value.length !== newValue.length
      ) {
        dirtyCollection(node);
      } else {
        if (value !== newValue) {
          let oldKeysSize = 0;
          let newKeysSize = 0;
          let anyKeysAdded = false;
          for (const _key in value) {
            oldKeysSize++;
          }
          for (const key in newValue) {
            newKeysSize++;
            if (!(key in value)) {
              anyKeysAdded = true;
              break;
            }
          }
          const isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize;
          if (isDifferent) {
            dirtyCollection(node);
          }
        }
      }
      for (const key in tags) {
        const childValue = value[key];
        const newChildValue = newValue[key];
        if (childValue !== newChildValue) {
          dirtyCollection(node);
          dirtyTag(tags[key], newChildValue);
        }
        if (typeof newChildValue === 'object' && newChildValue !== null) {
          delete tags[key];
        }
      }
      for (const key in children) {
        const childNode = children[key];
        const newChildValue = newValue[key];
        const childValue = childNode.value;
        if (childValue === newChildValue) {
          continue;
        } else if (
          typeof newChildValue === 'object' &&
          newChildValue !== null
        ) {
          updateNode(childNode, newChildValue);
        } else {
          deleteNode(childNode);
          delete children[key];
        }
      }
    }
    function deleteNode(node) {
      if (node.tag) {
        dirtyTag(node.tag, null);
      }
      dirtyCollection(node);
      for (const key in node.tags) {
        dirtyTag(node.tags[key], null);
      }
      for (const key in node.children) {
        deleteNode(node.children[key]);
      }
    }
    // src/lruMemoize.ts
    function createSingletonCache(equals) {
      let entry;
      return {
        get(key) {
          if (entry && equals(entry.key, key)) {
            return entry.value;
          }
          return NOT_FOUND;
        },
        put(key, value) {
          entry = {
            key,
            value,
          };
        },
        getEntries() {
          return entry ? [entry] : [];
        },
        clear() {
          entry = void 0;
        },
      };
    }
    function createLruCache(maxSize, equals) {
      let entries = [];
      function get(key) {
        const cacheIndex = entries.findIndex((entry) => equals(key, entry.key));
        if (cacheIndex > -1) {
          const entry = entries[cacheIndex];
          if (cacheIndex > 0) {
            entries.splice(cacheIndex, 1);
            entries.unshift(entry);
          }
          return entry.value;
        }
        return NOT_FOUND;
      }
      function put(key, value) {
        if (get(key) === NOT_FOUND) {
          entries.unshift({
            key,
            value,
          });
          if (entries.length > maxSize) {
            entries.pop();
          }
        }
      }
      function getEntries() {
        return entries;
      }
      function clear() {
        entries = [];
      }
      return {
        get,
        put,
        getEntries,
        clear,
      };
    }
    var referenceEqualityCheck = (a, b) => a === b;
    function createCacheKeyComparator(equalityCheck) {
      return function areArgumentsShallowlyEqual(prev, next) {
        if (prev === null || next === null || prev.length !== next.length) {
          return false;
        }
        const { length } = prev;
        for (let i = 0; i < length; i++) {
          if (!equalityCheck(prev[i], next[i])) {
            return false;
          }
        }
        return true;
      };
    }
    function lruMemoize(func, equalityCheckOrOptions) {
      const providedOptions =
        typeof equalityCheckOrOptions === 'object'
          ? equalityCheckOrOptions
          : {
              equalityCheck: equalityCheckOrOptions,
            };
      const {
        equalityCheck = referenceEqualityCheck,
        maxSize = 1,
        resultEqualityCheck,
      } = providedOptions;
      const comparator = createCacheKeyComparator(equalityCheck);
      let resultsCount = 0;
      const cache =
        maxSize <= 1
          ? createSingletonCache(comparator)
          : createLruCache(maxSize, comparator);
      function memoized() {
        let value = cache.get(arguments);
        if (value === NOT_FOUND) {
          value = func.apply(null, arguments);
          resultsCount++;
          if (resultEqualityCheck) {
            const entries = cache.getEntries();
            const matchingEntry = entries.find((entry) =>
              resultEqualityCheck(entry.value, value)
            );
            if (matchingEntry) {
              value = matchingEntry.value;
              resultsCount !== 0 && resultsCount--;
            }
          }
          cache.put(arguments, value);
        }
        return value;
      }
      memoized.clearCache = () => {
        cache.clear();
        memoized.resetResultsCount();
      };
      memoized.resultsCount = () => resultsCount;
      memoized.resetResultsCount = () => {
        resultsCount = 0;
      };
      return memoized;
    }
    // src/autotrackMemoize/autotrackMemoize.ts
    function autotrackMemoize(func) {
      const node = createNode([]);
      let lastArgs = null;
      const shallowEqual = createCacheKeyComparator(referenceEqualityCheck);
      const cache = createCache(() => {
        const res = func.apply(null, node.proxy);
        return res;
      });
      function memoized() {
        if (!shallowEqual(lastArgs, arguments)) {
          updateNode(node, arguments);
          lastArgs = arguments;
        }
        return cache.value;
      }
      memoized.clearCache = () => {
        return cache.clear();
      };
      return memoized;
    }
    // src/weakMapMemoize.ts
    var StrongRef = class {
      constructor(value) {
        this.value = value;
      }
      deref() {
        return this.value;
      }
    };
    var Ref = typeof WeakRef !== 'undefined' ? WeakRef : StrongRef;
    var UNTERMINATED = 0;
    var TERMINATED = 1;
    function createCacheNode() {
      return {
        s: UNTERMINATED,
        v: void 0,
        o: null,
        p: null,
      };
    }
    function weakMapMemoize(func, options = {}) {
      let fnNode = createCacheNode();
      const { resultEqualityCheck } = options;
      let lastResult;
      let resultsCount = 0;
      function memoized() {
        let cacheNode = fnNode;
        const { length } = arguments;
        for (let i = 0, l = length; i < l; i++) {
          const arg = arguments[i];
          if (
            typeof arg === 'function' ||
            (typeof arg === 'object' && arg !== null)
          ) {
            let objectCache = cacheNode.o;
            if (objectCache === null) {
              cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
            }
            const objectNode = objectCache.get(arg);
            if (objectNode === void 0) {
              cacheNode = createCacheNode();
              objectCache.set(arg, cacheNode);
            } else {
              cacheNode = objectNode;
            }
          } else {
            let primitiveCache = cacheNode.p;
            if (primitiveCache === null) {
              cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
            }
            const primitiveNode = primitiveCache.get(arg);
            if (primitiveNode === void 0) {
              cacheNode = createCacheNode();
              primitiveCache.set(arg, cacheNode);
            } else {
              cacheNode = primitiveNode;
            }
          }
        }
        const terminatedNode = cacheNode;
        let result;
        if (cacheNode.s === TERMINATED) {
          result = cacheNode.v;
        } else {
          result = func.apply(null, arguments);
          resultsCount++;
          if (resultEqualityCheck) {
            const lastResultValue = lastResult?.deref?.() ?? lastResult;
            if (
              lastResultValue != null &&
              resultEqualityCheck(lastResultValue, result)
            ) {
              result = lastResultValue;
              resultsCount !== 0 && resultsCount--;
            }
            const needsWeakRef =
              (typeof result === 'object' && result !== null) ||
              typeof result === 'function';
            lastResult = needsWeakRef ? new Ref(result) : result;
          }
        }
        terminatedNode.s = TERMINATED;
        terminatedNode.v = result;
        return result;
      }
      memoized.clearCache = () => {
        fnNode = createCacheNode();
        memoized.resetResultsCount();
      };
      memoized.resultsCount = () => resultsCount;
      memoized.resetResultsCount = () => {
        resultsCount = 0;
      };
      return memoized;
    }
    // src/createSelectorCreator.ts
    function createSelectorCreator(
      memoizeOrOptions,
      ...memoizeOptionsFromArgs
    ) {
      const createSelectorCreatorOptions =
        typeof memoizeOrOptions === 'function'
          ? {
              memoize: memoizeOrOptions,
              memoizeOptions: memoizeOptionsFromArgs,
            }
          : memoizeOrOptions;
      const createSelector2 = (...createSelectorArgs) => {
        let recomputations = 0;
        let dependencyRecomputations = 0;
        let lastResult;
        let directlyPassedOptions = {};
        let resultFunc = createSelectorArgs.pop();
        if (typeof resultFunc === 'object') {
          directlyPassedOptions = resultFunc;
          resultFunc = createSelectorArgs.pop();
        }
        assertIsFunction(
          resultFunc,
          `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`
        );
        const combinedOptions = {
          ...createSelectorCreatorOptions,
          ...directlyPassedOptions,
        };
        const {
          memoize,
          memoizeOptions = [],
          argsMemoize = weakMapMemoize,
          argsMemoizeOptions = [],
          devModeChecks = {},
        } = combinedOptions;
        const finalMemoizeOptions = ensureIsArray(memoizeOptions);
        const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);
        const dependencies = getDependencies(createSelectorArgs);
        const memoizedResultFunc = memoize(
          function recomputationWrapper() {
            recomputations++;
            return resultFunc.apply(null, arguments);
          },
          ...finalMemoizeOptions
        );
        let firstRun = true;
        const selector = argsMemoize(
          function dependenciesChecker() {
            dependencyRecomputations++;
            const inputSelectorResults = collectInputSelectorResults(
              dependencies,
              arguments
            );
            lastResult = memoizedResultFunc.apply(null, inputSelectorResults);
            if (('TURBOPACK compile-time truthy', 1)) {
              const { identityFunctionCheck, inputStabilityCheck } =
                getDevModeChecksExecutionInfo(firstRun, devModeChecks);
              if (identityFunctionCheck.shouldRun) {
                identityFunctionCheck.run(
                  resultFunc,
                  inputSelectorResults,
                  lastResult
                );
              }
              if (inputStabilityCheck.shouldRun) {
                const inputSelectorResultsCopy = collectInputSelectorResults(
                  dependencies,
                  arguments
                );
                inputStabilityCheck.run(
                  {
                    inputSelectorResults,
                    inputSelectorResultsCopy,
                  },
                  {
                    memoize,
                    memoizeOptions: finalMemoizeOptions,
                  },
                  arguments
                );
              }
              if (firstRun) firstRun = false;
            }
            return lastResult;
          },
          ...finalArgsMemoizeOptions
        );
        return Object.assign(selector, {
          resultFunc,
          memoizedResultFunc,
          dependencies,
          dependencyRecomputations: () => dependencyRecomputations,
          resetDependencyRecomputations: () => {
            dependencyRecomputations = 0;
          },
          lastResult: () => lastResult,
          recomputations: () => recomputations,
          resetRecomputations: () => {
            recomputations = 0;
          },
          memoize,
          argsMemoize,
        });
      };
      Object.assign(createSelector2, {
        withTypes: () => createSelector2,
      });
      return createSelector2;
    }
    var createSelector = /* @__PURE__ */ createSelectorCreator(weakMapMemoize);
    // src/createStructuredSelector.ts
    var createStructuredSelector = Object.assign(
      (inputSelectorsObject, selectorCreator = createSelector) => {
        assertIsObject(
          inputSelectorsObject,
          `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`
        );
        const inputSelectorKeys = Object.keys(inputSelectorsObject);
        const dependencies = inputSelectorKeys.map(
          (key) => inputSelectorsObject[key]
        );
        const structuredSelector = selectorCreator(
          dependencies,
          (...inputSelectorResults) => {
            return inputSelectorResults.reduce((composition, value, index) => {
              composition[inputSelectorKeys[index]] = value;
              return composition;
            }, {});
          }
        );
        return structuredSelector;
      },
      {
        withTypes: () => createStructuredSelector,
      }
    );
    //# sourceMappingURL=reselect.mjs.map
  },
  '[project]/node_modules/redux/dist/redux.mjs [app-rsc] (ecmascript)': (
    __turbopack_context__
  ) => {
    'use strict';

    // src/utils/formatProdErrorMessage.ts
    __turbopack_context__.s({
      __DO_NOT_USE__ActionTypes: () => actionTypes_default,
      applyMiddleware: () => applyMiddleware,
      bindActionCreators: () => bindActionCreators,
      combineReducers: () => combineReducers,
      compose: () => compose,
      createStore: () => createStore,
      isAction: () => isAction,
      isPlainObject: () => isPlainObject,
      legacy_createStore: () => legacy_createStore,
    });
    function formatProdErrorMessage(code) {
      return `Minified Redux error #${code}; visit https://redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    }
    // src/utils/symbol-observable.ts
    var $$observable = /* @__PURE__ */ (() =>
      (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();
    var symbol_observable_default = $$observable;
    // src/utils/actionTypes.ts
    var randomString = () =>
      Math.random().toString(36).substring(7).split('').join('.');
    var ActionTypes = {
      INIT: `@@redux/INIT${/* @__PURE__ */ randomString()}`,
      REPLACE: `@@redux/REPLACE${/* @__PURE__ */ randomString()}`,
      PROBE_UNKNOWN_ACTION: () =>
        `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`,
    };
    var actionTypes_default = ActionTypes;
    // src/utils/isPlainObject.ts
    function isPlainObject(obj) {
      if (typeof obj !== 'object' || obj === null) return false;
      let proto = obj;
      while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
      }
      return (
        Object.getPrototypeOf(obj) === proto ||
        Object.getPrototypeOf(obj) === null
      );
    }
    // src/utils/kindOf.ts
    function miniKindOf(val) {
      if (val === void 0) return 'undefined';
      if (val === null) return 'null';
      const type = typeof val;
      switch (type) {
        case 'boolean':
        case 'string':
        case 'number':
        case 'symbol':
        case 'function': {
          return type;
        }
      }
      if (Array.isArray(val)) return 'array';
      if (isDate(val)) return 'date';
      if (isError(val)) return 'error';
      const constructorName = ctorName(val);
      switch (constructorName) {
        case 'Symbol':
        case 'Promise':
        case 'WeakMap':
        case 'WeakSet':
        case 'Map':
        case 'Set':
          return constructorName;
      }
      return Object.prototype.toString
        .call(val)
        .slice(8, -1)
        .toLowerCase()
        .replace(/\s/g, '');
    }
    function ctorName(val) {
      return typeof val.constructor === 'function'
        ? val.constructor.name
        : null;
    }
    function isError(val) {
      return (
        val instanceof Error ||
        (typeof val.message === 'string' &&
          val.constructor &&
          typeof val.constructor.stackTraceLimit === 'number')
      );
    }
    function isDate(val) {
      if (val instanceof Date) return true;
      return (
        typeof val.toDateString === 'function' &&
        typeof val.getDate === 'function' &&
        typeof val.setDate === 'function'
      );
    }
    function kindOf(val) {
      let typeOfVal = typeof val;
      if (('TURBOPACK compile-time truthy', 1)) {
        typeOfVal = miniKindOf(val);
      }
      return typeOfVal;
    }
    // src/createStore.ts
    function createStore(reducer, preloadedState, enhancer) {
      if (typeof reducer !== 'function') {
        throw new Error(
          ('TURBOPACK compile-time falsy', 0)
            ? 'TURBOPACK unreachable'
            : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer)}'`
        );
      }
      if (
        (typeof preloadedState === 'function' &&
          typeof enhancer === 'function') ||
        (typeof enhancer === 'function' && typeof arguments[3] === 'function')
      ) {
        throw new Error(
          ('TURBOPACK compile-time falsy', 0)
            ? 'TURBOPACK unreachable'
            : 'It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.'
        );
      }
      if (
        typeof preloadedState === 'function' &&
        typeof enhancer === 'undefined'
      ) {
        enhancer = preloadedState;
        preloadedState = void 0;
      }
      if (typeof enhancer !== 'undefined') {
        if (typeof enhancer !== 'function') {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`
          );
        }
        return enhancer(createStore)(reducer, preloadedState);
      }
      let currentReducer = reducer;
      let currentState = preloadedState;
      let currentListeners = /* @__PURE__ */ new Map();
      let nextListeners = currentListeners;
      let listenerIdCounter = 0;
      let isDispatching = false;
      function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
          nextListeners = /* @__PURE__ */ new Map();
          currentListeners.forEach((listener, key) => {
            nextListeners.set(key, listener);
          });
        }
      }
      function getState() {
        if (isDispatching) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.'
          );
        }
        return currentState;
      }
      function subscribe(listener) {
        if (typeof listener !== 'function') {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : `Expected the listener to be a function. Instead, received: '${kindOf(listener)}'`
          );
        }
        if (isDispatching) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.'
          );
        }
        let isSubscribed = true;
        ensureCanMutateNextListeners();
        const listenerId = listenerIdCounter++;
        nextListeners.set(listenerId, listener);
        return function unsubscribe() {
          if (!isSubscribed) {
            return;
          }
          if (isDispatching) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.'
            );
          }
          isSubscribed = false;
          ensureCanMutateNextListeners();
          nextListeners.delete(listenerId);
          currentListeners = null;
        };
      }
      function dispatch(action) {
        if (!isPlainObject(action)) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`
          );
        }
        if (typeof action.type === 'undefined') {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.'
          );
        }
        if (typeof action.type !== 'string') {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : `Action "type" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`
          );
        }
        if (isDispatching) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'Reducers may not dispatch actions.'
          );
        }
        try {
          isDispatching = true;
          currentState = currentReducer(currentState, action);
        } finally {
          isDispatching = false;
        }
        const listeners = (currentListeners = nextListeners);
        listeners.forEach((listener) => {
          listener();
        });
        return action;
      }
      function replaceReducer(nextReducer) {
        if (typeof nextReducer !== 'function') {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`
          );
        }
        currentReducer = nextReducer;
        dispatch({
          type: actionTypes_default.REPLACE,
        });
      }
      function observable() {
        const outerSubscribe = subscribe;
        return {
          /**
           * The minimal observable subscription method.
           * @param observer Any object that can be used as an observer.
           * The observer object should have a `next` method.
           * @returns An object with an `unsubscribe` method that can
           * be used to unsubscribe the observable from the store, and prevent further
           * emission of values from the observable.
           */ subscribe(observer) {
            if (typeof observer !== 'object' || observer === null) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`
              );
            }
            function observeState() {
              const observerAsObserver = observer;
              if (observerAsObserver.next) {
                observerAsObserver.next(getState());
              }
            }
            observeState();
            const unsubscribe = outerSubscribe(observeState);
            return {
              unsubscribe,
            };
          },
          [symbol_observable_default]() {
            return this;
          },
        };
      }
      dispatch({
        type: actionTypes_default.INIT,
      });
      const store = {
        dispatch,
        subscribe,
        getState,
        replaceReducer,
        [symbol_observable_default]: observable,
      };
      return store;
    }
    function legacy_createStore(reducer, preloadedState, enhancer) {
      return createStore(reducer, preloadedState, enhancer);
    }
    // src/utils/warning.ts
    function warning(message) {
      if (
        typeof console !== 'undefined' &&
        typeof console.error === 'function'
      ) {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (e) {}
    }
    // src/combineReducers.ts
    function getUnexpectedStateShapeWarningMessage(
      inputState,
      reducers,
      action,
      unexpectedKeyCache
    ) {
      const reducerKeys = Object.keys(reducers);
      const argumentName =
        action && action.type === actionTypes_default.INIT
          ? 'preloadedState argument passed to createStore'
          : 'previous state received by the reducer';
      if (reducerKeys.length === 0) {
        return 'Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.';
      }
      if (!isPlainObject(inputState)) {
        return `The ${argumentName} has unexpected type of "${kindOf(inputState)}". Expected argument to be an object with the following keys: "${reducerKeys.join('", "')}"`;
      }
      const unexpectedKeys = Object.keys(inputState).filter(
        (key) => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]
      );
      unexpectedKeys.forEach((key) => {
        unexpectedKeyCache[key] = true;
      });
      if (action && action.type === actionTypes_default.REPLACE) return;
      if (unexpectedKeys.length > 0) {
        return `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} "${unexpectedKeys.join('", "')}" found in ${argumentName}. Expected to find one of the known reducer keys instead: "${reducerKeys.join('", "')}". Unexpected keys will be ignored.`;
      }
    }
    function assertReducerShape(reducers) {
      Object.keys(reducers).forEach((key) => {
        const reducer = reducers[key];
        const initialState = reducer(void 0, {
          type: actionTypes_default.INIT,
        });
        if (typeof initialState === 'undefined') {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : `The slice reducer for key "${key}" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`
          );
        }
        if (
          typeof reducer(void 0, {
            type: actionTypes_default.PROBE_UNKNOWN_ACTION(),
          }) === 'undefined'
        ) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : `The slice reducer for key "${key}" returned undefined when probed with a random type. Don't try to handle '${actionTypes_default.INIT}' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`
          );
        }
      });
    }
    function combineReducers(reducers) {
      const reducerKeys = Object.keys(reducers);
      const finalReducers = {};
      for (let i = 0; i < reducerKeys.length; i++) {
        const key = reducerKeys[i];
        if (('TURBOPACK compile-time truthy', 1)) {
          if (typeof reducers[key] === 'undefined') {
            warning(`No reducer provided for key "${key}"`);
          }
        }
        if (typeof reducers[key] === 'function') {
          finalReducers[key] = reducers[key];
        }
      }
      const finalReducerKeys = Object.keys(finalReducers);
      let unexpectedKeyCache;
      if (('TURBOPACK compile-time value', 'development') !== 'production') {
        unexpectedKeyCache = {};
      }
      let shapeAssertionError;
      try {
        assertReducerShape(finalReducers);
      } catch (e) {
        shapeAssertionError = e;
      }
      return function combination(state = {}, action) {
        if (shapeAssertionError) {
          throw shapeAssertionError;
        }
        if (('TURBOPACK compile-time truthy', 1)) {
          const warningMessage = getUnexpectedStateShapeWarningMessage(
            state,
            finalReducers,
            action,
            unexpectedKeyCache
          );
          if (warningMessage) {
            warning(warningMessage);
          }
        }
        let hasChanged = false;
        const nextState = {};
        for (let i = 0; i < finalReducerKeys.length; i++) {
          const key = finalReducerKeys[i];
          const reducer = finalReducers[key];
          const previousStateForKey = state[key];
          const nextStateForKey = reducer(previousStateForKey, action);
          if (typeof nextStateForKey === 'undefined') {
            const actionType = action && action.type;
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : `When called with an action of type ${actionType ? `"${String(actionType)}"` : '(unknown type)'}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`
            );
          }
          nextState[key] = nextStateForKey;
          hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged =
          hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
      };
    }
    // src/bindActionCreators.ts
    function bindActionCreator(actionCreator, dispatch) {
      return function (...args) {
        return dispatch(actionCreator.apply(this, args));
      };
    }
    function bindActionCreators(actionCreators, dispatch) {
      if (typeof actionCreators === 'function') {
        return bindActionCreator(actionCreators, dispatch);
      }
      if (typeof actionCreators !== 'object' || actionCreators === null) {
        throw new Error(
          ('TURBOPACK compile-time falsy', 0)
            ? 'TURBOPACK unreachable'
            : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`
        );
      }
      const boundActionCreators = {};
      for (const key in actionCreators) {
        const actionCreator = actionCreators[key];
        if (typeof actionCreator === 'function') {
          boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
        }
      }
      return boundActionCreators;
    }
    // src/compose.ts
    function compose(...funcs) {
      if (funcs.length === 0) {
        return (arg) => arg;
      }
      if (funcs.length === 1) {
        return funcs[0];
      }
      return funcs.reduce(
        (a, b) =>
          (...args) =>
            a(b(...args))
      );
    }
    // src/applyMiddleware.ts
    function applyMiddleware(...middlewares) {
      return (createStore2) => (reducer, preloadedState) => {
        const store = createStore2(reducer, preloadedState);
        let dispatch = () => {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.'
          );
        };
        const middlewareAPI = {
          getState: store.getState,
          dispatch: (action, ...args) => dispatch(action, ...args),
        };
        const chain = middlewares.map((middleware) =>
          middleware(middlewareAPI)
        );
        dispatch = compose(...chain)(store.dispatch);
        return {
          ...store,
          dispatch,
        };
      };
    }
    // src/utils/isAction.ts
    function isAction(action) {
      return (
        isPlainObject(action) &&
        'type' in action &&
        typeof action.type === 'string'
      );
    }
    //# sourceMappingURL=redux.mjs.map
  },
  '[project]/node_modules/redux-thunk/dist/redux-thunk.mjs [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      // src/index.ts
      __turbopack_context__.s({
        thunk: () => thunk,
        withExtraArgument: () => withExtraArgument,
      });
      function createThunkMiddleware(extraArgument) {
        const middleware =
          ({ dispatch, getState }) =>
          (next) =>
          (action) => {
            if (typeof action === 'function') {
              return action(dispatch, getState, extraArgument);
            }
            return next(action);
          };
        return middleware;
      }
      var thunk = createThunkMiddleware();
      var withExtraArgument = createThunkMiddleware;
    },
  '[project]/node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs [app-rsc] (ecmascript) <locals>':
    (__turbopack_context__) => {
      'use strict';

      // src/index.ts
      __turbopack_context__.s({
        ReducerType: () => ReducerType,
        SHOULD_AUTOBATCH: () => SHOULD_AUTOBATCH,
        TaskAbortError: () => TaskAbortError,
        Tuple: () => Tuple,
        addListener: () => addListener,
        asyncThunkCreator: () => asyncThunkCreator,
        autoBatchEnhancer: () => autoBatchEnhancer,
        buildCreateSlice: () => buildCreateSlice,
        clearAllListeners: () => clearAllListeners,
        combineSlices: () => combineSlices,
        configureStore: () => configureStore,
        createAction: () => createAction,
        createActionCreatorInvariantMiddleware: () =>
          createActionCreatorInvariantMiddleware,
        createAsyncThunk: () => createAsyncThunk,
        createDraftSafeSelector: () => createDraftSafeSelector,
        createDraftSafeSelectorCreator: () => createDraftSafeSelectorCreator,
        createDynamicMiddleware: () => createDynamicMiddleware,
        createEntityAdapter: () => createEntityAdapter,
        createImmutableStateInvariantMiddleware: () =>
          createImmutableStateInvariantMiddleware,
        createListenerMiddleware: () => createListenerMiddleware,
        createReducer: () => createReducer,
        createSerializableStateInvariantMiddleware: () =>
          createSerializableStateInvariantMiddleware,
        createSlice: () => createSlice,
        findNonSerializableValue: () => findNonSerializableValue,
        formatProdErrorMessage: () => formatProdErrorMessage,
        isActionCreator: () => isActionCreator,
        isAllOf: () => isAllOf,
        isAnyOf: () => isAnyOf,
        isAsyncThunkAction: () => isAsyncThunkAction,
        isFluxStandardAction: () => isFSA,
        isFulfilled: () => isFulfilled,
        isImmutableDefault: () => isImmutableDefault,
        isPending: () => isPending,
        isPlain: () => isPlain,
        isRejected: () => isRejected,
        isRejectedWithValue: () => isRejectedWithValue,
        miniSerializeError: () => miniSerializeError,
        nanoid: () => nanoid,
        prepareAutoBatched: () => prepareAutoBatched,
        removeListener: () => removeListener,
        unwrapResult: () => unwrapResult,
      });
      // src/createDraftSafeSelector.ts
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/immer/dist/immer.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/reselect/dist/reselect.mjs [app-rsc] (ecmascript)'
        );
      // src/configureStore.ts
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/redux/dist/redux.mjs [app-rsc] (ecmascript)'
        );
      // src/getDefaultMiddleware.ts
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/redux-thunk/dist/redux-thunk.mjs [app-rsc] (ecmascript)'
        );
      var createDraftSafeSelectorCreator = (...args) => {
        const createSelector2 = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'createSelectorCreator'
        ])(...args);
        const createDraftSafeSelector2 = Object.assign(
          (...args2) => {
            const selector = createSelector2(...args2);
            const wrappedSelector = (value, ...rest) =>
              selector(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'isDraft'
                ])(value)
                  ? (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'current'
                    ])(value)
                  : value,
                ...rest
              );
            Object.assign(wrappedSelector, selector);
            return wrappedSelector;
          },
          {
            withTypes: () => createDraftSafeSelector2,
          }
        );
        return createDraftSafeSelector2;
      };
      var createDraftSafeSelector =
        /* @__PURE__ */ createDraftSafeSelectorCreator(
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'weakMapMemoize'
          ]
        );
      var composeWithDevTools = ('TURBOPACK compile-time falsy', 0)
        ? 'TURBOPACK unreachable'
        : function () {
            if (arguments.length === 0) return void 0;
            if (typeof arguments[0] === 'object')
              return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'compose'
              ];
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'compose'
            ].apply(null, arguments);
          };
      var devToolsEnhancer = ('TURBOPACK compile-time falsy', 0)
        ? 'TURBOPACK unreachable'
        : function () {
            return function (noop3) {
              return noop3;
            };
          };
      // src/tsHelpers.ts
      var hasMatchFunction = (v) => {
        return v && typeof v.match === 'function';
      };
      // src/createAction.ts
      function createAction(type, prepareAction) {
        function actionCreator(...args) {
          if (prepareAction) {
            let prepared = prepareAction(...args);
            if (!prepared) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'prepareAction did not return an object'
              );
            }
            return {
              type,
              payload: prepared.payload,
              ...('meta' in prepared && {
                meta: prepared.meta,
              }),
              ...('error' in prepared && {
                error: prepared.error,
              }),
            };
          }
          return {
            type,
            payload: args[0],
          };
        }
        actionCreator.toString = () => `${type}`;
        actionCreator.type = type;
        actionCreator.match = (action) =>
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'isAction'
          ])(action) && action.type === type;
        return actionCreator;
      }
      function isActionCreator(action) {
        return (
          typeof action === 'function' &&
          'type' in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it
          hasMatchFunction(action)
        );
      }
      function isFSA(action) {
        return (
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'isAction'
          ])(action) && Object.keys(action).every(isValidKey)
        );
      }
      function isValidKey(key) {
        return ['type', 'payload', 'error', 'meta'].indexOf(key) > -1;
      }
      // src/actionCreatorInvariantMiddleware.ts
      function getMessage(type) {
        const splitType = type ? `${type}`.split('/') : [];
        const actionName = splitType[splitType.length - 1] || 'actionCreator';
        return `Detected an action creator with type "${type || 'unknown'}" being dispatched. 
Make sure you're calling the action creator before dispatching, i.e. \`dispatch(${actionName}())\` instead of \`dispatch(${actionName})\`. This is necessary even if the action has no payload.`;
      }
      function createActionCreatorInvariantMiddleware(options = {}) {
        if (
          ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
        );
        const { isActionCreator: isActionCreator2 = isActionCreator } = options;
        return () => (next) => (action) => {
          if (isActionCreator2(action)) {
            console.warn(getMessage(action.type));
          }
          return next(action);
        };
      }
      function getTimeMeasureUtils(maxDelay, fnName) {
        let elapsed = 0;
        return {
          measureTime(fn) {
            const started = Date.now();
            try {
              return fn();
            } finally {
              const finished = Date.now();
              elapsed += finished - started;
            }
          },
          warnIfExceeded() {
            if (elapsed > maxDelay) {
              console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.`);
            }
          },
        };
      }
      var Tuple = class _Tuple extends Array {
        constructor(...items) {
          super(...items);
          Object.setPrototypeOf(this, _Tuple.prototype);
        }
        static get [Symbol.species]() {
          return _Tuple;
        }
        concat(...arr) {
          return super.concat.apply(this, arr);
        }
        prepend(...arr) {
          if (arr.length === 1 && Array.isArray(arr[0])) {
            return new _Tuple(...arr[0].concat(this));
          }
          return new _Tuple(...arr.concat(this));
        }
      };
      function freezeDraftable(val) {
        return (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'isDraftable'
        ])(val)
          ? (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'produce'
            ])(val, () => {})
          : val;
      }
      function getOrInsertComputed(map, key, compute) {
        if (map.has(key)) return map.get(key);
        return map.set(key, compute(key)).get(key);
      }
      // src/immutableStateInvariantMiddleware.ts
      function isImmutableDefault(value) {
        return (
          typeof value !== 'object' || value == null || Object.isFrozen(value)
        );
      }
      function trackForMutations(isImmutable, ignorePaths, obj) {
        const trackedProperties = trackProperties(
          isImmutable,
          ignorePaths,
          obj
        );
        return {
          detectMutations() {
            return detectMutations(
              isImmutable,
              ignorePaths,
              trackedProperties,
              obj
            );
          },
        };
      }
      function trackProperties(
        isImmutable,
        ignorePaths = [],
        obj,
        path = '',
        checkedObjects = /* @__PURE__ */ new Set()
      ) {
        const tracked = {
          value: obj,
        };
        if (!isImmutable(obj) && !checkedObjects.has(obj)) {
          checkedObjects.add(obj);
          tracked.children = {};
          for (const key in obj) {
            const childPath = path ? path + '.' + key : key;
            if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
              continue;
            }
            tracked.children[key] = trackProperties(
              isImmutable,
              ignorePaths,
              obj[key],
              childPath
            );
          }
        }
        return tracked;
      }
      function detectMutations(
        isImmutable,
        ignoredPaths = [],
        trackedProperty,
        obj,
        sameParentRef = false,
        path = ''
      ) {
        const prevObj = trackedProperty ? trackedProperty.value : void 0;
        const sameRef = prevObj === obj;
        if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
          return {
            wasMutated: true,
            path,
          };
        }
        if (isImmutable(prevObj) || isImmutable(obj)) {
          return {
            wasMutated: false,
          };
        }
        const keysToDetect = {};
        for (let key in trackedProperty.children) {
          keysToDetect[key] = true;
        }
        for (let key in obj) {
          keysToDetect[key] = true;
        }
        const hasIgnoredPaths = ignoredPaths.length > 0;
        for (let key in keysToDetect) {
          const nestedPath = path ? path + '.' + key : key;
          if (hasIgnoredPaths) {
            const hasMatches = ignoredPaths.some((ignored) => {
              if (ignored instanceof RegExp) {
                return ignored.test(nestedPath);
              }
              return nestedPath === ignored;
            });
            if (hasMatches) {
              continue;
            }
          }
          const result = detectMutations(
            isImmutable,
            ignoredPaths,
            trackedProperty.children[key],
            obj[key],
            sameRef,
            nestedPath
          );
          if (result.wasMutated) {
            return result;
          }
        }
        return {
          wasMutated: false,
        };
      }
      function createImmutableStateInvariantMiddleware(options = {}) {
        if (('TURBOPACK compile-time falsy', 0));
        else {
          //TURBOPACK unreachable
          let stringify2 = function (obj, serializer, indent, decycler) {
              return JSON.stringify(
                obj,
                getSerialize2(serializer, decycler),
                indent
              );
            },
            getSerialize2 = function (serializer, decycler) {
              let stack = [],
                keys = [];
              if (!decycler)
                decycler = function (_, value) {
                  if (stack[0] === value) return '[Circular ~]';
                  return (
                    '[Circular ~.' +
                    keys.slice(0, stack.indexOf(value)).join('.') +
                    ']'
                  );
                };
              return function (key, value) {
                if (stack.length > 0) {
                  var thisPos = stack.indexOf(this);
                  ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
                  ~thisPos
                    ? keys.splice(thisPos, Infinity, key)
                    : keys.push(key);
                  if (~stack.indexOf(value))
                    value = decycler.call(this, key, value);
                } else stack.push(value);
                return serializer == null
                  ? value
                  : serializer.call(this, key, value);
              };
            };
          var stringify = stringify2,
            getSerialize = getSerialize2;
          let {
            isImmutable = isImmutableDefault,
            ignoredPaths,
            warnAfter = 32,
          } = options;
          const track = trackForMutations.bind(null, isImmutable, ignoredPaths);
          return ({ getState }) => {
            let state = getState();
            let tracker = track(state);
            let result;
            return (next) => (action) => {
              const measureUtils = getTimeMeasureUtils(
                warnAfter,
                'ImmutableStateInvariantMiddleware'
              );
              measureUtils.measureTime(() => {
                state = getState();
                result = tracker.detectMutations();
                tracker = track(state);
                if (result.wasMutated) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : `A state mutation was detected between dispatches, in the path '${result.path || ''}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`
                  );
                }
              });
              const dispatchedAction = next(action);
              measureUtils.measureTime(() => {
                state = getState();
                result = tracker.detectMutations();
                tracker = track(state);
                if (result.wasMutated) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : `A state mutation was detected inside a dispatch, in the path: ${result.path || ''}. Take a look at the reducer(s) handling the action ${stringify2(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`
                  );
                }
              });
              measureUtils.warnIfExceeded();
              return dispatchedAction;
            };
          };
        }
      }
      function isPlain(val) {
        const type = typeof val;
        return (
          val == null ||
          type === 'string' ||
          type === 'boolean' ||
          type === 'number' ||
          Array.isArray(val) ||
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'isPlainObject'
          ])(val)
        );
      }
      function findNonSerializableValue(
        value,
        path = '',
        isSerializable = isPlain,
        getEntries,
        ignoredPaths = [],
        cache
      ) {
        let foundNestedSerializable;
        if (!isSerializable(value)) {
          return {
            keyPath: path || '<root>',
            value,
          };
        }
        if (typeof value !== 'object' || value === null) {
          return false;
        }
        if (cache?.has(value)) return false;
        const entries =
          getEntries != null ? getEntries(value) : Object.entries(value);
        const hasIgnoredPaths = ignoredPaths.length > 0;
        for (const [key, nestedValue] of entries) {
          const nestedPath = path ? path + '.' + key : key;
          if (hasIgnoredPaths) {
            const hasMatches = ignoredPaths.some((ignored) => {
              if (ignored instanceof RegExp) {
                return ignored.test(nestedPath);
              }
              return nestedPath === ignored;
            });
            if (hasMatches) {
              continue;
            }
          }
          if (!isSerializable(nestedValue)) {
            return {
              keyPath: nestedPath,
              value: nestedValue,
            };
          }
          if (typeof nestedValue === 'object') {
            foundNestedSerializable = findNonSerializableValue(
              nestedValue,
              nestedPath,
              isSerializable,
              getEntries,
              ignoredPaths,
              cache
            );
            if (foundNestedSerializable) {
              return foundNestedSerializable;
            }
          }
        }
        if (cache && isNestedFrozen(value)) cache.add(value);
        return false;
      }
      function isNestedFrozen(value) {
        if (!Object.isFrozen(value)) return false;
        for (const nestedValue of Object.values(value)) {
          if (typeof nestedValue !== 'object' || nestedValue === null) continue;
          if (!isNestedFrozen(nestedValue)) return false;
        }
        return true;
      }
      function createSerializableStateInvariantMiddleware(options = {}) {
        if (('TURBOPACK compile-time falsy', 0));
        else {
          //TURBOPACK unreachable
          const {
            isSerializable = isPlain,
            getEntries,
            ignoredActions = [],
            ignoredActionPaths = ['meta.arg', 'meta.baseQueryMeta'],
            ignoredPaths = [],
            warnAfter = 32,
            ignoreState = false,
            ignoreActions = false,
            disableCache = false,
          } = options;
          const cache =
            !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
          return (storeAPI) => (next) => (action) => {
            if (
              !(0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'isAction'
              ])(action)
            ) {
              return next(action);
            }
            const result = next(action);
            const measureUtils = getTimeMeasureUtils(
              warnAfter,
              'SerializableStateInvariantMiddleware'
            );
            if (
              !ignoreActions &&
              !(
                ignoredActions.length &&
                ignoredActions.indexOf(action.type) !== -1
              )
            ) {
              measureUtils.measureTime(() => {
                const foundActionNonSerializableValue =
                  findNonSerializableValue(
                    action,
                    '',
                    isSerializable,
                    getEntries,
                    ignoredActionPaths,
                    cache
                  );
                if (foundActionNonSerializableValue) {
                  const { keyPath, value } = foundActionNonSerializableValue;
                  console.error(
                    `A non-serializable value was detected in an action, in the path: \`${keyPath}\`. Value:`,
                    value,
                    '\nTake a look at the logic that dispatched this action: ',
                    action,
                    '\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)',
                    '\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)'
                  );
                }
              });
            }
            if (!ignoreState) {
              measureUtils.measureTime(() => {
                const state = storeAPI.getState();
                const foundStateNonSerializableValue = findNonSerializableValue(
                  state,
                  '',
                  isSerializable,
                  getEntries,
                  ignoredPaths,
                  cache
                );
                if (foundStateNonSerializableValue) {
                  const { keyPath, value } = foundStateNonSerializableValue;
                  console.error(
                    `A non-serializable value was detected in the state, in the path: \`${keyPath}\`. Value:`,
                    value,
                    `
Take a look at the reducer(s) handling this action type: ${action.type}.
(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`
                  );
                }
              });
              measureUtils.warnIfExceeded();
            }
            return result;
          };
        }
      }
      // src/getDefaultMiddleware.ts
      function isBoolean(x) {
        return typeof x === 'boolean';
      }
      var buildGetDefaultMiddleware = () =>
        function getDefaultMiddleware(options) {
          const {
            thunk = true,
            immutableCheck = true,
            serializableCheck = true,
            actionCreatorCheck = true,
          } = options ?? {};
          let middlewareArray = new Tuple();
          if (thunk) {
            if (isBoolean(thunk)) {
              middlewareArray.push(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'thunk'
                ]
              );
            } else {
              middlewareArray.push(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2d$thunk$2f$dist$2f$redux$2d$thunk$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'withExtraArgument'
                ])(thunk.extraArgument)
              );
            }
          }
          if (('TURBOPACK compile-time truthy', 1)) {
            if (immutableCheck) {
              let immutableOptions = {};
              if (!isBoolean(immutableCheck)) {
                immutableOptions = immutableCheck;
              }
              middlewareArray.unshift(
                createImmutableStateInvariantMiddleware(immutableOptions)
              );
            }
            if (serializableCheck) {
              let serializableOptions = {};
              if (!isBoolean(serializableCheck)) {
                serializableOptions = serializableCheck;
              }
              middlewareArray.push(
                createSerializableStateInvariantMiddleware(serializableOptions)
              );
            }
            if (actionCreatorCheck) {
              let actionCreatorOptions = {};
              if (!isBoolean(actionCreatorCheck)) {
                actionCreatorOptions = actionCreatorCheck;
              }
              middlewareArray.unshift(
                createActionCreatorInvariantMiddleware(actionCreatorOptions)
              );
            }
          }
          return middlewareArray;
        };
      // src/autoBatchEnhancer.ts
      var SHOULD_AUTOBATCH = 'RTK_autoBatch';
      var prepareAutoBatched = () => (payload) => ({
        payload,
        meta: {
          [SHOULD_AUTOBATCH]: true,
        },
      });
      var createQueueWithTimer = (timeout) => {
        return (notify) => {
          setTimeout(notify, timeout);
        };
      };
      var autoBatchEnhancer =
        (
          options = {
            type: 'raf',
          }
        ) =>
        (next) =>
        (...args) => {
          const store = next(...args);
          let notifying = true;
          let shouldNotifyAtEndOfTick = false;
          let notificationQueued = false;
          const listeners = /* @__PURE__ */ new Set();
          const queueCallback =
            options.type === 'tick'
              ? queueMicrotask
              : options.type === 'raf' // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.
                ? ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : createQueueWithTimer(10)
                : options.type === 'callback'
                  ? options.queueNotification
                  : createQueueWithTimer(options.timeout);
          const notifyListeners = () => {
            notificationQueued = false;
            if (shouldNotifyAtEndOfTick) {
              shouldNotifyAtEndOfTick = false;
              listeners.forEach((l) => l());
            }
          };
          return Object.assign({}, store, {
            // Override the base `store.subscribe` method to keep original listeners
            // from running if we're delaying notifications
            subscribe(listener2) {
              const wrappedListener = () => notifying && listener2();
              const unsubscribe = store.subscribe(wrappedListener);
              listeners.add(listener2);
              return () => {
                unsubscribe();
                listeners.delete(listener2);
              };
            },
            // Override the base `store.dispatch` method so that we can check actions
            // for the `shouldAutoBatch` flag and determine if batching is active
            dispatch(action) {
              try {
                notifying = !action?.meta?.[SHOULD_AUTOBATCH];
                shouldNotifyAtEndOfTick = !notifying;
                if (shouldNotifyAtEndOfTick) {
                  if (!notificationQueued) {
                    notificationQueued = true;
                    queueCallback(notifyListeners);
                  }
                }
                return store.dispatch(action);
              } finally {
                notifying = true;
              }
            },
          });
        };
      // src/getDefaultEnhancers.ts
      var buildGetDefaultEnhancers = (middlewareEnhancer) =>
        function getDefaultEnhancers(options) {
          const { autoBatch = true } = options ?? {};
          let enhancerArray = new Tuple(middlewareEnhancer);
          if (autoBatch) {
            enhancerArray.push(
              autoBatchEnhancer(
                typeof autoBatch === 'object' ? autoBatch : void 0
              )
            );
          }
          return enhancerArray;
        };
      // src/configureStore.ts
      function configureStore(options) {
        const getDefaultMiddleware = buildGetDefaultMiddleware();
        const {
          reducer = void 0,
          middleware,
          devTools = true,
          duplicateMiddlewareCheck = true,
          preloadedState = void 0,
          enhancers = void 0,
        } = options || {};
        let rootReducer;
        if (typeof reducer === 'function') {
          rootReducer = reducer;
        } else if (
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'isPlainObject'
          ])(reducer)
        ) {
          rootReducer = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'combineReducers'
          ])(reducer);
        } else {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : '`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers'
          );
        }
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          middleware &&
          typeof middleware !== 'function'
        ) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : '`middleware` field must be a callback'
          );
        }
        let finalMiddleware;
        if (typeof middleware === 'function') {
          finalMiddleware = middleware(getDefaultMiddleware);
          if (
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            !Array.isArray(finalMiddleware)
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'when using a middleware builder function, an array of middleware must be returned'
            );
          }
        } else {
          finalMiddleware = getDefaultMiddleware();
        }
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          finalMiddleware.some((item) => typeof item !== 'function')
        ) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'each middleware provided to configureStore must be a function'
          );
        }
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          duplicateMiddlewareCheck
        ) {
          let middlewareReferences = /* @__PURE__ */ new Set();
          finalMiddleware.forEach((middleware2) => {
            if (middlewareReferences.has(middleware2)) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.'
              );
            }
            middlewareReferences.add(middleware2);
          });
        }
        let finalCompose =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'compose'
          ];
        if (devTools) {
          finalCompose = composeWithDevTools({
            // Enable capture of stack traces for dispatched Redux actions
            trace:
              ('TURBOPACK compile-time value', 'development') !== 'production',
            ...(typeof devTools === 'object' && devTools),
          });
        }
        const middlewareEnhancer = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'applyMiddleware'
        ])(...finalMiddleware);
        const getDefaultEnhancers =
          buildGetDefaultEnhancers(middlewareEnhancer);
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          enhancers &&
          typeof enhancers !== 'function'
        ) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : '`enhancers` field must be a callback'
          );
        }
        let storeEnhancers =
          typeof enhancers === 'function'
            ? enhancers(getDefaultEnhancers)
            : getDefaultEnhancers();
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          !Array.isArray(storeEnhancers)
        ) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : '`enhancers` callback must return an array'
          );
        }
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          storeEnhancers.some((item) => typeof item !== 'function')
        ) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'each enhancer provided to configureStore must be a function'
          );
        }
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          finalMiddleware.length &&
          !storeEnhancers.includes(middlewareEnhancer)
        ) {
          console.error(
            'middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`'
          );
        }
        const composedEnhancer = finalCompose(...storeEnhancers);
        return (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'createStore'
        ])(rootReducer, preloadedState, composedEnhancer);
      }
      // src/mapBuilders.ts
      function executeReducerBuilderCallback(builderCallback) {
        const actionsMap = {};
        const actionMatchers = [];
        let defaultCaseReducer;
        const builder = {
          addCase(typeOrActionCreator, reducer) {
            if (('TURBOPACK compile-time truthy', 1)) {
              if (actionMatchers.length > 0) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : '`builder.addCase` should only be called before calling `builder.addMatcher`'
                );
              }
              if (defaultCaseReducer) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : '`builder.addCase` should only be called before calling `builder.addDefaultCase`'
                );
              }
            }
            const type =
              typeof typeOrActionCreator === 'string'
                ? typeOrActionCreator
                : typeOrActionCreator.type;
            if (!type) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : '`builder.addCase` cannot be called with an empty action type'
              );
            }
            if (type in actionsMap) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : `\`builder.addCase\` cannot be called with two reducers for the same action type '${type}'`
              );
            }
            actionsMap[type] = reducer;
            return builder;
          },
          addMatcher(matcher, reducer) {
            if (('TURBOPACK compile-time truthy', 1)) {
              if (defaultCaseReducer) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : '`builder.addMatcher` should only be called before calling `builder.addDefaultCase`'
                );
              }
            }
            actionMatchers.push({
              matcher,
              reducer,
            });
            return builder;
          },
          addDefaultCase(reducer) {
            if (('TURBOPACK compile-time truthy', 1)) {
              if (defaultCaseReducer) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : '`builder.addDefaultCase` can only be called once'
                );
              }
            }
            defaultCaseReducer = reducer;
            return builder;
          },
        };
        builderCallback(builder);
        return [actionsMap, actionMatchers, defaultCaseReducer];
      }
      // src/createReducer.ts
      function isStateFunction(x) {
        return typeof x === 'function';
      }
      function createReducer(initialState, mapOrBuilderCallback) {
        if (('TURBOPACK compile-time truthy', 1)) {
          if (typeof mapOrBuilderCallback === 'object') {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : "The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer"
            );
          }
        }
        let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] =
          executeReducerBuilderCallback(mapOrBuilderCallback);
        let getInitialState;
        if (isStateFunction(initialState)) {
          getInitialState = () => freezeDraftable(initialState());
        } else {
          const frozenInitialState = freezeDraftable(initialState);
          getInitialState = () => frozenInitialState;
        }
        function reducer(state = getInitialState(), action) {
          let caseReducers = [
            actionsMap[action.type],
            ...finalActionMatchers
              .filter(({ matcher }) => matcher(action))
              .map(({ reducer: reducer2 }) => reducer2),
          ];
          if (caseReducers.filter((cr) => !!cr).length === 0) {
            caseReducers = [finalDefaultCaseReducer];
          }
          return caseReducers.reduce((previousState, caseReducer) => {
            if (caseReducer) {
              if (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'isDraft'
                ])(previousState)
              ) {
                const draft = previousState;
                const result = caseReducer(draft, action);
                if (result === void 0) {
                  return previousState;
                }
                return result;
              } else if (
                !(0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'isDraftable'
                ])(previousState)
              ) {
                const result = caseReducer(previousState, action);
                if (result === void 0) {
                  if (previousState === null) {
                    return previousState;
                  }
                  throw Error(
                    'A case reducer on a non-draftable value must not return undefined'
                  );
                }
                return result;
              } else {
                return (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'produce'
                ])(previousState, (draft) => {
                  return caseReducer(draft, action);
                });
              }
            }
            return previousState;
          }, state);
        }
        reducer.getInitialState = getInitialState;
        return reducer;
      }
      // src/matchers.ts
      var matches = (matcher, action) => {
        if (hasMatchFunction(matcher)) {
          return matcher.match(action);
        } else {
          return matcher(action);
        }
      };
      function isAnyOf(...matchers) {
        return (action) => {
          return matchers.some((matcher) => matches(matcher, action));
        };
      }
      function isAllOf(...matchers) {
        return (action) => {
          return matchers.every((matcher) => matches(matcher, action));
        };
      }
      function hasExpectedRequestMetadata(action, validStatus) {
        if (!action || !action.meta) return false;
        const hasValidRequestId = typeof action.meta.requestId === 'string';
        const hasValidRequestStatus =
          validStatus.indexOf(action.meta.requestStatus) > -1;
        return hasValidRequestId && hasValidRequestStatus;
      }
      function isAsyncThunkArray(a) {
        return (
          typeof a[0] === 'function' &&
          'pending' in a[0] &&
          'fulfilled' in a[0] &&
          'rejected' in a[0]
        );
      }
      function isPending(...asyncThunks) {
        if (asyncThunks.length === 0) {
          return (action) => hasExpectedRequestMetadata(action, ['pending']);
        }
        if (!isAsyncThunkArray(asyncThunks)) {
          return isPending()(asyncThunks[0]);
        }
        return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.pending));
      }
      function isRejected(...asyncThunks) {
        if (asyncThunks.length === 0) {
          return (action) => hasExpectedRequestMetadata(action, ['rejected']);
        }
        if (!isAsyncThunkArray(asyncThunks)) {
          return isRejected()(asyncThunks[0]);
        }
        return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.rejected));
      }
      function isRejectedWithValue(...asyncThunks) {
        const hasFlag = (action) => {
          return action && action.meta && action.meta.rejectedWithValue;
        };
        if (asyncThunks.length === 0) {
          return isAllOf(isRejected(...asyncThunks), hasFlag);
        }
        if (!isAsyncThunkArray(asyncThunks)) {
          return isRejectedWithValue()(asyncThunks[0]);
        }
        return isAllOf(isRejected(...asyncThunks), hasFlag);
      }
      function isFulfilled(...asyncThunks) {
        if (asyncThunks.length === 0) {
          return (action) => hasExpectedRequestMetadata(action, ['fulfilled']);
        }
        if (!isAsyncThunkArray(asyncThunks)) {
          return isFulfilled()(asyncThunks[0]);
        }
        return isAnyOf(
          ...asyncThunks.map((asyncThunk) => asyncThunk.fulfilled)
        );
      }
      function isAsyncThunkAction(...asyncThunks) {
        if (asyncThunks.length === 0) {
          return (action) =>
            hasExpectedRequestMetadata(action, [
              'pending',
              'fulfilled',
              'rejected',
            ]);
        }
        if (!isAsyncThunkArray(asyncThunks)) {
          return isAsyncThunkAction()(asyncThunks[0]);
        }
        return isAnyOf(
          ...asyncThunks.flatMap((asyncThunk) => [
            asyncThunk.pending,
            asyncThunk.rejected,
            asyncThunk.fulfilled,
          ])
        );
      }
      // src/nanoid.ts
      var urlAlphabet =
        'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';
      var nanoid = (size = 21) => {
        let id = '';
        let i = size;
        while (i--) {
          id += urlAlphabet[(Math.random() * 64) | 0];
        }
        return id;
      };
      // src/createAsyncThunk.ts
      var commonProperties = ['name', 'message', 'stack', 'code'];
      var RejectWithValue = class {
        constructor(payload, meta) {
          this.payload = payload;
          this.meta = meta;
        }
        /*
  type-only property to distinguish between RejectWithValue and FulfillWithMeta
  does not exist at runtime
  */ _type;
      };
      var FulfillWithMeta = class {
        constructor(payload, meta) {
          this.payload = payload;
          this.meta = meta;
        }
        /*
  type-only property to distinguish between RejectWithValue and FulfillWithMeta
  does not exist at runtime
  */ _type;
      };
      var miniSerializeError = (value) => {
        if (typeof value === 'object' && value !== null) {
          const simpleError = {};
          for (const property of commonProperties) {
            if (typeof value[property] === 'string') {
              simpleError[property] = value[property];
            }
          }
          return simpleError;
        }
        return {
          message: String(value),
        };
      };
      var externalAbortMessage = 'External signal was aborted';
      var createAsyncThunk = /* @__PURE__ */ (() => {
        function createAsyncThunk2(typePrefix, payloadCreator, options) {
          const fulfilled = createAction(
            typePrefix + '/fulfilled',
            (payload, requestId, arg, meta) => ({
              payload,
              meta: {
                ...(meta || {}),
                arg,
                requestId,
                requestStatus: 'fulfilled',
              },
            })
          );
          const pending = createAction(
            typePrefix + '/pending',
            (requestId, arg, meta) => ({
              payload: void 0,
              meta: {
                ...(meta || {}),
                arg,
                requestId,
                requestStatus: 'pending',
              },
            })
          );
          const rejected = createAction(
            typePrefix + '/rejected',
            (error, requestId, arg, payload, meta) => ({
              payload,
              error: (
                (options && options.serializeError) ||
                miniSerializeError
              )(error || 'Rejected'),
              meta: {
                ...(meta || {}),
                arg,
                requestId,
                rejectedWithValue: !!payload,
                requestStatus: 'rejected',
                aborted: error?.name === 'AbortError',
                condition: error?.name === 'ConditionError',
              },
            })
          );
          function actionCreator(arg, { signal } = {}) {
            return (dispatch, getState, extra) => {
              const requestId = options?.idGenerator
                ? options.idGenerator(arg)
                : nanoid();
              const abortController = new AbortController();
              let abortHandler;
              let abortReason;
              function abort(reason) {
                abortReason = reason;
                abortController.abort();
              }
              if (signal) {
                if (signal.aborted) {
                  abort(externalAbortMessage);
                } else {
                  signal.addEventListener(
                    'abort',
                    () => abort(externalAbortMessage),
                    {
                      once: true,
                    }
                  );
                }
              }
              const promise = (async function () {
                let finalAction;
                try {
                  let conditionResult = options?.condition?.(arg, {
                    getState,
                    extra,
                  });
                  if (isThenable(conditionResult)) {
                    conditionResult = await conditionResult;
                  }
                  if (
                    conditionResult === false ||
                    abortController.signal.aborted
                  ) {
                    throw {
                      name: 'ConditionError',
                      message:
                        'Aborted due to condition callback returning false.',
                    };
                  }
                  const abortedPromise = new Promise((_, reject) => {
                    abortHandler = () => {
                      reject({
                        name: 'AbortError',
                        message: abortReason || 'Aborted',
                      });
                    };
                    abortController.signal.addEventListener(
                      'abort',
                      abortHandler
                    );
                  });
                  dispatch(
                    pending(
                      requestId,
                      arg,
                      options?.getPendingMeta?.(
                        {
                          requestId,
                          arg,
                        },
                        {
                          getState,
                          extra,
                        }
                      )
                    )
                  );
                  finalAction = await Promise.race([
                    abortedPromise,
                    Promise.resolve(
                      payloadCreator(arg, {
                        dispatch,
                        getState,
                        extra,
                        requestId,
                        signal: abortController.signal,
                        abort,
                        rejectWithValue: (value, meta) => {
                          return new RejectWithValue(value, meta);
                        },
                        fulfillWithValue: (value, meta) => {
                          return new FulfillWithMeta(value, meta);
                        },
                      })
                    ).then((result) => {
                      if (result instanceof RejectWithValue) {
                        throw result;
                      }
                      if (result instanceof FulfillWithMeta) {
                        return fulfilled(
                          result.payload,
                          requestId,
                          arg,
                          result.meta
                        );
                      }
                      return fulfilled(result, requestId, arg);
                    }),
                  ]);
                } catch (err) {
                  finalAction =
                    err instanceof RejectWithValue
                      ? rejected(null, requestId, arg, err.payload, err.meta)
                      : rejected(err, requestId, arg);
                } finally {
                  if (abortHandler) {
                    abortController.signal.removeEventListener(
                      'abort',
                      abortHandler
                    );
                  }
                }
                const skipDispatch =
                  options &&
                  !options.dispatchConditionRejection &&
                  rejected.match(finalAction) &&
                  finalAction.meta.condition;
                if (!skipDispatch) {
                  dispatch(finalAction);
                }
                return finalAction;
              })();
              return Object.assign(promise, {
                abort,
                requestId,
                arg,
                unwrap() {
                  return promise.then(unwrapResult);
                },
              });
            };
          }
          return Object.assign(actionCreator, {
            pending,
            rejected,
            fulfilled,
            settled: isAnyOf(rejected, fulfilled),
            typePrefix,
          });
        }
        createAsyncThunk2.withTypes = () => createAsyncThunk2;
        return createAsyncThunk2;
      })();
      function unwrapResult(action) {
        if (action.meta && action.meta.rejectedWithValue) {
          throw action.payload;
        }
        if (action.error) {
          throw action.error;
        }
        return action.payload;
      }
      function isThenable(value) {
        return (
          value !== null &&
          typeof value === 'object' &&
          typeof value.then === 'function'
        );
      }
      // src/createSlice.ts
      var asyncThunkSymbol = /* @__PURE__ */ Symbol.for(
        'rtk-slice-createasyncthunk'
      );
      var asyncThunkCreator = {
        [asyncThunkSymbol]: createAsyncThunk,
      };
      var ReducerType = /* @__PURE__ */ ((ReducerType2) => {
        ReducerType2['reducer'] = 'reducer';
        ReducerType2['reducerWithPrepare'] = 'reducerWithPrepare';
        ReducerType2['asyncThunk'] = 'asyncThunk';
        return ReducerType2;
      })(ReducerType || {});
      function getType(slice, actionKey) {
        return `${slice}/${actionKey}`;
      }
      function buildCreateSlice({ creators } = {}) {
        const cAT = creators?.asyncThunk?.[asyncThunkSymbol];
        return function createSlice2(options) {
          const { name, reducerPath = name } = options;
          if (!name) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : '`name` is a required option for createSlice'
            );
          }
          if (
            typeof process !== 'undefined' &&
            ('TURBOPACK compile-time value', 'development') === 'development'
          ) {
            if (options.initialState === void 0) {
              console.error(
                'You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`'
              );
            }
          }
          const reducers =
            (typeof options.reducers === 'function'
              ? options.reducers(buildReducerCreators())
              : options.reducers) || {};
          const reducerNames = Object.keys(reducers);
          const context = {
            sliceCaseReducersByName: {},
            sliceCaseReducersByType: {},
            actionCreators: {},
            sliceMatchers: [],
          };
          const contextMethods = {
            addCase(typeOrActionCreator, reducer2) {
              const type =
                typeof typeOrActionCreator === 'string'
                  ? typeOrActionCreator
                  : typeOrActionCreator.type;
              if (!type) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : '`context.addCase` cannot be called with an empty action type'
                );
              }
              if (type in context.sliceCaseReducersByType) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : '`context.addCase` cannot be called with two reducers for the same action type: ' +
                      type
                );
              }
              context.sliceCaseReducersByType[type] = reducer2;
              return contextMethods;
            },
            addMatcher(matcher, reducer2) {
              context.sliceMatchers.push({
                matcher,
                reducer: reducer2,
              });
              return contextMethods;
            },
            exposeAction(name2, actionCreator) {
              context.actionCreators[name2] = actionCreator;
              return contextMethods;
            },
            exposeCaseReducer(name2, reducer2) {
              context.sliceCaseReducersByName[name2] = reducer2;
              return contextMethods;
            },
          };
          reducerNames.forEach((reducerName) => {
            const reducerDefinition = reducers[reducerName];
            const reducerDetails = {
              reducerName,
              type: getType(name, reducerName),
              createNotation: typeof options.reducers === 'function',
            };
            if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {
              handleThunkCaseReducerDefinition(
                reducerDetails,
                reducerDefinition,
                contextMethods,
                cAT
              );
            } else {
              handleNormalReducerDefinition(
                reducerDetails,
                reducerDefinition,
                contextMethods
              );
            }
          });
          function buildReducer() {
            if (('TURBOPACK compile-time truthy', 1)) {
              if (typeof options.extraReducers === 'object') {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : "The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice"
                );
              }
            }
            const [
              extraReducers = {},
              actionMatchers = [],
              defaultCaseReducer = void 0,
            ] =
              typeof options.extraReducers === 'function'
                ? executeReducerBuilderCallback(options.extraReducers)
                : [options.extraReducers];
            const finalCaseReducers = {
              ...extraReducers,
              ...context.sliceCaseReducersByType,
            };
            return createReducer(options.initialState, (builder) => {
              for (let key in finalCaseReducers) {
                builder.addCase(key, finalCaseReducers[key]);
              }
              for (let sM of context.sliceMatchers) {
                builder.addMatcher(sM.matcher, sM.reducer);
              }
              for (let m of actionMatchers) {
                builder.addMatcher(m.matcher, m.reducer);
              }
              if (defaultCaseReducer) {
                builder.addDefaultCase(defaultCaseReducer);
              }
            });
          }
          const selectSelf = (state) => state;
          const injectedSelectorCache = /* @__PURE__ */ new Map();
          const injectedStateCache = /* @__PURE__ */ new WeakMap();
          let _reducer;
          function reducer(state, action) {
            if (!_reducer) _reducer = buildReducer();
            return _reducer(state, action);
          }
          function getInitialState() {
            if (!_reducer) _reducer = buildReducer();
            return _reducer.getInitialState();
          }
          function makeSelectorProps(reducerPath2, injected = false) {
            function selectSlice(state) {
              let sliceState = state[reducerPath2];
              if (typeof sliceState === 'undefined') {
                if (injected) {
                  sliceState = getOrInsertComputed(
                    injectedStateCache,
                    selectSlice,
                    getInitialState
                  );
                } else if (('TURBOPACK compile-time truthy', 1)) {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : 'selectSlice returned undefined for an uninjected slice reducer'
                  );
                }
              }
              return sliceState;
            }
            function getSelectors(selectState = selectSelf) {
              const selectorCache = getOrInsertComputed(
                injectedSelectorCache,
                injected,
                () => /* @__PURE__ */ new WeakMap()
              );
              return getOrInsertComputed(selectorCache, selectState, () => {
                const map = {};
                for (const [name2, selector] of Object.entries(
                  options.selectors ?? {}
                )) {
                  map[name2] = wrapSelector(
                    selector,
                    selectState,
                    () =>
                      getOrInsertComputed(
                        injectedStateCache,
                        selectState,
                        getInitialState
                      ),
                    injected
                  );
                }
                return map;
              });
            }
            return {
              reducerPath: reducerPath2,
              getSelectors,
              get selectors() {
                return getSelectors(selectSlice);
              },
              selectSlice,
            };
          }
          const slice = {
            name,
            reducer,
            actions: context.actionCreators,
            caseReducers: context.sliceCaseReducersByName,
            getInitialState,
            ...makeSelectorProps(reducerPath),
            injectInto(injectable, { reducerPath: pathOpt, ...config } = {}) {
              const newReducerPath = pathOpt ?? reducerPath;
              injectable.inject(
                {
                  reducerPath: newReducerPath,
                  reducer,
                },
                config
              );
              return {
                ...slice,
                ...makeSelectorProps(newReducerPath, true),
              };
            },
          };
          return slice;
        };
      }
      function wrapSelector(selector, selectState, getInitialState, injected) {
        function wrapper(rootState, ...args) {
          let sliceState = selectState(rootState);
          if (typeof sliceState === 'undefined') {
            if (injected) {
              sliceState = getInitialState();
            } else if (('TURBOPACK compile-time truthy', 1)) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'selectState returned undefined for an uninjected slice reducer'
              );
            }
          }
          return selector(sliceState, ...args);
        }
        wrapper.unwrapped = selector;
        return wrapper;
      }
      var createSlice = /* @__PURE__ */ buildCreateSlice();
      function buildReducerCreators() {
        function asyncThunk(payloadCreator, config) {
          return {
            _reducerDefinitionType: 'asyncThunk' /* asyncThunk */,
            payloadCreator,
            ...config,
          };
        }
        asyncThunk.withTypes = () => asyncThunk;
        return {
          reducer(caseReducer) {
            return Object.assign(
              {
                // hack so the wrapping function has the same name as the original
                // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
                [caseReducer.name](...args) {
                  return caseReducer(...args);
                },
              }[caseReducer.name],
              {
                _reducerDefinitionType: 'reducer' /* reducer */,
              }
            );
          },
          preparedReducer(prepare, reducer) {
            return {
              _reducerDefinitionType:
                'reducerWithPrepare' /* reducerWithPrepare */,
              prepare,
              reducer,
            };
          },
          asyncThunk,
        };
      }
      function handleNormalReducerDefinition(
        { type, reducerName, createNotation },
        maybeReducerWithPrepare,
        context
      ) {
        let caseReducer;
        let prepareCallback;
        if ('reducer' in maybeReducerWithPrepare) {
          if (
            createNotation &&
            !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)
          ) {
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.'
            );
          }
          caseReducer = maybeReducerWithPrepare.reducer;
          prepareCallback = maybeReducerWithPrepare.prepare;
        } else {
          caseReducer = maybeReducerWithPrepare;
        }
        context
          .addCase(type, caseReducer)
          .exposeCaseReducer(reducerName, caseReducer)
          .exposeAction(
            reducerName,
            prepareCallback
              ? createAction(type, prepareCallback)
              : createAction(type)
          );
      }
      function isAsyncThunkSliceReducerDefinition(reducerDefinition) {
        return (
          reducerDefinition._reducerDefinitionType ===
          'asyncThunk' /* asyncThunk */
        );
      }
      function isCaseReducerWithPrepareDefinition(reducerDefinition) {
        return (
          reducerDefinition._reducerDefinitionType ===
          'reducerWithPrepare' /* reducerWithPrepare */
        );
      }
      function handleThunkCaseReducerDefinition(
        { type, reducerName },
        reducerDefinition,
        context,
        cAT
      ) {
        if (!cAT) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.'
          );
        }
        const {
          payloadCreator,
          fulfilled,
          pending,
          rejected,
          settled,
          options,
        } = reducerDefinition;
        const thunk = cAT(type, payloadCreator, options);
        context.exposeAction(reducerName, thunk);
        if (fulfilled) {
          context.addCase(thunk.fulfilled, fulfilled);
        }
        if (pending) {
          context.addCase(thunk.pending, pending);
        }
        if (rejected) {
          context.addCase(thunk.rejected, rejected);
        }
        if (settled) {
          context.addMatcher(thunk.settled, settled);
        }
        context.exposeCaseReducer(reducerName, {
          fulfilled: fulfilled || noop,
          pending: pending || noop,
          rejected: rejected || noop,
          settled: settled || noop,
        });
      }
      function noop() {}
      // src/entities/entity_state.ts
      function getInitialEntityState() {
        return {
          ids: [],
          entities: {},
        };
      }
      function createInitialStateFactory(stateAdapter) {
        function getInitialState(additionalState = {}, entities) {
          const state = Object.assign(getInitialEntityState(), additionalState);
          return entities ? stateAdapter.setAll(state, entities) : state;
        }
        return {
          getInitialState,
        };
      }
      // src/entities/state_selectors.ts
      function createSelectorsFactory() {
        function getSelectors(selectState, options = {}) {
          const { createSelector: createSelector2 = createDraftSafeSelector } =
            options;
          const selectIds = (state) => state.ids;
          const selectEntities = (state) => state.entities;
          const selectAll = createSelector2(
            selectIds,
            selectEntities,
            (ids, entities) => ids.map((id) => entities[id])
          );
          const selectId = (_, id) => id;
          const selectById = (entities, id) => entities[id];
          const selectTotal = createSelector2(selectIds, (ids) => ids.length);
          if (!selectState) {
            return {
              selectIds,
              selectEntities,
              selectAll,
              selectTotal,
              selectById: createSelector2(selectEntities, selectId, selectById),
            };
          }
          const selectGlobalizedEntities = createSelector2(
            selectState,
            selectEntities
          );
          return {
            selectIds: createSelector2(selectState, selectIds),
            selectEntities: selectGlobalizedEntities,
            selectAll: createSelector2(selectState, selectAll),
            selectTotal: createSelector2(selectState, selectTotal),
            selectById: createSelector2(
              selectGlobalizedEntities,
              selectId,
              selectById
            ),
          };
        }
        return {
          getSelectors,
        };
      }
      var isDraftTyped =
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'isDraft'
        ];
      function createSingleArgumentStateOperator(mutator) {
        const operator = createStateOperator((_, state) => mutator(state));
        return function operation(state) {
          return operator(state, void 0);
        };
      }
      function createStateOperator(mutator) {
        return function operation(state, arg) {
          function isPayloadActionArgument(arg2) {
            return isFSA(arg2);
          }
          const runMutator = (draft) => {
            if (isPayloadActionArgument(arg)) {
              mutator(arg.payload, draft);
            } else {
              mutator(arg, draft);
            }
          };
          if (isDraftTyped(state)) {
            runMutator(state);
            return state;
          }
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'produce'
          ])(state, runMutator);
        };
      }
      function selectIdValue(entity, selectId) {
        const key = selectId(entity);
        if (
          ('TURBOPACK compile-time value', 'development') !== 'production' &&
          key === void 0
        ) {
          console.warn(
            'The entity passed to the `selectId` implementation returned undefined.',
            'You should probably provide your own `selectId` implementation.',
            'The entity that was passed:',
            entity,
            'The `selectId` implementation:',
            selectId.toString()
          );
        }
        return key;
      }
      function ensureEntitiesArray(entities) {
        if (!Array.isArray(entities)) {
          entities = Object.values(entities);
        }
        return entities;
      }
      function getCurrent(value) {
        return (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'isDraft'
        ])(value)
          ? (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'current'
            ])(value)
          : value;
      }
      function splitAddedUpdatedEntities(newEntities, selectId, state) {
        newEntities = ensureEntitiesArray(newEntities);
        const existingIdsArray = getCurrent(state.ids);
        const existingIds = new Set(existingIdsArray);
        const added = [];
        const addedIds = /* @__PURE__ */ new Set([]);
        const updated = [];
        for (const entity of newEntities) {
          const id = selectIdValue(entity, selectId);
          if (existingIds.has(id) || addedIds.has(id)) {
            updated.push({
              id,
              changes: entity,
            });
          } else {
            addedIds.add(id);
            added.push(entity);
          }
        }
        return [added, updated, existingIdsArray];
      }
      // src/entities/unsorted_state_adapter.ts
      function createUnsortedStateAdapter(selectId) {
        function addOneMutably(entity, state) {
          const key = selectIdValue(entity, selectId);
          if (key in state.entities) {
            return;
          }
          state.ids.push(key);
          state.entities[key] = entity;
        }
        function addManyMutably(newEntities, state) {
          newEntities = ensureEntitiesArray(newEntities);
          for (const entity of newEntities) {
            addOneMutably(entity, state);
          }
        }
        function setOneMutably(entity, state) {
          const key = selectIdValue(entity, selectId);
          if (!(key in state.entities)) {
            state.ids.push(key);
          }
          state.entities[key] = entity;
        }
        function setManyMutably(newEntities, state) {
          newEntities = ensureEntitiesArray(newEntities);
          for (const entity of newEntities) {
            setOneMutably(entity, state);
          }
        }
        function setAllMutably(newEntities, state) {
          newEntities = ensureEntitiesArray(newEntities);
          state.ids = [];
          state.entities = {};
          addManyMutably(newEntities, state);
        }
        function removeOneMutably(key, state) {
          return removeManyMutably([key], state);
        }
        function removeManyMutably(keys, state) {
          let didMutate = false;
          keys.forEach((key) => {
            if (key in state.entities) {
              delete state.entities[key];
              didMutate = true;
            }
          });
          if (didMutate) {
            state.ids = state.ids.filter((id) => id in state.entities);
          }
        }
        function removeAllMutably(state) {
          Object.assign(state, {
            ids: [],
            entities: {},
          });
        }
        function takeNewKey(keys, update, state) {
          const original3 = state.entities[update.id];
          if (original3 === void 0) {
            return false;
          }
          const updated = Object.assign({}, original3, update.changes);
          const newKey = selectIdValue(updated, selectId);
          const hasNewKey = newKey !== update.id;
          if (hasNewKey) {
            keys[update.id] = newKey;
            delete state.entities[update.id];
          }
          state.entities[newKey] = updated;
          return hasNewKey;
        }
        function updateOneMutably(update, state) {
          return updateManyMutably([update], state);
        }
        function updateManyMutably(updates, state) {
          const newKeys = {};
          const updatesPerEntity = {};
          updates.forEach((update) => {
            if (update.id in state.entities) {
              updatesPerEntity[update.id] = {
                id: update.id,
                // Spreads ignore falsy values, so this works even if there isn't
                // an existing update already at this key
                changes: {
                  ...updatesPerEntity[update.id]?.changes,
                  ...update.changes,
                },
              };
            }
          });
          updates = Object.values(updatesPerEntity);
          const didMutateEntities = updates.length > 0;
          if (didMutateEntities) {
            const didMutateIds =
              updates.filter((update) => takeNewKey(newKeys, update, state))
                .length > 0;
            if (didMutateIds) {
              state.ids = Object.values(state.entities).map((e) =>
                selectIdValue(e, selectId)
              );
            }
          }
        }
        function upsertOneMutably(entity, state) {
          return upsertManyMutably([entity], state);
        }
        function upsertManyMutably(newEntities, state) {
          const [added, updated] = splitAddedUpdatedEntities(
            newEntities,
            selectId,
            state
          );
          addManyMutably(added, state);
          updateManyMutably(updated, state);
        }
        return {
          removeAll: createSingleArgumentStateOperator(removeAllMutably),
          addOne: createStateOperator(addOneMutably),
          addMany: createStateOperator(addManyMutably),
          setOne: createStateOperator(setOneMutably),
          setMany: createStateOperator(setManyMutably),
          setAll: createStateOperator(setAllMutably),
          updateOne: createStateOperator(updateOneMutably),
          updateMany: createStateOperator(updateManyMutably),
          upsertOne: createStateOperator(upsertOneMutably),
          upsertMany: createStateOperator(upsertManyMutably),
          removeOne: createStateOperator(removeOneMutably),
          removeMany: createStateOperator(removeManyMutably),
        };
      }
      // src/entities/sorted_state_adapter.ts
      function findInsertIndex(sortedItems, item, comparisonFunction) {
        let lowIndex = 0;
        let highIndex = sortedItems.length;
        while (lowIndex < highIndex) {
          let middleIndex = (lowIndex + highIndex) >>> 1;
          const currentItem = sortedItems[middleIndex];
          const res = comparisonFunction(item, currentItem);
          if (res >= 0) {
            lowIndex = middleIndex + 1;
          } else {
            highIndex = middleIndex;
          }
        }
        return lowIndex;
      }
      function insert(sortedItems, item, comparisonFunction) {
        const insertAtIndex = findInsertIndex(
          sortedItems,
          item,
          comparisonFunction
        );
        sortedItems.splice(insertAtIndex, 0, item);
        return sortedItems;
      }
      function createSortedStateAdapter(selectId, comparer) {
        const { removeOne, removeMany, removeAll } =
          createUnsortedStateAdapter(selectId);
        function addOneMutably(entity, state) {
          return addManyMutably([entity], state);
        }
        function addManyMutably(newEntities, state, existingIds) {
          newEntities = ensureEntitiesArray(newEntities);
          const existingKeys = new Set(existingIds ?? getCurrent(state.ids));
          const models = newEntities.filter(
            (model) => !existingKeys.has(selectIdValue(model, selectId))
          );
          if (models.length !== 0) {
            mergeFunction(state, models);
          }
        }
        function setOneMutably(entity, state) {
          return setManyMutably([entity], state);
        }
        function setManyMutably(newEntities, state) {
          newEntities = ensureEntitiesArray(newEntities);
          if (newEntities.length !== 0) {
            for (const item of newEntities) {
              delete state.entities[selectId(item)];
            }
            mergeFunction(state, newEntities);
          }
        }
        function setAllMutably(newEntities, state) {
          newEntities = ensureEntitiesArray(newEntities);
          state.entities = {};
          state.ids = [];
          addManyMutably(newEntities, state, []);
        }
        function updateOneMutably(update, state) {
          return updateManyMutably([update], state);
        }
        function updateManyMutably(updates, state) {
          let appliedUpdates = false;
          let replacedIds = false;
          for (let update of updates) {
            const entity = state.entities[update.id];
            if (!entity) {
              continue;
            }
            appliedUpdates = true;
            Object.assign(entity, update.changes);
            const newId = selectId(entity);
            if (update.id !== newId) {
              replacedIds = true;
              delete state.entities[update.id];
              const oldIndex = state.ids.indexOf(update.id);
              state.ids[oldIndex] = newId;
              state.entities[newId] = entity;
            }
          }
          if (appliedUpdates) {
            mergeFunction(state, [], appliedUpdates, replacedIds);
          }
        }
        function upsertOneMutably(entity, state) {
          return upsertManyMutably([entity], state);
        }
        function upsertManyMutably(newEntities, state) {
          const [added, updated, existingIdsArray] = splitAddedUpdatedEntities(
            newEntities,
            selectId,
            state
          );
          if (added.length) {
            addManyMutably(added, state, existingIdsArray);
          }
          if (updated.length) {
            updateManyMutably(updated, state);
          }
        }
        function areArraysEqual(a, b) {
          if (a.length !== b.length) {
            return false;
          }
          for (let i = 0; i < a.length; i++) {
            if (a[i] === b[i]) {
              continue;
            }
            return false;
          }
          return true;
        }
        const mergeFunction = (
          state,
          addedItems,
          appliedUpdates,
          replacedIds
        ) => {
          const currentEntities = getCurrent(state.entities);
          const currentIds = getCurrent(state.ids);
          const stateEntities = state.entities;
          let ids = currentIds;
          if (replacedIds) {
            ids = new Set(currentIds);
          }
          let sortedEntities = [];
          for (const id of ids) {
            const entity = currentEntities[id];
            if (entity) {
              sortedEntities.push(entity);
            }
          }
          const wasPreviouslyEmpty = sortedEntities.length === 0;
          for (const item of addedItems) {
            stateEntities[selectId(item)] = item;
            if (!wasPreviouslyEmpty) {
              insert(sortedEntities, item, comparer);
            }
          }
          if (wasPreviouslyEmpty) {
            sortedEntities = addedItems.slice().sort(comparer);
          } else if (appliedUpdates) {
            sortedEntities.sort(comparer);
          }
          const newSortedIds = sortedEntities.map(selectId);
          if (!areArraysEqual(currentIds, newSortedIds)) {
            state.ids = newSortedIds;
          }
        };
        return {
          removeOne,
          removeMany,
          removeAll,
          addOne: createStateOperator(addOneMutably),
          updateOne: createStateOperator(updateOneMutably),
          upsertOne: createStateOperator(upsertOneMutably),
          setOne: createStateOperator(setOneMutably),
          setMany: createStateOperator(setManyMutably),
          setAll: createStateOperator(setAllMutably),
          addMany: createStateOperator(addManyMutably),
          updateMany: createStateOperator(updateManyMutably),
          upsertMany: createStateOperator(upsertManyMutably),
        };
      }
      // src/entities/create_adapter.ts
      function createEntityAdapter(options = {}) {
        const { selectId, sortComparer } = {
          sortComparer: false,
          selectId: (instance) => instance.id,
          ...options,
        };
        const stateAdapter = sortComparer
          ? createSortedStateAdapter(selectId, sortComparer)
          : createUnsortedStateAdapter(selectId);
        const stateFactory = createInitialStateFactory(stateAdapter);
        const selectorsFactory = createSelectorsFactory();
        return {
          selectId,
          sortComparer,
          ...stateFactory,
          ...selectorsFactory,
          ...stateAdapter,
        };
      }
      // src/listenerMiddleware/exceptions.ts
      var task = 'task';
      var listener = 'listener';
      var completed = 'completed';
      var cancelled = 'cancelled';
      var taskCancelled = `task-${cancelled}`;
      var taskCompleted = `task-${completed}`;
      var listenerCancelled = `${listener}-${cancelled}`;
      var listenerCompleted = `${listener}-${completed}`;
      var TaskAbortError = class {
        constructor(code) {
          this.code = code;
          this.message = `${task} ${cancelled} (reason: ${code})`;
        }
        name = 'TaskAbortError';
        message;
      };
      // src/listenerMiddleware/utils.ts
      var assertFunction = (func, expected) => {
        if (typeof func !== 'function') {
          throw new TypeError(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : `${expected} is not a function`
          );
        }
      };
      var noop2 = () => {};
      var catchRejection = (promise, onError = noop2) => {
        promise.catch(onError);
        return promise;
      };
      var addAbortSignalListener = (abortSignal, callback) => {
        abortSignal.addEventListener('abort', callback, {
          once: true,
        });
        return () => abortSignal.removeEventListener('abort', callback);
      };
      var abortControllerWithReason = (abortController, reason) => {
        const signal = abortController.signal;
        if (signal.aborted) {
          return;
        }
        if (!('reason' in signal)) {
          Object.defineProperty(signal, 'reason', {
            enumerable: true,
            value: reason,
            configurable: true,
            writable: true,
          });
        }
        abortController.abort(reason);
      };
      // src/listenerMiddleware/task.ts
      var validateActive = (signal) => {
        if (signal.aborted) {
          const { reason } = signal;
          throw new TaskAbortError(reason);
        }
      };
      function raceWithSignal(signal, promise) {
        let cleanup = noop2;
        return new Promise((resolve, reject) => {
          const notifyRejection = () =>
            reject(new TaskAbortError(signal.reason));
          if (signal.aborted) {
            notifyRejection();
            return;
          }
          cleanup = addAbortSignalListener(signal, notifyRejection);
          promise.finally(() => cleanup()).then(resolve, reject);
        }).finally(() => {
          cleanup = noop2;
        });
      }
      var runTask = async (task2, cleanUp) => {
        try {
          await Promise.resolve();
          const value = await task2();
          return {
            status: 'ok',
            value,
          };
        } catch (error) {
          return {
            status: error instanceof TaskAbortError ? 'cancelled' : 'rejected',
            error,
          };
        } finally {
          cleanUp?.();
        }
      };
      var createPause = (signal) => {
        return (promise) => {
          return catchRejection(
            raceWithSignal(signal, promise).then((output) => {
              validateActive(signal);
              return output;
            })
          );
        };
      };
      var createDelay = (signal) => {
        const pause = createPause(signal);
        return (timeoutMs) => {
          return pause(
            new Promise((resolve) => setTimeout(resolve, timeoutMs))
          );
        };
      };
      // src/listenerMiddleware/index.ts
      var { assign } = Object;
      var INTERNAL_NIL_TOKEN = {};
      var alm = 'listenerMiddleware';
      var createFork = (parentAbortSignal, parentBlockingPromises) => {
        const linkControllers = (controller) =>
          addAbortSignalListener(parentAbortSignal, () =>
            abortControllerWithReason(controller, parentAbortSignal.reason)
          );
        return (taskExecutor, opts) => {
          assertFunction(taskExecutor, 'taskExecutor');
          const childAbortController = new AbortController();
          linkControllers(childAbortController);
          const result = runTask(
            async () => {
              validateActive(parentAbortSignal);
              validateActive(childAbortController.signal);
              const result2 = await taskExecutor({
                pause: createPause(childAbortController.signal),
                delay: createDelay(childAbortController.signal),
                signal: childAbortController.signal,
              });
              validateActive(childAbortController.signal);
              return result2;
            },
            () => abortControllerWithReason(childAbortController, taskCompleted)
          );
          if (opts?.autoJoin) {
            parentBlockingPromises.push(result.catch(noop2));
          }
          return {
            result: createPause(parentAbortSignal)(result),
            cancel() {
              abortControllerWithReason(childAbortController, taskCancelled);
            },
          };
        };
      };
      var createTakePattern = (startListening, signal) => {
        const take = async (predicate, timeout) => {
          validateActive(signal);
          let unsubscribe = () => {};
          const tuplePromise = new Promise((resolve, reject) => {
            let stopListening = startListening({
              predicate,
              effect: (action, listenerApi) => {
                listenerApi.unsubscribe();
                resolve([
                  action,
                  listenerApi.getState(),
                  listenerApi.getOriginalState(),
                ]);
              },
            });
            unsubscribe = () => {
              stopListening();
              reject();
            };
          });
          const promises = [tuplePromise];
          if (timeout != null) {
            promises.push(
              new Promise((resolve) => setTimeout(resolve, timeout, null))
            );
          }
          try {
            const output = await raceWithSignal(signal, Promise.race(promises));
            validateActive(signal);
            return output;
          } finally {
            unsubscribe();
          }
        };
        return (predicate, timeout) => catchRejection(take(predicate, timeout));
      };
      var getListenerEntryPropsFrom = (options) => {
        let { type, actionCreator, matcher, predicate, effect } = options;
        if (type) {
          predicate = createAction(type).match;
        } else if (actionCreator) {
          type = actionCreator.type;
          predicate = actionCreator.match;
        } else if (matcher) {
          predicate = matcher;
        } else if (predicate) {
        } else {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'Creating or removing a listener requires one of the known fields for matching an action'
          );
        }
        assertFunction(effect, 'options.listener');
        return {
          predicate,
          type,
          effect,
        };
      };
      var createListenerEntry = /* @__PURE__ */ assign(
        (options) => {
          const { type, predicate, effect } =
            getListenerEntryPropsFrom(options);
          const entry = {
            id: nanoid(),
            effect,
            type,
            predicate,
            pending: /* @__PURE__ */ new Set(),
            unsubscribe: () => {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : 'Unsubscribe not initialized'
              );
            },
          };
          return entry;
        },
        {
          withTypes: () => createListenerEntry,
        }
      );
      var findListenerEntry = (listenerMap, options) => {
        const { type, effect, predicate } = getListenerEntryPropsFrom(options);
        return Array.from(listenerMap.values()).find((entry) => {
          const matchPredicateOrType =
            typeof type === 'string'
              ? entry.type === type
              : entry.predicate === predicate;
          return matchPredicateOrType && entry.effect === effect;
        });
      };
      var cancelActiveListeners = (entry) => {
        entry.pending.forEach((controller) => {
          abortControllerWithReason(controller, listenerCancelled);
        });
      };
      var createClearListenerMiddleware = (listenerMap) => {
        return () => {
          listenerMap.forEach(cancelActiveListeners);
          listenerMap.clear();
        };
      };
      var safelyNotifyError = (errorHandler, errorToNotify, errorInfo) => {
        try {
          errorHandler(errorToNotify, errorInfo);
        } catch (errorHandlerError) {
          setTimeout(() => {
            throw errorHandlerError;
          }, 0);
        }
      };
      var addListener = /* @__PURE__ */ assign(
        /* @__PURE__ */ createAction(`${alm}/add`),
        {
          withTypes: () => addListener,
        }
      );
      var clearAllListeners = /* @__PURE__ */ createAction(`${alm}/removeAll`);
      var removeListener = /* @__PURE__ */ assign(
        /* @__PURE__ */ createAction(`${alm}/remove`),
        {
          withTypes: () => removeListener,
        }
      );
      var defaultErrorHandler = (...args) => {
        console.error(`${alm}/error`, ...args);
      };
      var createListenerMiddleware = (middlewareOptions = {}) => {
        const listenerMap = /* @__PURE__ */ new Map();
        const { extra, onError = defaultErrorHandler } = middlewareOptions;
        assertFunction(onError, 'onError');
        const insertEntry = (entry) => {
          entry.unsubscribe = () => listenerMap.delete(entry.id);
          listenerMap.set(entry.id, entry);
          return (cancelOptions) => {
            entry.unsubscribe();
            if (cancelOptions?.cancelActive) {
              cancelActiveListeners(entry);
            }
          };
        };
        const startListening = (options) => {
          const entry =
            findListenerEntry(listenerMap, options) ??
            createListenerEntry(options);
          return insertEntry(entry);
        };
        assign(startListening, {
          withTypes: () => startListening,
        });
        const stopListening = (options) => {
          const entry = findListenerEntry(listenerMap, options);
          if (entry) {
            entry.unsubscribe();
            if (options.cancelActive) {
              cancelActiveListeners(entry);
            }
          }
          return !!entry;
        };
        assign(stopListening, {
          withTypes: () => stopListening,
        });
        const notifyListener = async (entry, action, api, getOriginalState) => {
          const internalTaskController = new AbortController();
          const take = createTakePattern(
            startListening,
            internalTaskController.signal
          );
          const autoJoinPromises = [];
          try {
            entry.pending.add(internalTaskController);
            await Promise.resolve(
              entry.effect(
                action, // Use assign() rather than ... to avoid extra helper functions added to bundle
                assign({}, api, {
                  getOriginalState,
                  condition: (predicate, timeout) =>
                    take(predicate, timeout).then(Boolean),
                  take,
                  delay: createDelay(internalTaskController.signal),
                  pause: createPause(internalTaskController.signal),
                  extra,
                  signal: internalTaskController.signal,
                  fork: createFork(
                    internalTaskController.signal,
                    autoJoinPromises
                  ),
                  unsubscribe: entry.unsubscribe,
                  subscribe: () => {
                    listenerMap.set(entry.id, entry);
                  },
                  cancelActiveListeners: () => {
                    entry.pending.forEach((controller, _, set) => {
                      if (controller !== internalTaskController) {
                        abortControllerWithReason(
                          controller,
                          listenerCancelled
                        );
                        set.delete(controller);
                      }
                    });
                  },
                  cancel: () => {
                    abortControllerWithReason(
                      internalTaskController,
                      listenerCancelled
                    );
                    entry.pending.delete(internalTaskController);
                  },
                  throwIfCancelled: () => {
                    validateActive(internalTaskController.signal);
                  },
                })
              )
            );
          } catch (listenerError) {
            if (!(listenerError instanceof TaskAbortError)) {
              safelyNotifyError(onError, listenerError, {
                raisedBy: 'effect',
              });
            }
          } finally {
            await Promise.all(autoJoinPromises);
            abortControllerWithReason(
              internalTaskController,
              listenerCompleted
            );
            entry.pending.delete(internalTaskController);
          }
        };
        const clearListenerMiddleware =
          createClearListenerMiddleware(listenerMap);
        const middleware = (api) => (next) => (action) => {
          if (
            !(0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isAction'
            ])(action)
          ) {
            return next(action);
          }
          if (addListener.match(action)) {
            return startListening(action.payload);
          }
          if (clearAllListeners.match(action)) {
            clearListenerMiddleware();
            return;
          }
          if (removeListener.match(action)) {
            return stopListening(action.payload);
          }
          let originalState = api.getState();
          const getOriginalState = () => {
            if (originalState === INTERNAL_NIL_TOKEN) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : `${alm}: getOriginalState can only be called synchronously`
              );
            }
            return originalState;
          };
          let result;
          try {
            result = next(action);
            if (listenerMap.size > 0) {
              const currentState = api.getState();
              const listenerEntries = Array.from(listenerMap.values());
              for (const entry of listenerEntries) {
                let runListener = false;
                try {
                  runListener = entry.predicate(
                    action,
                    currentState,
                    originalState
                  );
                } catch (predicateError) {
                  runListener = false;
                  safelyNotifyError(onError, predicateError, {
                    raisedBy: 'predicate',
                  });
                }
                if (!runListener) {
                  continue;
                }
                notifyListener(entry, action, api, getOriginalState);
              }
            }
          } finally {
            originalState = INTERNAL_NIL_TOKEN;
          }
          return result;
        };
        return {
          middleware,
          startListening,
          stopListening,
          clearListeners: clearListenerMiddleware,
        };
      };
      var createMiddlewareEntry = (middleware) => ({
        middleware,
        applied: /* @__PURE__ */ new Map(),
      });
      var matchInstance = (instanceId) => (action) =>
        action?.meta?.instanceId === instanceId;
      var createDynamicMiddleware = () => {
        const instanceId = nanoid();
        const middlewareMap = /* @__PURE__ */ new Map();
        const withMiddleware = Object.assign(
          createAction('dynamicMiddleware/add', (...middlewares) => ({
            payload: middlewares,
            meta: {
              instanceId,
            },
          })),
          {
            withTypes: () => withMiddleware,
          }
        );
        const addMiddleware = Object.assign(
          function addMiddleware2(...middlewares) {
            middlewares.forEach((middleware2) => {
              getOrInsertComputed(
                middlewareMap,
                middleware2,
                createMiddlewareEntry
              );
            });
          },
          {
            withTypes: () => addMiddleware,
          }
        );
        const getFinalMiddleware = (api) => {
          const appliedMiddleware = Array.from(middlewareMap.values()).map(
            (entry) => getOrInsertComputed(entry.applied, api, entry.middleware)
          );
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'compose'
          ])(...appliedMiddleware);
        };
        const isWithMiddleware = isAllOf(
          withMiddleware,
          matchInstance(instanceId)
        );
        const middleware = (api) => (next) => (action) => {
          if (isWithMiddleware(action)) {
            addMiddleware(...action.payload);
            return api.dispatch;
          }
          return getFinalMiddleware(api)(next)(action);
        };
        return {
          middleware,
          addMiddleware,
          withMiddleware,
          instanceId,
        };
      };
      var isSliceLike = (maybeSliceLike) =>
        'reducerPath' in maybeSliceLike &&
        typeof maybeSliceLike.reducerPath === 'string';
      var getReducers = (slices) =>
        slices.flatMap((sliceOrMap) =>
          isSliceLike(sliceOrMap)
            ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]]
            : Object.entries(sliceOrMap)
        );
      var ORIGINAL_STATE = Symbol.for('rtk-state-proxy-original');
      var isStateProxy = (value) => !!value && !!value[ORIGINAL_STATE];
      var stateProxyMap = /* @__PURE__ */ new WeakMap();
      var createStateProxy = (state, reducerMap, initialStateCache) =>
        getOrInsertComputed(
          stateProxyMap,
          state,
          () =>
            new Proxy(state, {
              get: (target, prop, receiver) => {
                if (prop === ORIGINAL_STATE) return target;
                const result = Reflect.get(target, prop, receiver);
                if (typeof result === 'undefined') {
                  const cached = initialStateCache[prop];
                  if (typeof cached !== 'undefined') return cached;
                  const reducer = reducerMap[prop];
                  if (reducer) {
                    const reducerResult = reducer(void 0, {
                      type: nanoid(),
                    });
                    if (typeof reducerResult === 'undefined') {
                      throw new Error(
                        ('TURBOPACK compile-time falsy', 0)
                          ? 'TURBOPACK unreachable'
                          : `The slice reducer for key "${prop.toString()}" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`
                      );
                    }
                    initialStateCache[prop] = reducerResult;
                    return reducerResult;
                  }
                }
                return result;
              },
            })
        );
      var original = (state) => {
        if (!isStateProxy(state)) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'original must be used on state Proxy'
          );
        }
        return state[ORIGINAL_STATE];
      };
      var emptyObject = {};
      var noopReducer = (state = emptyObject) => state;
      function combineSlices(...slices) {
        const reducerMap = Object.fromEntries(getReducers(slices));
        const getReducer = () =>
          Object.keys(reducerMap).length
            ? (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'combineReducers'
              ])(reducerMap)
            : noopReducer;
        let reducer = getReducer();
        function combinedReducer(state, action) {
          return reducer(state, action);
        }
        combinedReducer.withLazyLoadedSlices = () => combinedReducer;
        const initialStateCache = {};
        const inject = (slice, config = {}) => {
          const { reducerPath, reducer: reducerToInject } = slice;
          const currentReducer = reducerMap[reducerPath];
          if (
            !config.overrideExisting &&
            currentReducer &&
            currentReducer !== reducerToInject
          ) {
            if (
              typeof process !== 'undefined' &&
              ('TURBOPACK compile-time value', 'development') === 'development'
            ) {
              console.error(
                `called \`inject\` to override already-existing reducer ${reducerPath} without specifying \`overrideExisting: true\``
              );
            }
            return combinedReducer;
          }
          if (config.overrideExisting && currentReducer !== reducerToInject) {
            delete initialStateCache[reducerPath];
          }
          reducerMap[reducerPath] = reducerToInject;
          reducer = getReducer();
          return combinedReducer;
        };
        const selector = Object.assign(
          function makeSelector(selectorFn, selectState) {
            return function selector2(state, ...args) {
              return selectorFn(
                createStateProxy(
                  selectState ? selectState(state, ...args) : state,
                  reducerMap,
                  initialStateCache
                ),
                ...args
              );
            };
          },
          {
            original,
          }
        );
        return Object.assign(combinedReducer, {
          inject,
          selector,
        });
      }
      // src/formatProdErrorMessage.ts
      function formatProdErrorMessage(code) {
        return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
      }
      //# sourceMappingURL=redux-toolkit.modern.mjs.map
    },
  '[project]/node_modules/immer/dist/immer.mjs [app-rsc] (ecmascript) <export produce as createNextState>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        createNextState: () =>
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'produce'
          ],
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/immer/dist/immer.mjs [app-rsc] (ecmascript)'
        );
    },
  '[project]/node_modules/@standard-schema/utils/dist/index.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      // src/getDotPath/getDotPath.ts
      __turbopack_context__.s({
        SchemaError: () => SchemaError,
        getDotPath: () => getDotPath,
      });
      function getDotPath(issue) {
        if (issue.path?.length) {
          let dotPath = '';
          for (const item of issue.path) {
            const key = typeof item === 'object' ? item.key : item;
            if (typeof key === 'string' || typeof key === 'number') {
              if (dotPath) {
                dotPath += `.${key}`;
              } else {
                dotPath += key;
              }
            } else {
              return null;
            }
          }
          return dotPath;
        }
        return null;
      }
      // src/SchemaError/SchemaError.ts
      var SchemaError = class extends Error {
        /**
         * The schema issues.
         */ issues;
        /**
         * Creates a schema error with useful information.
         *
         * @param issues The schema issues.
         */ constructor(issues) {
          super(issues[0].message);
          this.name = 'SchemaError';
          this.issues = issues;
        }
      };
    },
  '[project]/node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      // src/query/core/apiState.ts
      __turbopack_context__.s({
        NamedSchemaError: () => NamedSchemaError,
        QueryStatus: () => QueryStatus,
        _NEVER: () => _NEVER,
        buildCreateApi: () => buildCreateApi,
        copyWithStructuralSharing: () => copyWithStructuralSharing,
        coreModule: () => coreModule,
        coreModuleName: () => coreModuleName,
        createApi: () => createApi,
        defaultSerializeQueryArgs: () => defaultSerializeQueryArgs,
        fakeBaseQuery: () => fakeBaseQuery,
        fetchBaseQuery: () => fetchBaseQuery,
        retry: () => retry,
        setupListeners: () => setupListeners,
        skipToken: () => skipToken,
      });
      // src/query/core/rtkImports.ts
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs [app-rsc] (ecmascript) <locals>'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/reselect/dist/reselect.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/redux/dist/redux.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/immer/dist/immer.mjs [app-rsc] (ecmascript) <export produce as createNextState>'
        );
      // src/query/core/buildThunks.ts
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/immer/dist/immer.mjs [app-rsc] (ecmascript)'
        );
      // src/query/standardSchema.ts
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$standard$2d$schema$2f$utils$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@standard-schema/utils/dist/index.js [app-rsc] (ecmascript)'
        );
      var QueryStatus = /* @__PURE__ */ ((QueryStatus2) => {
        QueryStatus2['uninitialized'] = 'uninitialized';
        QueryStatus2['pending'] = 'pending';
        QueryStatus2['fulfilled'] = 'fulfilled';
        QueryStatus2['rejected'] = 'rejected';
        return QueryStatus2;
      })(QueryStatus || {});
      function getRequestStatusFlags(status) {
        return {
          status,
          isUninitialized: status === 'uninitialized' /* uninitialized */,
          isLoading: status === 'pending' /* pending */,
          isSuccess: status === 'fulfilled' /* fulfilled */,
          isError: status === 'rejected' /* rejected */,
        };
      }
      // src/query/utils/copyWithStructuralSharing.ts
      var isPlainObject2 =
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'isPlainObject'
        ];
      function copyWithStructuralSharing(oldObj, newObj) {
        if (
          oldObj === newObj ||
          !(
            (isPlainObject2(oldObj) && isPlainObject2(newObj)) ||
            (Array.isArray(oldObj) && Array.isArray(newObj))
          )
        ) {
          return newObj;
        }
        const newKeys = Object.keys(newObj);
        const oldKeys = Object.keys(oldObj);
        let isSameObject = newKeys.length === oldKeys.length;
        const mergeObj = Array.isArray(newObj) ? [] : {};
        for (const key of newKeys) {
          mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);
          if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];
        }
        return isSameObject ? oldObj : mergeObj;
      }
      // src/query/utils/countObjectKeys.ts
      function countObjectKeys(obj) {
        let count = 0;
        for (const _key in obj) {
          count++;
        }
        return count;
      }
      // src/query/utils/flatten.ts
      var flatten = (arr) => [].concat(...arr);
      // src/query/utils/isAbsoluteUrl.ts
      function isAbsoluteUrl(url) {
        return new RegExp(`(^|:)//`).test(url);
      }
      // src/query/utils/isDocumentVisible.ts
      function isDocumentVisible() {
        if (typeof document === 'undefined') {
          return true;
        }
        return document.visibilityState !== 'hidden';
      }
      // src/query/utils/isNotNullish.ts
      function isNotNullish(v) {
        return v != null;
      }
      // src/query/utils/isOnline.ts
      function isOnline() {
        return typeof navigator === 'undefined'
          ? true
          : navigator.onLine === void 0
            ? true
            : navigator.onLine;
      }
      // src/query/utils/joinUrls.ts
      var withoutTrailingSlash = (url) => url.replace(/\/$/, '');
      var withoutLeadingSlash = (url) => url.replace(/^\//, '');
      function joinUrls(base, url) {
        if (!base) {
          return url;
        }
        if (!url) {
          return base;
        }
        if (isAbsoluteUrl(url)) {
          return url;
        }
        const delimiter = base.endsWith('/') || !url.startsWith('?') ? '/' : '';
        base = withoutTrailingSlash(base);
        url = withoutLeadingSlash(url);
        return `${base}${delimiter}${url}`;
      }
      // src/query/utils/getOrInsert.ts
      function getOrInsert(map, key, value) {
        if (map.has(key)) return map.get(key);
        return map.set(key, value).get(key);
      }
      // src/query/fetchBaseQuery.ts
      var defaultFetchFn = (...args) => fetch(...args);
      var defaultValidateStatus = (response) =>
        response.status >= 200 && response.status <= 299;
      var defaultIsJsonContentType = (headers) =>
        /*applicat*/ /ion\/(vnd\.api\+)?json/.test(
          headers.get('content-type') || ''
        );
      function stripUndefined(obj) {
        if (
          !(0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'isPlainObject'
          ])(obj)
        ) {
          return obj;
        }
        const copy = {
          ...obj,
        };
        for (const [k, v] of Object.entries(copy)) {
          if (v === void 0) delete copy[k];
        }
        return copy;
      }
      function fetchBaseQuery({
        baseUrl,
        prepareHeaders = (x) => x,
        fetchFn = defaultFetchFn,
        paramsSerializer,
        isJsonContentType = defaultIsJsonContentType,
        jsonContentType = 'application/json',
        jsonReplacer,
        timeout: defaultTimeout,
        responseHandler: globalResponseHandler,
        validateStatus: globalValidateStatus,
        ...baseFetchOptions
      } = {}) {
        if (typeof fetch === 'undefined' && fetchFn === defaultFetchFn) {
          console.warn(
            'Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.'
          );
        }
        return async (arg, api, extraOptions) => {
          const { getState, extra, endpoint, forced, type } = api;
          let meta;
          let {
            url,
            headers = new Headers(baseFetchOptions.headers),
            params = void 0,
            responseHandler = globalResponseHandler ?? 'json',
            validateStatus = globalValidateStatus ?? defaultValidateStatus,
            timeout = defaultTimeout,
            ...rest
          } = typeof arg == 'string'
            ? {
                url: arg,
              }
            : arg;
          let abortController,
            signal = api.signal;
          if (timeout) {
            abortController = new AbortController();
            api.signal.addEventListener('abort', abortController.abort);
            signal = abortController.signal;
          }
          let config = {
            ...baseFetchOptions,
            signal,
            ...rest,
          };
          headers = new Headers(stripUndefined(headers));
          config.headers =
            (await prepareHeaders(headers, {
              getState,
              arg,
              extra,
              endpoint,
              forced,
              type,
              extraOptions,
            })) || headers;
          const isJsonifiable = (body) =>
            typeof body === 'object' &&
            ((0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isPlainObject'
            ])(body) ||
              Array.isArray(body) ||
              typeof body.toJSON === 'function');
          if (
            !config.headers.has('content-type') &&
            isJsonifiable(config.body)
          ) {
            config.headers.set('content-type', jsonContentType);
          }
          if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {
            config.body = JSON.stringify(config.body, jsonReplacer);
          }
          if (params) {
            const divider = ~url.indexOf('?') ? '&' : '?';
            const query = paramsSerializer
              ? paramsSerializer(params)
              : new URLSearchParams(stripUndefined(params));
            url += divider + query;
          }
          url = joinUrls(baseUrl, url);
          const request = new Request(url, config);
          const requestClone = new Request(url, config);
          meta = {
            request: requestClone,
          };
          let response,
            timedOut = false,
            timeoutId =
              abortController &&
              setTimeout(() => {
                timedOut = true;
                abortController.abort();
              }, timeout);
          try {
            response = await fetchFn(request);
          } catch (e) {
            return {
              error: {
                status: timedOut ? 'TIMEOUT_ERROR' : 'FETCH_ERROR',
                error: String(e),
              },
              meta,
            };
          } finally {
            if (timeoutId) clearTimeout(timeoutId);
            abortController?.signal.removeEventListener(
              'abort',
              abortController.abort
            );
          }
          const responseClone = response.clone();
          meta.response = responseClone;
          let resultData;
          let responseText = '';
          try {
            let handleResponseError;
            await Promise.all([
              handleResponse(response, responseHandler).then(
                (r) => (resultData = r),
                (e) => (handleResponseError = e)
              ),
              // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182
              // we *have* to "use up" both streams at the same time or they will stop running in node-fetch scenarios
              responseClone.text().then(
                (r) => (responseText = r),
                () => {}
              ),
            ]);
            if (handleResponseError) throw handleResponseError;
          } catch (e) {
            return {
              error: {
                status: 'PARSING_ERROR',
                originalStatus: response.status,
                data: responseText,
                error: String(e),
              },
              meta,
            };
          }
          return validateStatus(response, resultData)
            ? {
                data: resultData,
                meta,
              }
            : {
                error: {
                  status: response.status,
                  data: resultData,
                },
                meta,
              };
        };
        //TURBOPACK unreachable
        async function handleResponse(response, responseHandler) {
          if (typeof responseHandler === 'function') {
            return responseHandler(response);
          }
          if (responseHandler === 'content-type') {
            responseHandler = isJsonContentType(response.headers)
              ? 'json'
              : 'text';
          }
          if (responseHandler === 'json') {
            const text = await response.text();
            return text.length ? JSON.parse(text) : null;
          }
          return response.text();
        }
      }
      // src/query/HandledError.ts
      var HandledError = class {
        constructor(value, meta = void 0) {
          this.value = value;
          this.meta = meta;
        }
      };
      // src/query/retry.ts
      async function defaultBackoff(attempt = 0, maxRetries = 5) {
        const attempts = Math.min(attempt, maxRetries);
        const timeout = ~~((Math.random() + 0.4) * (300 << attempts));
        await new Promise((resolve) =>
          setTimeout((res) => resolve(res), timeout)
        );
      }
      function fail(error, meta) {
        throw Object.assign(
          new HandledError({
            error,
            meta,
          }),
          {
            throwImmediately: true,
          }
        );
      }
      var EMPTY_OPTIONS = {};
      var retryWithBackoff =
        (baseQuery, defaultOptions) => async (args, api, extraOptions) => {
          const possibleMaxRetries = [
            5,
            (defaultOptions || EMPTY_OPTIONS).maxRetries,
            (extraOptions || EMPTY_OPTIONS).maxRetries,
          ].filter((x) => x !== void 0);
          const [maxRetries] = possibleMaxRetries.slice(-1);
          const defaultRetryCondition = (_, __, { attempt }) =>
            attempt <= maxRetries;
          const options = {
            maxRetries,
            backoff: defaultBackoff,
            retryCondition: defaultRetryCondition,
            ...defaultOptions,
            ...extraOptions,
          };
          let retry2 = 0;
          while (true) {
            try {
              const result = await baseQuery(args, api, extraOptions);
              if (result.error) {
                throw new HandledError(result);
              }
              return result;
            } catch (e) {
              retry2++;
              if (e.throwImmediately) {
                if (e instanceof HandledError) {
                  return e.value;
                }
                throw e;
              }
              if (
                e instanceof HandledError &&
                !options.retryCondition(e.value.error, args, {
                  attempt: retry2,
                  baseQueryApi: api,
                  extraOptions,
                })
              ) {
                return e.value;
              }
              await options.backoff(retry2, options.maxRetries);
            }
          }
        };
      var retry = /* @__PURE__ */ Object.assign(retryWithBackoff, {
        fail,
      });
      // src/query/core/setupListeners.ts
      var onFocus = /* @__PURE__ */ (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
        'createAction'
      ])('__rtkq/focused');
      var onFocusLost = /* @__PURE__ */ (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
        'createAction'
      ])('__rtkq/unfocused');
      var onOnline = /* @__PURE__ */ (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
        'createAction'
      ])('__rtkq/online');
      var onOffline = /* @__PURE__ */ (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
        'createAction'
      ])('__rtkq/offline');
      var initialized = false;
      function setupListeners(dispatch, customHandler) {
        function defaultHandler() {
          const handleFocus = () => dispatch(onFocus());
          const handleFocusLost = () => dispatch(onFocusLost());
          const handleOnline = () => dispatch(onOnline());
          const handleOffline = () => dispatch(onOffline());
          const handleVisibilityChange = () => {
            if (window.document.visibilityState === 'visible') {
              handleFocus();
            } else {
              handleFocusLost();
            }
          };
          if (!initialized) {
            if (
              ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
            );
          }
          const unsubscribe = () => {
            window.removeEventListener('focus', handleFocus);
            window.removeEventListener(
              'visibilitychange',
              handleVisibilityChange
            );
            window.removeEventListener('online', handleOnline);
            window.removeEventListener('offline', handleOffline);
            initialized = false;
          };
          return unsubscribe;
        }
        return customHandler
          ? customHandler(dispatch, {
              onFocus,
              onFocusLost,
              onOffline,
              onOnline,
            })
          : defaultHandler();
      }
      // src/query/endpointDefinitions.ts
      function isQueryDefinition(e) {
        return e.type === 'query' /* query */;
      }
      function isMutationDefinition(e) {
        return e.type === 'mutation' /* mutation */;
      }
      function isInfiniteQueryDefinition(e) {
        return e.type === 'infinitequery' /* infinitequery */;
      }
      function isAnyQueryDefinition(e) {
        return isQueryDefinition(e) || isInfiniteQueryDefinition(e);
      }
      function calculateProvidedBy(
        description,
        result,
        error,
        queryArg,
        meta,
        assertTagTypes
      ) {
        if (isFunction(description)) {
          return description(result, error, queryArg, meta)
            .filter(isNotNullish)
            .map(expandTagDescription)
            .map(assertTagTypes);
        }
        if (Array.isArray(description)) {
          return description.map(expandTagDescription).map(assertTagTypes);
        }
        return [];
      }
      function isFunction(t) {
        return typeof t === 'function';
      }
      function expandTagDescription(description) {
        return typeof description === 'string'
          ? {
              type: description,
            }
          : description;
      }
      // src/tsHelpers.ts
      function asSafePromise(promise, fallback) {
        return promise.catch(fallback);
      }
      // src/query/core/buildInitiate.ts
      var forceQueryFnSymbol = Symbol('forceQueryFn');
      var isUpsertQuery = (arg) =>
        typeof arg[forceQueryFnSymbol] === 'function';
      function buildInitiate({
        serializeQueryArgs,
        queryThunk,
        infiniteQueryThunk,
        mutationThunk,
        api,
        context,
      }) {
        const runningQueries = /* @__PURE__ */ new Map();
        const runningMutations = /* @__PURE__ */ new Map();
        const {
          unsubscribeQueryResult,
          removeMutationResult,
          updateSubscriptionOptions,
        } = api.internalActions;
        return {
          buildInitiateQuery,
          buildInitiateInfiniteQuery,
          buildInitiateMutation,
          getRunningQueryThunk,
          getRunningMutationThunk,
          getRunningQueriesThunk,
          getRunningMutationsThunk,
        };
        //TURBOPACK unreachable
        function getRunningQueryThunk(endpointName, queryArgs) {
          return (dispatch) => {
            const endpointDefinition =
              context.endpointDefinitions[endpointName];
            const queryCacheKey = serializeQueryArgs({
              queryArgs,
              endpointDefinition,
              endpointName,
            });
            return runningQueries.get(dispatch)?.[queryCacheKey];
          };
        }
        function getRunningMutationThunk(
          _endpointName,
          fixedCacheKeyOrRequestId
        ) {
          return (dispatch) => {
            return runningMutations.get(dispatch)?.[fixedCacheKeyOrRequestId];
          };
        }
        function getRunningQueriesThunk() {
          return (dispatch) =>
            Object.values(runningQueries.get(dispatch) || {}).filter(
              isNotNullish
            );
        }
        function getRunningMutationsThunk() {
          return (dispatch) =>
            Object.values(runningMutations.get(dispatch) || {}).filter(
              isNotNullish
            );
        }
        function middlewareWarning(dispatch) {
          if (('TURBOPACK compile-time truthy', 1)) {
            if (middlewareWarning.triggered) return;
            const returnedValue = dispatch(
              api.internalActions.internal_getRTKQSubscriptions()
            );
            middlewareWarning.triggered = true;
            if (
              typeof returnedValue !== 'object' ||
              typeof returnedValue?.type === 'string'
            ) {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : `Warning: Middleware for RTK-Query API at reducerPath "${api.reducerPath}" has not been added to the store.
You must add the middleware for RTK-Query to function correctly!`
              );
            }
          }
        }
        function buildInitiateAnyQuery(endpointName, endpointDefinition) {
          const queryAction =
            (
              arg,
              {
                subscribe = true,
                forceRefetch,
                subscriptionOptions,
                [forceQueryFnSymbol]: forceQueryFn,
                ...rest
              } = {}
            ) =>
            (dispatch, getState) => {
              const queryCacheKey = serializeQueryArgs({
                queryArgs: arg,
                endpointDefinition,
                endpointName,
              });
              let thunk;
              const commonThunkArgs = {
                ...rest,
                type: 'query',
                subscribe,
                forceRefetch,
                subscriptionOptions,
                endpointName,
                originalArgs: arg,
                queryCacheKey,
                [forceQueryFnSymbol]: forceQueryFn,
              };
              if (isQueryDefinition(endpointDefinition)) {
                thunk = queryThunk(commonThunkArgs);
              } else {
                const { direction, initialPageParam } = rest;
                thunk = infiniteQueryThunk({
                  ...commonThunkArgs,
                  // Supply these even if undefined. This helps with a field existence
                  // check over in `buildSlice.ts`
                  direction,
                  initialPageParam,
                });
              }
              const selector = api.endpoints[endpointName].select(arg);
              const thunkResult = dispatch(thunk);
              const stateAfter = selector(getState());
              middlewareWarning(dispatch);
              const { requestId, abort } = thunkResult;
              const skippedSynchronously = stateAfter.requestId !== requestId;
              const runningQuery =
                runningQueries.get(dispatch)?.[queryCacheKey];
              const selectFromState = () => selector(getState());
              const statePromise = Object.assign(
                forceQueryFn // a query has been forced (upsertQueryData)
                  ? // -> we want to resolve it once data has been written with the data that will be written
                    thunkResult.then(selectFromState)
                  : skippedSynchronously && !runningQuery // a query has been skipped due to a condition and we do not have any currently running query
                    ? // -> we want to resolve it immediately with the current data
                      Promise.resolve(stateAfter) // query just started or one is already in flight
                    : // -> wait for the running query, then resolve with data from after that
                      Promise.all([runningQuery, thunkResult]).then(
                        selectFromState
                      ),
                {
                  arg,
                  requestId,
                  subscriptionOptions,
                  queryCacheKey,
                  abort,
                  async unwrap() {
                    const result = await statePromise;
                    if (result.isError) {
                      throw result.error;
                    }
                    return result.data;
                  },
                  refetch: () =>
                    dispatch(
                      queryAction(arg, {
                        subscribe: false,
                        forceRefetch: true,
                      })
                    ),
                  unsubscribe() {
                    if (subscribe)
                      dispatch(
                        unsubscribeQueryResult({
                          queryCacheKey,
                          requestId,
                        })
                      );
                  },
                  updateSubscriptionOptions(options) {
                    statePromise.subscriptionOptions = options;
                    dispatch(
                      updateSubscriptionOptions({
                        endpointName,
                        requestId,
                        queryCacheKey,
                        options,
                      })
                    );
                  },
                }
              );
              if (!runningQuery && !skippedSynchronously && !forceQueryFn) {
                const running = getOrInsert(runningQueries, dispatch, {});
                running[queryCacheKey] = statePromise;
                statePromise.then(() => {
                  delete running[queryCacheKey];
                  if (!countObjectKeys(running)) {
                    runningQueries.delete(dispatch);
                  }
                });
              }
              return statePromise;
            };
          return queryAction;
        }
        function buildInitiateQuery(endpointName, endpointDefinition) {
          const queryAction = buildInitiateAnyQuery(
            endpointName,
            endpointDefinition
          );
          return queryAction;
        }
        function buildInitiateInfiniteQuery(endpointName, endpointDefinition) {
          const infiniteQueryAction = buildInitiateAnyQuery(
            endpointName,
            endpointDefinition
          );
          return infiniteQueryAction;
        }
        function buildInitiateMutation(endpointName) {
          return (arg, { track = true, fixedCacheKey } = {}) =>
            (dispatch, getState) => {
              const thunk = mutationThunk({
                type: 'mutation',
                endpointName,
                originalArgs: arg,
                track,
                fixedCacheKey,
              });
              const thunkResult = dispatch(thunk);
              middlewareWarning(dispatch);
              const { requestId, abort, unwrap } = thunkResult;
              const returnValuePromise = asSafePromise(
                thunkResult.unwrap().then((data) => ({
                  data,
                })),
                (error) => ({
                  error,
                })
              );
              const reset = () => {
                dispatch(
                  removeMutationResult({
                    requestId,
                    fixedCacheKey,
                  })
                );
              };
              const ret = Object.assign(returnValuePromise, {
                arg: thunkResult.arg,
                requestId,
                abort,
                unwrap,
                reset,
              });
              const running = runningMutations.get(dispatch) || {};
              runningMutations.set(dispatch, running);
              running[requestId] = ret;
              ret.then(() => {
                delete running[requestId];
                if (!countObjectKeys(running)) {
                  runningMutations.delete(dispatch);
                }
              });
              if (fixedCacheKey) {
                running[fixedCacheKey] = ret;
                ret.then(() => {
                  if (running[fixedCacheKey] === ret) {
                    delete running[fixedCacheKey];
                    if (!countObjectKeys(running)) {
                      runningMutations.delete(dispatch);
                    }
                  }
                });
              }
              return ret;
            };
        }
      }
      var NamedSchemaError = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$standard$2d$schema$2f$utils$2f$dist$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'SchemaError'
      ] {
        constructor(issues, value, schemaName, _bqMeta) {
          super(issues);
          this.value = value;
          this.schemaName = schemaName;
          this._bqMeta = _bqMeta;
        }
      };
      async function parseWithSchema(schema, data, schemaName, bqMeta) {
        const result = await schema['~standard'].validate(data);
        if (result.issues) {
          throw new NamedSchemaError(result.issues, data, schemaName, bqMeta);
        }
        return result.value;
      }
      // src/query/core/buildThunks.ts
      function defaultTransformResponse(baseQueryReturnValue) {
        return baseQueryReturnValue;
      }
      var addShouldAutoBatch = (arg = {}) => {
        return {
          ...arg,
          [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'SHOULD_AUTOBATCH'
          ]]: true,
        };
      };
      function buildThunks({
        reducerPath,
        baseQuery,
        context: { endpointDefinitions },
        serializeQueryArgs,
        api,
        assertTagType,
        selectors,
        onSchemaFailure,
        catchSchemaFailure: globalCatchSchemaFailure,
        skipSchemaValidation: globalSkipSchemaValidation,
      }) {
        const patchQueryData =
          (endpointName, arg, patches, updateProvided) =>
          (dispatch, getState) => {
            const endpointDefinition = endpointDefinitions[endpointName];
            const queryCacheKey = serializeQueryArgs({
              queryArgs: arg,
              endpointDefinition,
              endpointName,
            });
            dispatch(
              api.internalActions.queryResultPatched({
                queryCacheKey,
                patches,
              })
            );
            if (!updateProvided) {
              return;
            }
            const newValue = api.endpoints[endpointName].select(arg)(
              // Work around TS 4.1 mismatch
              getState()
            );
            const providedTags = calculateProvidedBy(
              endpointDefinition.providesTags,
              newValue.data,
              void 0,
              arg,
              {},
              assertTagType
            );
            dispatch(
              api.internalActions.updateProvidedBy([
                {
                  queryCacheKey,
                  providedTags,
                },
              ])
            );
          };
        function addToStart(items, item, max = 0) {
          const newItems = [item, ...items];
          return max && newItems.length > max
            ? newItems.slice(0, -1)
            : newItems;
        }
        function addToEnd(items, item, max = 0) {
          const newItems = [...items, item];
          return max && newItems.length > max ? newItems.slice(1) : newItems;
        }
        const updateQueryData =
          (endpointName, arg, updateRecipe, updateProvided = true) =>
          (dispatch, getState) => {
            const endpointDefinition = api.endpoints[endpointName];
            const currentState = endpointDefinition.select(arg)(
              // Work around TS 4.1 mismatch
              getState()
            );
            const ret = {
              patches: [],
              inversePatches: [],
              undo: () =>
                dispatch(
                  api.util.patchQueryData(
                    endpointName,
                    arg,
                    ret.inversePatches,
                    updateProvided
                  )
                ),
            };
            if (currentState.status === 'uninitialized' /* uninitialized */) {
              return ret;
            }
            let newValue;
            if ('data' in currentState) {
              if (
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'isDraftable'
                ])(currentState.data)
              ) {
                const [value, patches, inversePatches] = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'produceWithPatches'
                ])(currentState.data, updateRecipe);
                ret.patches.push(...patches);
                ret.inversePatches.push(...inversePatches);
                newValue = value;
              } else {
                newValue = updateRecipe(currentState.data);
                ret.patches.push({
                  op: 'replace',
                  path: [],
                  value: newValue,
                });
                ret.inversePatches.push({
                  op: 'replace',
                  path: [],
                  value: currentState.data,
                });
              }
            }
            if (ret.patches.length === 0) {
              return ret;
            }
            dispatch(
              api.util.patchQueryData(
                endpointName,
                arg,
                ret.patches,
                updateProvided
              )
            );
            return ret;
          };
        const upsertQueryData = (endpointName, arg, value) => (dispatch) => {
          const res = dispatch(
            api.endpoints[endpointName].initiate(arg, {
              subscribe: false,
              forceRefetch: true,
              [forceQueryFnSymbol]: () => ({
                data: value,
              }),
            })
          );
          return res;
        };
        const getTransformCallbackForEndpoint = (
          endpointDefinition,
          transformFieldName
        ) => {
          return endpointDefinition.query &&
            endpointDefinition[transformFieldName]
            ? endpointDefinition[transformFieldName]
            : defaultTransformResponse;
        };
        const executeEndpoint = async (
          arg,
          {
            signal,
            abort,
            rejectWithValue,
            fulfillWithValue,
            dispatch,
            getState,
            extra,
          }
        ) => {
          const endpointDefinition = endpointDefinitions[arg.endpointName];
          const {
            metaSchema,
            skipSchemaValidation = globalSkipSchemaValidation,
          } = endpointDefinition;
          try {
            let transformResponse = getTransformCallbackForEndpoint(
              endpointDefinition,
              'transformResponse'
            );
            const baseQueryApi = {
              signal,
              abort,
              dispatch,
              getState,
              extra,
              endpoint: arg.endpointName,
              type: arg.type,
              forced:
                arg.type === 'query' ? isForcedQuery(arg, getState()) : void 0,
              queryCacheKey: arg.type === 'query' ? arg.queryCacheKey : void 0,
            };
            const forceQueryFn =
              arg.type === 'query' ? arg[forceQueryFnSymbol] : void 0;
            let finalQueryReturnValue;
            const fetchPage = async (data, param, maxPages, previous) => {
              if (param == null && data.pages.length) {
                return Promise.resolve({
                  data,
                });
              }
              const finalQueryArg = {
                queryArg: arg.originalArgs,
                pageParam: param,
              };
              const pageResponse = await executeRequest(finalQueryArg);
              const addTo = previous ? addToStart : addToEnd;
              return {
                data: {
                  pages: addTo(data.pages, pageResponse.data, maxPages),
                  pageParams: addTo(data.pageParams, param, maxPages),
                },
                meta: pageResponse.meta,
              };
            };
            async function executeRequest(finalQueryArg) {
              let result;
              const {
                extraOptions,
                argSchema,
                rawResponseSchema,
                responseSchema,
              } = endpointDefinition;
              if (argSchema && !skipSchemaValidation) {
                finalQueryArg = await parseWithSchema(
                  argSchema,
                  finalQueryArg,
                  'argSchema',
                  {}
                );
              }
              if (forceQueryFn) {
                result = forceQueryFn();
              } else if (endpointDefinition.query) {
                result = await baseQuery(
                  endpointDefinition.query(finalQueryArg),
                  baseQueryApi,
                  extraOptions
                );
              } else {
                result = await endpointDefinition.queryFn(
                  finalQueryArg,
                  baseQueryApi,
                  extraOptions,
                  (arg2) => baseQuery(arg2, baseQueryApi, extraOptions)
                );
              }
              if (
                typeof process !== 'undefined' &&
                ('TURBOPACK compile-time value', 'development') ===
                  'development'
              ) {
                const what = endpointDefinition.query
                  ? '`baseQuery`'
                  : '`queryFn`';
                let err;
                if (!result) {
                  err = `${what} did not return anything.`;
                } else if (typeof result !== 'object') {
                  err = `${what} did not return an object.`;
                } else if (result.error && result.data) {
                  err = `${what} returned an object containing both \`error\` and \`result\`.`;
                } else if (result.error === void 0 && result.data === void 0) {
                  err = `${what} returned an object containing neither a valid \`error\` and \`result\`. At least one of them should not be \`undefined\``;
                } else {
                  for (const key of Object.keys(result)) {
                    if (key !== 'error' && key !== 'data' && key !== 'meta') {
                      err = `The object returned by ${what} has the unknown property ${key}.`;
                      break;
                    }
                  }
                }
                if (err) {
                  console.error(
                    `Error encountered handling the endpoint ${arg.endpointName}.
                  ${err}
                  It needs to return an object with either the shape \`{ data: <value> }\` or \`{ error: <value> }\` that may contain an optional \`meta\` property.
                  Object returned was:`,
                    result
                  );
                }
              }
              if (result.error)
                throw new HandledError(result.error, result.meta);
              let { data } = result;
              if (rawResponseSchema && !skipSchemaValidation) {
                data = await parseWithSchema(
                  rawResponseSchema,
                  result.data,
                  'rawResponseSchema',
                  result.meta
                );
              }
              let transformedResponse = await transformResponse(
                data,
                result.meta,
                finalQueryArg
              );
              if (responseSchema && !skipSchemaValidation) {
                transformedResponse = await parseWithSchema(
                  responseSchema,
                  transformedResponse,
                  'responseSchema',
                  result.meta
                );
              }
              return {
                ...result,
                data: transformedResponse,
              };
            }
            if (
              arg.type === 'query' &&
              'infiniteQueryOptions' in endpointDefinition
            ) {
              const { infiniteQueryOptions } = endpointDefinition;
              const { maxPages = Infinity } = infiniteQueryOptions;
              let result;
              const blankData = {
                pages: [],
                pageParams: [],
              };
              const cachedData = selectors.selectQueryEntry(
                getState(),
                arg.queryCacheKey
              )?.data;
              const isForcedQueryNeedingRefetch = // arg.forceRefetch
                isForcedQuery(arg, getState()) && !arg.direction;
              const existingData =
                isForcedQueryNeedingRefetch || !cachedData
                  ? blankData
                  : cachedData;
              if (
                'direction' in arg &&
                arg.direction &&
                existingData.pages.length
              ) {
                const previous = arg.direction === 'backward';
                const pageParamFn = previous
                  ? getPreviousPageParam
                  : getNextPageParam;
                const param = pageParamFn(
                  infiniteQueryOptions,
                  existingData,
                  arg.originalArgs
                );
                result = await fetchPage(
                  existingData,
                  param,
                  maxPages,
                  previous
                );
              } else {
                const {
                  initialPageParam = infiniteQueryOptions.initialPageParam,
                } = arg;
                const cachedPageParams = cachedData?.pageParams ?? [];
                const firstPageParam = cachedPageParams[0] ?? initialPageParam;
                const totalPages = cachedPageParams.length;
                result = await fetchPage(
                  existingData,
                  firstPageParam,
                  maxPages
                );
                if (forceQueryFn) {
                  result = {
                    data: result.data.pages[0],
                  };
                }
                for (let i = 1; i < totalPages; i++) {
                  const param = getNextPageParam(
                    infiniteQueryOptions,
                    result.data,
                    arg.originalArgs
                  );
                  result = await fetchPage(result.data, param, maxPages);
                }
              }
              finalQueryReturnValue = result;
            } else {
              finalQueryReturnValue = await executeRequest(arg.originalArgs);
            }
            if (
              metaSchema &&
              !skipSchemaValidation &&
              finalQueryReturnValue.meta
            ) {
              finalQueryReturnValue.meta = await parseWithSchema(
                metaSchema,
                finalQueryReturnValue.meta,
                'metaSchema',
                finalQueryReturnValue.meta
              );
            }
            return fulfillWithValue(
              finalQueryReturnValue.data,
              addShouldAutoBatch({
                fulfilledTimeStamp: Date.now(),
                baseQueryMeta: finalQueryReturnValue.meta,
              })
            );
          } catch (error) {
            let caughtError = error;
            if (caughtError instanceof HandledError) {
              let transformErrorResponse = getTransformCallbackForEndpoint(
                endpointDefinition,
                'transformErrorResponse'
              );
              const { rawErrorResponseSchema, errorResponseSchema } =
                endpointDefinition;
              let { value, meta } = caughtError;
              try {
                if (rawErrorResponseSchema && !skipSchemaValidation) {
                  value = await parseWithSchema(
                    rawErrorResponseSchema,
                    value,
                    'rawErrorResponseSchema',
                    meta
                  );
                }
                if (metaSchema && !skipSchemaValidation) {
                  meta = await parseWithSchema(
                    metaSchema,
                    meta,
                    'metaSchema',
                    meta
                  );
                }
                let transformedErrorResponse = await transformErrorResponse(
                  value,
                  meta,
                  arg.originalArgs
                );
                if (errorResponseSchema && !skipSchemaValidation) {
                  transformedErrorResponse = await parseWithSchema(
                    errorResponseSchema,
                    transformedErrorResponse,
                    'errorResponseSchema',
                    meta
                  );
                }
                return rejectWithValue(
                  transformedErrorResponse,
                  addShouldAutoBatch({
                    baseQueryMeta: meta,
                  })
                );
              } catch (e) {
                caughtError = e;
              }
            }
            try {
              if (caughtError instanceof NamedSchemaError) {
                const info = {
                  endpoint: arg.endpointName,
                  arg: arg.originalArgs,
                  type: arg.type,
                  queryCacheKey:
                    arg.type === 'query' ? arg.queryCacheKey : void 0,
                };
                endpointDefinition.onSchemaFailure?.(caughtError, info);
                onSchemaFailure?.(caughtError, info);
                const { catchSchemaFailure = globalCatchSchemaFailure } =
                  endpointDefinition;
                if (catchSchemaFailure) {
                  return rejectWithValue(
                    catchSchemaFailure(caughtError, info),
                    addShouldAutoBatch({
                      baseQueryMeta: caughtError._bqMeta,
                    })
                  );
                }
              }
            } catch (e) {
              caughtError = e;
            }
            if (
              typeof process !== 'undefined' &&
              ('TURBOPACK compile-time value', 'development') !== 'production'
            ) {
              console.error(
                `An unhandled error occurred processing a request for the endpoint "${arg.endpointName}".
In the case of an unhandled error, no tags will be "provided" or "invalidated".`,
                caughtError
              );
            } else {
              console.error(caughtError);
            }
            throw caughtError;
          }
        };
        function isForcedQuery(arg, state) {
          const requestState = selectors.selectQueryEntry(
            state,
            arg.queryCacheKey
          );
          const baseFetchOnMountOrArgChange =
            selectors.selectConfig(state).refetchOnMountOrArgChange;
          const fulfilledVal = requestState?.fulfilledTimeStamp;
          const refetchVal =
            arg.forceRefetch ?? (arg.subscribe && baseFetchOnMountOrArgChange);
          if (refetchVal) {
            return (
              refetchVal === true ||
              (Number(/* @__PURE__ */ new Date()) - Number(fulfilledVal)) /
                1e3 >=
                refetchVal
            );
          }
          return false;
        }
        const createQueryThunk = () => {
          const generatedQueryThunk = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createAsyncThunk'
          ])(`${reducerPath}/executeQuery`, executeEndpoint, {
            getPendingMeta({ arg }) {
              const endpointDefinition = endpointDefinitions[arg.endpointName];
              return addShouldAutoBatch({
                startedTimeStamp: Date.now(),
                ...(isInfiniteQueryDefinition(endpointDefinition)
                  ? {
                      direction: arg.direction,
                    }
                  : {}),
              });
            },
            condition(queryThunkArg, { getState }) {
              const state = getState();
              const requestState = selectors.selectQueryEntry(
                state,
                queryThunkArg.queryCacheKey
              );
              const fulfilledVal = requestState?.fulfilledTimeStamp;
              const currentArg = queryThunkArg.originalArgs;
              const previousArg = requestState?.originalArgs;
              const endpointDefinition =
                endpointDefinitions[queryThunkArg.endpointName];
              const direction = queryThunkArg.direction;
              if (isUpsertQuery(queryThunkArg)) {
                return true;
              }
              if (requestState?.status === 'pending') {
                return false;
              }
              if (isForcedQuery(queryThunkArg, state)) {
                return true;
              }
              if (
                isQueryDefinition(endpointDefinition) &&
                endpointDefinition?.forceRefetch?.({
                  currentArg,
                  previousArg,
                  endpointState: requestState,
                  state,
                })
              ) {
                return true;
              }
              if (fulfilledVal && !direction) {
                return false;
              }
              return true;
            },
            dispatchConditionRejection: true,
          });
          return generatedQueryThunk;
        };
        const queryThunk = createQueryThunk();
        const infiniteQueryThunk = createQueryThunk();
        const mutationThunk = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createAsyncThunk'
        ])(`${reducerPath}/executeMutation`, executeEndpoint, {
          getPendingMeta() {
            return addShouldAutoBatch({
              startedTimeStamp: Date.now(),
            });
          },
        });
        const hasTheForce = (options) => 'force' in options;
        const hasMaxAge = (options) => 'ifOlderThan' in options;
        const prefetch =
          (endpointName, arg, options) => (dispatch, getState) => {
            const force = hasTheForce(options) && options.force;
            const maxAge = hasMaxAge(options) && options.ifOlderThan;
            const queryAction = (force2 = true) => {
              const options2 = {
                forceRefetch: force2,
                isPrefetch: true,
              };
              return api.endpoints[endpointName].initiate(arg, options2);
            };
            const latestStateValue =
              api.endpoints[endpointName].select(arg)(getState());
            if (force) {
              dispatch(queryAction());
            } else if (maxAge) {
              const lastFulfilledTs = latestStateValue?.fulfilledTimeStamp;
              if (!lastFulfilledTs) {
                dispatch(queryAction());
                return;
              }
              const shouldRetrigger =
                (Number(/* @__PURE__ */ new Date()) -
                  Number(new Date(lastFulfilledTs))) /
                  1e3 >=
                maxAge;
              if (shouldRetrigger) {
                dispatch(queryAction());
              }
            } else {
              dispatch(queryAction(false));
            }
          };
        function matchesEndpoint(endpointName) {
          return (action) => action?.meta?.arg?.endpointName === endpointName;
        }
        function buildMatchThunkActions(thunk, endpointName) {
          return {
            matchPending: (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isAllOf'
            ])(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'isPending'
              ])(thunk),
              matchesEndpoint(endpointName)
            ),
            matchFulfilled: (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isAllOf'
            ])(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'isFulfilled'
              ])(thunk),
              matchesEndpoint(endpointName)
            ),
            matchRejected: (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'isAllOf'
            ])(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'isRejected'
              ])(thunk),
              matchesEndpoint(endpointName)
            ),
          };
        }
        return {
          queryThunk,
          mutationThunk,
          infiniteQueryThunk,
          prefetch,
          updateQueryData,
          upsertQueryData,
          patchQueryData,
          buildMatchThunkActions,
        };
      }
      function getNextPageParam(options, { pages, pageParams }, queryArg) {
        const lastIndex = pages.length - 1;
        return options.getNextPageParam(
          pages[lastIndex],
          pages,
          pageParams[lastIndex],
          pageParams,
          queryArg
        );
      }
      function getPreviousPageParam(options, { pages, pageParams }, queryArg) {
        return options.getPreviousPageParam?.(
          pages[0],
          pages,
          pageParams[0],
          pageParams,
          queryArg
        );
      }
      function calculateProvidedByThunk(
        action,
        type,
        endpointDefinitions,
        assertTagType
      ) {
        return calculateProvidedBy(
          endpointDefinitions[action.meta.arg.endpointName][type],
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isFulfilled'
          ])(action)
            ? action.payload
            : void 0,
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isRejectedWithValue'
          ])(action)
            ? action.payload
            : void 0,
          action.meta.arg.originalArgs,
          'baseQueryMeta' in action.meta ? action.meta.baseQueryMeta : void 0,
          assertTagType
        );
      }
      function updateQuerySubstateIfExists(state, queryCacheKey, update) {
        const substate = state[queryCacheKey];
        if (substate) {
          update(substate);
        }
      }
      function getMutationCacheKey(id) {
        return (
          ('arg' in id ? id.arg.fixedCacheKey : id.fixedCacheKey) ??
          id.requestId
        );
      }
      function updateMutationSubstateIfExists(state, id, update) {
        const substate = state[getMutationCacheKey(id)];
        if (substate) {
          update(substate);
        }
      }
      var initialState = {};
      function buildSlice({
        reducerPath,
        queryThunk,
        mutationThunk,
        serializeQueryArgs,
        context: {
          endpointDefinitions: definitions,
          apiUid,
          extractRehydrationInfo,
          hasRehydrationInfo,
        },
        assertTagType,
        config,
      }) {
        const resetApiState = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createAction'
        ])(`${reducerPath}/resetApiState`);
        function writePendingCacheEntry(draft, arg, upserting, meta) {
          draft[arg.queryCacheKey] ??= {
            status: 'uninitialized' /* uninitialized */,
            endpointName: arg.endpointName,
          };
          updateQuerySubstateIfExists(draft, arg.queryCacheKey, (substate) => {
            substate.status = 'pending' /* pending */;
            substate.requestId =
              upserting && substate.requestId // for `upsertQuery` **updates**, keep the current `requestId`
                ? substate.requestId // for normal queries or `upsertQuery` **inserts** always update the `requestId`
                : meta.requestId;
            if (arg.originalArgs !== void 0) {
              substate.originalArgs = arg.originalArgs;
            }
            substate.startedTimeStamp = meta.startedTimeStamp;
            const endpointDefinition = definitions[meta.arg.endpointName];
            if (
              isInfiniteQueryDefinition(endpointDefinition) &&
              'direction' in arg
            ) {
              substate.direction = arg.direction;
            }
          });
        }
        function writeFulfilledCacheEntry(draft, meta, payload, upserting) {
          updateQuerySubstateIfExists(
            draft,
            meta.arg.queryCacheKey,
            (substate) => {
              if (substate.requestId !== meta.requestId && !upserting) return;
              const { merge } = definitions[meta.arg.endpointName];
              substate.status = 'fulfilled' /* fulfilled */;
              if (merge) {
                if (substate.data !== void 0) {
                  const { fulfilledTimeStamp, arg, baseQueryMeta, requestId } =
                    meta;
                  let newData = (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__[
                    'createNextState'
                  ])(substate.data, (draftSubstateData) => {
                    return merge(draftSubstateData, payload, {
                      arg: arg.originalArgs,
                      baseQueryMeta,
                      fulfilledTimeStamp,
                      requestId,
                    });
                  });
                  substate.data = newData;
                } else {
                  substate.data = payload;
                }
              } else {
                substate.data =
                  (definitions[meta.arg.endpointName].structuralSharing ?? true)
                    ? copyWithStructuralSharing(
                        (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                          'isDraft'
                        ])(substate.data)
                          ? (0,
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                              'original'
                            ])(substate.data)
                          : substate.data,
                        payload
                      )
                    : payload;
              }
              delete substate.error;
              substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;
            }
          );
        }
        const querySlice = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createSlice'
        ])({
          name: `${reducerPath}/queries`,
          initialState,
          reducers: {
            removeQueryResult: {
              reducer(draft, { payload: { queryCacheKey } }) {
                delete draft[queryCacheKey];
              },
              prepare: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'prepareAutoBatched'
              ])(),
            },
            cacheEntriesUpserted: {
              reducer(draft, action) {
                for (const entry of action.payload) {
                  const { queryDescription: arg, value } = entry;
                  writePendingCacheEntry(draft, arg, true, {
                    arg,
                    requestId: action.meta.requestId,
                    startedTimeStamp: action.meta.timestamp,
                  });
                  writeFulfilledCacheEntry(
                    draft,
                    {
                      arg,
                      requestId: action.meta.requestId,
                      fulfilledTimeStamp: action.meta.timestamp,
                      baseQueryMeta: {},
                    },
                    value, // We know we're upserting here
                    true
                  );
                }
              },
              prepare: (payload) => {
                const queryDescriptions = payload.map((entry) => {
                  const { endpointName, arg, value } = entry;
                  const endpointDefinition = definitions[endpointName];
                  const queryDescription = {
                    type: 'query',
                    endpointName,
                    originalArgs: entry.arg,
                    queryCacheKey: serializeQueryArgs({
                      queryArgs: arg,
                      endpointDefinition,
                      endpointName,
                    }),
                  };
                  return {
                    queryDescription,
                    value,
                  };
                });
                const result = {
                  payload: queryDescriptions,
                  meta: {
                    [__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                      'SHOULD_AUTOBATCH'
                    ]]: true,
                    requestId: (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                      'nanoid'
                    ])(),
                    timestamp: Date.now(),
                  },
                };
                return result;
              },
            },
            queryResultPatched: {
              reducer(draft, { payload: { queryCacheKey, patches } }) {
                updateQuerySubstateIfExists(
                  draft,
                  queryCacheKey,
                  (substate) => {
                    substate.data = (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'applyPatches'
                    ])(substate.data, patches.concat());
                  }
                );
              },
              prepare: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'prepareAutoBatched'
              ])(),
            },
          },
          extraReducers(builder) {
            builder
              .addCase(queryThunk.pending, (draft, { meta, meta: { arg } }) => {
                const upserting = isUpsertQuery(arg);
                writePendingCacheEntry(draft, arg, upserting, meta);
              })
              .addCase(queryThunk.fulfilled, (draft, { meta, payload }) => {
                const upserting = isUpsertQuery(meta.arg);
                writeFulfilledCacheEntry(draft, meta, payload, upserting);
              })
              .addCase(
                queryThunk.rejected,
                (
                  draft,
                  { meta: { condition, arg, requestId }, error, payload }
                ) => {
                  updateQuerySubstateIfExists(
                    draft,
                    arg.queryCacheKey,
                    (substate) => {
                      if (condition) {
                      } else {
                        if (substate.requestId !== requestId) return;
                        substate.status = 'rejected' /* rejected */;
                        substate.error = payload ?? error;
                      }
                    }
                  );
                }
              )
              .addMatcher(hasRehydrationInfo, (draft, action) => {
                const { queries } = extractRehydrationInfo(action);
                for (const [key, entry] of Object.entries(queries)) {
                  if (
                    // do not rehydrate entries that were currently in flight.
                    entry?.status === 'fulfilled' /* fulfilled */ ||
                    entry?.status === 'rejected' /* rejected */
                  ) {
                    draft[key] = entry;
                  }
                }
              });
          },
        });
        const mutationSlice = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createSlice'
        ])({
          name: `${reducerPath}/mutations`,
          initialState,
          reducers: {
            removeMutationResult: {
              reducer(draft, { payload }) {
                const cacheKey = getMutationCacheKey(payload);
                if (cacheKey in draft) {
                  delete draft[cacheKey];
                }
              },
              prepare: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'prepareAutoBatched'
              ])(),
            },
          },
          extraReducers(builder) {
            builder
              .addCase(
                mutationThunk.pending,
                (
                  draft,
                  { meta, meta: { requestId, arg, startedTimeStamp } }
                ) => {
                  if (!arg.track) return;
                  draft[getMutationCacheKey(meta)] = {
                    requestId,
                    status: 'pending' /* pending */,
                    endpointName: arg.endpointName,
                    startedTimeStamp,
                  };
                }
              )
              .addCase(mutationThunk.fulfilled, (draft, { payload, meta }) => {
                if (!meta.arg.track) return;
                updateMutationSubstateIfExists(draft, meta, (substate) => {
                  if (substate.requestId !== meta.requestId) return;
                  substate.status = 'fulfilled' /* fulfilled */;
                  substate.data = payload;
                  substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;
                });
              })
              .addCase(
                mutationThunk.rejected,
                (draft, { payload, error, meta }) => {
                  if (!meta.arg.track) return;
                  updateMutationSubstateIfExists(draft, meta, (substate) => {
                    if (substate.requestId !== meta.requestId) return;
                    substate.status = 'rejected' /* rejected */;
                    substate.error = payload ?? error;
                  });
                }
              )
              .addMatcher(hasRehydrationInfo, (draft, action) => {
                const { mutations } = extractRehydrationInfo(action);
                for (const [key, entry] of Object.entries(mutations)) {
                  if (
                    // do not rehydrate entries that were currently in flight.
                    (entry?.status === 'fulfilled' /* fulfilled */ ||
                      entry?.status === 'rejected') /* rejected */ && // only rehydrate endpoints that were persisted using a `fixedCacheKey`
                    key !== entry?.requestId
                  ) {
                    draft[key] = entry;
                  }
                }
              });
          },
        });
        const initialInvalidationState = {
          tags: {},
          keys: {},
        };
        const invalidationSlice = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createSlice'
        ])({
          name: `${reducerPath}/invalidation`,
          initialState: initialInvalidationState,
          reducers: {
            updateProvidedBy: {
              reducer(draft, action) {
                for (const { queryCacheKey, providedTags } of action.payload) {
                  removeCacheKeyFromTags(draft, queryCacheKey);
                  for (const { type, id } of providedTags) {
                    const subscribedQueries = ((draft.tags[type] ??= {})[
                      id || '__internal_without_id'
                    ] ??= []);
                    const alreadySubscribed =
                      subscribedQueries.includes(queryCacheKey);
                    if (!alreadySubscribed) {
                      subscribedQueries.push(queryCacheKey);
                    }
                  }
                  draft.keys[queryCacheKey] = providedTags;
                }
              },
              prepare: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'prepareAutoBatched'
              ])(),
            },
          },
          extraReducers(builder) {
            builder
              .addCase(
                querySlice.actions.removeQueryResult,
                (draft, { payload: { queryCacheKey } }) => {
                  removeCacheKeyFromTags(draft, queryCacheKey);
                }
              )
              .addMatcher(hasRehydrationInfo, (draft, action) => {
                const { provided } = extractRehydrationInfo(action);
                for (const [type, incomingTags] of Object.entries(provided)) {
                  for (const [id, cacheKeys] of Object.entries(incomingTags)) {
                    const subscribedQueries = ((draft.tags[type] ??= {})[
                      id || '__internal_without_id'
                    ] ??= []);
                    for (const queryCacheKey of cacheKeys) {
                      const alreadySubscribed =
                        subscribedQueries.includes(queryCacheKey);
                      if (!alreadySubscribed) {
                        subscribedQueries.push(queryCacheKey);
                      }
                    }
                  }
                }
              })
              .addMatcher(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                  'isAnyOf'
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    'isFulfilled'
                  ])(queryThunk),
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                    'isRejectedWithValue'
                  ])(queryThunk)
                ),
                (draft, action) => {
                  writeProvidedTagsForQueries(draft, [action]);
                }
              )
              .addMatcher(
                querySlice.actions.cacheEntriesUpserted.match,
                (draft, action) => {
                  const mockActions = action.payload.map(
                    ({ queryDescription, value }) => {
                      return {
                        type: 'UNKNOWN',
                        payload: value,
                        meta: {
                          requestStatus: 'fulfilled',
                          requestId: 'UNKNOWN',
                          arg: queryDescription,
                        },
                      };
                    }
                  );
                  writeProvidedTagsForQueries(draft, mockActions);
                }
              );
          },
        });
        function removeCacheKeyFromTags(draft, queryCacheKey) {
          const existingTags = draft.keys[queryCacheKey] ?? [];
          for (const tag of existingTags) {
            const tagType = tag.type;
            const tagId = tag.id ?? '__internal_without_id';
            const tagSubscriptions = draft.tags[tagType]?.[tagId];
            if (tagSubscriptions) {
              draft.tags[tagType][tagId] = tagSubscriptions.filter(
                (qc) => qc !== queryCacheKey
              );
            }
          }
          delete draft.keys[queryCacheKey];
        }
        function writeProvidedTagsForQueries(draft, actions2) {
          const providedByEntries = actions2.map((action) => {
            const providedTags = calculateProvidedByThunk(
              action,
              'providesTags',
              definitions,
              assertTagType
            );
            const { queryCacheKey } = action.meta.arg;
            return {
              queryCacheKey,
              providedTags,
            };
          });
          invalidationSlice.caseReducers.updateProvidedBy(
            draft,
            invalidationSlice.actions.updateProvidedBy(providedByEntries)
          );
        }
        const subscriptionSlice = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createSlice'
        ])({
          name: `${reducerPath}/subscriptions`,
          initialState,
          reducers: {
            updateSubscriptionOptions(d, a) {},
            unsubscribeQueryResult(d, a) {},
            internal_getRTKQSubscriptions() {},
          },
        });
        const internalSubscriptionsSlice = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createSlice'
        ])({
          name: `${reducerPath}/internalSubscriptions`,
          initialState,
          reducers: {
            subscriptionsUpdated: {
              reducer(state, action) {
                return (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'applyPatches'
                ])(state, action.payload);
              },
              prepare: (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
                'prepareAutoBatched'
              ])(),
            },
          },
        });
        const configSlice = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'createSlice'
        ])({
          name: `${reducerPath}/config`,
          initialState: {
            online: isOnline(),
            focused: isDocumentVisible(),
            middlewareRegistered: false,
            ...config,
          },
          reducers: {
            middlewareRegistered(state, { payload }) {
              state.middlewareRegistered =
                state.middlewareRegistered === 'conflict' || apiUid !== payload
                  ? 'conflict'
                  : true;
            },
          },
          extraReducers: (builder) => {
            builder
              .addCase(onOnline, (state) => {
                state.online = true;
              })
              .addCase(onOffline, (state) => {
                state.online = false;
              })
              .addCase(onFocus, (state) => {
                state.focused = true;
              })
              .addCase(onFocusLost, (state) => {
                state.focused = false;
              })
              .addMatcher(hasRehydrationInfo, (draft) => ({
                ...draft,
              }));
          },
        });
        const combinedReducer = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'combineReducers'
        ])({
          queries: querySlice.reducer,
          mutations: mutationSlice.reducer,
          provided: invalidationSlice.reducer,
          subscriptions: internalSubscriptionsSlice.reducer,
          config: configSlice.reducer,
        });
        const reducer = (state, action) =>
          combinedReducer(resetApiState.match(action) ? void 0 : state, action);
        const actions = {
          ...configSlice.actions,
          ...querySlice.actions,
          ...subscriptionSlice.actions,
          ...internalSubscriptionsSlice.actions,
          ...mutationSlice.actions,
          ...invalidationSlice.actions,
          resetApiState,
        };
        return {
          reducer,
          actions,
        };
      }
      // src/query/core/buildSelectors.ts
      var skipToken = /* @__PURE__ */ Symbol.for('RTKQ/skipToken');
      var initialSubState = {
        status: 'uninitialized' /* uninitialized */,
      };
      var defaultQuerySubState = /* @__PURE__ */ (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__[
        'createNextState'
      ])(initialSubState, () => {});
      var defaultMutationSubState = /* @__PURE__ */ (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__produce__as__createNextState$3e$__[
        'createNextState'
      ])(initialSubState, () => {});
      function buildSelectors({
        serializeQueryArgs,
        reducerPath,
        createSelector: createSelector2,
      }) {
        const selectSkippedQuery = (state) => defaultQuerySubState;
        const selectSkippedMutation = (state) => defaultMutationSubState;
        return {
          buildQuerySelector,
          buildInfiniteQuerySelector,
          buildMutationSelector,
          selectInvalidatedBy,
          selectCachedArgsForQuery,
          selectApiState,
          selectQueries,
          selectMutations,
          selectQueryEntry,
          selectConfig,
        };
        //TURBOPACK unreachable
        function withRequestFlags(substate) {
          return {
            ...substate,
            ...getRequestStatusFlags(substate.status),
          };
        }
        function selectApiState(rootState) {
          const state = rootState[reducerPath];
          if (('TURBOPACK compile-time truthy', 1)) {
            if (!state) {
              if (selectApiState.triggered) return state;
              selectApiState.triggered = true;
              console.error(
                `Error: No data found at \`state.${reducerPath}\`. Did you forget to add the reducer to the store?`
              );
            }
          }
          return state;
        }
        function selectQueries(rootState) {
          return selectApiState(rootState)?.queries;
        }
        function selectQueryEntry(rootState, cacheKey) {
          return selectQueries(rootState)?.[cacheKey];
        }
        function selectMutations(rootState) {
          return selectApiState(rootState)?.mutations;
        }
        function selectConfig(rootState) {
          return selectApiState(rootState)?.config;
        }
        function buildAnyQuerySelector(
          endpointName,
          endpointDefinition,
          combiner
        ) {
          return (queryArgs) => {
            if (queryArgs === skipToken) {
              return createSelector2(selectSkippedQuery, combiner);
            }
            const serializedArgs = serializeQueryArgs({
              queryArgs,
              endpointDefinition,
              endpointName,
            });
            const selectQuerySubstate = (state) =>
              selectQueryEntry(state, serializedArgs) ?? defaultQuerySubState;
            return createSelector2(selectQuerySubstate, combiner);
          };
        }
        function buildQuerySelector(endpointName, endpointDefinition) {
          return buildAnyQuerySelector(
            endpointName,
            endpointDefinition,
            withRequestFlags
          );
        }
        function buildInfiniteQuerySelector(endpointName, endpointDefinition) {
          const { infiniteQueryOptions } = endpointDefinition;
          function withInfiniteQueryResultFlags(substate) {
            const stateWithRequestFlags = {
              ...substate,
              ...getRequestStatusFlags(substate.status),
            };
            const { isLoading, isError, direction } = stateWithRequestFlags;
            const isForward = direction === 'forward';
            const isBackward = direction === 'backward';
            return {
              ...stateWithRequestFlags,
              hasNextPage: getHasNextPage(
                infiniteQueryOptions,
                stateWithRequestFlags.data,
                stateWithRequestFlags.originalArgs
              ),
              hasPreviousPage: getHasPreviousPage(
                infiniteQueryOptions,
                stateWithRequestFlags.data,
                stateWithRequestFlags.originalArgs
              ),
              isFetchingNextPage: isLoading && isForward,
              isFetchingPreviousPage: isLoading && isBackward,
              isFetchNextPageError: isError && isForward,
              isFetchPreviousPageError: isError && isBackward,
            };
          }
          return buildAnyQuerySelector(
            endpointName,
            endpointDefinition,
            withInfiniteQueryResultFlags
          );
        }
        function buildMutationSelector() {
          return (id) => {
            let mutationId;
            if (typeof id === 'object') {
              mutationId = getMutationCacheKey(id) ?? skipToken;
            } else {
              mutationId = id;
            }
            const selectMutationSubstate = (state) =>
              selectApiState(state)?.mutations?.[mutationId] ??
              defaultMutationSubState;
            const finalSelectMutationSubstate =
              mutationId === skipToken
                ? selectSkippedMutation
                : selectMutationSubstate;
            return createSelector2(
              finalSelectMutationSubstate,
              withRequestFlags
            );
          };
        }
        function selectInvalidatedBy(state, tags) {
          const apiState = state[reducerPath];
          const toInvalidate = /* @__PURE__ */ new Set();
          for (const tag of tags
            .filter(isNotNullish)
            .map(expandTagDescription)) {
            const provided = apiState.provided.tags[tag.type];
            if (!provided) {
              continue;
            }
            let invalidateSubscriptions =
              (tag.id !== void 0 // id given: invalidate all queries that provide this type & id
                ? provided[tag.id] // no id: invalidate all queries that provide this type
                : flatten(Object.values(provided))) ?? [];
            for (const invalidate of invalidateSubscriptions) {
              toInvalidate.add(invalidate);
            }
          }
          return flatten(
            Array.from(toInvalidate.values()).map((queryCacheKey) => {
              const querySubState = apiState.queries[queryCacheKey];
              return querySubState
                ? [
                    {
                      queryCacheKey,
                      endpointName: querySubState.endpointName,
                      originalArgs: querySubState.originalArgs,
                    },
                  ]
                : [];
            })
          );
        }
        function selectCachedArgsForQuery(state, queryName) {
          return Object.values(selectQueries(state))
            .filter(
              (entry) =>
                entry?.endpointName === queryName &&
                entry.status !== 'uninitialized' /* uninitialized */
            )
            .map((entry) => entry.originalArgs);
        }
        function getHasNextPage(options, data, queryArg) {
          if (!data) return false;
          return getNextPageParam(options, data, queryArg) != null;
        }
        function getHasPreviousPage(options, data, queryArg) {
          if (!data || !options.getPreviousPageParam) return false;
          return getPreviousPageParam(options, data, queryArg) != null;
        }
      }
      // src/query/defaultSerializeQueryArgs.ts
      var cache = WeakMap ? /* @__PURE__ */ new WeakMap() : void 0;
      var defaultSerializeQueryArgs = ({ endpointName, queryArgs }) => {
        let serialized = '';
        const cached = cache?.get(queryArgs);
        if (typeof cached === 'string') {
          serialized = cached;
        } else {
          const stringified = JSON.stringify(queryArgs, (key, value) => {
            value =
              typeof value === 'bigint'
                ? {
                    $bigint: value.toString(),
                  }
                : value;
            value = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isPlainObject'
            ])(value)
              ? Object.keys(value)
                  .sort()
                  .reduce((acc, key2) => {
                    acc[key2] = value[key2];
                    return acc;
                  }, {})
              : value;
            return value;
          });
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isPlainObject'
            ])(queryArgs)
          ) {
            cache?.set(queryArgs, stringified);
          }
          serialized = stringified;
        }
        return `${endpointName}(${serialized})`;
      };
      function buildCreateApi(...modules) {
        return function baseCreateApi(options) {
          const extractRehydrationInfo = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'weakMapMemoize'
          ])((action) =>
            options.extractRehydrationInfo?.(action, {
              reducerPath: options.reducerPath ?? 'api',
            })
          );
          const optionsWithDefaults = {
            reducerPath: 'api',
            keepUnusedDataFor: 60,
            refetchOnMountOrArgChange: false,
            refetchOnFocus: false,
            refetchOnReconnect: false,
            invalidationBehavior: 'delayed',
            ...options,
            extractRehydrationInfo,
            serializeQueryArgs(queryArgsApi) {
              let finalSerializeQueryArgs = defaultSerializeQueryArgs;
              if ('serializeQueryArgs' in queryArgsApi.endpointDefinition) {
                const endpointSQA =
                  queryArgsApi.endpointDefinition.serializeQueryArgs;
                finalSerializeQueryArgs = (queryArgsApi2) => {
                  const initialResult = endpointSQA(queryArgsApi2);
                  if (typeof initialResult === 'string') {
                    return initialResult;
                  } else {
                    return defaultSerializeQueryArgs({
                      ...queryArgsApi2,
                      queryArgs: initialResult,
                    });
                  }
                };
              } else if (options.serializeQueryArgs) {
                finalSerializeQueryArgs = options.serializeQueryArgs;
              }
              return finalSerializeQueryArgs(queryArgsApi);
            },
            tagTypes: [...(options.tagTypes || [])],
          };
          const context = {
            endpointDefinitions: {},
            batch(fn) {
              fn();
            },
            apiUid: (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'nanoid'
            ])(),
            extractRehydrationInfo,
            hasRehydrationInfo: (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'weakMapMemoize'
            ])((action) => extractRehydrationInfo(action) != null),
          };
          const api = {
            injectEndpoints,
            enhanceEndpoints({ addTagTypes, endpoints }) {
              if (addTagTypes) {
                for (const eT of addTagTypes) {
                  if (!optionsWithDefaults.tagTypes.includes(eT)) {
                    optionsWithDefaults.tagTypes.push(eT);
                  }
                }
              }
              if (endpoints) {
                for (const [endpointName, partialDefinition] of Object.entries(
                  endpoints
                )) {
                  if (typeof partialDefinition === 'function') {
                    partialDefinition(
                      context.endpointDefinitions[endpointName]
                    );
                  } else {
                    Object.assign(
                      context.endpointDefinitions[endpointName] || {},
                      partialDefinition
                    );
                  }
                }
              }
              return api;
            },
          };
          const initializedModules = modules.map((m) =>
            m.init(api, optionsWithDefaults, context)
          );
          function injectEndpoints(inject) {
            const evaluatedEndpoints = inject.endpoints({
              query: (x) => ({
                ...x,
                type: 'query' /* query */,
              }),
              mutation: (x) => ({
                ...x,
                type: 'mutation' /* mutation */,
              }),
              infiniteQuery: (x) => ({
                ...x,
                type: 'infinitequery' /* infinitequery */,
              }),
            });
            for (const [endpointName, definition] of Object.entries(
              evaluatedEndpoints
            )) {
              if (
                inject.overrideExisting !== true &&
                endpointName in context.endpointDefinitions
              ) {
                if (inject.overrideExisting === 'throw') {
                  throw new Error(
                    ('TURBOPACK compile-time falsy', 0)
                      ? 'TURBOPACK unreachable'
                      : `called \`injectEndpoints\` to override already-existing endpointName ${endpointName} without specifying \`overrideExisting: true\``
                  );
                } else if (
                  typeof process !== 'undefined' &&
                  ('TURBOPACK compile-time value', 'development') ===
                    'development'
                ) {
                  console.error(
                    `called \`injectEndpoints\` to override already-existing endpointName ${endpointName} without specifying \`overrideExisting: true\``
                  );
                }
                continue;
              }
              if (
                typeof process !== 'undefined' &&
                ('TURBOPACK compile-time value', 'development') ===
                  'development'
              ) {
                if (isInfiniteQueryDefinition(definition)) {
                  const { infiniteQueryOptions } = definition;
                  const {
                    maxPages,
                    getPreviousPageParam: getPreviousPageParam2,
                  } = infiniteQueryOptions;
                  if (typeof maxPages === 'number') {
                    if (maxPages < 1) {
                      throw new Error(
                        ('TURBOPACK compile-time falsy', 0)
                          ? 'TURBOPACK unreachable'
                          : `maxPages for endpoint '${endpointName}' must be a number greater than 0`
                      );
                    }
                    if (typeof getPreviousPageParam2 !== 'function') {
                      throw new Error(
                        ('TURBOPACK compile-time falsy', 0)
                          ? 'TURBOPACK unreachable'
                          : `getPreviousPageParam for endpoint '${endpointName}' must be a function if maxPages is used`
                      );
                    }
                  }
                }
              }
              context.endpointDefinitions[endpointName] = definition;
              for (const m of initializedModules) {
                m.injectEndpoint(endpointName, definition);
              }
            }
            return api;
          }
          return api.injectEndpoints({
            endpoints: options.endpoints,
          });
        };
      }
      var _NEVER = /* @__PURE__ */ Symbol();
      function fakeBaseQuery() {
        return function () {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.'
          );
        };
      }
      // src/query/tsHelpers.ts
      function assertCast(v) {}
      function safeAssign(target, ...args) {
        return Object.assign(target, ...args);
      }
      var buildBatchedActionsHandler = ({ api, queryThunk, internalState }) => {
        const subscriptionsPrefix = `${api.reducerPath}/subscriptions`;
        let previousSubscriptions = null;
        let updateSyncTimer = null;
        const { updateSubscriptionOptions, unsubscribeQueryResult } =
          api.internalActions;
        const actuallyMutateSubscriptions = (mutableState, action) => {
          if (updateSubscriptionOptions.match(action)) {
            const { queryCacheKey, requestId, options } = action.payload;
            if (mutableState?.[queryCacheKey]?.[requestId]) {
              mutableState[queryCacheKey][requestId] = options;
            }
            return true;
          }
          if (unsubscribeQueryResult.match(action)) {
            const { queryCacheKey, requestId } = action.payload;
            if (mutableState[queryCacheKey]) {
              delete mutableState[queryCacheKey][requestId];
            }
            return true;
          }
          if (api.internalActions.removeQueryResult.match(action)) {
            delete mutableState[action.payload.queryCacheKey];
            return true;
          }
          if (queryThunk.pending.match(action)) {
            const {
              meta: { arg, requestId },
            } = action;
            const substate = (mutableState[arg.queryCacheKey] ??= {});
            substate[`${requestId}_running`] = {};
            if (arg.subscribe) {
              substate[requestId] =
                arg.subscriptionOptions ?? substate[requestId] ?? {};
            }
            return true;
          }
          let mutated = false;
          if (
            queryThunk.fulfilled.match(action) ||
            queryThunk.rejected.match(action)
          ) {
            const state = mutableState[action.meta.arg.queryCacheKey] || {};
            const key = `${action.meta.requestId}_running`;
            mutated ||= !!state[key];
            delete state[key];
          }
          if (queryThunk.rejected.match(action)) {
            const {
              meta: { condition, arg, requestId },
            } = action;
            if (condition && arg.subscribe) {
              const substate = (mutableState[arg.queryCacheKey] ??= {});
              substate[requestId] =
                arg.subscriptionOptions ?? substate[requestId] ?? {};
              mutated = true;
            }
          }
          return mutated;
        };
        const getSubscriptions = () => internalState.currentSubscriptions;
        const getSubscriptionCount = (queryCacheKey) => {
          const subscriptions = getSubscriptions();
          const subscriptionsForQueryArg = subscriptions[queryCacheKey] ?? {};
          return countObjectKeys(subscriptionsForQueryArg);
        };
        const isRequestSubscribed = (queryCacheKey, requestId) => {
          const subscriptions = getSubscriptions();
          return !!subscriptions?.[queryCacheKey]?.[requestId];
        };
        const subscriptionSelectors = {
          getSubscriptions,
          getSubscriptionCount,
          isRequestSubscribed,
        };
        return (action, mwApi) => {
          if (!previousSubscriptions) {
            previousSubscriptions = JSON.parse(
              JSON.stringify(internalState.currentSubscriptions)
            );
          }
          if (api.util.resetApiState.match(action)) {
            previousSubscriptions = internalState.currentSubscriptions = {};
            updateSyncTimer = null;
            return [true, false];
          }
          if (api.internalActions.internal_getRTKQSubscriptions.match(action)) {
            return [false, subscriptionSelectors];
          }
          const didMutate = actuallyMutateSubscriptions(
            internalState.currentSubscriptions,
            action
          );
          let actionShouldContinue = true;
          if (didMutate) {
            if (!updateSyncTimer) {
              updateSyncTimer = setTimeout(() => {
                const newSubscriptions = JSON.parse(
                  JSON.stringify(internalState.currentSubscriptions)
                );
                const [, patches] = (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'produceWithPatches'
                ])(previousSubscriptions, () => newSubscriptions);
                mwApi.next(api.internalActions.subscriptionsUpdated(patches));
                previousSubscriptions = newSubscriptions;
                updateSyncTimer = null;
              }, 500);
            }
            const isSubscriptionSliceAction =
              typeof action.type == 'string' &&
              !!action.type.startsWith(subscriptionsPrefix);
            const isAdditionalSubscriptionAction =
              queryThunk.rejected.match(action) &&
              action.meta.condition &&
              !!action.meta.arg.subscribe;
            actionShouldContinue =
              !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;
          }
          return [actionShouldContinue, false];
        };
      };
      // src/query/core/buildMiddleware/cacheCollection.ts
      function isObjectEmpty(obj) {
        for (const k in obj) {
          return false;
        }
        return true;
      }
      var THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;
      var buildCacheCollectionHandler = ({
        reducerPath,
        api,
        queryThunk,
        context,
        internalState,
        selectors: { selectQueryEntry, selectConfig },
      }) => {
        const {
          removeQueryResult,
          unsubscribeQueryResult,
          cacheEntriesUpserted,
        } = api.internalActions;
        const canTriggerUnsubscribe = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'isAnyOf'
        ])(
          unsubscribeQueryResult.match,
          queryThunk.fulfilled,
          queryThunk.rejected,
          cacheEntriesUpserted.match
        );
        function anySubscriptionsRemainingForKey(queryCacheKey) {
          const subscriptions =
            internalState.currentSubscriptions[queryCacheKey];
          return !!subscriptions && !isObjectEmpty(subscriptions);
        }
        const currentRemovalTimeouts = {};
        const handler = (action, mwApi, internalState2) => {
          const state = mwApi.getState();
          const config = selectConfig(state);
          if (canTriggerUnsubscribe(action)) {
            let queryCacheKeys;
            if (cacheEntriesUpserted.match(action)) {
              queryCacheKeys = action.payload.map(
                (entry) => entry.queryDescription.queryCacheKey
              );
            } else {
              const { queryCacheKey } = unsubscribeQueryResult.match(action)
                ? action.payload
                : action.meta.arg;
              queryCacheKeys = [queryCacheKey];
            }
            handleUnsubscribeMany(queryCacheKeys, mwApi, config);
          }
          if (api.util.resetApiState.match(action)) {
            for (const [key, timeout] of Object.entries(
              currentRemovalTimeouts
            )) {
              if (timeout) clearTimeout(timeout);
              delete currentRemovalTimeouts[key];
            }
          }
          if (context.hasRehydrationInfo(action)) {
            const { queries } = context.extractRehydrationInfo(action);
            handleUnsubscribeMany(Object.keys(queries), mwApi, config);
          }
        };
        function handleUnsubscribeMany(cacheKeys, api2, config) {
          const state = api2.getState();
          for (const queryCacheKey of cacheKeys) {
            const entry = selectQueryEntry(state, queryCacheKey);
            handleUnsubscribe(queryCacheKey, entry?.endpointName, api2, config);
          }
        }
        function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {
          const endpointDefinition = context.endpointDefinitions[endpointName];
          const keepUnusedDataFor =
            endpointDefinition?.keepUnusedDataFor ?? config.keepUnusedDataFor;
          if (keepUnusedDataFor === Infinity) {
            return;
          }
          const finalKeepUnusedDataFor = Math.max(
            0,
            Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS)
          );
          if (!anySubscriptionsRemainingForKey(queryCacheKey)) {
            const currentTimeout = currentRemovalTimeouts[queryCacheKey];
            if (currentTimeout) {
              clearTimeout(currentTimeout);
            }
            currentRemovalTimeouts[queryCacheKey] = setTimeout(() => {
              if (!anySubscriptionsRemainingForKey(queryCacheKey)) {
                api2.dispatch(
                  removeQueryResult({
                    queryCacheKey,
                  })
                );
              }
              delete currentRemovalTimeouts[queryCacheKey];
            }, finalKeepUnusedDataFor * 1e3);
          }
        }
        return handler;
      };
      // src/query/core/buildMiddleware/cacheLifecycle.ts
      var neverResolvedError = new Error(
        'Promise never resolved before cacheEntryRemoved.'
      );
      var buildCacheLifecycleHandler = ({
        api,
        reducerPath,
        context,
        queryThunk,
        mutationThunk,
        internalState,
        selectors: { selectQueryEntry, selectApiState },
      }) => {
        const isQueryThunk = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'isAsyncThunkAction'
        ])(queryThunk);
        const isMutationThunk = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'isAsyncThunkAction'
        ])(mutationThunk);
        const isFulfilledThunk = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'isFulfilled'
        ])(queryThunk, mutationThunk);
        const lifecycleMap = {};
        function resolveLifecycleEntry(cacheKey, data, meta) {
          const lifecycle = lifecycleMap[cacheKey];
          if (lifecycle?.valueResolved) {
            lifecycle.valueResolved({
              data,
              meta,
            });
            delete lifecycle.valueResolved;
          }
        }
        function removeLifecycleEntry(cacheKey) {
          const lifecycle = lifecycleMap[cacheKey];
          if (lifecycle) {
            delete lifecycleMap[cacheKey];
            lifecycle.cacheEntryRemoved();
          }
        }
        const handler = (action, mwApi, stateBefore) => {
          const cacheKey = getCacheKey(action);
          function checkForNewCacheKey(
            endpointName,
            cacheKey2,
            requestId,
            originalArgs
          ) {
            const oldEntry = selectQueryEntry(stateBefore, cacheKey2);
            const newEntry = selectQueryEntry(mwApi.getState(), cacheKey2);
            if (!oldEntry && newEntry) {
              handleNewKey(
                endpointName,
                originalArgs,
                cacheKey2,
                mwApi,
                requestId
              );
            }
          }
          if (queryThunk.pending.match(action)) {
            checkForNewCacheKey(
              action.meta.arg.endpointName,
              cacheKey,
              action.meta.requestId,
              action.meta.arg.originalArgs
            );
          } else if (api.internalActions.cacheEntriesUpserted.match(action)) {
            for (const { queryDescription, value } of action.payload) {
              const { endpointName, originalArgs, queryCacheKey } =
                queryDescription;
              checkForNewCacheKey(
                endpointName,
                queryCacheKey,
                action.meta.requestId,
                originalArgs
              );
              resolveLifecycleEntry(queryCacheKey, value, {});
            }
          } else if (mutationThunk.pending.match(action)) {
            const state = mwApi.getState()[reducerPath].mutations[cacheKey];
            if (state) {
              handleNewKey(
                action.meta.arg.endpointName,
                action.meta.arg.originalArgs,
                cacheKey,
                mwApi,
                action.meta.requestId
              );
            }
          } else if (isFulfilledThunk(action)) {
            resolveLifecycleEntry(
              cacheKey,
              action.payload,
              action.meta.baseQueryMeta
            );
          } else if (
            api.internalActions.removeQueryResult.match(action) ||
            api.internalActions.removeMutationResult.match(action)
          ) {
            removeLifecycleEntry(cacheKey);
          } else if (api.util.resetApiState.match(action)) {
            for (const cacheKey2 of Object.keys(lifecycleMap)) {
              removeLifecycleEntry(cacheKey2);
            }
          }
        };
        function getCacheKey(action) {
          if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;
          if (isMutationThunk(action)) {
            return action.meta.arg.fixedCacheKey ?? action.meta.requestId;
          }
          if (api.internalActions.removeQueryResult.match(action))
            return action.payload.queryCacheKey;
          if (api.internalActions.removeMutationResult.match(action))
            return getMutationCacheKey(action.payload);
          return '';
        }
        function handleNewKey(
          endpointName,
          originalArgs,
          queryCacheKey,
          mwApi,
          requestId
        ) {
          const endpointDefinition = context.endpointDefinitions[endpointName];
          const onCacheEntryAdded = endpointDefinition?.onCacheEntryAdded;
          if (!onCacheEntryAdded) return;
          const lifecycle = {};
          const cacheEntryRemoved = new Promise((resolve) => {
            lifecycle.cacheEntryRemoved = resolve;
          });
          const cacheDataLoaded = Promise.race([
            new Promise((resolve) => {
              lifecycle.valueResolved = resolve;
            }),
            cacheEntryRemoved.then(() => {
              throw neverResolvedError;
            }),
          ]);
          cacheDataLoaded.catch(() => {});
          lifecycleMap[queryCacheKey] = lifecycle;
          const selector = api.endpoints[endpointName].select(
            isAnyQueryDefinition(endpointDefinition)
              ? originalArgs
              : queryCacheKey
          );
          const extra = mwApi.dispatch((_, __, extra2) => extra2);
          const lifecycleApi = {
            ...mwApi,
            getCacheEntry: () => selector(mwApi.getState()),
            requestId,
            extra,
            updateCachedData: isAnyQueryDefinition(endpointDefinition)
              ? (updateRecipe) =>
                  mwApi.dispatch(
                    api.util.updateQueryData(
                      endpointName,
                      originalArgs,
                      updateRecipe
                    )
                  )
              : void 0,
            cacheDataLoaded,
            cacheEntryRemoved,
          };
          const runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);
          Promise.resolve(runningHandler).catch((e) => {
            if (e === neverResolvedError) return;
            throw e;
          });
        }
        return handler;
      };
      // src/query/core/buildMiddleware/devMiddleware.ts
      var buildDevCheckHandler = ({
        api,
        context: { apiUid },
        reducerPath,
      }) => {
        return (action, mwApi) => {
          if (api.util.resetApiState.match(action)) {
            mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));
          }
          if (
            typeof process !== 'undefined' &&
            ('TURBOPACK compile-time value', 'development') === 'development'
          ) {
            if (
              api.internalActions.middlewareRegistered.match(action) &&
              action.payload === apiUid &&
              mwApi.getState()[reducerPath]?.config?.middlewareRegistered ===
                'conflict'
            ) {
              console.warn(`There is a mismatch between slice and middleware for the reducerPath "${reducerPath}".
You can only have one api per reducer path, this will lead to crashes in various situations!${
                reducerPath === 'api'
                  ? `
If you have multiple apis, you *have* to specify the reducerPath option when using createApi!`
                  : ''
              }`);
            }
          }
        };
      };
      // src/query/core/buildMiddleware/invalidationByTags.ts
      var buildInvalidationByTagsHandler = ({
        reducerPath,
        context,
        context: { endpointDefinitions },
        mutationThunk,
        queryThunk,
        api,
        assertTagType,
        refetchQuery,
        internalState,
      }) => {
        const { removeQueryResult } = api.internalActions;
        const isThunkActionWithTags = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'isAnyOf'
        ])(
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isFulfilled'
          ])(mutationThunk),
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isRejectedWithValue'
          ])(mutationThunk)
        );
        const isQueryEnd = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'isAnyOf'
        ])(
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isFulfilled'
          ])(mutationThunk, queryThunk),
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'isRejected'
          ])(mutationThunk, queryThunk)
        );
        let pendingTagInvalidations = [];
        const handler = (action, mwApi) => {
          if (isThunkActionWithTags(action)) {
            invalidateTags(
              calculateProvidedByThunk(
                action,
                'invalidatesTags',
                endpointDefinitions,
                assertTagType
              ),
              mwApi
            );
          } else if (isQueryEnd(action)) {
            invalidateTags([], mwApi);
          } else if (api.util.invalidateTags.match(action)) {
            invalidateTags(
              calculateProvidedBy(
                action.payload,
                void 0,
                void 0,
                void 0,
                void 0,
                assertTagType
              ),
              mwApi
            );
          }
        };
        function hasPendingRequests(state) {
          const { queries, mutations } = state;
          for (const cacheRecord of [queries, mutations]) {
            for (const key in cacheRecord) {
              if (cacheRecord[key]?.status === 'pending' /* pending */)
                return true;
            }
          }
          return false;
        }
        function invalidateTags(newTags, mwApi) {
          const rootState = mwApi.getState();
          const state = rootState[reducerPath];
          pendingTagInvalidations.push(...newTags);
          if (
            state.config.invalidationBehavior === 'delayed' &&
            hasPendingRequests(state)
          ) {
            return;
          }
          const tags = pendingTagInvalidations;
          pendingTagInvalidations = [];
          if (tags.length === 0) return;
          const toInvalidate = api.util.selectInvalidatedBy(rootState, tags);
          context.batch(() => {
            const valuesArray = Array.from(toInvalidate.values());
            for (const { queryCacheKey } of valuesArray) {
              const querySubState = state.queries[queryCacheKey];
              const subscriptionSubState =
                internalState.currentSubscriptions[queryCacheKey] ?? {};
              if (querySubState) {
                if (countObjectKeys(subscriptionSubState) === 0) {
                  mwApi.dispatch(
                    removeQueryResult({
                      queryCacheKey,
                    })
                  );
                } else if (
                  querySubState.status !== 'uninitialized' /* uninitialized */
                ) {
                  mwApi.dispatch(refetchQuery(querySubState));
                }
              }
            }
          });
        }
        return handler;
      };
      // src/query/core/buildMiddleware/polling.ts
      var buildPollingHandler = ({
        reducerPath,
        queryThunk,
        api,
        refetchQuery,
        internalState,
      }) => {
        const currentPolls = {};
        const handler = (action, mwApi) => {
          if (
            api.internalActions.updateSubscriptionOptions.match(action) ||
            api.internalActions.unsubscribeQueryResult.match(action)
          ) {
            updatePollingInterval(action.payload, mwApi);
          }
          if (
            queryThunk.pending.match(action) ||
            (queryThunk.rejected.match(action) && action.meta.condition)
          ) {
            updatePollingInterval(action.meta.arg, mwApi);
          }
          if (
            queryThunk.fulfilled.match(action) ||
            (queryThunk.rejected.match(action) && !action.meta.condition)
          ) {
            startNextPoll(action.meta.arg, mwApi);
          }
          if (api.util.resetApiState.match(action)) {
            clearPolls();
          }
        };
        function getCacheEntrySubscriptions(queryCacheKey, api2) {
          const state = api2.getState()[reducerPath];
          const querySubState = state.queries[queryCacheKey];
          const subscriptions =
            internalState.currentSubscriptions[queryCacheKey];
          if (
            !querySubState ||
            querySubState.status === 'uninitialized' /* uninitialized */
          )
            return;
          return subscriptions;
        }
        function startNextPoll({ queryCacheKey }, api2) {
          const state = api2.getState()[reducerPath];
          const querySubState = state.queries[queryCacheKey];
          const subscriptions =
            internalState.currentSubscriptions[queryCacheKey];
          if (
            !querySubState ||
            querySubState.status === 'uninitialized' /* uninitialized */
          )
            return;
          const { lowestPollingInterval, skipPollingIfUnfocused } =
            findLowestPollingInterval(subscriptions);
          if (!Number.isFinite(lowestPollingInterval)) return;
          const currentPoll = currentPolls[queryCacheKey];
          if (currentPoll?.timeout) {
            clearTimeout(currentPoll.timeout);
            currentPoll.timeout = void 0;
          }
          const nextPollTimestamp = Date.now() + lowestPollingInterval;
          currentPolls[queryCacheKey] = {
            nextPollTimestamp,
            pollingInterval: lowestPollingInterval,
            timeout: setTimeout(() => {
              if (state.config.focused || !skipPollingIfUnfocused) {
                api2.dispatch(refetchQuery(querySubState));
              }
              startNextPoll(
                {
                  queryCacheKey,
                },
                api2
              );
            }, lowestPollingInterval),
          };
        }
        function updatePollingInterval({ queryCacheKey }, api2) {
          const state = api2.getState()[reducerPath];
          const querySubState = state.queries[queryCacheKey];
          const subscriptions =
            internalState.currentSubscriptions[queryCacheKey];
          if (
            !querySubState ||
            querySubState.status === 'uninitialized' /* uninitialized */
          ) {
            return;
          }
          const { lowestPollingInterval } =
            findLowestPollingInterval(subscriptions);
          if (!Number.isFinite(lowestPollingInterval)) {
            cleanupPollForKey(queryCacheKey);
            return;
          }
          const currentPoll = currentPolls[queryCacheKey];
          const nextPollTimestamp = Date.now() + lowestPollingInterval;
          if (
            !currentPoll ||
            nextPollTimestamp < currentPoll.nextPollTimestamp
          ) {
            startNextPoll(
              {
                queryCacheKey,
              },
              api2
            );
          }
        }
        function cleanupPollForKey(key) {
          const existingPoll = currentPolls[key];
          if (existingPoll?.timeout) {
            clearTimeout(existingPoll.timeout);
          }
          delete currentPolls[key];
        }
        function clearPolls() {
          for (const key of Object.keys(currentPolls)) {
            cleanupPollForKey(key);
          }
        }
        function findLowestPollingInterval(subscribers = {}) {
          let skipPollingIfUnfocused = false;
          let lowestPollingInterval = Number.POSITIVE_INFINITY;
          for (let key in subscribers) {
            if (!!subscribers[key].pollingInterval) {
              lowestPollingInterval = Math.min(
                subscribers[key].pollingInterval,
                lowestPollingInterval
              );
              skipPollingIfUnfocused =
                subscribers[key].skipPollingIfUnfocused ||
                skipPollingIfUnfocused;
            }
          }
          return {
            lowestPollingInterval,
            skipPollingIfUnfocused,
          };
        }
        return handler;
      };
      // src/query/core/buildMiddleware/queryLifecycle.ts
      var buildQueryLifecycleHandler = ({
        api,
        context,
        queryThunk,
        mutationThunk,
      }) => {
        const isPendingThunk = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'isPending'
        ])(queryThunk, mutationThunk);
        const isRejectedThunk = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'isRejected'
        ])(queryThunk, mutationThunk);
        const isFullfilledThunk = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
          'isFulfilled'
        ])(queryThunk, mutationThunk);
        const lifecycleMap = {};
        const handler = (action, mwApi) => {
          if (isPendingThunk(action)) {
            const {
              requestId,
              arg: { endpointName, originalArgs },
            } = action.meta;
            const endpointDefinition =
              context.endpointDefinitions[endpointName];
            const onQueryStarted = endpointDefinition?.onQueryStarted;
            if (onQueryStarted) {
              const lifecycle = {};
              const queryFulfilled = new Promise((resolve, reject) => {
                lifecycle.resolve = resolve;
                lifecycle.reject = reject;
              });
              queryFulfilled.catch(() => {});
              lifecycleMap[requestId] = lifecycle;
              const selector = api.endpoints[endpointName].select(
                isAnyQueryDefinition(endpointDefinition)
                  ? originalArgs
                  : requestId
              );
              const extra = mwApi.dispatch((_, __, extra2) => extra2);
              const lifecycleApi = {
                ...mwApi,
                getCacheEntry: () => selector(mwApi.getState()),
                requestId,
                extra,
                updateCachedData: isAnyQueryDefinition(endpointDefinition)
                  ? (updateRecipe) =>
                      mwApi.dispatch(
                        api.util.updateQueryData(
                          endpointName,
                          originalArgs,
                          updateRecipe
                        )
                      )
                  : void 0,
                queryFulfilled,
              };
              onQueryStarted(originalArgs, lifecycleApi);
            }
          } else if (isFullfilledThunk(action)) {
            const { requestId, baseQueryMeta } = action.meta;
            lifecycleMap[requestId]?.resolve({
              data: action.payload,
              meta: baseQueryMeta,
            });
            delete lifecycleMap[requestId];
          } else if (isRejectedThunk(action)) {
            const { requestId, rejectedWithValue, baseQueryMeta } = action.meta;
            lifecycleMap[requestId]?.reject({
              error: action.payload ?? action.error,
              isUnhandledError: !rejectedWithValue,
              meta: baseQueryMeta,
            });
            delete lifecycleMap[requestId];
          }
        };
        return handler;
      };
      // src/query/core/buildMiddleware/windowEventHandling.ts
      var buildWindowEventHandler = ({
        reducerPath,
        context,
        api,
        refetchQuery,
        internalState,
      }) => {
        const { removeQueryResult } = api.internalActions;
        const handler = (action, mwApi) => {
          if (onFocus.match(action)) {
            refetchValidQueries(mwApi, 'refetchOnFocus');
          }
          if (onOnline.match(action)) {
            refetchValidQueries(mwApi, 'refetchOnReconnect');
          }
        };
        function refetchValidQueries(api2, type) {
          const state = api2.getState()[reducerPath];
          const queries = state.queries;
          const subscriptions = internalState.currentSubscriptions;
          context.batch(() => {
            for (const queryCacheKey of Object.keys(subscriptions)) {
              const querySubState = queries[queryCacheKey];
              const subscriptionSubState = subscriptions[queryCacheKey];
              if (!subscriptionSubState || !querySubState) continue;
              const shouldRefetch =
                Object.values(subscriptionSubState).some(
                  (sub) => sub[type] === true
                ) ||
                (Object.values(subscriptionSubState).every(
                  (sub) => sub[type] === void 0
                ) &&
                  state.config[type]);
              if (shouldRefetch) {
                if (countObjectKeys(subscriptionSubState) === 0) {
                  api2.dispatch(
                    removeQueryResult({
                      queryCacheKey,
                    })
                  );
                } else if (
                  querySubState.status !== 'uninitialized' /* uninitialized */
                ) {
                  api2.dispatch(refetchQuery(querySubState));
                }
              }
            }
          });
        }
        return handler;
      };
      // src/query/core/buildMiddleware/index.ts
      function buildMiddleware(input) {
        const { reducerPath, queryThunk, api, context } = input;
        const { apiUid } = context;
        const actions = {
          invalidateTags: (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'createAction'
          ])(`${reducerPath}/invalidateTags`),
        };
        const isThisApiSliceAction = (action) =>
          action.type.startsWith(`${reducerPath}/`);
        const handlerBuilders = [
          buildDevCheckHandler,
          buildCacheCollectionHandler,
          buildInvalidationByTagsHandler,
          buildPollingHandler,
          buildCacheLifecycleHandler,
          buildQueryLifecycleHandler,
        ];
        const middleware = (mwApi) => {
          let initialized2 = false;
          const internalState = {
            currentSubscriptions: {},
          };
          const builderArgs = {
            ...input,
            internalState,
            refetchQuery,
            isThisApiSliceAction,
          };
          const handlers = handlerBuilders.map((build) => build(builderArgs));
          const batchedActionsHandler = buildBatchedActionsHandler(builderArgs);
          const windowEventsHandler = buildWindowEventHandler(builderArgs);
          return (next) => {
            return (action) => {
              if (
                !(0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$redux$2f$dist$2f$redux$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'isAction'
                ])(action)
              ) {
                return next(action);
              }
              if (!initialized2) {
                initialized2 = true;
                mwApi.dispatch(
                  api.internalActions.middlewareRegistered(apiUid)
                );
              }
              const mwApiWithNext = {
                ...mwApi,
                next,
              };
              const stateBefore = mwApi.getState();
              const [actionShouldContinue, internalProbeResult] =
                batchedActionsHandler(action, mwApiWithNext, stateBefore);
              let res;
              if (actionShouldContinue) {
                res = next(action);
              } else {
                res = internalProbeResult;
              }
              if (!!mwApi.getState()[reducerPath]) {
                windowEventsHandler(action, mwApiWithNext, stateBefore);
                if (
                  isThisApiSliceAction(action) ||
                  context.hasRehydrationInfo(action)
                ) {
                  for (const handler of handlers) {
                    handler(action, mwApiWithNext, stateBefore);
                  }
                }
              }
              return res;
            };
          };
        };
        return {
          middleware,
          actions,
        };
        //TURBOPACK unreachable
        function refetchQuery(querySubState) {
          return input.api.endpoints[querySubState.endpointName].initiate(
            querySubState.originalArgs,
            {
              subscribe: false,
              forceRefetch: true,
            }
          );
        }
      }
      // src/query/core/module.ts
      var coreModuleName = /* @__PURE__ */ Symbol();
      var coreModule = ({
        createSelector:
          createSelector2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'createSelector'
          ],
      } = {}) => ({
        name: coreModuleName,
        init(
          api,
          {
            baseQuery,
            tagTypes,
            reducerPath,
            serializeQueryArgs,
            keepUnusedDataFor,
            refetchOnMountOrArgChange,
            refetchOnFocus,
            refetchOnReconnect,
            invalidationBehavior,
            onSchemaFailure,
            catchSchemaFailure,
            skipSchemaValidation,
          },
          context
        ) {
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$immer$2f$dist$2f$immer$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'enablePatches'
          ])();
          assertCast(serializeQueryArgs);
          const assertTagType = (tag) => {
            if (
              typeof process !== 'undefined' &&
              ('TURBOPACK compile-time value', 'development') === 'development'
            ) {
              if (!tagTypes.includes(tag.type)) {
                console.error(
                  `Tag type '${tag.type}' was used, but not specified in \`tagTypes\`!`
                );
              }
            }
            return tag;
          };
          Object.assign(api, {
            reducerPath,
            endpoints: {},
            internalActions: {
              onOnline,
              onOffline,
              onFocus,
              onFocusLost,
            },
            util: {},
          });
          const selectors = buildSelectors({
            serializeQueryArgs,
            reducerPath,
            createSelector: createSelector2,
          });
          const {
            selectInvalidatedBy,
            selectCachedArgsForQuery,
            buildQuerySelector,
            buildInfiniteQuerySelector,
            buildMutationSelector,
          } = selectors;
          safeAssign(api.util, {
            selectInvalidatedBy,
            selectCachedArgsForQuery,
          });
          const {
            queryThunk,
            infiniteQueryThunk,
            mutationThunk,
            patchQueryData,
            updateQueryData,
            upsertQueryData,
            prefetch,
            buildMatchThunkActions,
          } = buildThunks({
            baseQuery,
            reducerPath,
            context,
            api,
            serializeQueryArgs,
            assertTagType,
            selectors,
            onSchemaFailure,
            catchSchemaFailure,
            skipSchemaValidation,
          });
          const { reducer, actions: sliceActions } = buildSlice({
            context,
            queryThunk,
            infiniteQueryThunk,
            mutationThunk,
            serializeQueryArgs,
            reducerPath,
            assertTagType,
            config: {
              refetchOnFocus,
              refetchOnReconnect,
              refetchOnMountOrArgChange,
              keepUnusedDataFor,
              reducerPath,
              invalidationBehavior,
            },
          });
          safeAssign(api.util, {
            patchQueryData,
            updateQueryData,
            upsertQueryData,
            prefetch,
            resetApiState: sliceActions.resetApiState,
            upsertQueryEntries: sliceActions.cacheEntriesUpserted,
          });
          safeAssign(api.internalActions, sliceActions);
          const { middleware, actions: middlewareActions } = buildMiddleware({
            reducerPath,
            context,
            queryThunk,
            mutationThunk,
            infiniteQueryThunk,
            api,
            assertTagType,
            selectors,
          });
          safeAssign(api.util, middlewareActions);
          safeAssign(api, {
            reducer,
            middleware,
          });
          const {
            buildInitiateQuery,
            buildInitiateInfiniteQuery,
            buildInitiateMutation,
            getRunningMutationThunk,
            getRunningMutationsThunk,
            getRunningQueriesThunk,
            getRunningQueryThunk,
          } = buildInitiate({
            queryThunk,
            mutationThunk,
            infiniteQueryThunk,
            api,
            serializeQueryArgs,
            context,
          });
          safeAssign(api.util, {
            getRunningMutationThunk,
            getRunningMutationsThunk,
            getRunningQueryThunk,
            getRunningQueriesThunk,
          });
          return {
            name: coreModuleName,
            injectEndpoint(endpointName, definition) {
              const anyApi = api;
              const endpoint = (anyApi.endpoints[endpointName] ??= {});
              if (isQueryDefinition(definition)) {
                safeAssign(
                  endpoint,
                  {
                    name: endpointName,
                    select: buildQuerySelector(endpointName, definition),
                    initiate: buildInitiateQuery(endpointName, definition),
                  },
                  buildMatchThunkActions(queryThunk, endpointName)
                );
              }
              if (isMutationDefinition(definition)) {
                safeAssign(
                  endpoint,
                  {
                    name: endpointName,
                    select: buildMutationSelector(),
                    initiate: buildInitiateMutation(endpointName),
                  },
                  buildMatchThunkActions(mutationThunk, endpointName)
                );
              }
              if (isInfiniteQueryDefinition(definition)) {
                safeAssign(
                  endpoint,
                  {
                    name: endpointName,
                    select: buildInfiniteQuerySelector(
                      endpointName,
                      definition
                    ),
                    initiate: buildInitiateInfiniteQuery(
                      endpointName,
                      definition
                    ),
                  },
                  buildMatchThunkActions(queryThunk, endpointName)
                );
              }
            },
          };
        },
      });
      // src/query/core/index.ts
      var createApi = /* @__PURE__ */ buildCreateApi(coreModule());
      //# sourceMappingURL=rtk-query.modern.mjs.map
    },
  '[project]/node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs [app-rsc] (ecmascript) <locals>':
    (__turbopack_context__) => {
      'use strict';

      // src/query/react/index.ts
      __turbopack_context__.s({
        ApiProvider: () => ApiProvider,
        UNINITIALIZED_VALUE: () => UNINITIALIZED_VALUE,
        createApi: () => createApi,
        reactHooksModule: () => reactHooksModule,
        reactHooksModuleName: () => reactHooksModuleName,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/react-redux/dist/rsc.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/reselect/dist/reselect.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
        );
      // src/query/react/ApiProvider.tsx
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs [app-rsc] (ecmascript) <locals>'
        );
      // src/query/utils/capitalize.ts
      function capitalize(str) {
        return str.replace(str[0], str[0].toUpperCase());
      }
      // src/query/utils/countObjectKeys.ts
      function countObjectKeys(obj) {
        let count = 0;
        for (const _key in obj) {
          count++;
        }
        return count;
      }
      // src/query/endpointDefinitions.ts
      function isQueryDefinition(e) {
        return e.type === 'query' /* query */;
      }
      function isMutationDefinition(e) {
        return e.type === 'mutation' /* mutation */;
      }
      function isInfiniteQueryDefinition(e) {
        return e.type === 'infinitequery' /* infinitequery */;
      }
      // src/query/tsHelpers.ts
      function safeAssign(target, ...args) {
        return Object.assign(target, ...args);
      }
      // src/query/react/constants.ts
      var UNINITIALIZED_VALUE = Symbol();
      function useStableQueryArgs(
        queryArgs,
        serialize,
        endpointDefinition,
        endpointName
      ) {
        const incoming = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'useMemo'
        ])(
          () => ({
            queryArgs,
            serialized:
              typeof queryArgs == 'object'
                ? serialize({
                    queryArgs,
                    endpointDefinition,
                    endpointName,
                  })
                : queryArgs,
          }),
          [queryArgs, serialize, endpointDefinition, endpointName]
        );
        const cache = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'useRef'
        ])(incoming);
        (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'useEffect'
        ])(() => {
          if (cache.current.serialized !== incoming.serialized) {
            cache.current = incoming;
          }
        }, [incoming]);
        return cache.current.serialized === incoming.serialized
          ? cache.current.queryArgs
          : queryArgs;
      }
      function useShallowStableValue(value) {
        const cache = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'useRef'
        ])(value);
        (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'useEffect'
        ])(() => {
          if (
            !(0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'shallowEqual'
            ])(cache.current, value)
          ) {
            cache.current = value;
          }
        }, [value]);
        return (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'shallowEqual'
        ])(cache.current, value)
          ? cache.current
          : value;
      }
      // src/query/react/buildHooks.ts
      var canUseDOM = () =>
        !!(
          'undefined' !== 'undefined' &&
          typeof window.document !== 'undefined' &&
          typeof window.document.createElement !== 'undefined'
        );
      var isDOM = /* @__PURE__ */ canUseDOM();
      var isRunningInReactNative = () =>
        typeof navigator !== 'undefined' && navigator.product === 'ReactNative';
      var isReactNative = /* @__PURE__ */ isRunningInReactNative();
      var getUseIsomorphicLayoutEffect = () =>
        isDOM || isReactNative
          ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useLayoutEffect'
            ]
          : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useEffect'
            ];
      var useIsomorphicLayoutEffect =
        /* @__PURE__ */ getUseIsomorphicLayoutEffect();
      var noPendingQueryStateSelector = (selected) => {
        if (selected.isUninitialized) {
          return {
            ...selected,
            isUninitialized: false,
            isFetching: true,
            isLoading: selected.data !== void 0 ? false : true,
            status:
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'QueryStatus'
              ].pending,
          };
        }
        return selected;
      };
      function pick(obj, ...keys) {
        const ret = {};
        keys.forEach((key) => {
          ret[key] = obj[key];
        });
        return ret;
      }
      var COMMON_HOOK_DEBUG_FIELDS = [
        'data',
        'status',
        'isLoading',
        'isSuccess',
        'isError',
        'error',
      ];
      function buildHooks({
        api,
        moduleOptions: {
          batch,
          hooks: { useDispatch, useSelector, useStore },
          unstable__sideEffectsInRender,
          createSelector,
        },
        serializeQueryArgs,
        context,
      }) {
        const usePossiblyImmediateEffect = unstable__sideEffectsInRender
          ? (cb) => cb()
          : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useEffect'
            ];
        return {
          buildQueryHooks,
          buildInfiniteQueryHooks,
          buildMutationHook,
          usePrefetch,
        };
        //TURBOPACK unreachable
        function queryStatePreSelector(currentState, lastResult, queryArgs) {
          if (lastResult?.endpointName && currentState.isUninitialized) {
            const { endpointName } = lastResult;
            const endpointDefinition =
              context.endpointDefinitions[endpointName];
            if (
              queryArgs !==
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'skipToken'
                ] &&
              serializeQueryArgs({
                queryArgs: lastResult.originalArgs,
                endpointDefinition,
                endpointName,
              }) ===
                serializeQueryArgs({
                  queryArgs,
                  endpointDefinition,
                  endpointName,
                })
            )
              lastResult = void 0;
          }
          let data = currentState.isSuccess
            ? currentState.data
            : lastResult?.data;
          if (data === void 0) data = currentState.data;
          const hasData = data !== void 0;
          const isFetching = currentState.isLoading;
          const isLoading =
            (!lastResult ||
              lastResult.isLoading ||
              lastResult.isUninitialized) &&
            !hasData &&
            isFetching;
          const isSuccess =
            currentState.isSuccess ||
            (hasData &&
              ((isFetching && !lastResult?.isError) ||
                currentState.isUninitialized));
          return {
            ...currentState,
            data,
            currentData: currentState.data,
            isFetching,
            isLoading,
            isSuccess,
          };
        }
        function infiniteQueryStatePreSelector(
          currentState,
          lastResult,
          queryArgs
        ) {
          if (lastResult?.endpointName && currentState.isUninitialized) {
            const { endpointName } = lastResult;
            const endpointDefinition =
              context.endpointDefinitions[endpointName];
            if (
              queryArgs !==
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'skipToken'
                ] &&
              serializeQueryArgs({
                queryArgs: lastResult.originalArgs,
                endpointDefinition,
                endpointName,
              }) ===
                serializeQueryArgs({
                  queryArgs,
                  endpointDefinition,
                  endpointName,
                })
            )
              lastResult = void 0;
          }
          let data = currentState.isSuccess
            ? currentState.data
            : lastResult?.data;
          if (data === void 0) data = currentState.data;
          const hasData = data !== void 0;
          const isFetching = currentState.isLoading;
          const isLoading =
            (!lastResult ||
              lastResult.isLoading ||
              lastResult.isUninitialized) &&
            !hasData &&
            isFetching;
          const isSuccess = currentState.isSuccess || (isFetching && hasData);
          return {
            ...currentState,
            data,
            currentData: currentState.data,
            isFetching,
            isLoading,
            isSuccess,
          };
        }
        function usePrefetch(endpointName, defaultOptions) {
          const dispatch = useDispatch();
          const stableDefaultOptions = useShallowStableValue(defaultOptions);
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'useCallback'
          ])(
            (arg, options) =>
              dispatch(
                api.util.prefetch(endpointName, arg, {
                  ...stableDefaultOptions,
                  ...options,
                })
              ),
            [endpointName, dispatch, stableDefaultOptions]
          );
        }
        function useQuerySubscriptionCommonImpl(
          endpointName,
          arg,
          {
            refetchOnReconnect,
            refetchOnFocus,
            refetchOnMountOrArgChange,
            skip = false,
            pollingInterval = 0,
            skipPollingIfUnfocused = false,
            ...rest
          } = {}
        ) {
          const { initiate } = api.endpoints[endpointName];
          const dispatch = useDispatch();
          const subscriptionSelectorsRef = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'useRef'
          ])(void 0);
          if (!subscriptionSelectorsRef.current) {
            const returnedValue = dispatch(
              api.internalActions.internal_getRTKQSubscriptions()
            );
            if (('TURBOPACK compile-time truthy', 1)) {
              if (
                typeof returnedValue !== 'object' ||
                typeof returnedValue?.type === 'string'
              ) {
                throw new Error(
                  ('TURBOPACK compile-time falsy', 0)
                    ? 'TURBOPACK unreachable'
                    : `Warning: Middleware for RTK-Query API at reducerPath "${api.reducerPath}" has not been added to the store.
    You must add the middleware for RTK-Query to function correctly!`
                );
              }
            }
            subscriptionSelectorsRef.current = returnedValue;
          }
          const stableArg = useStableQueryArgs(
            skip
              ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'skipToken'
                ]
              : arg, // Even if the user provided a per-endpoint `serializeQueryArgs` with
            // a consistent return value, _here_ we want to use the default behavior
            // so we can tell if _anything_ actually changed. Otherwise, we can end up
            // with a case where the query args did change but the serialization doesn't,
            // and then we never try to initiate a refetch.
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'defaultSerializeQueryArgs'
            ],
            context.endpointDefinitions[endpointName],
            endpointName
          );
          const stableSubscriptionOptions = useShallowStableValue({
            refetchOnReconnect,
            refetchOnFocus,
            pollingInterval,
            skipPollingIfUnfocused,
          });
          const initialPageParam = rest.initialPageParam;
          const stableInitialPageParam =
            useShallowStableValue(initialPageParam);
          const promiseRef = (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'useRef'
          ])(void 0);
          let { queryCacheKey, requestId } = promiseRef.current || {};
          let currentRenderHasSubscription = false;
          if (queryCacheKey && requestId) {
            currentRenderHasSubscription =
              subscriptionSelectorsRef.current.isRequestSubscribed(
                queryCacheKey,
                requestId
              );
          }
          const subscriptionRemoved =
            !currentRenderHasSubscription && promiseRef.current !== void 0;
          usePossiblyImmediateEffect(() => {
            if (subscriptionRemoved) {
              promiseRef.current = void 0;
            }
          }, [subscriptionRemoved]);
          usePossiblyImmediateEffect(() => {
            const lastPromise = promiseRef.current;
            if (
              ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
            );
            if (
              stableArg ===
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'skipToken'
              ]
            ) {
              lastPromise?.unsubscribe();
              promiseRef.current = void 0;
              return;
            }
            const lastSubscriptionOptions =
              promiseRef.current?.subscriptionOptions;
            if (!lastPromise || lastPromise.arg !== stableArg) {
              lastPromise?.unsubscribe();
              const promise = dispatch(
                initiate(stableArg, {
                  subscriptionOptions: stableSubscriptionOptions,
                  forceRefetch: refetchOnMountOrArgChange,
                  ...(isInfiniteQueryDefinition(
                    context.endpointDefinitions[endpointName]
                  )
                    ? {
                        initialPageParam: stableInitialPageParam,
                      }
                    : {}),
                })
              );
              promiseRef.current = promise;
            } else if (stableSubscriptionOptions !== lastSubscriptionOptions) {
              lastPromise.updateSubscriptionOptions(stableSubscriptionOptions);
            }
          }, [
            dispatch,
            initiate,
            refetchOnMountOrArgChange,
            stableArg,
            stableSubscriptionOptions,
            subscriptionRemoved,
            stableInitialPageParam,
            endpointName,
          ]);
          return [promiseRef, dispatch, initiate, stableSubscriptionOptions];
        }
        function buildUseQueryState(endpointName, preSelector) {
          const useQueryState = (
            arg,
            { skip = false, selectFromResult } = {}
          ) => {
            const { select } = api.endpoints[endpointName];
            const stableArg = useStableQueryArgs(
              skip
                ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'skipToken'
                  ]
                : arg,
              serializeQueryArgs,
              context.endpointDefinitions[endpointName],
              endpointName
            );
            const lastValue = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useRef'
            ])(void 0);
            const selectDefaultResult = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(
              () =>
                // Normally ts-ignores are bad and should be avoided, but we're
                // already casting this selector to be `Selector<any>` anyway,
                // so the inconsistencies don't matter here
                // @ts-ignore
                createSelector(
                  [
                    // @ts-ignore
                    select(stableArg),
                    (_, lastResult) => lastResult,
                    (_) => stableArg,
                  ],
                  preSelector,
                  {
                    memoizeOptions: {
                      resultEqualityCheck:
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                          'shallowEqual'
                        ],
                    },
                  }
                ),
              [select, stableArg]
            );
            const querySelector = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(
              () =>
                selectFromResult
                  ? createSelector([selectDefaultResult], selectFromResult, {
                      devModeChecks: {
                        identityFunctionCheck: 'never',
                      },
                    })
                  : selectDefaultResult,
              [selectDefaultResult, selectFromResult]
            );
            const currentState = useSelector(
              (state) => querySelector(state, lastValue.current),
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'shallowEqual'
              ]
            );
            const store = useStore();
            const newLastValue = selectDefaultResult(
              store.getState(),
              lastValue.current
            );
            useIsomorphicLayoutEffect(() => {
              lastValue.current = newLastValue;
            }, [newLastValue]);
            return currentState;
          };
          return useQueryState;
        }
        function usePromiseRefUnsubscribeOnUnmount(promiseRef) {
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'useEffect'
          ])(() => {
            return () => {
              promiseRef.current?.unsubscribe?.();
              promiseRef.current = void 0;
            };
          }, [promiseRef]);
        }
        function refetchOrErrorIfUnmounted(promiseRef) {
          if (!promiseRef.current)
            throw new Error(
              ('TURBOPACK compile-time falsy', 0)
                ? 'TURBOPACK unreachable'
                : 'Cannot refetch a query that has not been started yet.'
            );
          return promiseRef.current.refetch();
        }
        function buildQueryHooks(endpointName) {
          const useQuerySubscription = (arg, options = {}) => {
            const [promiseRef] = useQuerySubscriptionCommonImpl(
              endpointName,
              arg,
              options
            );
            usePromiseRefUnsubscribeOnUnmount(promiseRef);
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(
              () => ({
                /**
                 * A method to manually refetch data for the query
                 */ refetch: () => refetchOrErrorIfUnmounted(promiseRef),
              }),
              [promiseRef]
            );
          };
          const useLazyQuerySubscription = ({
            refetchOnReconnect,
            refetchOnFocus,
            pollingInterval = 0,
            skipPollingIfUnfocused = false,
          } = {}) => {
            const { initiate } = api.endpoints[endpointName];
            const dispatch = useDispatch();
            const [arg, setArg] = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useState'
            ])(UNINITIALIZED_VALUE);
            const promiseRef = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useRef'
            ])(void 0);
            const stableSubscriptionOptions = useShallowStableValue({
              refetchOnReconnect,
              refetchOnFocus,
              pollingInterval,
              skipPollingIfUnfocused,
            });
            usePossiblyImmediateEffect(() => {
              const lastSubscriptionOptions =
                promiseRef.current?.subscriptionOptions;
              if (stableSubscriptionOptions !== lastSubscriptionOptions) {
                promiseRef.current?.updateSubscriptionOptions(
                  stableSubscriptionOptions
                );
              }
            }, [stableSubscriptionOptions]);
            const subscriptionOptionsRef = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useRef'
            ])(stableSubscriptionOptions);
            usePossiblyImmediateEffect(() => {
              subscriptionOptionsRef.current = stableSubscriptionOptions;
            }, [stableSubscriptionOptions]);
            const trigger = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useCallback'
            ])(
              function (arg2, preferCacheValue = false) {
                let promise;
                batch(() => {
                  promiseRef.current?.unsubscribe();
                  promiseRef.current = promise = dispatch(
                    initiate(arg2, {
                      subscriptionOptions: subscriptionOptionsRef.current,
                      forceRefetch: !preferCacheValue,
                    })
                  );
                  setArg(arg2);
                });
                return promise;
              },
              [dispatch, initiate]
            );
            const reset = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useCallback'
            ])(() => {
              if (promiseRef.current?.queryCacheKey) {
                dispatch(
                  api.internalActions.removeQueryResult({
                    queryCacheKey: promiseRef.current?.queryCacheKey,
                  })
                );
              }
            }, [dispatch]);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useEffect'
            ])(() => {
              return () => {
                promiseRef?.current?.unsubscribe();
              };
            }, []);
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useEffect'
            ])(() => {
              if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {
                trigger(arg, true);
              }
            }, [arg, trigger]);
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(
              () => [
                trigger,
                arg,
                {
                  reset,
                },
              ],
              [trigger, arg, reset]
            );
          };
          const useQueryState = buildUseQueryState(
            endpointName,
            queryStatePreSelector
          );
          return {
            useQueryState,
            useQuerySubscription,
            useLazyQuerySubscription,
            useLazyQuery(options) {
              const [trigger, arg, { reset }] =
                useLazyQuerySubscription(options);
              const queryStateResults = useQueryState(arg, {
                ...options,
                skip: arg === UNINITIALIZED_VALUE,
              });
              const info = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                () => ({
                  lastArg: arg,
                }),
                [arg]
              );
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                () => [
                  trigger,
                  {
                    ...queryStateResults,
                    reset,
                  },
                  info,
                ],
                [trigger, queryStateResults, reset, info]
              );
            },
            useQuery(arg, options) {
              const querySubscriptionResults = useQuerySubscription(
                arg,
                options
              );
              const queryStateResults = useQueryState(arg, {
                selectFromResult:
                  arg ===
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'skipToken'
                    ] || options?.skip
                    ? void 0
                    : noPendingQueryStateSelector,
                ...options,
              });
              const debugValue = pick(
                queryStateResults,
                ...COMMON_HOOK_DEBUG_FIELDS
              );
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'useDebugValue'
              ])(debugValue);
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                () => ({
                  ...queryStateResults,
                  ...querySubscriptionResults,
                }),
                [queryStateResults, querySubscriptionResults]
              );
            },
          };
        }
        function buildInfiniteQueryHooks(endpointName) {
          const useInfiniteQuerySubscription = (arg, options = {}) => {
            const [promiseRef, dispatch, initiate, stableSubscriptionOptions] =
              useQuerySubscriptionCommonImpl(endpointName, arg, options);
            const subscriptionOptionsRef = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useRef'
            ])(stableSubscriptionOptions);
            usePossiblyImmediateEffect(() => {
              subscriptionOptionsRef.current = stableSubscriptionOptions;
            }, [stableSubscriptionOptions]);
            const trigger = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useCallback'
            ])(
              function (arg2, direction) {
                let promise;
                batch(() => {
                  promiseRef.current?.unsubscribe();
                  promiseRef.current = promise = dispatch(
                    initiate(arg2, {
                      subscriptionOptions: subscriptionOptionsRef.current,
                      direction,
                    })
                  );
                });
                return promise;
              },
              [promiseRef, dispatch, initiate]
            );
            usePromiseRefUnsubscribeOnUnmount(promiseRef);
            const stableArg = useStableQueryArgs(
              options.skip
                ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'skipToken'
                  ]
                : arg, // Even if the user provided a per-endpoint `serializeQueryArgs` with
              // a consistent return value, _here_ we want to use the default behavior
              // so we can tell if _anything_ actually changed. Otherwise, we can end up
              // with a case where the query args did change but the serialization doesn't,
              // and then we never try to initiate a refetch.
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'defaultSerializeQueryArgs'
              ],
              context.endpointDefinitions[endpointName],
              endpointName
            );
            const refetch = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useCallback'
            ])(() => refetchOrErrorIfUnmounted(promiseRef), [promiseRef]);
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(() => {
              const fetchNextPage = () => {
                return trigger(stableArg, 'forward');
              };
              const fetchPreviousPage = () => {
                return trigger(stableArg, 'backward');
              };
              return {
                trigger,
                /**
                 * A method to manually refetch data for the query
                 */ refetch,
                fetchNextPage,
                fetchPreviousPage,
              };
            }, [refetch, trigger, stableArg]);
          };
          const useInfiniteQueryState = buildUseQueryState(
            endpointName,
            infiniteQueryStatePreSelector
          );
          return {
            useInfiniteQueryState,
            useInfiniteQuerySubscription,
            useInfiniteQuery(arg, options) {
              const { refetch, fetchNextPage, fetchPreviousPage } =
                useInfiniteQuerySubscription(arg, options);
              const queryStateResults = useInfiniteQueryState(arg, {
                selectFromResult:
                  arg ===
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'skipToken'
                    ] || options?.skip
                    ? void 0
                    : noPendingQueryStateSelector,
                ...options,
              });
              const debugValue = pick(
                queryStateResults,
                ...COMMON_HOOK_DEBUG_FIELDS,
                'hasNextPage',
                'hasPreviousPage'
              );
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'useDebugValue'
              ])(debugValue);
              return (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'useMemo'
              ])(
                () => ({
                  ...queryStateResults,
                  fetchNextPage,
                  fetchPreviousPage,
                  refetch,
                }),
                [queryStateResults, fetchNextPage, fetchPreviousPage, refetch]
              );
            },
          };
        }
        function buildMutationHook(name) {
          return ({ selectFromResult, fixedCacheKey } = {}) => {
            const { select, initiate } = api.endpoints[name];
            const dispatch = useDispatch();
            const [promise, setPromise] = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useState'
            ])();
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useEffect'
            ])(
              () => () => {
                if (!promise?.arg.fixedCacheKey) {
                  promise?.reset();
                }
              },
              [promise]
            );
            const triggerMutation = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useCallback'
            ])(
              function (arg) {
                const promise2 = dispatch(
                  initiate(arg, {
                    fixedCacheKey,
                  })
                );
                setPromise(promise2);
                return promise2;
              },
              [dispatch, initiate, fixedCacheKey]
            );
            const { requestId } = promise || {};
            const selectDefaultResult = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(
              () =>
                select({
                  fixedCacheKey,
                  requestId: promise?.requestId,
                }),
              [fixedCacheKey, promise, select]
            );
            const mutationSelector = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(
              () =>
                selectFromResult
                  ? createSelector([selectDefaultResult], selectFromResult)
                  : selectDefaultResult,
              [selectFromResult, selectDefaultResult]
            );
            const currentState = useSelector(
              mutationSelector,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'shallowEqual'
              ]
            );
            const originalArgs =
              fixedCacheKey == null ? promise?.arg.originalArgs : void 0;
            const reset = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useCallback'
            ])(() => {
              batch(() => {
                if (promise) {
                  setPromise(void 0);
                }
                if (fixedCacheKey) {
                  dispatch(
                    api.internalActions.removeMutationResult({
                      requestId,
                      fixedCacheKey,
                    })
                  );
                }
              });
            }, [dispatch, fixedCacheKey, promise, requestId]);
            const debugValue = pick(
              currentState,
              ...COMMON_HOOK_DEBUG_FIELDS,
              'endpointName'
            );
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useDebugValue'
            ])(debugValue);
            const finalState = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(
              () => ({
                ...currentState,
                originalArgs,
                reset,
              }),
              [currentState, originalArgs, reset]
            );
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useMemo'
            ])(
              () => [triggerMutation, finalState],
              [triggerMutation, finalState]
            );
          };
        }
      }
      // src/query/react/module.ts
      var reactHooksModuleName = /* @__PURE__ */ Symbol();
      var reactHooksModule = ({
        batch = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'batch'
        ],
        hooks = {
          useDispatch:
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useDispatch'
            ],
          useSelector:
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useSelector'
            ],
          useStore:
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'useStore'
            ],
        },
        createSelector = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$reselect$2f$dist$2f$reselect$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'createSelector'
        ],
        unstable__sideEffectsInRender = false,
        ...rest
      } = {}) => {
        if (('TURBOPACK compile-time truthy', 1)) {
          const hookNames = ['useDispatch', 'useSelector', 'useStore'];
          let warned = false;
          for (const hookName of hookNames) {
            if (countObjectKeys(rest) > 0) {
              if (rest[hookName]) {
                if (!warned) {
                  console.warn(
                    'As of RTK 2.0, the hooks now need to be specified as one object, provided under a `hooks` key:\n`reactHooksModule({ hooks: { useDispatch, useSelector, useStore } })`'
                  );
                  warned = true;
                }
              }
              hooks[hookName] = rest[hookName];
            }
            if (typeof hooks[hookName] !== 'function') {
              throw new Error(
                ('TURBOPACK compile-time falsy', 0)
                  ? 'TURBOPACK unreachable'
                  : `When using custom hooks for context, all ${hookNames.length} hooks need to be provided: ${hookNames.join(', ')}.
Hook ${hookName} was either not provided or not a function.`
              );
            }
          }
        }
        return {
          name: reactHooksModuleName,
          init(api, { serializeQueryArgs }, context) {
            const anyApi = api;
            const {
              buildQueryHooks,
              buildInfiniteQueryHooks,
              buildMutationHook,
              usePrefetch,
            } = buildHooks({
              api,
              moduleOptions: {
                batch,
                hooks,
                unstable__sideEffectsInRender,
                createSelector,
              },
              serializeQueryArgs,
              context,
            });
            safeAssign(anyApi, {
              usePrefetch,
            });
            safeAssign(context, {
              batch,
            });
            return {
              injectEndpoint(endpointName, definition) {
                if (isQueryDefinition(definition)) {
                  const {
                    useQuery,
                    useLazyQuery,
                    useLazyQuerySubscription,
                    useQueryState,
                    useQuerySubscription,
                  } = buildQueryHooks(endpointName);
                  safeAssign(anyApi.endpoints[endpointName], {
                    useQuery,
                    useLazyQuery,
                    useLazyQuerySubscription,
                    useQueryState,
                    useQuerySubscription,
                  });
                  api[`use${capitalize(endpointName)}Query`] = useQuery;
                  api[`useLazy${capitalize(endpointName)}Query`] = useLazyQuery;
                }
                if (isMutationDefinition(definition)) {
                  const useMutation = buildMutationHook(endpointName);
                  safeAssign(anyApi.endpoints[endpointName], {
                    useMutation,
                  });
                  api[`use${capitalize(endpointName)}Mutation`] = useMutation;
                } else if (isInfiniteQueryDefinition(definition)) {
                  const {
                    useInfiniteQuery,
                    useInfiniteQuerySubscription,
                    useInfiniteQueryState,
                  } = buildInfiniteQueryHooks(endpointName);
                  safeAssign(anyApi.endpoints[endpointName], {
                    useInfiniteQuery,
                    useInfiniteQuerySubscription,
                    useInfiniteQueryState,
                  });
                  api[`use${capitalize(endpointName)}InfiniteQuery`] =
                    useInfiniteQuery;
                }
              },
            };
          },
        };
      };
      function ApiProvider(props) {
        const context =
          props.context ||
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'ReactReduxContext'
          ];
        const existingContext = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'useContext'
        ])(context);
        if (existingContext) {
          throw new Error(
            ('TURBOPACK compile-time falsy', 0)
              ? 'TURBOPACK unreachable'
              : 'Existing Redux context detected. If you already have a store set up, please use the traditional Redux setup.'
          );
        }
        const [store] =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'useState'
          ](() =>
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$redux$2d$toolkit$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
              'configureStore'
            ])({
              reducer: {
                [props.api.reducerPath]: props.api.reducer,
              },
              middleware: (gDM) => gDM().concat(props.api.middleware),
            })
          );
        (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'useEffect'
        ])(
          () =>
            props.setupListeners === false
              ? void 0
              : (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'setupListeners'
                ])(store.dispatch, props.setupListeners),
          [props.setupListeners, store.dispatch]
        );
        return /* @__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'createElement'
        ](
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$redux$2f$dist$2f$rsc$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'Provider'
          ],
          {
            store,
            context,
          },
          props.children
        );
      }
      // src/query/react/index.ts
      var createApi = /* @__PURE__ */ (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'buildCreateApi'
      ])(
        (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$reduxjs$2f$toolkit$2f$dist$2f$query$2f$rtk$2d$query$2e$modern$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'coreModule'
        ])(),
        reactHooksModule()
      );
      //# sourceMappingURL=rtk-query-react.modern.mjs.map
    },
  '[project]/node_modules/tslib/tslib.es6.mjs [app-rsc] (ecmascript)': (
    __turbopack_context__
  ) => {
    'use strict';

    /******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ __turbopack_context__.s(
      {
        __addDisposableResource: () => __addDisposableResource,
        __assign: () => __assign,
        __asyncDelegator: () => __asyncDelegator,
        __asyncGenerator: () => __asyncGenerator,
        __asyncValues: () => __asyncValues,
        __await: () => __await,
        __awaiter: () => __awaiter,
        __classPrivateFieldGet: () => __classPrivateFieldGet,
        __classPrivateFieldIn: () => __classPrivateFieldIn,
        __classPrivateFieldSet: () => __classPrivateFieldSet,
        __createBinding: () => __createBinding,
        __decorate: () => __decorate,
        __disposeResources: () => __disposeResources,
        __esDecorate: () => __esDecorate,
        __exportStar: () => __exportStar,
        __extends: () => __extends,
        __generator: () => __generator,
        __importDefault: () => __importDefault,
        __importStar: () => __importStar,
        __makeTemplateObject: () => __makeTemplateObject,
        __metadata: () => __metadata,
        __param: () => __param,
        __propKey: () => __propKey,
        __read: () => __read,
        __rest: () => __rest,
        __rewriteRelativeImportExtension: () =>
          __rewriteRelativeImportExtension,
        __runInitializers: () => __runInitializers,
        __setFunctionName: () => __setFunctionName,
        __spread: () => __spread,
        __spreadArray: () => __spreadArray,
        __spreadArrays: () => __spreadArrays,
        __values: () => __values,
        default: () => __TURBOPACK__default__export__,
      }
    );
    var extendStatics = function (d, b) {
      extendStatics =
        Object.setPrototypeOf ||
        ({
          __proto__: [],
        } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      return extendStatics(d, b);
    };
    function __extends(d, b) {
      if (typeof b !== 'function' && b !== null)
        throw new TypeError(
          'Class extends value ' + String(b) + ' is not a constructor or null'
        );
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype =
        b === null
          ? Object.create(b)
          : ((__.prototype = b.prototype), new __());
    }
    var __assign = function () {
      __assign =
        Object.assign ||
        function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === 'function')
        for (
          var i = 0, p = Object.getOwnPropertySymbols(s);
          i < p.length;
          i++
        ) {
          if (
            e.indexOf(p[i]) < 0 &&
            Object.prototype.propertyIsEnumerable.call(s, p[i])
          )
            t[p[i]] = s[p[i]];
        }
      return t;
    }
    function __decorate(decorators, target, key, desc) {
      var c = arguments.length,
        r =
          c < 3
            ? target
            : desc === null
              ? (desc = Object.getOwnPropertyDescriptor(target, key))
              : desc,
        d;
      if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if ((d = decorators[i]))
            r =
              (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
      return function (target, key) {
        decorator(target, key, paramIndex);
      };
    }
    function __esDecorate(
      ctor,
      descriptorIn,
      decorators,
      contextIn,
      initializers,
      extraInitializers
    ) {
      function accept(f) {
        if (f !== void 0 && typeof f !== 'function')
          throw new TypeError('Function expected');
        return f;
      }
      var kind = contextIn.kind,
        key = kind === 'getter' ? 'get' : kind === 'setter' ? 'set' : 'value';
      var target =
        !descriptorIn && ctor
          ? contextIn['static']
            ? ctor
            : ctor.prototype
          : null;
      var descriptor =
        descriptorIn ||
        (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
      var _,
        done = false;
      for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn)
          context[p] = p === 'access' ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) {
          if (done)
            throw new TypeError(
              'Cannot add initializers after decoration has completed'
            );
          extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(
          kind === 'accessor'
            ? {
                get: descriptor.get,
                set: descriptor.set,
              }
            : descriptor[key],
          context
        );
        if (kind === 'accessor') {
          if (result === void 0) continue;
          if (result === null || typeof result !== 'object')
            throw new TypeError('Object expected');
          if ((_ = accept(result.get))) descriptor.get = _;
          if ((_ = accept(result.set))) descriptor.set = _;
          if ((_ = accept(result.init))) initializers.unshift(_);
        } else if ((_ = accept(result))) {
          if (kind === 'field') initializers.unshift(_);
          else descriptor[key] = _;
        }
      }
      if (target) Object.defineProperty(target, contextIn.name, descriptor);
      done = true;
    }
    function __runInitializers(thisArg, initializers, value) {
      var useValue = arguments.length > 2;
      for (var i = 0; i < initializers.length; i++) {
        value = useValue
          ? initializers[i].call(thisArg, value)
          : initializers[i].call(thisArg);
      }
      return useValue ? value : void 0;
    }
    function __propKey(x) {
      return typeof x === 'symbol' ? x : ''.concat(x);
    }
    function __setFunctionName(f, name, prefix) {
      if (typeof name === 'symbol')
        name = name.description ? '['.concat(name.description, ']') : '';
      return Object.defineProperty(f, 'name', {
        configurable: true,
        value: prefix ? ''.concat(prefix, ' ', name) : name,
      });
    }
    function __metadata(metadataKey, metadataValue) {
      if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
        return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P
          ? value
          : new P(function (resolve) {
              resolve(value);
            });
      }
      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator['throw'](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done
            ? resolve(result.value)
            : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }
    function __generator(thisArg, body) {
      var _ = {
          label: 0,
          sent: function () {
            if (t[0] & 1) throw t[1];
            return t[1];
          },
          trys: [],
          ops: [],
        },
        f,
        y,
        t,
        g = Object.create(
          (typeof Iterator === 'function' ? Iterator : Object).prototype
        );
      return (
        (g.next = verb(0)),
        (g['throw'] = verb(1)),
        (g['return'] = verb(2)),
        typeof Symbol === 'function' &&
          (g[Symbol.iterator] = function () {
            return this;
          }),
        g
      );
      //TURBOPACK unreachable
      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError('Generator is already executing.');
        while ((g && ((g = 0), op[0] && (_ = 0)), _))
          try {
            if (
              ((f = 1),
              y &&
                (t =
                  op[0] & 2
                    ? y['return']
                    : op[0]
                      ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                      : y.next) &&
                !(t = t.call(y, op[1])).done)
            )
              return t;
            if (((y = 0), t)) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return {
                  value: op[1],
                  done: false,
                };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (
                  !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
                  (op[0] === 6 || op[0] === 2)
                ) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true,
        };
      }
    }
    var __createBinding = Object.create
      ? function (o, m, k, k2) {
          if (k2 === undefined) k2 = k;
          var desc = Object.getOwnPropertyDescriptor(m, k);
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k];
              },
            };
          }
          Object.defineProperty(o, k2, desc);
        }
      : function (o, m, k, k2) {
          if (k2 === undefined) k2 = k;
          o[k2] = m[k];
        };
    function __exportStar(m, o) {
      for (var p in m)
        if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p))
          __createBinding(o, m, p);
    }
    function __values(o) {
      var s = typeof Symbol === 'function' && Symbol.iterator,
        m = s && o[s],
        i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === 'number')
        return {
          next: function () {
            if (o && i >= o.length) o = void 0;
            return {
              value: o && o[i++],
              done: !o,
            };
          },
        };
      throw new TypeError(
        s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.'
      );
    }
    function __read(o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {
          error: error,
        };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    }
    function __spread() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    }
    function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    }
    function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
      return this instanceof __await ? ((this.v = v), this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError('Symbol.asyncIterator is not defined.');
      var g = generator.apply(thisArg, _arguments || []),
        i,
        q = [];
      return (
        (i = Object.create(
          (typeof AsyncIterator === 'function' ? AsyncIterator : Object)
            .prototype
        )),
        verb('next'),
        verb('throw'),
        verb('return', awaitReturn),
        (i[Symbol.asyncIterator] = function () {
          return this;
        }),
        i
      );
      //TURBOPACK unreachable
      function awaitReturn(f) {
        return function (v) {
          return Promise.resolve(v).then(f, reject);
        };
      }
      function verb(n, f) {
        if (g[n]) {
          i[n] = function (v) {
            return new Promise(function (a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
          if (f) i[n] = f(i[n]);
        }
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await
          ? Promise.resolve(r.value.v).then(fulfill, reject)
          : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume('next', value);
      }
      function reject(value) {
        resume('throw', value);
      }
      function settle(f, v) {
        if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
      }
    }
    function __asyncDelegator(o) {
      var i, p;
      return (
        (i = {}),
        verb('next'),
        verb('throw', function (e) {
          throw e;
        }),
        verb('return'),
        (i[Symbol.iterator] = function () {
          return this;
        }),
        i
      );
      //TURBOPACK unreachable
      function verb(n, f) {
        i[n] = o[n]
          ? function (v) {
              return (p = !p)
                ? {
                    value: __await(o[n](v)),
                    done: false,
                  }
                : f
                  ? f(v)
                  : v;
            }
          : f;
      }
    }
    function __asyncValues(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError('Symbol.asyncIterator is not defined.');
      var m = o[Symbol.asyncIterator],
        i;
      return m
        ? m.call(o)
        : ((o =
            typeof __values === 'function'
              ? __values(o)
              : o[Symbol.iterator]()),
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i);
      //TURBOPACK unreachable
      function verb(n) {
        i[n] =
          o[n] &&
          function (v) {
            return new Promise(function (resolve, reject) {
              (v = o[n](v)), settle(resolve, reject, v.done, v.value);
            });
          };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function (v) {
          resolve({
            value: v,
            done: d,
          });
        }, reject);
      }
    }
    function __makeTemplateObject(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, 'raw', {
          value: raw,
        });
      } else {
        cooked.raw = raw;
      }
      return cooked;
    }
    var __setModuleDefault = Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', {
            enumerable: true,
            value: v,
          });
        }
      : function (o, v) {
          o['default'] = v;
        };
    var ownKeys = function (o) {
      ownKeys =
        Object.getOwnPropertyNames ||
        function (o) {
          var ar = [];
          for (var k in o)
            if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
          return ar;
        };
      return ownKeys(o);
    };
    function __importStar(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++)
          if (k[i] !== 'default') __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    }
    function __importDefault(mod) {
      return mod && mod.__esModule
        ? mod
        : {
            default: mod,
          };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
      if (kind === 'a' && !f)
        throw new TypeError('Private accessor was defined without a getter');
      if (
        typeof state === 'function'
          ? receiver !== state || !f
          : !state.has(receiver)
      )
        throw new TypeError(
          'Cannot read private member from an object whose class did not declare it'
        );
      return kind === 'm'
        ? f
        : kind === 'a'
          ? f.call(receiver)
          : f
            ? f.value
            : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
      if (kind === 'm') throw new TypeError('Private method is not writable');
      if (kind === 'a' && !f)
        throw new TypeError('Private accessor was defined without a setter');
      if (
        typeof state === 'function'
          ? receiver !== state || !f
          : !state.has(receiver)
      )
        throw new TypeError(
          'Cannot write private member to an object whose class did not declare it'
        );
      return (
        kind === 'a'
          ? f.call(receiver, value)
          : f
            ? (f.value = value)
            : state.set(receiver, value),
        value
      );
    }
    function __classPrivateFieldIn(state, receiver) {
      if (
        receiver === null ||
        (typeof receiver !== 'object' && typeof receiver !== 'function')
      )
        throw new TypeError("Cannot use 'in' operator on non-object");
      return typeof state === 'function'
        ? receiver === state
        : state.has(receiver);
    }
    function __addDisposableResource(env, value, async) {
      if (value !== null && value !== void 0) {
        if (typeof value !== 'object' && typeof value !== 'function')
          throw new TypeError('Object expected.');
        var dispose, inner;
        if (async) {
          if (!Symbol.asyncDispose)
            throw new TypeError('Symbol.asyncDispose is not defined.');
          dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
          if (!Symbol.dispose)
            throw new TypeError('Symbol.dispose is not defined.');
          dispose = value[Symbol.dispose];
          if (async) inner = dispose;
        }
        if (typeof dispose !== 'function')
          throw new TypeError('Object not disposable.');
        if (inner)
          dispose = function () {
            try {
              inner.call(this);
            } catch (e) {
              return Promise.reject(e);
            }
          };
        env.stack.push({
          value: value,
          dispose: dispose,
          async: async,
        });
      } else if (async) {
        env.stack.push({
          async: true,
        });
      }
      return value;
    }
    var _SuppressedError =
      typeof SuppressedError === 'function'
        ? SuppressedError
        : function (error, suppressed, message) {
            var e = new Error(message);
            return (
              (e.name = 'SuppressedError'),
              (e.error = error),
              (e.suppressed = suppressed),
              e
            );
          };
    function __disposeResources(env) {
      function fail(e) {
        env.error = env.hasError
          ? new _SuppressedError(
              e,
              env.error,
              'An error was suppressed during disposal.'
            )
          : e;
        env.hasError = true;
      }
      var r,
        s = 0;
      function next() {
        while ((r = env.stack.pop())) {
          try {
            if (!r.async && s === 1)
              return (s = 0), env.stack.push(r), Promise.resolve().then(next);
            if (r.dispose) {
              var result = r.dispose.call(r.value);
              if (r.async)
                return (
                  (s |= 2),
                  Promise.resolve(result).then(next, function (e) {
                    fail(e);
                    return next();
                  })
                );
            } else s |= 1;
          } catch (e) {
            fail(e);
          }
        }
        if (s === 1)
          return env.hasError ? Promise.reject(env.error) : Promise.resolve();
        if (env.hasError) throw env.error;
      }
      return next();
    }
    function __rewriteRelativeImportExtension(path, preserveJsx) {
      if (typeof path === 'string' && /^\.\.?\//.test(path)) {
        return path.replace(
          /\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i,
          function (m, tsx, d, ext, cm) {
            return tsx
              ? preserveJsx
                ? '.jsx'
                : '.js'
              : d && (!ext || !cm)
                ? m
                : d + ext + '.' + cm.toLowerCase() + 'js';
          }
        );
      }
      return path;
    }
    const __TURBOPACK__default__export__ = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __esDecorate,
      __runInitializers,
      __propKey,
      __setFunctionName,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources,
      __rewriteRelativeImportExtension,
    };
  },
  '[project]/node_modules/@formatjs/fast-memoize/lib/index.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      //
      // Main
      //
      __turbopack_context__.s({
        memoize: () => memoize,
        strategies: () => strategies,
      });
      function memoize(fn, options) {
        var cache = options && options.cache ? options.cache : cacheDefault;
        var serializer =
          options && options.serializer
            ? options.serializer
            : serializerDefault;
        var strategy =
          options && options.strategy ? options.strategy : strategyDefault;
        return strategy(fn, {
          cache: cache,
          serializer: serializer,
        });
      }
      //
      // Strategy
      //
      function isPrimitive(value) {
        return (
          value == null ||
          typeof value === 'number' ||
          typeof value === 'boolean'
        ); // || typeof value === "string" 'unsafe' primitive for our needs
      }
      function monadic(fn, cache, serializer, arg) {
        var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
        var computedValue = cache.get(cacheKey);
        if (typeof computedValue === 'undefined') {
          computedValue = fn.call(this, arg);
          cache.set(cacheKey, computedValue);
        }
        return computedValue;
      }
      function variadic(fn, cache, serializer) {
        var args = Array.prototype.slice.call(arguments, 3);
        var cacheKey = serializer(args);
        var computedValue = cache.get(cacheKey);
        if (typeof computedValue === 'undefined') {
          computedValue = fn.apply(this, args);
          cache.set(cacheKey, computedValue);
        }
        return computedValue;
      }
      function assemble(fn, context, strategy, cache, serialize) {
        return strategy.bind(context, fn, cache, serialize);
      }
      function strategyDefault(fn, options) {
        var strategy = fn.length === 1 ? monadic : variadic;
        return assemble(
          fn,
          this,
          strategy,
          options.cache.create(),
          options.serializer
        );
      }
      function strategyVariadic(fn, options) {
        return assemble(
          fn,
          this,
          variadic,
          options.cache.create(),
          options.serializer
        );
      }
      function strategyMonadic(fn, options) {
        return assemble(
          fn,
          this,
          monadic,
          options.cache.create(),
          options.serializer
        );
      }
      //
      // Serializer
      //
      var serializerDefault = function () {
        return JSON.stringify(arguments);
      };
      //
      // Cache
      //
      var ObjectWithoutPrototypeCache = (function () {
        function ObjectWithoutPrototypeCache() {
          this.cache = Object.create(null);
        }
        ObjectWithoutPrototypeCache.prototype.get = function (key) {
          return this.cache[key];
        };
        ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
          this.cache[key] = value;
        };
        return ObjectWithoutPrototypeCache;
      })();
      var cacheDefault = {
        create: function create() {
          return new ObjectWithoutPrototypeCache();
        },
      };
      var strategies = {
        variadic: strategyVariadic,
        monadic: strategyMonadic,
      };
    },
  '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/error.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        ErrorKind: () => ErrorKind,
      });
      var ErrorKind;
      (function (ErrorKind) {
        /** Argument is unclosed (e.g. `{0`) */ ErrorKind[
          (ErrorKind['EXPECT_ARGUMENT_CLOSING_BRACE'] = 1)
        ] = 'EXPECT_ARGUMENT_CLOSING_BRACE';
        /** Argument is empty (e.g. `{}`). */ ErrorKind[
          (ErrorKind['EMPTY_ARGUMENT'] = 2)
        ] = 'EMPTY_ARGUMENT';
        /** Argument is malformed (e.g. `{foo!}``) */ ErrorKind[
          (ErrorKind['MALFORMED_ARGUMENT'] = 3)
        ] = 'MALFORMED_ARGUMENT';
        /** Expect an argument type (e.g. `{foo,}`) */ ErrorKind[
          (ErrorKind['EXPECT_ARGUMENT_TYPE'] = 4)
        ] = 'EXPECT_ARGUMENT_TYPE';
        /** Unsupported argument type (e.g. `{foo,foo}`) */ ErrorKind[
          (ErrorKind['INVALID_ARGUMENT_TYPE'] = 5)
        ] = 'INVALID_ARGUMENT_TYPE';
        /** Expect an argument style (e.g. `{foo, number, }`) */ ErrorKind[
          (ErrorKind['EXPECT_ARGUMENT_STYLE'] = 6)
        ] = 'EXPECT_ARGUMENT_STYLE';
        /** The number skeleton is invalid. */ ErrorKind[
          (ErrorKind['INVALID_NUMBER_SKELETON'] = 7)
        ] = 'INVALID_NUMBER_SKELETON';
        /** The date time skeleton is invalid. */ ErrorKind[
          (ErrorKind['INVALID_DATE_TIME_SKELETON'] = 8)
        ] = 'INVALID_DATE_TIME_SKELETON';
        /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */ ErrorKind[
          (ErrorKind['EXPECT_NUMBER_SKELETON'] = 9)
        ] = 'EXPECT_NUMBER_SKELETON';
        /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */ ErrorKind[
          (ErrorKind['EXPECT_DATE_TIME_SKELETON'] = 10)
        ] = 'EXPECT_DATE_TIME_SKELETON';
        /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */ ErrorKind[
          (ErrorKind['UNCLOSED_QUOTE_IN_ARGUMENT_STYLE'] = 11)
        ] = 'UNCLOSED_QUOTE_IN_ARGUMENT_STYLE';
        /** Missing select argument options (e.g. `{foo, select}`) */ ErrorKind[
          (ErrorKind['EXPECT_SELECT_ARGUMENT_OPTIONS'] = 12)
        ] = 'EXPECT_SELECT_ARGUMENT_OPTIONS';
        /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */ ErrorKind[
          (ErrorKind['EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE'] = 13)
        ] = 'EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE';
        /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */ ErrorKind[
          (ErrorKind['INVALID_PLURAL_ARGUMENT_OFFSET_VALUE'] = 14)
        ] = 'INVALID_PLURAL_ARGUMENT_OFFSET_VALUE';
        /** Expecting a selector in `select` argument (e.g `{foo, select}`) */ ErrorKind[
          (ErrorKind['EXPECT_SELECT_ARGUMENT_SELECTOR'] = 15)
        ] = 'EXPECT_SELECT_ARGUMENT_SELECTOR';
        /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */ ErrorKind[
          (ErrorKind['EXPECT_PLURAL_ARGUMENT_SELECTOR'] = 16)
        ] = 'EXPECT_PLURAL_ARGUMENT_SELECTOR';
        /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */ ErrorKind[
          (ErrorKind['EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT'] = 17)
        ] = 'EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT';
        /**
         * Expecting a message fragment after the `plural` or `selectordinal` selector
         * (e.g. `{foo, plural, one}`)
         */ ErrorKind[
          (ErrorKind['EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT'] = 18)
        ] = 'EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT';
        /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */ ErrorKind[
          (ErrorKind['INVALID_PLURAL_ARGUMENT_SELECTOR'] = 19)
        ] = 'INVALID_PLURAL_ARGUMENT_SELECTOR';
        /**
         * Duplicate selectors in `plural` or `selectordinal` argument.
         * (e.g. {foo, plural, one {#} one {#}})
         */ ErrorKind[(ErrorKind['DUPLICATE_PLURAL_ARGUMENT_SELECTOR'] = 20)] =
          'DUPLICATE_PLURAL_ARGUMENT_SELECTOR';
        /** Duplicate selectors in `select` argument.
         * (e.g. {foo, select, apple {apple} apple {apple}})
         */ ErrorKind[(ErrorKind['DUPLICATE_SELECT_ARGUMENT_SELECTOR'] = 21)] =
          'DUPLICATE_SELECT_ARGUMENT_SELECTOR';
        /** Plural or select argument option must have `other` clause. */ ErrorKind[
          (ErrorKind['MISSING_OTHER_CLAUSE'] = 22)
        ] = 'MISSING_OTHER_CLAUSE';
        /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */ ErrorKind[
          (ErrorKind['INVALID_TAG'] = 23)
        ] = 'INVALID_TAG';
        /** The tag name is invalid. (e.g. `<123>foo</123>`) */ ErrorKind[
          (ErrorKind['INVALID_TAG_NAME'] = 25)
        ] = 'INVALID_TAG_NAME';
        /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */ ErrorKind[
          (ErrorKind['UNMATCHED_CLOSING_TAG'] = 26)
        ] = 'UNMATCHED_CLOSING_TAG';
        /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */ ErrorKind[
          (ErrorKind['UNCLOSED_TAG'] = 27)
        ] = 'UNCLOSED_TAG';
      })(ErrorKind || (ErrorKind = {}));
    },
  '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        SKELETON_TYPE: () => SKELETON_TYPE,
        TYPE: () => TYPE,
        createLiteralElement: () => createLiteralElement,
        createNumberElement: () => createNumberElement,
        isArgumentElement: () => isArgumentElement,
        isDateElement: () => isDateElement,
        isDateTimeSkeleton: () => isDateTimeSkeleton,
        isLiteralElement: () => isLiteralElement,
        isNumberElement: () => isNumberElement,
        isNumberSkeleton: () => isNumberSkeleton,
        isPluralElement: () => isPluralElement,
        isPoundElement: () => isPoundElement,
        isSelectElement: () => isSelectElement,
        isTagElement: () => isTagElement,
        isTimeElement: () => isTimeElement,
      });
      var TYPE;
      (function (TYPE) {
        /**
         * Raw text
         */ TYPE[(TYPE['literal'] = 0)] = 'literal';
        /**
         * Variable w/o any format, e.g `var` in `this is a {var}`
         */ TYPE[(TYPE['argument'] = 1)] = 'argument';
        /**
         * Variable w/ number format
         */ TYPE[(TYPE['number'] = 2)] = 'number';
        /**
         * Variable w/ date format
         */ TYPE[(TYPE['date'] = 3)] = 'date';
        /**
         * Variable w/ time format
         */ TYPE[(TYPE['time'] = 4)] = 'time';
        /**
         * Variable w/ select format
         */ TYPE[(TYPE['select'] = 5)] = 'select';
        /**
         * Variable w/ plural format
         */ TYPE[(TYPE['plural'] = 6)] = 'plural';
        /**
         * Only possible within plural argument.
         * This is the `#` symbol that will be substituted with the count.
         */ TYPE[(TYPE['pound'] = 7)] = 'pound';
        /**
         * XML-like tag
         */ TYPE[(TYPE['tag'] = 8)] = 'tag';
      })(TYPE || (TYPE = {}));
      var SKELETON_TYPE;
      (function (SKELETON_TYPE) {
        SKELETON_TYPE[(SKELETON_TYPE['number'] = 0)] = 'number';
        SKELETON_TYPE[(SKELETON_TYPE['dateTime'] = 1)] = 'dateTime';
      })(SKELETON_TYPE || (SKELETON_TYPE = {}));
      function isLiteralElement(el) {
        return el.type === TYPE.literal;
      }
      function isArgumentElement(el) {
        return el.type === TYPE.argument;
      }
      function isNumberElement(el) {
        return el.type === TYPE.number;
      }
      function isDateElement(el) {
        return el.type === TYPE.date;
      }
      function isTimeElement(el) {
        return el.type === TYPE.time;
      }
      function isSelectElement(el) {
        return el.type === TYPE.select;
      }
      function isPluralElement(el) {
        return el.type === TYPE.plural;
      }
      function isPoundElement(el) {
        return el.type === TYPE.pound;
      }
      function isTagElement(el) {
        return el.type === TYPE.tag;
      }
      function isNumberSkeleton(el) {
        return !!(
          el &&
          typeof el === 'object' &&
          el.type === SKELETON_TYPE.number
        );
      }
      function isDateTimeSkeleton(el) {
        return !!(
          el &&
          typeof el === 'object' &&
          el.type === SKELETON_TYPE.dateTime
        );
      }
      function createLiteralElement(value) {
        return {
          type: TYPE.literal,
          value: value,
        };
      }
      function createNumberElement(value, style) {
        return {
          type: TYPE.number,
          value: value,
          style: style,
        };
      }
    },
  '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      // @generated from regex-gen.ts
      __turbopack_context__.s({
        SPACE_SEPARATOR_REGEX: () => SPACE_SEPARATOR_REGEX,
        WHITE_SPACE_REGEX: () => WHITE_SPACE_REGEX,
      });
      var SPACE_SEPARATOR_REGEX =
        /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
      var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/;
    },
  '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      /**
       * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
       * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
       * with some tweaks
       */ __turbopack_context__.s({
        parseDateTimeSkeleton: () => parseDateTimeSkeleton,
      });
      var DATE_TIME_REGEX =
        /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
      function parseDateTimeSkeleton(skeleton) {
        var result = {};
        skeleton.replace(DATE_TIME_REGEX, function (match) {
          var len = match.length;
          switch (match[0]) {
            // Era
            case 'G':
              result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
              break;
            // Year
            case 'y':
              result.year = len === 2 ? '2-digit' : 'numeric';
              break;
            case 'Y':
            case 'u':
            case 'U':
            case 'r':
              throw new RangeError(
                '`Y/u/U/r` (year) patterns are not supported, use `y` instead'
              );
            // Quarter
            case 'q':
            case 'Q':
              throw new RangeError(
                '`q/Q` (quarter) patterns are not supported'
              );
            // Month
            case 'M':
            case 'L':
              result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][
                len - 1
              ];
              break;
            // Week
            case 'w':
            case 'W':
              throw new RangeError('`w/W` (week) patterns are not supported');
            case 'd':
              result.day = ['numeric', '2-digit'][len - 1];
              break;
            case 'D':
            case 'F':
            case 'g':
              throw new RangeError(
                '`D/F/g` (day) patterns are not supported, use `d` instead'
              );
            // Weekday
            case 'E':
              result.weekday =
                len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
              break;
            case 'e':
              if (len < 4) {
                throw new RangeError(
                  '`e..eee` (weekday) patterns are not supported'
                );
              }
              result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
              break;
            case 'c':
              if (len < 4) {
                throw new RangeError(
                  '`c..ccc` (weekday) patterns are not supported'
                );
              }
              result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
              break;
            // Period
            case 'a':
              result.hour12 = true;
              break;
            case 'b':
            case 'B':
              throw new RangeError(
                '`b/B` (period) patterns are not supported, use `a` instead'
              );
            // Hour
            case 'h':
              result.hourCycle = 'h12';
              result.hour = ['numeric', '2-digit'][len - 1];
              break;
            case 'H':
              result.hourCycle = 'h23';
              result.hour = ['numeric', '2-digit'][len - 1];
              break;
            case 'K':
              result.hourCycle = 'h11';
              result.hour = ['numeric', '2-digit'][len - 1];
              break;
            case 'k':
              result.hourCycle = 'h24';
              result.hour = ['numeric', '2-digit'][len - 1];
              break;
            case 'j':
            case 'J':
            case 'C':
              throw new RangeError(
                '`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead'
              );
            // Minute
            case 'm':
              result.minute = ['numeric', '2-digit'][len - 1];
              break;
            // Second
            case 's':
              result.second = ['numeric', '2-digit'][len - 1];
              break;
            case 'S':
            case 'A':
              throw new RangeError(
                '`S/A` (second) patterns are not supported, use `s` instead'
              );
            // Zone
            case 'z':
              result.timeZoneName = len < 4 ? 'short' : 'long';
              break;
            case 'Z':
            case 'O':
            case 'v':
            case 'V':
            case 'X':
            case 'x':
              throw new RangeError(
                '`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead'
              );
          }
          return '';
        });
        return result;
      }
    },
  '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      // @generated from regex-gen.ts
      __turbopack_context__.s({
        WHITE_SPACE_REGEX: () => WHITE_SPACE_REGEX,
      });
      var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;
    },
  '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/number.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        parseNumberSkeleton: () => parseNumberSkeleton,
        parseNumberSkeletonFromString: () => parseNumberSkeletonFromString,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/tslib/tslib.es6.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$regex$2e$generated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js [app-rsc] (ecmascript)'
        );
      function parseNumberSkeletonFromString(skeleton) {
        if (skeleton.length === 0) {
          throw new Error('Number skeleton cannot be empty');
        }
        // Parse the skeleton
        var stringTokens = skeleton
          .split(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$regex$2e$generated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'WHITE_SPACE_REGEX'
            ]
          )
          .filter(function (x) {
            return x.length > 0;
          });
        var tokens = [];
        for (
          var _i = 0, stringTokens_1 = stringTokens;
          _i < stringTokens_1.length;
          _i++
        ) {
          var stringToken = stringTokens_1[_i];
          var stemAndOptions = stringToken.split('/');
          if (stemAndOptions.length === 0) {
            throw new Error('Invalid number skeleton');
          }
          var stem = stemAndOptions[0],
            options = stemAndOptions.slice(1);
          for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
            var option = options_1[_a];
            if (option.length === 0) {
              throw new Error('Invalid number skeleton');
            }
          }
          tokens.push({
            stem: stem,
            options: options,
          });
        }
        return tokens;
      }
      function icuUnitToEcma(unit) {
        return unit.replace(/^(.*?)-/, '');
      }
      var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
      var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
      var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
      var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
      function parseSignificantPrecision(str) {
        var result = {};
        if (str[str.length - 1] === 'r') {
          result.roundingPriority = 'morePrecision';
        } else if (str[str.length - 1] === 's') {
          result.roundingPriority = 'lessPrecision';
        }
        str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
          // @@@ case
          if (typeof g2 !== 'string') {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length;
          } else if (g2 === '+') {
            result.minimumSignificantDigits = g1.length;
          } else if (g1[0] === '#') {
            result.maximumSignificantDigits = g1.length;
          } else {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits =
              g1.length + (typeof g2 === 'string' ? g2.length : 0);
          }
          return '';
        });
        return result;
      }
      function parseSign(str) {
        switch (str) {
          case 'sign-auto':
            return {
              signDisplay: 'auto',
            };
          case 'sign-accounting':
          case '()':
            return {
              currencySign: 'accounting',
            };
          case 'sign-always':
          case '+!':
            return {
              signDisplay: 'always',
            };
          case 'sign-accounting-always':
          case '()!':
            return {
              signDisplay: 'always',
              currencySign: 'accounting',
            };
          case 'sign-except-zero':
          case '+?':
            return {
              signDisplay: 'exceptZero',
            };
          case 'sign-accounting-except-zero':
          case '()?':
            return {
              signDisplay: 'exceptZero',
              currencySign: 'accounting',
            };
          case 'sign-never':
          case '+_':
            return {
              signDisplay: 'never',
            };
        }
      }
      function parseConciseScientificAndEngineeringStem(stem) {
        // Engineering
        var result;
        if (stem[0] === 'E' && stem[1] === 'E') {
          result = {
            notation: 'engineering',
          };
          stem = stem.slice(2);
        } else if (stem[0] === 'E') {
          result = {
            notation: 'scientific',
          };
          stem = stem.slice(1);
        }
        if (result) {
          var signDisplay = stem.slice(0, 2);
          if (signDisplay === '+!') {
            result.signDisplay = 'always';
            stem = stem.slice(2);
          } else if (signDisplay === '+?') {
            result.signDisplay = 'exceptZero';
            stem = stem.slice(2);
          }
          if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
            throw new Error('Malformed concise eng/scientific notation');
          }
          result.minimumIntegerDigits = stem.length;
        }
        return result;
      }
      function parseNotationOptions(opt) {
        var result = {};
        var signOpts = parseSign(opt);
        if (signOpts) {
          return signOpts;
        }
        return result;
      }
      function parseNumberSkeleton(tokens) {
        var result = {};
        for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
          var token = tokens_1[_i];
          switch (token.stem) {
            case 'percent':
            case '%':
              result.style = 'percent';
              continue;
            case '%x100':
              result.style = 'percent';
              result.scale = 100;
              continue;
            case 'currency':
              result.style = 'currency';
              result.currency = token.options[0];
              continue;
            case 'group-off':
            case ',_':
              result.useGrouping = false;
              continue;
            case 'precision-integer':
            case '.':
              result.maximumFractionDigits = 0;
              continue;
            case 'measure-unit':
            case 'unit':
              result.style = 'unit';
              result.unit = icuUnitToEcma(token.options[0]);
              continue;
            case 'compact-short':
            case 'K':
              result.notation = 'compact';
              result.compactDisplay = 'short';
              continue;
            case 'compact-long':
            case 'KK':
              result.notation = 'compact';
              result.compactDisplay = 'long';
              continue;
            case 'scientific':
              result = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__assign'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    '__assign'
                  ])({}, result),
                  {
                    notation: 'scientific',
                  }
                ),
                token.options.reduce(function (all, opt) {
                  return (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    '__assign'
                  ])(
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      '__assign'
                    ])({}, all),
                    parseNotationOptions(opt)
                  );
                }, {})
              );
              continue;
            case 'engineering':
              result = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__assign'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])(
                  (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    '__assign'
                  ])({}, result),
                  {
                    notation: 'engineering',
                  }
                ),
                token.options.reduce(function (all, opt) {
                  return (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    '__assign'
                  ])(
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      '__assign'
                    ])({}, all),
                    parseNotationOptions(opt)
                  );
                }, {})
              );
              continue;
            case 'notation-simple':
              result.notation = 'standard';
              continue;
            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
            case 'unit-width-narrow':
              result.currencyDisplay = 'narrowSymbol';
              result.unitDisplay = 'narrow';
              continue;
            case 'unit-width-short':
              result.currencyDisplay = 'code';
              result.unitDisplay = 'short';
              continue;
            case 'unit-width-full-name':
              result.currencyDisplay = 'name';
              result.unitDisplay = 'long';
              continue;
            case 'unit-width-iso-code':
              result.currencyDisplay = 'symbol';
              continue;
            case 'scale':
              result.scale = parseFloat(token.options[0]);
              continue;
            case 'rounding-mode-floor':
              result.roundingMode = 'floor';
              continue;
            case 'rounding-mode-ceiling':
              result.roundingMode = 'ceil';
              continue;
            case 'rounding-mode-down':
              result.roundingMode = 'trunc';
              continue;
            case 'rounding-mode-up':
              result.roundingMode = 'expand';
              continue;
            case 'rounding-mode-half-even':
              result.roundingMode = 'halfEven';
              continue;
            case 'rounding-mode-half-down':
              result.roundingMode = 'halfTrunc';
              continue;
            case 'rounding-mode-half-up':
              result.roundingMode = 'halfExpand';
              continue;
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
            case 'integer-width':
              if (token.options.length > 1) {
                throw new RangeError(
                  'integer-width stems only accept a single optional option'
                );
              }
              token.options[0].replace(
                INTEGER_WIDTH_REGEX,
                function (_, g1, g2, g3, g4, g5) {
                  if (g1) {
                    result.minimumIntegerDigits = g2.length;
                  } else if (g3 && g4) {
                    throw new Error(
                      'We currently do not support maximum integer digits'
                    );
                  } else if (g5) {
                    throw new Error(
                      'We currently do not support exact integer digits'
                    );
                  }
                  return '';
                }
              );
              continue;
          }
          // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
          if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
            result.minimumIntegerDigits = token.stem.length;
            continue;
          }
          if (FRACTION_PRECISION_REGEX.test(token.stem)) {
            // Precision
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
            // precision-integer case
            if (token.options.length > 1) {
              throw new RangeError(
                'Fraction-precision stems only accept a single optional option'
              );
            }
            token.stem.replace(
              FRACTION_PRECISION_REGEX,
              function (_, g1, g2, g3, g4, g5) {
                // .000* case (before ICU67 it was .000+)
                if (g2 === '*') {
                  result.minimumFractionDigits = g1.length;
                } else if (g3 && g3[0] === '#') {
                  result.maximumFractionDigits = g3.length;
                } else if (g4 && g5) {
                  result.minimumFractionDigits = g4.length;
                  result.maximumFractionDigits = g4.length + g5.length;
                } else {
                  result.minimumFractionDigits = g1.length;
                  result.maximumFractionDigits = g1.length;
                }
                return '';
              }
            );
            var opt = token.options[0];
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display
            if (opt === 'w') {
              result = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__assign'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])({}, result),
                {
                  trailingZeroDisplay: 'stripIfInteger',
                }
              );
            } else if (opt) {
              result = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__assign'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])({}, result),
                parseSignificantPrecision(opt)
              );
            }
            continue;
          }
          // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision
          if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
            result = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              '__assign'
            ])(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__assign'
              ])({}, result),
              parseSignificantPrecision(token.stem)
            );
            continue;
          }
          var signOpts = parseSign(token.stem);
          if (signOpts) {
            result = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              '__assign'
            ])(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__assign'
              ])({}, result),
              signOpts
            );
          }
          var conciseScientificAndEngineeringOpts =
            parseConciseScientificAndEngineeringStem(token.stem);
          if (conciseScientificAndEngineeringOpts) {
            result = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              '__assign'
            ])(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__assign'
              ])({}, result),
              conciseScientificAndEngineeringOpts
            );
          }
        }
        return result;
      }
    },
  '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/index.js [app-rsc] (ecmascript) <locals>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({});
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$date$2d$time$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$number$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/number.js [app-rsc] (ecmascript)'
        );
    },
  '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/index.js [app-rsc] (ecmascript) <module evaluation>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({});
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$date$2d$time$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$number$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/number.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/index.js [app-rsc] (ecmascript) <locals>'
        );
    },
  '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      // @generated from time-data-gen.ts
      // prettier-ignore
      __turbopack_context__.s({
    "timeData": ()=>timeData
});
      var timeData = {
        '001': ['H', 'h'],
        419: ['h', 'H', 'hB', 'hb'],
        AC: ['H', 'h', 'hb', 'hB'],
        AD: ['H', 'hB'],
        AE: ['h', 'hB', 'hb', 'H'],
        AF: ['H', 'hb', 'hB', 'h'],
        AG: ['h', 'hb', 'H', 'hB'],
        AI: ['H', 'h', 'hb', 'hB'],
        AL: ['h', 'H', 'hB'],
        AM: ['H', 'hB'],
        AO: ['H', 'hB'],
        AR: ['h', 'H', 'hB', 'hb'],
        AS: ['h', 'H'],
        AT: ['H', 'hB'],
        AU: ['h', 'hb', 'H', 'hB'],
        AW: ['H', 'hB'],
        AX: ['H'],
        AZ: ['H', 'hB', 'h'],
        BA: ['H', 'hB', 'h'],
        BB: ['h', 'hb', 'H', 'hB'],
        BD: ['h', 'hB', 'H'],
        BE: ['H', 'hB'],
        BF: ['H', 'hB'],
        BG: ['H', 'hB', 'h'],
        BH: ['h', 'hB', 'hb', 'H'],
        BI: ['H', 'h'],
        BJ: ['H', 'hB'],
        BL: ['H', 'hB'],
        BM: ['h', 'hb', 'H', 'hB'],
        BN: ['hb', 'hB', 'h', 'H'],
        BO: ['h', 'H', 'hB', 'hb'],
        BQ: ['H'],
        BR: ['H', 'hB'],
        BS: ['h', 'hb', 'H', 'hB'],
        BT: ['h', 'H'],
        BW: ['H', 'h', 'hb', 'hB'],
        BY: ['H', 'h'],
        BZ: ['H', 'h', 'hb', 'hB'],
        CA: ['h', 'hb', 'H', 'hB'],
        CC: ['H', 'h', 'hb', 'hB'],
        CD: ['hB', 'H'],
        CF: ['H', 'h', 'hB'],
        CG: ['H', 'hB'],
        CH: ['H', 'hB', 'h'],
        CI: ['H', 'hB'],
        CK: ['H', 'h', 'hb', 'hB'],
        CL: ['h', 'H', 'hB', 'hb'],
        CM: ['H', 'h', 'hB'],
        CN: ['H', 'hB', 'hb', 'h'],
        CO: ['h', 'H', 'hB', 'hb'],
        CP: ['H'],
        CR: ['h', 'H', 'hB', 'hb'],
        CU: ['h', 'H', 'hB', 'hb'],
        CV: ['H', 'hB'],
        CW: ['H', 'hB'],
        CX: ['H', 'h', 'hb', 'hB'],
        CY: ['h', 'H', 'hb', 'hB'],
        CZ: ['H'],
        DE: ['H', 'hB'],
        DG: ['H', 'h', 'hb', 'hB'],
        DJ: ['h', 'H'],
        DK: ['H'],
        DM: ['h', 'hb', 'H', 'hB'],
        DO: ['h', 'H', 'hB', 'hb'],
        DZ: ['h', 'hB', 'hb', 'H'],
        EA: ['H', 'h', 'hB', 'hb'],
        EC: ['h', 'H', 'hB', 'hb'],
        EE: ['H', 'hB'],
        EG: ['h', 'hB', 'hb', 'H'],
        EH: ['h', 'hB', 'hb', 'H'],
        ER: ['h', 'H'],
        ES: ['H', 'hB', 'h', 'hb'],
        ET: ['hB', 'hb', 'h', 'H'],
        FI: ['H'],
        FJ: ['h', 'hb', 'H', 'hB'],
        FK: ['H', 'h', 'hb', 'hB'],
        FM: ['h', 'hb', 'H', 'hB'],
        FO: ['H', 'h'],
        FR: ['H', 'hB'],
        GA: ['H', 'hB'],
        GB: ['H', 'h', 'hb', 'hB'],
        GD: ['h', 'hb', 'H', 'hB'],
        GE: ['H', 'hB', 'h'],
        GF: ['H', 'hB'],
        GG: ['H', 'h', 'hb', 'hB'],
        GH: ['h', 'H'],
        GI: ['H', 'h', 'hb', 'hB'],
        GL: ['H', 'h'],
        GM: ['h', 'hb', 'H', 'hB'],
        GN: ['H', 'hB'],
        GP: ['H', 'hB'],
        GQ: ['H', 'hB', 'h', 'hb'],
        GR: ['h', 'H', 'hb', 'hB'],
        GT: ['h', 'H', 'hB', 'hb'],
        GU: ['h', 'hb', 'H', 'hB'],
        GW: ['H', 'hB'],
        GY: ['h', 'hb', 'H', 'hB'],
        HK: ['h', 'hB', 'hb', 'H'],
        HN: ['h', 'H', 'hB', 'hb'],
        HR: ['H', 'hB'],
        HU: ['H', 'h'],
        IC: ['H', 'h', 'hB', 'hb'],
        ID: ['H'],
        IE: ['H', 'h', 'hb', 'hB'],
        IL: ['H', 'hB'],
        IM: ['H', 'h', 'hb', 'hB'],
        IN: ['h', 'H'],
        IO: ['H', 'h', 'hb', 'hB'],
        IQ: ['h', 'hB', 'hb', 'H'],
        IR: ['hB', 'H'],
        IS: ['H'],
        IT: ['H', 'hB'],
        JE: ['H', 'h', 'hb', 'hB'],
        JM: ['h', 'hb', 'H', 'hB'],
        JO: ['h', 'hB', 'hb', 'H'],
        JP: ['H', 'K', 'h'],
        KE: ['hB', 'hb', 'H', 'h'],
        KG: ['H', 'h', 'hB', 'hb'],
        KH: ['hB', 'h', 'H', 'hb'],
        KI: ['h', 'hb', 'H', 'hB'],
        KM: ['H', 'h', 'hB', 'hb'],
        KN: ['h', 'hb', 'H', 'hB'],
        KP: ['h', 'H', 'hB', 'hb'],
        KR: ['h', 'H', 'hB', 'hb'],
        KW: ['h', 'hB', 'hb', 'H'],
        KY: ['h', 'hb', 'H', 'hB'],
        KZ: ['H', 'hB'],
        LA: ['H', 'hb', 'hB', 'h'],
        LB: ['h', 'hB', 'hb', 'H'],
        LC: ['h', 'hb', 'H', 'hB'],
        LI: ['H', 'hB', 'h'],
        LK: ['H', 'h', 'hB', 'hb'],
        LR: ['h', 'hb', 'H', 'hB'],
        LS: ['h', 'H'],
        LT: ['H', 'h', 'hb', 'hB'],
        LU: ['H', 'h', 'hB'],
        LV: ['H', 'hB', 'hb', 'h'],
        LY: ['h', 'hB', 'hb', 'H'],
        MA: ['H', 'h', 'hB', 'hb'],
        MC: ['H', 'hB'],
        MD: ['H', 'hB'],
        ME: ['H', 'hB', 'h'],
        MF: ['H', 'hB'],
        MG: ['H', 'h'],
        MH: ['h', 'hb', 'H', 'hB'],
        MK: ['H', 'h', 'hb', 'hB'],
        ML: ['H'],
        MM: ['hB', 'hb', 'H', 'h'],
        MN: ['H', 'h', 'hb', 'hB'],
        MO: ['h', 'hB', 'hb', 'H'],
        MP: ['h', 'hb', 'H', 'hB'],
        MQ: ['H', 'hB'],
        MR: ['h', 'hB', 'hb', 'H'],
        MS: ['H', 'h', 'hb', 'hB'],
        MT: ['H', 'h'],
        MU: ['H', 'h'],
        MV: ['H', 'h'],
        MW: ['h', 'hb', 'H', 'hB'],
        MX: ['h', 'H', 'hB', 'hb'],
        MY: ['hb', 'hB', 'h', 'H'],
        MZ: ['H', 'hB'],
        NA: ['h', 'H', 'hB', 'hb'],
        NC: ['H', 'hB'],
        NE: ['H'],
        NF: ['H', 'h', 'hb', 'hB'],
        NG: ['H', 'h', 'hb', 'hB'],
        NI: ['h', 'H', 'hB', 'hb'],
        NL: ['H', 'hB'],
        NO: ['H', 'h'],
        NP: ['H', 'h', 'hB'],
        NR: ['H', 'h', 'hb', 'hB'],
        NU: ['H', 'h', 'hb', 'hB'],
        NZ: ['h', 'hb', 'H', 'hB'],
        OM: ['h', 'hB', 'hb', 'H'],
        PA: ['h', 'H', 'hB', 'hb'],
        PE: ['h', 'H', 'hB', 'hb'],
        PF: ['H', 'h', 'hB'],
        PG: ['h', 'H'],
        PH: ['h', 'hB', 'hb', 'H'],
        PK: ['h', 'hB', 'H'],
        PL: ['H', 'h'],
        PM: ['H', 'hB'],
        PN: ['H', 'h', 'hb', 'hB'],
        PR: ['h', 'H', 'hB', 'hb'],
        PS: ['h', 'hB', 'hb', 'H'],
        PT: ['H', 'hB'],
        PW: ['h', 'H'],
        PY: ['h', 'H', 'hB', 'hb'],
        QA: ['h', 'hB', 'hb', 'H'],
        RE: ['H', 'hB'],
        RO: ['H', 'hB'],
        RS: ['H', 'hB', 'h'],
        RU: ['H'],
        RW: ['H', 'h'],
        SA: ['h', 'hB', 'hb', 'H'],
        SB: ['h', 'hb', 'H', 'hB'],
        SC: ['H', 'h', 'hB'],
        SD: ['h', 'hB', 'hb', 'H'],
        SE: ['H'],
        SG: ['h', 'hb', 'H', 'hB'],
        SH: ['H', 'h', 'hb', 'hB'],
        SI: ['H', 'hB'],
        SJ: ['H'],
        SK: ['H'],
        SL: ['h', 'hb', 'H', 'hB'],
        SM: ['H', 'h', 'hB'],
        SN: ['H', 'h', 'hB'],
        SO: ['h', 'H'],
        SR: ['H', 'hB'],
        SS: ['h', 'hb', 'H', 'hB'],
        ST: ['H', 'hB'],
        SV: ['h', 'H', 'hB', 'hb'],
        SX: ['H', 'h', 'hb', 'hB'],
        SY: ['h', 'hB', 'hb', 'H'],
        SZ: ['h', 'hb', 'H', 'hB'],
        TA: ['H', 'h', 'hb', 'hB'],
        TC: ['h', 'hb', 'H', 'hB'],
        TD: ['h', 'H', 'hB'],
        TF: ['H', 'h', 'hB'],
        TG: ['H', 'hB'],
        TH: ['H', 'h'],
        TJ: ['H', 'h'],
        TL: ['H', 'hB', 'hb', 'h'],
        TM: ['H', 'h'],
        TN: ['h', 'hB', 'hb', 'H'],
        TO: ['h', 'H'],
        TR: ['H', 'hB'],
        TT: ['h', 'hb', 'H', 'hB'],
        TW: ['hB', 'hb', 'h', 'H'],
        TZ: ['hB', 'hb', 'H', 'h'],
        UA: ['H', 'hB', 'h'],
        UG: ['hB', 'hb', 'H', 'h'],
        UM: ['h', 'hb', 'H', 'hB'],
        US: ['h', 'hb', 'H', 'hB'],
        UY: ['h', 'H', 'hB', 'hb'],
        UZ: ['H', 'hB', 'h'],
        VA: ['H', 'h', 'hB'],
        VC: ['h', 'hb', 'H', 'hB'],
        VE: ['h', 'H', 'hB', 'hb'],
        VG: ['h', 'hb', 'H', 'hB'],
        VI: ['h', 'hb', 'H', 'hB'],
        VN: ['H', 'h'],
        VU: ['h', 'H'],
        WF: ['H', 'hB'],
        WS: ['h', 'H'],
        XK: ['H', 'hB', 'h'],
        YE: ['h', 'hB', 'hb', 'H'],
        YT: ['H', 'hB'],
        ZA: ['H', 'h', 'hb', 'hB'],
        ZM: ['h', 'hb', 'H', 'hB'],
        ZW: ['H', 'h'],
        'af-ZA': ['H', 'h', 'hB', 'hb'],
        'ar-001': ['h', 'hB', 'hb', 'H'],
        'ca-ES': ['H', 'h', 'hB'],
        'en-001': ['h', 'hb', 'H', 'hB'],
        'en-HK': ['h', 'hb', 'H', 'hB'],
        'en-IL': ['H', 'h', 'hb', 'hB'],
        'en-MY': ['h', 'hb', 'H', 'hB'],
        'es-BR': ['H', 'h', 'hB', 'hb'],
        'es-ES': ['H', 'h', 'hB', 'hb'],
        'es-GQ': ['H', 'h', 'hB', 'hb'],
        'fr-CA': ['H', 'h', 'hB'],
        'gl-ES': ['H', 'h', 'hB'],
        'gu-IN': ['hB', 'hb', 'h', 'H'],
        'hi-IN': ['hB', 'h', 'H'],
        'it-CH': ['H', 'h', 'hB'],
        'it-IT': ['H', 'h', 'hB'],
        'kn-IN': ['hB', 'h', 'H'],
        'ml-IN': ['hB', 'h', 'H'],
        'mr-IN': ['hB', 'hb', 'h', 'H'],
        'pa-IN': ['hB', 'hb', 'h', 'H'],
        'ta-IN': ['hB', 'h', 'hb', 'H'],
        'te-IN': ['hB', 'h', 'H'],
        'zu-ZA': ['H', 'hB', 'hb', 'h'],
      };
    },
  '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        getBestPattern: () => getBestPattern,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$time$2d$data$2e$generated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js [app-rsc] (ecmascript)'
        );
      function getBestPattern(skeleton, locale) {
        var skeletonCopy = '';
        for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
          var patternChar = skeleton.charAt(patternPos);
          if (patternChar === 'j') {
            var extraLength = 0;
            while (
              patternPos + 1 < skeleton.length &&
              skeleton.charAt(patternPos + 1) === patternChar
            ) {
              extraLength++;
              patternPos++;
            }
            var hourLen = 1 + (extraLength & 1);
            var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
            var dayPeriodChar = 'a';
            var hourChar = getDefaultHourSymbolFromLocale(locale);
            if (hourChar == 'H' || hourChar == 'k') {
              dayPeriodLen = 0;
            }
            while (dayPeriodLen-- > 0) {
              skeletonCopy += dayPeriodChar;
            }
            while (hourLen-- > 0) {
              skeletonCopy = hourChar + skeletonCopy;
            }
          } else if (patternChar === 'J') {
            skeletonCopy += 'H';
          } else {
            skeletonCopy += patternChar;
          }
        }
        return skeletonCopy;
      }
      /**
       * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)
       * of the given `locale` to the corresponding time pattern.
       * @param locale
       */ function getDefaultHourSymbolFromLocale(locale) {
        var hourCycle = locale.hourCycle;
        if (
          hourCycle === undefined && // @ts-ignore hourCycle(s) is not identified yet
          locale.hourCycles && // @ts-ignore
          locale.hourCycles.length
        ) {
          // @ts-ignore
          hourCycle = locale.hourCycles[0];
        }
        if (hourCycle) {
          switch (hourCycle) {
            case 'h24':
              return 'k';
            case 'h23':
              return 'H';
            case 'h12':
              return 'h';
            case 'h11':
              return 'K';
            default:
              throw new Error('Invalid hourCycle');
          }
        }
        // TODO: Once hourCycle is fully supported remove the following with data generation
        var languageTag = locale.language;
        var regionTag;
        if (languageTag !== 'root') {
          regionTag = locale.maximize().region;
        }
        var hourCycles =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$time$2d$data$2e$generated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'timeData'
          ][regionTag || ''] ||
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$time$2d$data$2e$generated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'timeData'
          ][languageTag || ''] ||
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$time$2d$data$2e$generated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'timeData'
          ][''.concat(languageTag, '-001')] ||
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$time$2d$data$2e$generated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'timeData'
          ]['001'];
        return hourCycles[0];
      }
    },
  '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        Parser: () => Parser,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/tslib/tslib.es6.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/error.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$regex$2e$generated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/index.js [app-rsc] (ecmascript) <module evaluation>'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$number$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/number.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$date$2d$time$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$date$2d$time$2d$pattern$2d$generator$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js [app-rsc] (ecmascript)'
        );
      var _a;
      var SPACE_SEPARATOR_START_REGEX = new RegExp(
        '^'.concat(
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$regex$2e$generated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'SPACE_SEPARATOR_REGEX'
          ].source,
          '*'
        )
      );
      var SPACE_SEPARATOR_END_REGEX = new RegExp(
        ''.concat(
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$regex$2e$generated$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'SPACE_SEPARATOR_REGEX'
          ].source,
          '*$'
        )
      );
      function createLocation(start, end) {
        return {
          start: start,
          end: end,
        };
      }
      // #region Ponyfills
      // Consolidate these variables up top for easier toggling during debugging
      var hasNativeStartsWith =
        !!String.prototype.startsWith && '_a'.startsWith('a', 1);
      var hasNativeFromCodePoint = !!String.fromCodePoint;
      var hasNativeFromEntries = !!Object.fromEntries;
      var hasNativeCodePointAt = !!String.prototype.codePointAt;
      var hasTrimStart = !!String.prototype.trimStart;
      var hasTrimEnd = !!String.prototype.trimEnd;
      var hasNativeIsSafeInteger = !!Number.isSafeInteger;
      var isSafeInteger = hasNativeIsSafeInteger
        ? Number.isSafeInteger
        : function (n) {
            return (
              typeof n === 'number' &&
              isFinite(n) &&
              Math.floor(n) === n &&
              Math.abs(n) <= 0x1fffffffffffff
            );
          };
      // IE11 does not support y and u.
      var REGEX_SUPPORTS_U_AND_Y = true;
      try {
        var re = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
        /**
         * legacy Edge or Xbox One browser
         * Unicode flag support: supported
         * Pattern_Syntax support: not supported
         * See https://github.com/formatjs/formatjs/issues/2822
         */ REGEX_SUPPORTS_U_AND_Y =
          ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) ===
          'a';
      } catch (_) {
        REGEX_SUPPORTS_U_AND_Y = false;
      }
      var startsWith = hasNativeStartsWith
        ? function startsWith(s, search, position) {
            return s.startsWith(search, position);
          }
        : function startsWith(s, search, position) {
            return s.slice(position, position + search.length) === search;
          };
      var fromCodePoint = hasNativeFromCodePoint
        ? String.fromCodePoint
        : function fromCodePoint() {
            var codePoints = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              codePoints[_i] = arguments[_i];
            }
            var elements = '';
            var length = codePoints.length;
            var i = 0;
            var code;
            while (length > i) {
              code = codePoints[i++];
              if (code > 0x10ffff)
                throw RangeError(code + ' is not a valid code point');
              elements +=
                code < 0x10000
                  ? String.fromCharCode(code)
                  : String.fromCharCode(
                      ((code -= 0x10000) >> 10) + 0xd800,
                      (code % 0x400) + 0xdc00
                    );
            }
            return elements;
          };
      var fromEntries = // native
        hasNativeFromEntries
          ? Object.fromEntries
          : function fromEntries(entries) {
              var obj = {};
              for (
                var _i = 0, entries_1 = entries;
                _i < entries_1.length;
                _i++
              ) {
                var _a = entries_1[_i],
                  k = _a[0],
                  v = _a[1];
                obj[k] = v;
              }
              return obj;
            };
      var codePointAt = hasNativeCodePointAt
        ? function codePointAt(s, index) {
            return s.codePointAt(index);
          }
        : function codePointAt(s, index) {
            var size = s.length;
            if (index < 0 || index >= size) {
              return undefined;
            }
            var first = s.charCodeAt(index);
            var second;
            return first < 0xd800 ||
              first > 0xdbff ||
              index + 1 === size ||
              (second = s.charCodeAt(index + 1)) < 0xdc00 ||
              second > 0xdfff
              ? first
              : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
          };
      var trimStart = hasTrimStart
        ? function trimStart(s) {
            return s.trimStart();
          }
        : function trimStart(s) {
            return s.replace(SPACE_SEPARATOR_START_REGEX, '');
          };
      var trimEnd = hasTrimEnd
        ? function trimEnd(s) {
            return s.trimEnd();
          }
        : function trimEnd(s) {
            return s.replace(SPACE_SEPARATOR_END_REGEX, '');
          };
      // Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.
      function RE(s, flag) {
        return new RegExp(s, flag);
      }
      // #endregion
      var matchIdentifierAtIndex;
      if (REGEX_SUPPORTS_U_AND_Y) {
        // Native
        var IDENTIFIER_PREFIX_RE_1 = RE(
          '([^\\p{White_Space}\\p{Pattern_Syntax}]*)',
          'yu'
        );
        matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
          var _a;
          IDENTIFIER_PREFIX_RE_1.lastIndex = index;
          var match = IDENTIFIER_PREFIX_RE_1.exec(s);
          return (_a = match[1]) !== null && _a !== void 0 ? _a : '';
        };
      } else {
        // IE11
        matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
          var match = [];
          while (true) {
            var c = codePointAt(s, index);
            if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {
              break;
            }
            match.push(c);
            index += c >= 0x10000 ? 2 : 1;
          }
          return fromCodePoint.apply(void 0, match);
        };
      }
      var Parser = (function () {
        function Parser(message, options) {
          if (options === void 0) {
            options = {};
          }
          this.message = message;
          this.position = {
            offset: 0,
            line: 1,
            column: 1,
          };
          this.ignoreTag = !!options.ignoreTag;
          this.locale = options.locale;
          this.requiresOtherClause = !!options.requiresOtherClause;
          this.shouldParseSkeletons = !!options.shouldParseSkeletons;
        }
        Parser.prototype.parse = function () {
          if (this.offset() !== 0) {
            throw Error('parser can only be used once');
          }
          return this.parseMessage(0, '', false);
        };
        Parser.prototype.parseMessage = function (
          nestingLevel,
          parentArgType,
          expectingCloseTag
        ) {
          var elements = [];
          while (!this.isEOF()) {
            var char = this.char();
            if (char === 123 /* `{` */) {
              var result = this.parseArgument(nestingLevel, expectingCloseTag);
              if (result.err) {
                return result;
              }
              elements.push(result.val);
            } else if (char === 125 /* `}` */ && nestingLevel > 0) {
              break;
            } else if (
              char === 35 /* `#` */ &&
              (parentArgType === 'plural' || parentArgType === 'selectordinal')
            ) {
              var position = this.clonePosition();
              this.bump();
              elements.push({
                type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'TYPE'
                ].pound,
                location: createLocation(position, this.clonePosition()),
              });
            } else if (
              char === 60 /* `<` */ &&
              !this.ignoreTag &&
              this.peek() === 47 // char code for '/'
            ) {
              if (expectingCloseTag) {
                break;
              } else {
                return this.error(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].UNMATCHED_CLOSING_TAG,
                  createLocation(this.clonePosition(), this.clonePosition())
                );
              }
            } else if (
              char === 60 /* `<` */ &&
              !this.ignoreTag &&
              _isAlpha(this.peek() || 0)
            ) {
              var result = this.parseTag(nestingLevel, parentArgType);
              if (result.err) {
                return result;
              }
              elements.push(result.val);
            } else {
              var result = this.parseLiteral(nestingLevel, parentArgType);
              if (result.err) {
                return result;
              }
              elements.push(result.val);
            }
          }
          return {
            val: elements,
            err: null,
          };
        };
        /**
         * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the
         * [custom element name][] except that a dash is NOT always mandatory and uppercase letters
         * are accepted:
         *
         * ```
         * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"
         * tagName ::= [a-z] (PENChar)*
         * PENChar ::=
         *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
         *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |
         *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
         * ```
         *
         * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
         * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do
         * since other tag-based engines like React allow it
         */ Parser.prototype.parseTag = function (nestingLevel, parentArgType) {
          var startPosition = this.clonePosition();
          this.bump(); // `<`
          var tagName = this.parseTagName();
          this.bumpSpace();
          if (this.bumpIf('/>')) {
            // Self closing tag
            return {
              val: {
                type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'TYPE'
                ].literal,
                value: '<'.concat(tagName, '/>'),
                location: createLocation(startPosition, this.clonePosition()),
              },
              err: null,
            };
          } else if (this.bumpIf('>')) {
            var childrenResult = this.parseMessage(
              nestingLevel + 1,
              parentArgType,
              true
            );
            if (childrenResult.err) {
              return childrenResult;
            }
            var children = childrenResult.val;
            // Expecting a close tag
            var endTagStartPosition = this.clonePosition();
            if (this.bumpIf('</')) {
              if (this.isEOF() || !_isAlpha(this.char())) {
                return this.error(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].INVALID_TAG,
                  createLocation(endTagStartPosition, this.clonePosition())
                );
              }
              var closingTagNameStartPosition = this.clonePosition();
              var closingTagName = this.parseTagName();
              if (tagName !== closingTagName) {
                return this.error(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].UNMATCHED_CLOSING_TAG,
                  createLocation(
                    closingTagNameStartPosition,
                    this.clonePosition()
                  )
                );
              }
              this.bumpSpace();
              if (!this.bumpIf('>')) {
                return this.error(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].INVALID_TAG,
                  createLocation(endTagStartPosition, this.clonePosition())
                );
              }
              return {
                val: {
                  type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'TYPE'
                  ].tag,
                  value: tagName,
                  children: children,
                  location: createLocation(startPosition, this.clonePosition()),
                },
                err: null,
              };
            } else {
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].UNCLOSED_TAG,
                createLocation(startPosition, this.clonePosition())
              );
            }
          } else {
            return this.error(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'ErrorKind'
              ].INVALID_TAG,
              createLocation(startPosition, this.clonePosition())
            );
          }
        };
        /**
         * This method assumes that the caller has peeked ahead for the first tag character.
         */ Parser.prototype.parseTagName = function () {
          var startOffset = this.offset();
          this.bump(); // the first tag name character
          while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
            this.bump();
          }
          return this.message.slice(startOffset, this.offset());
        };
        Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {
          var start = this.clonePosition();
          var value = '';
          while (true) {
            var parseQuoteResult = this.tryParseQuote(parentArgType);
            if (parseQuoteResult) {
              value += parseQuoteResult;
              continue;
            }
            var parseUnquotedResult = this.tryParseUnquoted(
              nestingLevel,
              parentArgType
            );
            if (parseUnquotedResult) {
              value += parseUnquotedResult;
              continue;
            }
            var parseLeftAngleResult = this.tryParseLeftAngleBracket();
            if (parseLeftAngleResult) {
              value += parseLeftAngleResult;
              continue;
            }
            break;
          }
          var location = createLocation(start, this.clonePosition());
          return {
            val: {
              type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'TYPE'
              ].literal,
              value: value,
              location: location,
            },
            err: null,
          };
        };
        Parser.prototype.tryParseLeftAngleBracket = function () {
          if (
            !this.isEOF() &&
            this.char() === 60 /* `<` */ &&
            (this.ignoreTag || // If at the opening tag or closing tag position, bail.
              !_isAlphaOrSlash(this.peek() || 0))
          ) {
            this.bump(); // `<`
            return '<';
          }
          return null;
        };
        /**
         * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes
         * a character that requires quoting (that is, "only where needed"), and works the same in
         * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.
         */ Parser.prototype.tryParseQuote = function (parentArgType) {
          if (this.isEOF() || this.char() !== 39 /* `'` */) {
            return null;
          }
          // Parse escaped char following the apostrophe, or early return if there is no escaped char.
          // Check if is valid escaped character
          switch (this.peek()) {
            case 39 /* `'` */:
              // double quote, should return as a single quote.
              this.bump();
              this.bump();
              return "'";
            // '{', '<', '>', '}'
            case 123:
            case 60:
            case 62:
            case 125:
              break;
            case 35:
              if (
                parentArgType === 'plural' ||
                parentArgType === 'selectordinal'
              ) {
                break;
              }
              return null;
            default:
              return null;
          }
          this.bump(); // apostrophe
          var codePoints = [this.char()]; // escaped char
          this.bump();
          // read chars until the optional closing apostrophe is found
          while (!this.isEOF()) {
            var ch = this.char();
            if (ch === 39 /* `'` */) {
              if (this.peek() === 39 /* `'` */) {
                codePoints.push(39);
                // Bump one more time because we need to skip 2 characters.
                this.bump();
              } else {
                // Optional closing apostrophe.
                this.bump();
                break;
              }
            } else {
              codePoints.push(ch);
            }
            this.bump();
          }
          return fromCodePoint.apply(void 0, codePoints);
        };
        Parser.prototype.tryParseUnquoted = function (
          nestingLevel,
          parentArgType
        ) {
          if (this.isEOF()) {
            return null;
          }
          var ch = this.char();
          if (
            ch === 60 /* `<` */ ||
            ch === 123 /* `{` */ ||
            (ch === 35 /* `#` */ &&
              (parentArgType === 'plural' ||
                parentArgType === 'selectordinal')) ||
            (ch === 125 /* `}` */ && nestingLevel > 0)
          ) {
            return null;
          } else {
            this.bump();
            return fromCodePoint(ch);
          }
        };
        Parser.prototype.parseArgument = function (
          nestingLevel,
          expectingCloseTag
        ) {
          var openingBracePosition = this.clonePosition();
          this.bump(); // `{`
          this.bumpSpace();
          if (this.isEOF()) {
            return this.error(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'ErrorKind'
              ].EXPECT_ARGUMENT_CLOSING_BRACE,
              createLocation(openingBracePosition, this.clonePosition())
            );
          }
          if (this.char() === 125 /* `}` */) {
            this.bump();
            return this.error(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'ErrorKind'
              ].EMPTY_ARGUMENT,
              createLocation(openingBracePosition, this.clonePosition())
            );
          }
          // argument name
          var value = this.parseIdentifierIfPossible().value;
          if (!value) {
            return this.error(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'ErrorKind'
              ].MALFORMED_ARGUMENT,
              createLocation(openingBracePosition, this.clonePosition())
            );
          }
          this.bumpSpace();
          if (this.isEOF()) {
            return this.error(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'ErrorKind'
              ].EXPECT_ARGUMENT_CLOSING_BRACE,
              createLocation(openingBracePosition, this.clonePosition())
            );
          }
          switch (this.char()) {
            // Simple argument: `{name}`
            case 125 /* `}` */: {
              this.bump(); // `}`
              return {
                val: {
                  type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'TYPE'
                  ].argument,
                  // value does not include the opening and closing braces.
                  value: value,
                  location: createLocation(
                    openingBracePosition,
                    this.clonePosition()
                  ),
                },
                err: null,
              };
            }
            // Argument with options: `{name, format, ...}`
            case 44 /* `,` */: {
              this.bump(); // `,`
              this.bumpSpace();
              if (this.isEOF()) {
                return this.error(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].EXPECT_ARGUMENT_CLOSING_BRACE,
                  createLocation(openingBracePosition, this.clonePosition())
                );
              }
              return this.parseArgumentOptions(
                nestingLevel,
                expectingCloseTag,
                value,
                openingBracePosition
              );
            }
            default:
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].MALFORMED_ARGUMENT,
                createLocation(openingBracePosition, this.clonePosition())
              );
          }
        };
        /**
         * Advance the parser until the end of the identifier, if it is currently on
         * an identifier character. Return an empty string otherwise.
         */ Parser.prototype.parseIdentifierIfPossible = function () {
          var startingPosition = this.clonePosition();
          var startOffset = this.offset();
          var value = matchIdentifierAtIndex(this.message, startOffset);
          var endOffset = startOffset + value.length;
          this.bumpTo(endOffset);
          var endPosition = this.clonePosition();
          var location = createLocation(startingPosition, endPosition);
          return {
            value: value,
            location: location,
          };
        };
        Parser.prototype.parseArgumentOptions = function (
          nestingLevel,
          expectingCloseTag,
          value,
          openingBracePosition
        ) {
          var _a;
          // Parse this range:
          // {name, type, style}
          //        ^---^
          var typeStartPosition = this.clonePosition();
          var argType = this.parseIdentifierIfPossible().value;
          var typeEndPosition = this.clonePosition();
          switch (argType) {
            case '':
              // Expecting a style string number, date, time, plural, selectordinal, or select.
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].EXPECT_ARGUMENT_TYPE,
                createLocation(typeStartPosition, typeEndPosition)
              );
            case 'number':
            case 'date':
            case 'time': {
              // Parse this range:
              // {name, number, style}
              //              ^-------^
              this.bumpSpace();
              var styleAndLocation = null;
              if (this.bumpIf(',')) {
                this.bumpSpace();
                var styleStartPosition = this.clonePosition();
                var result = this.parseSimpleArgStyleIfPossible();
                if (result.err) {
                  return result;
                }
                var style = trimEnd(result.val);
                if (style.length === 0) {
                  return this.error(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].EXPECT_ARGUMENT_STYLE,
                    createLocation(this.clonePosition(), this.clonePosition())
                  );
                }
                var styleLocation = createLocation(
                  styleStartPosition,
                  this.clonePosition()
                );
                styleAndLocation = {
                  style: style,
                  styleLocation: styleLocation,
                };
              }
              var argCloseResult =
                this.tryParseArgumentClose(openingBracePosition);
              if (argCloseResult.err) {
                return argCloseResult;
              }
              var location_1 = createLocation(
                openingBracePosition,
                this.clonePosition()
              );
              // Extract style or skeleton
              if (
                styleAndLocation &&
                startsWith(
                  styleAndLocation === null || styleAndLocation === void 0
                    ? void 0
                    : styleAndLocation.style,
                  '::',
                  0
                )
              ) {
                // Skeleton starts with `::`.
                var skeleton = trimStart(styleAndLocation.style.slice(2));
                if (argType === 'number') {
                  var result = this.parseNumberSkeletonFromString(
                    skeleton,
                    styleAndLocation.styleLocation
                  );
                  if (result.err) {
                    return result;
                  }
                  return {
                    val: {
                      type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                        'TYPE'
                      ].number,
                      value: value,
                      location: location_1,
                      style: result.val,
                    },
                    err: null,
                  };
                } else {
                  if (skeleton.length === 0) {
                    return this.error(
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                        'ErrorKind'
                      ].EXPECT_DATE_TIME_SKELETON,
                      location_1
                    );
                  }
                  var dateTimePattern = skeleton;
                  // Get "best match" pattern only if locale is passed, if not, let it
                  // pass as-is where `parseDateTimeSkeleton()` will throw an error
                  // for unsupported patterns.
                  if (this.locale) {
                    dateTimePattern = (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$date$2d$time$2d$pattern$2d$generator$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'getBestPattern'
                    ])(skeleton, this.locale);
                  }
                  var style = {
                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'SKELETON_TYPE'
                    ].dateTime,
                    pattern: dateTimePattern,
                    location: styleAndLocation.styleLocation,
                    parsedOptions: this.shouldParseSkeletons
                      ? (0,
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$date$2d$time$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                          'parseDateTimeSkeleton'
                        ])(dateTimePattern)
                      : {},
                  };
                  var type =
                    argType === 'date'
                      ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                          'TYPE'
                        ].date
                      : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                          'TYPE'
                        ].time;
                  return {
                    val: {
                      type: type,
                      value: value,
                      location: location_1,
                      style: style,
                    },
                    err: null,
                  };
                }
              }
              // Regular style or no style.
              return {
                val: {
                  type:
                    argType === 'number'
                      ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                          'TYPE'
                        ].number
                      : argType === 'date'
                        ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                            'TYPE'
                          ].date
                        : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                            'TYPE'
                          ].time,
                  value: value,
                  location: location_1,
                  style:
                    (_a =
                      styleAndLocation === null || styleAndLocation === void 0
                        ? void 0
                        : styleAndLocation.style) !== null && _a !== void 0
                      ? _a
                      : null,
                },
                err: null,
              };
            }
            case 'plural':
            case 'selectordinal':
            case 'select': {
              // Parse this range:
              // {name, plural, options}
              //              ^---------^
              var typeEndPosition_1 = this.clonePosition();
              this.bumpSpace();
              if (!this.bumpIf(',')) {
                return this.error(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].EXPECT_SELECT_ARGUMENT_OPTIONS,
                  createLocation(
                    typeEndPosition_1,
                    (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      '__assign'
                    ])({}, typeEndPosition_1)
                  )
                );
              }
              this.bumpSpace();
              // Parse offset:
              // {name, plural, offset:1, options}
              //                ^-----^
              //
              // or the first option:
              //
              // {name, plural, one {...} other {...}}
              //                ^--^
              var identifierAndLocation = this.parseIdentifierIfPossible();
              var pluralOffset = 0;
              if (
                argType !== 'select' &&
                identifierAndLocation.value === 'offset'
              ) {
                if (!this.bumpIf(':')) {
                  return this.error(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,
                    createLocation(this.clonePosition(), this.clonePosition())
                  );
                }
                this.bumpSpace();
                var result = this.tryParseDecimalInteger(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].INVALID_PLURAL_ARGUMENT_OFFSET_VALUE
                );
                if (result.err) {
                  return result;
                }
                // Parse another identifier for option parsing
                this.bumpSpace();
                identifierAndLocation = this.parseIdentifierIfPossible();
                pluralOffset = result.val;
              }
              var optionsResult = this.tryParsePluralOrSelectOptions(
                nestingLevel,
                argType,
                expectingCloseTag,
                identifierAndLocation
              );
              if (optionsResult.err) {
                return optionsResult;
              }
              var argCloseResult =
                this.tryParseArgumentClose(openingBracePosition);
              if (argCloseResult.err) {
                return argCloseResult;
              }
              var location_2 = createLocation(
                openingBracePosition,
                this.clonePosition()
              );
              if (argType === 'select') {
                return {
                  val: {
                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'TYPE'
                    ].select,
                    value: value,
                    options: fromEntries(optionsResult.val),
                    location: location_2,
                  },
                  err: null,
                };
              } else {
                return {
                  val: {
                    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'TYPE'
                    ].plural,
                    value: value,
                    options: fromEntries(optionsResult.val),
                    offset: pluralOffset,
                    pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',
                    location: location_2,
                  },
                  err: null,
                };
              }
            }
            default:
              return this.error(
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'ErrorKind'
                ].INVALID_ARGUMENT_TYPE,
                createLocation(typeStartPosition, typeEndPosition)
              );
          }
        };
        Parser.prototype.tryParseArgumentClose = function (
          openingBracePosition
        ) {
          // Parse: {value, number, ::currency/GBP }
          //
          if (this.isEOF() || this.char() !== 125 /* `}` */) {
            return this.error(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'ErrorKind'
              ].EXPECT_ARGUMENT_CLOSING_BRACE,
              createLocation(openingBracePosition, this.clonePosition())
            );
          }
          this.bump(); // `}`
          return {
            val: true,
            err: null,
          };
        };
        /**
         * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659
         */ Parser.prototype.parseSimpleArgStyleIfPossible = function () {
          var nestedBraces = 0;
          var startPosition = this.clonePosition();
          while (!this.isEOF()) {
            var ch = this.char();
            switch (ch) {
              case 39 /* `'` */: {
                // Treat apostrophe as quoting but include it in the style part.
                // Find the end of the quoted literal text.
                this.bump();
                var apostrophePosition = this.clonePosition();
                if (!this.bumpUntil("'")) {
                  return this.error(
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].UNCLOSED_QUOTE_IN_ARGUMENT_STYLE,
                    createLocation(apostrophePosition, this.clonePosition())
                  );
                }
                this.bump();
                break;
              }
              case 123 /* `{` */: {
                nestedBraces += 1;
                this.bump();
                break;
              }
              case 125 /* `}` */: {
                if (nestedBraces > 0) {
                  nestedBraces -= 1;
                } else {
                  return {
                    val: this.message.slice(
                      startPosition.offset,
                      this.offset()
                    ),
                    err: null,
                  };
                }
                break;
              }
              default:
                this.bump();
                break;
            }
          }
          return {
            val: this.message.slice(startPosition.offset, this.offset()),
            err: null,
          };
        };
        Parser.prototype.parseNumberSkeletonFromString = function (
          skeleton,
          location
        ) {
          var tokens = [];
          try {
            tokens = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$number$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'parseNumberSkeletonFromString'
            ])(skeleton);
          } catch (e) {
            return this.error(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'ErrorKind'
              ].INVALID_NUMBER_SKELETON,
              location
            );
          }
          return {
            val: {
              type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'SKELETON_TYPE'
              ].number,
              tokens: tokens,
              location: location,
              parsedOptions: this.shouldParseSkeletons
                ? (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$skeleton$2d$parser$2f$lib$2f$number$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'parseNumberSkeleton'
                  ])(tokens)
                : {},
            },
            err: null,
          };
        };
        /**
         * @param nesting_level The current nesting level of messages.
         *     This can be positive when parsing message fragment in select or plural argument options.
         * @param parent_arg_type The parent argument's type.
         * @param parsed_first_identifier If provided, this is the first identifier-like selector of
         *     the argument. It is a by-product of a previous parsing attempt.
         * @param expecting_close_tag If true, this message is directly or indirectly nested inside
         *     between a pair of opening and closing tags. The nested message will not parse beyond
         *     the closing tag boundary.
         */ Parser.prototype.tryParsePluralOrSelectOptions = function (
          nestingLevel,
          parentArgType,
          expectCloseTag,
          parsedFirstIdentifier
        ) {
          var _a;
          var hasOtherClause = false;
          var options = [];
          var parsedSelectors = new Set();
          var selector = parsedFirstIdentifier.value,
            selectorLocation = parsedFirstIdentifier.location;
          // Parse:
          // one {one apple}
          // ^--^
          while (true) {
            if (selector.length === 0) {
              var startPosition = this.clonePosition();
              if (parentArgType !== 'select' && this.bumpIf('=')) {
                // Try parse `={number}` selector
                var result = this.tryParseDecimalInteger(
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].EXPECT_PLURAL_ARGUMENT_SELECTOR,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].INVALID_PLURAL_ARGUMENT_SELECTOR
                );
                if (result.err) {
                  return result;
                }
                selectorLocation = createLocation(
                  startPosition,
                  this.clonePosition()
                );
                selector = this.message.slice(
                  startPosition.offset,
                  this.offset()
                );
              } else {
                break;
              }
            }
            // Duplicate selector clauses
            if (parsedSelectors.has(selector)) {
              return this.error(
                parentArgType === 'select'
                  ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].DUPLICATE_SELECT_ARGUMENT_SELECTOR
                  : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].DUPLICATE_PLURAL_ARGUMENT_SELECTOR,
                selectorLocation
              );
            }
            if (selector === 'other') {
              hasOtherClause = true;
            }
            // Parse:
            // one {one apple}
            //     ^----------^
            this.bumpSpace();
            var openingBracePosition = this.clonePosition();
            if (!this.bumpIf('{')) {
              return this.error(
                parentArgType === 'select'
                  ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT
                  : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'ErrorKind'
                    ].EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT,
                createLocation(this.clonePosition(), this.clonePosition())
              );
            }
            var fragmentResult = this.parseMessage(
              nestingLevel + 1,
              parentArgType,
              expectCloseTag
            );
            if (fragmentResult.err) {
              return fragmentResult;
            }
            var argCloseResult =
              this.tryParseArgumentClose(openingBracePosition);
            if (argCloseResult.err) {
              return argCloseResult;
            }
            options.push([
              selector,
              {
                value: fragmentResult.val,
                location: createLocation(
                  openingBracePosition,
                  this.clonePosition()
                ),
              },
            ]);
            // Keep track of the existing selectors
            parsedSelectors.add(selector);
            // Prep next selector clause.
            this.bumpSpace();
            (_a = this.parseIdentifierIfPossible()),
              (selector = _a.value),
              (selectorLocation = _a.location);
          }
          if (options.length === 0) {
            return this.error(
              parentArgType === 'select'
                ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].EXPECT_SELECT_ARGUMENT_SELECTOR
                : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorKind'
                  ].EXPECT_PLURAL_ARGUMENT_SELECTOR,
              createLocation(this.clonePosition(), this.clonePosition())
            );
          }
          if (this.requiresOtherClause && !hasOtherClause) {
            return this.error(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'ErrorKind'
              ].MISSING_OTHER_CLAUSE,
              createLocation(this.clonePosition(), this.clonePosition())
            );
          }
          return {
            val: options,
            err: null,
          };
        };
        Parser.prototype.tryParseDecimalInteger = function (
          expectNumberError,
          invalidNumberError
        ) {
          var sign = 1;
          var startingPosition = this.clonePosition();
          if (this.bumpIf('+')) {
          } else if (this.bumpIf('-')) {
            sign = -1;
          }
          var hasDigits = false;
          var decimal = 0;
          while (!this.isEOF()) {
            var ch = this.char();
            if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {
              hasDigits = true;
              decimal = decimal * 10 + (ch - 48);
              this.bump();
            } else {
              break;
            }
          }
          var location = createLocation(startingPosition, this.clonePosition());
          if (!hasDigits) {
            return this.error(expectNumberError, location);
          }
          decimal *= sign;
          if (!isSafeInteger(decimal)) {
            return this.error(invalidNumberError, location);
          }
          return {
            val: decimal,
            err: null,
          };
        };
        Parser.prototype.offset = function () {
          return this.position.offset;
        };
        Parser.prototype.isEOF = function () {
          return this.offset() === this.message.length;
        };
        Parser.prototype.clonePosition = function () {
          // This is much faster than `Object.assign` or spread.
          return {
            offset: this.position.offset,
            line: this.position.line,
            column: this.position.column,
          };
        };
        /**
         * Return the code point at the current position of the parser.
         * Throws if the index is out of bound.
         */ Parser.prototype.char = function () {
          var offset = this.position.offset;
          if (offset >= this.message.length) {
            throw Error('out of bound');
          }
          var code = codePointAt(this.message, offset);
          if (code === undefined) {
            throw Error(
              'Offset '.concat(
                offset,
                ' is at invalid UTF-16 code unit boundary'
              )
            );
          }
          return code;
        };
        Parser.prototype.error = function (kind, location) {
          return {
            val: null,
            err: {
              kind: kind,
              message: this.message,
              location: location,
            },
          };
        };
        /** Bump the parser to the next UTF-16 code unit. */ Parser.prototype.bump =
          function () {
            if (this.isEOF()) {
              return;
            }
            var code = this.char();
            if (code === 10 /* '\n' */) {
              this.position.line += 1;
              this.position.column = 1;
              this.position.offset += 1;
            } else {
              this.position.column += 1;
              // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.
              this.position.offset += code < 0x10000 ? 1 : 2;
            }
          };
        /**
         * If the substring starting at the current position of the parser has
         * the given prefix, then bump the parser to the character immediately
         * following the prefix and return true. Otherwise, don't bump the parser
         * and return false.
         */ Parser.prototype.bumpIf = function (prefix) {
          if (startsWith(this.message, prefix, this.offset())) {
            for (var i = 0; i < prefix.length; i++) {
              this.bump();
            }
            return true;
          }
          return false;
        };
        /**
         * Bump the parser until the pattern character is found and return `true`.
         * Otherwise bump to the end of the file and return `false`.
         */ Parser.prototype.bumpUntil = function (pattern) {
          var currentOffset = this.offset();
          var index = this.message.indexOf(pattern, currentOffset);
          if (index >= 0) {
            this.bumpTo(index);
            return true;
          } else {
            this.bumpTo(this.message.length);
            return false;
          }
        };
        /**
         * Bump the parser to the target offset.
         * If target offset is beyond the end of the input, bump the parser to the end of the input.
         */ Parser.prototype.bumpTo = function (targetOffset) {
          if (this.offset() > targetOffset) {
            throw Error(
              'targetOffset '
                .concat(
                  targetOffset,
                  ' must be greater than or equal to the current offset '
                )
                .concat(this.offset())
            );
          }
          targetOffset = Math.min(targetOffset, this.message.length);
          while (true) {
            var offset = this.offset();
            if (offset === targetOffset) {
              break;
            }
            if (offset > targetOffset) {
              throw Error(
                'targetOffset '.concat(
                  targetOffset,
                  ' is at invalid UTF-16 code unit boundary'
                )
              );
            }
            this.bump();
            if (this.isEOF()) {
              break;
            }
          }
        };
        /** advance the parser through all whitespace to the next non-whitespace code unit. */ Parser.prototype.bumpSpace =
          function () {
            while (!this.isEOF() && _isWhiteSpace(this.char())) {
              this.bump();
            }
          };
        /**
         * Peek at the *next* Unicode codepoint in the input without advancing the parser.
         * If the input has been exhausted, then this returns null.
         */ Parser.prototype.peek = function () {
          if (this.isEOF()) {
            return null;
          }
          var code = this.char();
          var offset = this.offset();
          var nextCode = this.message.charCodeAt(
            offset + (code >= 0x10000 ? 2 : 1)
          );
          return nextCode !== null && nextCode !== void 0 ? nextCode : null;
        };
        return Parser;
      })();
      /**
       * This check if codepoint is alphabet (lower & uppercase)
       * @param codepoint
       * @returns
       */ function _isAlpha(codepoint) {
        return (
          (codepoint >= 97 && codepoint <= 122) ||
          (codepoint >= 65 && codepoint <= 90)
        );
      }
      function _isAlphaOrSlash(codepoint) {
        return _isAlpha(codepoint) || codepoint === 47; /* '/' */
      }
      /** See `parseTag` function docs. */ function _isPotentialElementNameChar(
        c
      ) {
        return (
          c === 45 /* '-' */ ||
          c === 46 /* '.' */ ||
          (c >= 48 && c <= 57) ||
          c === 95 /* '_' */ ||
          (c >= 97 && c <= 122) ||
          (c >= 65 && c <= 90) ||
          c == 0xb7 ||
          (c >= 0xc0 && c <= 0xd6) ||
          (c >= 0xd8 && c <= 0xf6) ||
          (c >= 0xf8 && c <= 0x37d) ||
          (c >= 0x37f && c <= 0x1fff) ||
          (c >= 0x200c && c <= 0x200d) ||
          (c >= 0x203f && c <= 0x2040) ||
          (c >= 0x2070 && c <= 0x218f) ||
          (c >= 0x2c00 && c <= 0x2fef) ||
          (c >= 0x3001 && c <= 0xd7ff) ||
          (c >= 0xf900 && c <= 0xfdcf) ||
          (c >= 0xfdf0 && c <= 0xfffd) ||
          (c >= 0x10000 && c <= 0xeffff)
        );
      }
      /**
       * Code point equivalent of regex `\p{White_Space}`.
       * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
       */ function _isWhiteSpace(c) {
        return (
          (c >= 0x0009 && c <= 0x000d) ||
          c === 0x0020 ||
          c === 0x0085 ||
          (c >= 0x200e && c <= 0x200f) ||
          c === 0x2028 ||
          c === 0x2029
        );
      }
      /**
       * Code point equivalent of regex `\p{Pattern_Syntax}`.
       * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
       */ function _isPatternSyntax(c) {
        return (
          (c >= 0x0021 && c <= 0x0023) ||
          c === 0x0024 ||
          (c >= 0x0025 && c <= 0x0027) ||
          c === 0x0028 ||
          c === 0x0029 ||
          c === 0x002a ||
          c === 0x002b ||
          c === 0x002c ||
          c === 0x002d ||
          (c >= 0x002e && c <= 0x002f) ||
          (c >= 0x003a && c <= 0x003b) ||
          (c >= 0x003c && c <= 0x003e) ||
          (c >= 0x003f && c <= 0x0040) ||
          c === 0x005b ||
          c === 0x005c ||
          c === 0x005d ||
          c === 0x005e ||
          c === 0x0060 ||
          c === 0x007b ||
          c === 0x007c ||
          c === 0x007d ||
          c === 0x007e ||
          c === 0x00a1 ||
          (c >= 0x00a2 && c <= 0x00a5) ||
          c === 0x00a6 ||
          c === 0x00a7 ||
          c === 0x00a9 ||
          c === 0x00ab ||
          c === 0x00ac ||
          c === 0x00ae ||
          c === 0x00b0 ||
          c === 0x00b1 ||
          c === 0x00b6 ||
          c === 0x00bb ||
          c === 0x00bf ||
          c === 0x00d7 ||
          c === 0x00f7 ||
          (c >= 0x2010 && c <= 0x2015) ||
          (c >= 0x2016 && c <= 0x2017) ||
          c === 0x2018 ||
          c === 0x2019 ||
          c === 0x201a ||
          (c >= 0x201b && c <= 0x201c) ||
          c === 0x201d ||
          c === 0x201e ||
          c === 0x201f ||
          (c >= 0x2020 && c <= 0x2027) ||
          (c >= 0x2030 && c <= 0x2038) ||
          c === 0x2039 ||
          c === 0x203a ||
          (c >= 0x203b && c <= 0x203e) ||
          (c >= 0x2041 && c <= 0x2043) ||
          c === 0x2044 ||
          c === 0x2045 ||
          c === 0x2046 ||
          (c >= 0x2047 && c <= 0x2051) ||
          c === 0x2052 ||
          c === 0x2053 ||
          (c >= 0x2055 && c <= 0x205e) ||
          (c >= 0x2190 && c <= 0x2194) ||
          (c >= 0x2195 && c <= 0x2199) ||
          (c >= 0x219a && c <= 0x219b) ||
          (c >= 0x219c && c <= 0x219f) ||
          c === 0x21a0 ||
          (c >= 0x21a1 && c <= 0x21a2) ||
          c === 0x21a3 ||
          (c >= 0x21a4 && c <= 0x21a5) ||
          c === 0x21a6 ||
          (c >= 0x21a7 && c <= 0x21ad) ||
          c === 0x21ae ||
          (c >= 0x21af && c <= 0x21cd) ||
          (c >= 0x21ce && c <= 0x21cf) ||
          (c >= 0x21d0 && c <= 0x21d1) ||
          c === 0x21d2 ||
          c === 0x21d3 ||
          c === 0x21d4 ||
          (c >= 0x21d5 && c <= 0x21f3) ||
          (c >= 0x21f4 && c <= 0x22ff) ||
          (c >= 0x2300 && c <= 0x2307) ||
          c === 0x2308 ||
          c === 0x2309 ||
          c === 0x230a ||
          c === 0x230b ||
          (c >= 0x230c && c <= 0x231f) ||
          (c >= 0x2320 && c <= 0x2321) ||
          (c >= 0x2322 && c <= 0x2328) ||
          c === 0x2329 ||
          c === 0x232a ||
          (c >= 0x232b && c <= 0x237b) ||
          c === 0x237c ||
          (c >= 0x237d && c <= 0x239a) ||
          (c >= 0x239b && c <= 0x23b3) ||
          (c >= 0x23b4 && c <= 0x23db) ||
          (c >= 0x23dc && c <= 0x23e1) ||
          (c >= 0x23e2 && c <= 0x2426) ||
          (c >= 0x2427 && c <= 0x243f) ||
          (c >= 0x2440 && c <= 0x244a) ||
          (c >= 0x244b && c <= 0x245f) ||
          (c >= 0x2500 && c <= 0x25b6) ||
          c === 0x25b7 ||
          (c >= 0x25b8 && c <= 0x25c0) ||
          c === 0x25c1 ||
          (c >= 0x25c2 && c <= 0x25f7) ||
          (c >= 0x25f8 && c <= 0x25ff) ||
          (c >= 0x2600 && c <= 0x266e) ||
          c === 0x266f ||
          (c >= 0x2670 && c <= 0x2767) ||
          c === 0x2768 ||
          c === 0x2769 ||
          c === 0x276a ||
          c === 0x276b ||
          c === 0x276c ||
          c === 0x276d ||
          c === 0x276e ||
          c === 0x276f ||
          c === 0x2770 ||
          c === 0x2771 ||
          c === 0x2772 ||
          c === 0x2773 ||
          c === 0x2774 ||
          c === 0x2775 ||
          (c >= 0x2794 && c <= 0x27bf) ||
          (c >= 0x27c0 && c <= 0x27c4) ||
          c === 0x27c5 ||
          c === 0x27c6 ||
          (c >= 0x27c7 && c <= 0x27e5) ||
          c === 0x27e6 ||
          c === 0x27e7 ||
          c === 0x27e8 ||
          c === 0x27e9 ||
          c === 0x27ea ||
          c === 0x27eb ||
          c === 0x27ec ||
          c === 0x27ed ||
          c === 0x27ee ||
          c === 0x27ef ||
          (c >= 0x27f0 && c <= 0x27ff) ||
          (c >= 0x2800 && c <= 0x28ff) ||
          (c >= 0x2900 && c <= 0x2982) ||
          c === 0x2983 ||
          c === 0x2984 ||
          c === 0x2985 ||
          c === 0x2986 ||
          c === 0x2987 ||
          c === 0x2988 ||
          c === 0x2989 ||
          c === 0x298a ||
          c === 0x298b ||
          c === 0x298c ||
          c === 0x298d ||
          c === 0x298e ||
          c === 0x298f ||
          c === 0x2990 ||
          c === 0x2991 ||
          c === 0x2992 ||
          c === 0x2993 ||
          c === 0x2994 ||
          c === 0x2995 ||
          c === 0x2996 ||
          c === 0x2997 ||
          c === 0x2998 ||
          (c >= 0x2999 && c <= 0x29d7) ||
          c === 0x29d8 ||
          c === 0x29d9 ||
          c === 0x29da ||
          c === 0x29db ||
          (c >= 0x29dc && c <= 0x29fb) ||
          c === 0x29fc ||
          c === 0x29fd ||
          (c >= 0x29fe && c <= 0x2aff) ||
          (c >= 0x2b00 && c <= 0x2b2f) ||
          (c >= 0x2b30 && c <= 0x2b44) ||
          (c >= 0x2b45 && c <= 0x2b46) ||
          (c >= 0x2b47 && c <= 0x2b4c) ||
          (c >= 0x2b4d && c <= 0x2b73) ||
          (c >= 0x2b74 && c <= 0x2b75) ||
          (c >= 0x2b76 && c <= 0x2b95) ||
          c === 0x2b96 ||
          (c >= 0x2b97 && c <= 0x2bff) ||
          (c >= 0x2e00 && c <= 0x2e01) ||
          c === 0x2e02 ||
          c === 0x2e03 ||
          c === 0x2e04 ||
          c === 0x2e05 ||
          (c >= 0x2e06 && c <= 0x2e08) ||
          c === 0x2e09 ||
          c === 0x2e0a ||
          c === 0x2e0b ||
          c === 0x2e0c ||
          c === 0x2e0d ||
          (c >= 0x2e0e && c <= 0x2e16) ||
          c === 0x2e17 ||
          (c >= 0x2e18 && c <= 0x2e19) ||
          c === 0x2e1a ||
          c === 0x2e1b ||
          c === 0x2e1c ||
          c === 0x2e1d ||
          (c >= 0x2e1e && c <= 0x2e1f) ||
          c === 0x2e20 ||
          c === 0x2e21 ||
          c === 0x2e22 ||
          c === 0x2e23 ||
          c === 0x2e24 ||
          c === 0x2e25 ||
          c === 0x2e26 ||
          c === 0x2e27 ||
          c === 0x2e28 ||
          c === 0x2e29 ||
          (c >= 0x2e2a && c <= 0x2e2e) ||
          c === 0x2e2f ||
          (c >= 0x2e30 && c <= 0x2e39) ||
          (c >= 0x2e3a && c <= 0x2e3b) ||
          (c >= 0x2e3c && c <= 0x2e3f) ||
          c === 0x2e40 ||
          c === 0x2e41 ||
          c === 0x2e42 ||
          (c >= 0x2e43 && c <= 0x2e4f) ||
          (c >= 0x2e50 && c <= 0x2e51) ||
          c === 0x2e52 ||
          (c >= 0x2e53 && c <= 0x2e7f) ||
          (c >= 0x3001 && c <= 0x3003) ||
          c === 0x3008 ||
          c === 0x3009 ||
          c === 0x300a ||
          c === 0x300b ||
          c === 0x300c ||
          c === 0x300d ||
          c === 0x300e ||
          c === 0x300f ||
          c === 0x3010 ||
          c === 0x3011 ||
          (c >= 0x3012 && c <= 0x3013) ||
          c === 0x3014 ||
          c === 0x3015 ||
          c === 0x3016 ||
          c === 0x3017 ||
          c === 0x3018 ||
          c === 0x3019 ||
          c === 0x301a ||
          c === 0x301b ||
          c === 0x301c ||
          c === 0x301d ||
          (c >= 0x301e && c <= 0x301f) ||
          c === 0x3020 ||
          c === 0x3030 ||
          c === 0xfd3e ||
          c === 0xfd3f ||
          (c >= 0xfe45 && c <= 0xfe46)
        );
      }
    },
  '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        hoistSelectors: () => hoistSelectors,
        isStructurallySame: () => isStructurallySame,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/tslib/tslib.es6.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-rsc] (ecmascript)'
        );
      function cloneDeep(obj) {
        if (Array.isArray(obj)) {
          // @ts-expect-error meh
          return (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            '__spreadArray'
          ])([], obj.map(cloneDeep), true);
        }
        if (obj !== null && typeof obj === 'object') {
          // @ts-expect-error meh
          return Object.keys(obj).reduce(function (cloned, k) {
            // @ts-expect-error meh
            cloned[k] = cloneDeep(obj[k]);
            return cloned;
          }, {});
        }
        return obj;
      }
      function hoistPluralOrSelectElement(ast, el, positionToInject) {
        // pull this out of the ast and move it to the top
        var cloned = cloneDeep(el);
        var options = cloned.options;
        cloned.options = Object.keys(options).reduce(function (all, k) {
          var newValue = hoistSelectors(
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              '__spreadArray'
            ])(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__spreadArray'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  '__spreadArray'
                ])([], ast.slice(0, positionToInject), true),
                options[k].value,
                true
              ),
              ast.slice(positionToInject + 1),
              true
            )
          );
          all[k] = {
            value: newValue,
          };
          return all;
        }, {});
        return cloned;
      }
      function isPluralOrSelectElement(el) {
        return (
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'isPluralElement'
          ])(el) ||
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'isSelectElement'
          ])(el)
        );
      }
      function findPluralOrSelectElement(ast) {
        return !!ast.find(function (el) {
          if (isPluralOrSelectElement(el)) {
            return true;
          }
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isTagElement'
            ])(el)
          ) {
            return findPluralOrSelectElement(el.children);
          }
          return false;
        });
      }
      function hoistSelectors(ast) {
        for (var i = 0; i < ast.length; i++) {
          var el = ast[i];
          if (isPluralOrSelectElement(el)) {
            return [hoistPluralOrSelectElement(ast, el, i)];
          }
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isTagElement'
            ])(el) &&
            findPluralOrSelectElement([el])
          ) {
            throw new Error(
              'Cannot hoist plural/select within a tag element. Please put the tag element inside each plural/select option'
            );
          }
        }
        return ast;
      }
      /**
       * Collect all variables in an AST to Record<string, TYPE>
       * @param ast AST to collect variables from
       * @param vars Record of variable name to variable type
       */ function collectVariables(ast, vars) {
        if (vars === void 0) {
          vars = new Map();
        }
        ast.forEach(function (el) {
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isArgumentElement'
            ])(el) ||
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isDateElement'
            ])(el) ||
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isTimeElement'
            ])(el) ||
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isNumberElement'
            ])(el)
          ) {
            if (el.value in vars && vars.get(el.value) !== el.type) {
              throw new Error(
                'Variable '.concat(el.value, ' has conflicting types')
              );
            }
            vars.set(el.value, el.type);
          }
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isPluralElement'
            ])(el) ||
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isSelectElement'
            ])(el)
          ) {
            vars.set(el.value, el.type);
            Object.keys(el.options).forEach(function (k) {
              collectVariables(el.options[k].value, vars);
            });
          }
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isTagElement'
            ])(el)
          ) {
            vars.set(el.value, el.type);
            collectVariables(el.children, vars);
          }
        });
      }
      function isStructurallySame(a, b) {
        var aVars = new Map();
        var bVars = new Map();
        collectVariables(a, aVars);
        collectVariables(b, bVars);
        if (aVars.size !== bVars.size) {
          return {
            success: false,
            error: new Error(
              'Different number of variables: ['
                .concat(Array.from(aVars.keys()).join(', '), '] vs [')
                .concat(Array.from(bVars.keys()).join(', '), ']')
            ),
          };
        }
        return Array.from(aVars.entries()).reduce(
          function (result, _a) {
            var key = _a[0],
              type = _a[1];
            if (!result.success) {
              return result;
            }
            var bType = bVars.get(key);
            if (bType == null) {
              return {
                success: false,
                error: new Error(
                  'Missing variable '.concat(key, ' in message')
                ),
              };
            }
            if (bType !== type) {
              return {
                success: false,
                error: new Error(
                  'Variable '
                    .concat(key, ' has conflicting types: ')
                    .concat(
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                        'TYPE'
                      ][type],
                      ' vs '
                    )
                    .concat(
                      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                        'TYPE'
                      ][bType]
                    )
                ),
              };
            }
            return result;
          },
          {
            success: true,
          }
        );
      }
    },
  '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-rsc] (ecmascript) <locals>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        _Parser: () => _Parser,
        parse: () => parse,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/tslib/tslib.es6.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/error.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$parser$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$manipulator$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js [app-rsc] (ecmascript)'
        );
      function pruneLocation(els) {
        els.forEach(function (el) {
          delete el.location;
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isSelectElement'
            ])(el) ||
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isPluralElement'
            ])(el)
          ) {
            for (var k in el.options) {
              delete el.options[k].location;
              pruneLocation(el.options[k].value);
            }
          } else if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isNumberElement'
            ])(el) &&
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isNumberSkeleton'
            ])(el.style)
          ) {
            delete el.style.location;
          } else if (
            ((0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isDateElement'
            ])(el) ||
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'isTimeElement'
              ])(el)) &&
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isDateTimeSkeleton'
            ])(el.style)
          ) {
            delete el.style.location;
          } else if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isTagElement'
            ])(el)
          ) {
            pruneLocation(el.children);
          }
        });
      }
      function parse(message, opts) {
        if (opts === void 0) {
          opts = {};
        }
        opts = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          '__assign'
        ])(
          {
            shouldParseSkeletons: true,
            requiresOtherClause: true,
          },
          opts
        );
        var result =
          new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$parser$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'Parser'
          ](message, opts).parse();
        if (result.err) {
          var error = SyntaxError(
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'ErrorKind'
            ][result.err.kind]
          );
          // @ts-expect-error Assign to error object
          error.location = result.err.location;
          // @ts-expect-error Assign to error object
          error.originalMessage = result.err.message;
          throw error;
        }
        if (
          !(opts === null || opts === void 0 ? void 0 : opts.captureLocation)
        ) {
          pruneLocation(result.val);
        }
        return result.val;
      }
      var _Parser =
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$parser$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'Parser'
        ];
    },
  '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-rsc] (ecmascript) <module evaluation>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({});
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/error.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$parser$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$manipulator$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/manipulator.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-rsc] (ecmascript) <locals>'
        );
    },
  '[project]/node_modules/intl-messageformat/lib/src/error.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        ErrorCode: () => ErrorCode,
        FormatError: () => FormatError,
        InvalidValueError: () => InvalidValueError,
        InvalidValueTypeError: () => InvalidValueTypeError,
        MissingValueError: () => MissingValueError,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/tslib/tslib.es6.mjs [app-rsc] (ecmascript)'
        );
      var ErrorCode;
      (function (ErrorCode) {
        // When we have a placeholder but no value to format
        ErrorCode['MISSING_VALUE'] = 'MISSING_VALUE';
        // When value supplied is invalid
        ErrorCode['INVALID_VALUE'] = 'INVALID_VALUE';
        // When we need specific Intl API but it's not available
        ErrorCode['MISSING_INTL_API'] = 'MISSING_INTL_API';
      })(ErrorCode || (ErrorCode = {}));
      var FormatError = (function (_super) {
        (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          '__extends'
        ])(FormatError, _super);
        function FormatError(msg, code, originalMessage) {
          var _this = _super.call(this, msg) || this;
          _this.code = code;
          _this.originalMessage = originalMessage;
          return _this;
        }
        FormatError.prototype.toString = function () {
          return '[formatjs Error: '
            .concat(this.code, '] ')
            .concat(this.message);
        };
        return FormatError;
      })(Error);
      var InvalidValueError = (function (_super) {
        (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          '__extends'
        ])(InvalidValueError, _super);
        function InvalidValueError(
          variableId,
          value,
          options,
          originalMessage
        ) {
          return (
            _super.call(
              this,
              'Invalid values for "'
                .concat(variableId, '": "')
                .concat(value, '". Options are "')
                .concat(Object.keys(options).join('", "'), '"'),
              ErrorCode.INVALID_VALUE,
              originalMessage
            ) || this
          );
        }
        return InvalidValueError;
      })(FormatError);
      var InvalidValueTypeError = (function (_super) {
        (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          '__extends'
        ])(InvalidValueTypeError, _super);
        function InvalidValueTypeError(value, type, originalMessage) {
          return (
            _super.call(
              this,
              'Value for "'.concat(value, '" must be of type ').concat(type),
              ErrorCode.INVALID_VALUE,
              originalMessage
            ) || this
          );
        }
        return InvalidValueTypeError;
      })(FormatError);
      var MissingValueError = (function (_super) {
        (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          '__extends'
        ])(MissingValueError, _super);
        function MissingValueError(variableId, originalMessage) {
          return (
            _super.call(
              this,
              'The intl string context variable "'
                .concat(variableId, '" was not provided to the string "')
                .concat(originalMessage, '"'),
              ErrorCode.MISSING_VALUE,
              originalMessage
            ) || this
          );
        }
        return MissingValueError;
      })(FormatError);
    },
  '[project]/node_modules/intl-messageformat/lib/src/formatters.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        PART_TYPE: () => PART_TYPE,
        formatToParts: () => formatToParts,
        isFormatXMLElementFn: () => isFormatXMLElementFn,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-rsc] (ecmascript) <module evaluation>'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/types.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/intl-messageformat/lib/src/error.js [app-rsc] (ecmascript)'
        );
      var PART_TYPE;
      (function (PART_TYPE) {
        PART_TYPE[(PART_TYPE['literal'] = 0)] = 'literal';
        PART_TYPE[(PART_TYPE['object'] = 1)] = 'object';
      })(PART_TYPE || (PART_TYPE = {}));
      function mergeLiteral(parts) {
        if (parts.length < 2) {
          return parts;
        }
        return parts.reduce(function (all, part) {
          var lastPart = all[all.length - 1];
          if (
            !lastPart ||
            lastPart.type !== PART_TYPE.literal ||
            part.type !== PART_TYPE.literal
          ) {
            all.push(part);
          } else {
            lastPart.value += part.value;
          }
          return all;
        }, []);
      }
      function isFormatXMLElementFn(el) {
        return typeof el === 'function';
      }
      function formatToParts(
        els,
        locales,
        formatters,
        formats,
        values,
        currentPluralValue, // For debugging
        originalMessage
      ) {
        // Hot path for straight simple msg translations
        if (
          els.length === 1 &&
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'isLiteralElement'
          ])(els[0])
        ) {
          return [
            {
              type: PART_TYPE.literal,
              value: els[0].value,
            },
          ];
        }
        var result = [];
        for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
          var el = els_1[_i];
          // Exit early for string parts.
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isLiteralElement'
            ])(el)
          ) {
            result.push({
              type: PART_TYPE.literal,
              value: el.value,
            });
            continue;
          }
          // TODO: should this part be literal type?
          // Replace `#` in plural rules with the actual numeric value.
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isPoundElement'
            ])(el)
          ) {
            if (typeof currentPluralValue === 'number') {
              result.push({
                type: PART_TYPE.literal,
                value: formatters
                  .getNumberFormat(locales)
                  .format(currentPluralValue),
              });
            }
            continue;
          }
          var varName = el.value;
          // Enforce that all required values are provided by the caller.
          if (!(values && varName in values)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'MissingValueError'
            ](varName, originalMessage);
          }
          var value = values[varName];
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isArgumentElement'
            ])(el)
          ) {
            if (
              !value ||
              typeof value === 'string' ||
              typeof value === 'number'
            ) {
              value =
                typeof value === 'string' || typeof value === 'number'
                  ? String(value)
                  : '';
            }
            result.push({
              type:
                typeof value === 'string'
                  ? PART_TYPE.literal
                  : PART_TYPE.object,
              value: value,
            });
            continue;
          }
          // Recursively format plural and select parts' option — which can be a
          // nested pattern structure. The choosing of the option to use is
          // abstracted-by and delegated-to the part helper object.
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isDateElement'
            ])(el)
          ) {
            var style =
              typeof el.style === 'string'
                ? formats.date[el.style]
                : (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'isDateTimeSkeleton'
                    ])(el.style)
                  ? el.style.parsedOptions
                  : undefined;
            result.push({
              type: PART_TYPE.literal,
              value: formatters.getDateTimeFormat(locales, style).format(value),
            });
            continue;
          }
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isTimeElement'
            ])(el)
          ) {
            var style =
              typeof el.style === 'string'
                ? formats.time[el.style]
                : (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'isDateTimeSkeleton'
                    ])(el.style)
                  ? el.style.parsedOptions
                  : formats.time.medium;
            result.push({
              type: PART_TYPE.literal,
              value: formatters.getDateTimeFormat(locales, style).format(value),
            });
            continue;
          }
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isNumberElement'
            ])(el)
          ) {
            var style =
              typeof el.style === 'string'
                ? formats.number[el.style]
                : (0,
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                      'isNumberSkeleton'
                    ])(el.style)
                  ? el.style.parsedOptions
                  : undefined;
            if (style && style.scale) {
              value = value * (style.scale || 1);
            }
            result.push({
              type: PART_TYPE.literal,
              value: formatters.getNumberFormat(locales, style).format(value),
            });
            continue;
          }
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isTagElement'
            ])(el)
          ) {
            var children = el.children,
              value_1 = el.value;
            var formatFn = values[value_1];
            if (!isFormatXMLElementFn(formatFn)) {
              throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'InvalidValueTypeError'
              ](value_1, 'function', originalMessage);
            }
            var parts = formatToParts(
              children,
              locales,
              formatters,
              formats,
              values,
              currentPluralValue
            );
            var chunks = formatFn(
              parts.map(function (p) {
                return p.value;
              })
            );
            if (!Array.isArray(chunks)) {
              chunks = [chunks];
            }
            result.push.apply(
              result,
              chunks.map(function (c) {
                return {
                  type:
                    typeof c === 'string'
                      ? PART_TYPE.literal
                      : PART_TYPE.object,
                  value: c,
                };
              })
            );
          }
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isSelectElement'
            ])(el)
          ) {
            var opt = el.options[value] || el.options.other;
            if (!opt) {
              throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'InvalidValueError'
              ](el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(
              result,
              formatToParts(opt.value, locales, formatters, formats, values)
            );
            continue;
          }
          if (
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isPluralElement'
            ])(el)
          ) {
            var opt = el.options['='.concat(value)];
            if (!opt) {
              if (!Intl.PluralRules) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'FormatError'
                ](
                  'Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n',
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'ErrorCode'
                  ].MISSING_INTL_API,
                  originalMessage
                );
              }
              var rule = formatters
                .getPluralRules(locales, {
                  type: el.pluralType,
                })
                .select(value - (el.offset || 0));
              opt = el.options[rule] || el.options.other;
            }
            if (!opt) {
              throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$error$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'InvalidValueError'
              ](el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(
              result,
              formatToParts(
                opt.value,
                locales,
                formatters,
                formats,
                values,
                value - (el.offset || 0)
              )
            );
            continue;
          }
        }
        return mergeLiteral(result);
      }
    },
  '[project]/node_modules/intl-messageformat/lib/src/core.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      /*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/ __turbopack_context__.s({
        IntlMessageFormat: () => IntlMessageFormat,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/tslib/tslib.es6.mjs [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/fast-memoize/lib/index.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-rsc] (ecmascript) <module evaluation>'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/icu-messageformat-parser/lib/index.js [app-rsc] (ecmascript) <locals>'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$formatters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/intl-messageformat/lib/src/formatters.js [app-rsc] (ecmascript)'
        );
      // -- MessageFormat --------------------------------------------------------
      function mergeConfig(c1, c2) {
        if (!c2) {
          return c1;
        }
        return (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          '__assign'
        ])(
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            '__assign'
          ])(
            (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              '__assign'
            ])({}, c1 || {}),
            c2 || {}
          ),
          Object.keys(c1).reduce(function (all, k) {
            all[k] = (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              '__assign'
            ])(
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__assign'
              ])({}, c1[k]),
              c2[k] || {}
            );
            return all;
          }, {})
        );
      }
      function mergeConfigs(defaultConfig, configs) {
        if (!configs) {
          return defaultConfig;
        }
        return Object.keys(defaultConfig).reduce(
          function (all, k) {
            all[k] = mergeConfig(defaultConfig[k], configs[k]);
            return all;
          },
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            '__assign'
          ])({}, defaultConfig)
        );
      }
      function createFastMemoizeCache(store) {
        return {
          create: function () {
            return {
              get: function (key) {
                return store[key];
              },
              set: function (key, value) {
                store[key] = value;
              },
            };
          },
        };
      }
      function createDefaultFormatters(cache) {
        if (cache === void 0) {
          cache = {
            number: {},
            dateTime: {},
            pluralRules: {},
          };
        }
        return {
          getNumberFormat: (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'memoize'
          ])(
            function () {
              var _a;
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return new ((_a = Intl.NumberFormat).bind.apply(
                _a,
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  '__spreadArray'
                ])([void 0], args, false)
              ))();
            },
            {
              cache: createFastMemoizeCache(cache.number),
              strategy:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'strategies'
                ].variadic,
            }
          ),
          getDateTimeFormat: (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'memoize'
          ])(
            function () {
              var _a;
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return new ((_a = Intl.DateTimeFormat).bind.apply(
                _a,
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  '__spreadArray'
                ])([void 0], args, false)
              ))();
            },
            {
              cache: createFastMemoizeCache(cache.dateTime),
              strategy:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'strategies'
                ].variadic,
            }
          ),
          getPluralRules: (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'memoize'
          ])(
            function () {
              var _a;
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return new ((_a = Intl.PluralRules).bind.apply(
                _a,
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  '__spreadArray'
                ])([void 0], args, false)
              ))();
            },
            {
              cache: createFastMemoizeCache(cache.pluralRules),
              strategy:
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'strategies'
                ].variadic,
            }
          ),
        };
      }
      var IntlMessageFormat = (function () {
        function IntlMessageFormat(message, locales, overrideFormats, opts) {
          if (locales === void 0) {
            locales = IntlMessageFormat.defaultLocale;
          }
          var _this = this;
          this.formatterCache = {
            number: {},
            dateTime: {},
            pluralRules: {},
          };
          this.format = function (values) {
            var parts = _this.formatToParts(values);
            // Hot path for straight simple msg translations
            if (parts.length === 1) {
              return parts[0].value;
            }
            var result = parts.reduce(function (all, part) {
              if (
                !all.length ||
                part.type !==
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$formatters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'PART_TYPE'
                  ].literal ||
                typeof all[all.length - 1] !== 'string'
              ) {
                all.push(part.value);
              } else {
                all[all.length - 1] += part.value;
              }
              return all;
            }, []);
            if (result.length <= 1) {
              return result[0] || '';
            }
            return result;
          };
          this.formatToParts = function (values) {
            return (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$formatters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'formatToParts'
            ])(
              _this.ast,
              _this.locales,
              _this.formatters,
              _this.formats,
              values,
              undefined,
              _this.message
            );
          };
          this.resolvedOptions = function () {
            var _a;
            return {
              locale:
                ((_a = _this.resolvedLocale) === null || _a === void 0
                  ? void 0
                  : _a.toString()) ||
                Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],
            };
          };
          this.getAst = function () {
            return _this.ast;
          };
          // Defined first because it's used to build the format pattern.
          this.locales = locales;
          this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);
          if (typeof message === 'string') {
            this.message = message;
            if (!IntlMessageFormat.__parse) {
              throw new TypeError(
                'IntlMessageFormat.__parse must be set to process `message` of type `string`'
              );
            }
            var _a = opts || {},
              formatters = _a.formatters,
              parseOpts = (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__rest'
              ])(_a, ['formatters']);
            // Parse string messages into an AST.
            this.ast = IntlMessageFormat.__parse(
              message,
              (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                '__assign'
              ])(
                (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  '__assign'
                ])({}, parseOpts),
                {
                  locale: this.resolvedLocale,
                }
              )
            );
          } else {
            this.ast = message;
          }
          if (!Array.isArray(this.ast)) {
            throw new TypeError(
              'A message must be provided as a String or AST.'
            );
          }
          // Creates a new object with the specified `formats` merged with the default
          // formats.
          this.formats = mergeConfigs(
            IntlMessageFormat.formats,
            overrideFormats
          );
          this.formatters =
            (opts && opts.formatters) ||
            createDefaultFormatters(this.formatterCache);
        }
        Object.defineProperty(IntlMessageFormat, 'defaultLocale', {
          get: function () {
            if (!IntlMessageFormat.memoizedDefaultLocale) {
              IntlMessageFormat.memoizedDefaultLocale =
                new Intl.NumberFormat().resolvedOptions().locale;
            }
            return IntlMessageFormat.memoizedDefaultLocale;
          },
          enumerable: false,
          configurable: true,
        });
        IntlMessageFormat.memoizedDefaultLocale = null;
        IntlMessageFormat.resolveLocale = function (locales) {
          if (typeof Intl.Locale === 'undefined') {
            return;
          }
          var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
          if (supportedLocales.length > 0) {
            return new Intl.Locale(supportedLocales[0]);
          }
          return new Intl.Locale(
            typeof locales === 'string' ? locales : locales[0]
          );
        };
        IntlMessageFormat.__parse =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$icu$2d$messageformat$2d$parser$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__[
            'parse'
          ];
        // Default format options used as the prototype of the `formats` provided to the
        // constructor. These are used when constructing the internal Intl.NumberFormat
        // and Intl.DateTimeFormat instances.
        IntlMessageFormat.formats = {
          number: {
            integer: {
              maximumFractionDigits: 0,
            },
            currency: {
              style: 'currency',
            },
            percent: {
              style: 'percent',
            },
          },
          date: {
            short: {
              month: 'numeric',
              day: 'numeric',
              year: '2-digit',
            },
            medium: {
              month: 'short',
              day: 'numeric',
              year: 'numeric',
            },
            long: {
              month: 'long',
              day: 'numeric',
              year: 'numeric',
            },
            full: {
              weekday: 'long',
              month: 'long',
              day: 'numeric',
              year: 'numeric',
            },
          },
          time: {
            short: {
              hour: 'numeric',
              minute: 'numeric',
            },
            medium: {
              hour: 'numeric',
              minute: 'numeric',
              second: 'numeric',
            },
            long: {
              hour: 'numeric',
              minute: 'numeric',
              second: 'numeric',
              timeZoneName: 'short',
            },
            full: {
              hour: 'numeric',
              minute: 'numeric',
              second: 'numeric',
              timeZoneName: 'short',
            },
          },
        };
        return IntlMessageFormat;
      })();
    },
  '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        I: () => IntlError,
        a: () => IntlErrorCode,
        b: () => createIntlFormatters,
        c: () => createFormatter,
        d: () => createCache,
        e: () => createBaseTranslator,
        f: () => defaultGetMessageFallback,
        g: () => defaultOnError,
        i: () => initializeConfig,
        r: () => resolveNamespace,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/intl-messageformat/lib/src/core.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/@formatjs/fast-memoize/lib/index.js [app-rsc] (ecmascript)'
        );
      class IntlError extends Error {
        constructor(code, originalMessage) {
          let message = code;
          if (originalMessage) {
            message += ': ' + originalMessage;
          }
          super(message);
          this.code = code;
          if (originalMessage) {
            this.originalMessage = originalMessage;
          }
        }
      }
      var IntlErrorCode = /*#__PURE__*/ (function (IntlErrorCode) {
        IntlErrorCode['MISSING_MESSAGE'] = 'MISSING_MESSAGE';
        IntlErrorCode['MISSING_FORMAT'] = 'MISSING_FORMAT';
        IntlErrorCode['ENVIRONMENT_FALLBACK'] = 'ENVIRONMENT_FALLBACK';
        IntlErrorCode['INSUFFICIENT_PATH'] = 'INSUFFICIENT_PATH';
        IntlErrorCode['INVALID_MESSAGE'] = 'INVALID_MESSAGE';
        IntlErrorCode['INVALID_KEY'] = 'INVALID_KEY';
        IntlErrorCode['FORMATTING_ERROR'] = 'FORMATTING_ERROR';
        return IntlErrorCode;
      })(IntlErrorCode || {});
      /**
       * `intl-messageformat` uses separate keys for `date` and `time`, but there's
       * only one native API: `Intl.DateTimeFormat`. Additionally you might want to
       * include both a time and a date in a value, therefore the separation doesn't
       * seem so useful. We offer a single `dateTime` namespace instead, but we have
       * to convert the format before `intl-messageformat` can be used.
       */ function convertFormatsToIntlMessageFormat(
        globalFormats,
        inlineFormats,
        timeZone
      ) {
        const mfDateDefaults =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'IntlMessageFormat'
          ].formats.date;
        const mfTimeDefaults =
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'IntlMessageFormat'
          ].formats.time;
        const dateTimeFormats = {
          ...globalFormats?.dateTime,
          ...inlineFormats?.dateTime,
        };
        const allFormats = {
          date: {
            ...mfDateDefaults,
            ...dateTimeFormats,
          },
          time: {
            ...mfTimeDefaults,
            ...dateTimeFormats,
          },
          number: {
            ...globalFormats?.number,
            ...inlineFormats?.number,
          },
        };
        if (timeZone) {
          // The only way to set a time zone with `intl-messageformat` is to merge it into the formats
          // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15
          ['date', 'time'].forEach((property) => {
            const formats = allFormats[property];
            for (const [key, value] of Object.entries(formats)) {
              formats[key] = {
                timeZone,
                ...value,
              };
            }
          });
        }
        return allFormats;
      }
      function joinPath(...parts) {
        return parts.filter(Boolean).join('.');
      }
      /**
       * Contains defaults that are used for all entry points into the core.
       * See also `InitializedIntlConfiguration`.
       */ function defaultGetMessageFallback(props) {
        return joinPath(props.namespace, props.key);
      }
      function defaultOnError(error) {
        console.error(error);
      }
      function createCache() {
        return {
          dateTime: {},
          number: {},
          message: {},
          relativeTime: {},
          pluralRules: {},
          list: {},
          displayNames: {},
        };
      }
      function createMemoCache(store) {
        return {
          create() {
            return {
              get(key) {
                return store[key];
              },
              set(key, value) {
                store[key] = value;
              },
            };
          },
        };
      }
      function memoFn(fn, cache) {
        return (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'memoize'
        ])(fn, {
          cache: createMemoCache(cache),
          strategy:
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$formatjs$2f$fast$2d$memoize$2f$lib$2f$index$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'strategies'
            ].variadic,
        });
      }
      function memoConstructor(ConstructorFn, cache) {
        return memoFn((...args) => new ConstructorFn(...args), cache);
      }
      function createIntlFormatters(cache) {
        const getDateTimeFormat = memoConstructor(
          Intl.DateTimeFormat,
          cache.dateTime
        );
        const getNumberFormat = memoConstructor(
          Intl.NumberFormat,
          cache.number
        );
        const getPluralRules = memoConstructor(
          Intl.PluralRules,
          cache.pluralRules
        );
        const getRelativeTimeFormat = memoConstructor(
          Intl.RelativeTimeFormat,
          cache.relativeTime
        );
        const getListFormat = memoConstructor(Intl.ListFormat, cache.list);
        const getDisplayNames = memoConstructor(
          Intl.DisplayNames,
          cache.displayNames
        );
        return {
          getDateTimeFormat,
          getNumberFormat,
          getPluralRules,
          getRelativeTimeFormat,
          getListFormat,
          getDisplayNames,
        };
      }
      // Placed here for improved tree shaking. Somehow when this is placed in
      // `formatters.tsx`, then it can't be shaken off from `next-intl`.
      function createMessageFormatter(cache, intlFormatters) {
        const getMessageFormat = memoFn(
          (...args) =>
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$intl$2d$messageformat$2f$lib$2f$src$2f$core$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'IntlMessageFormat'
            ](args[0], args[1], args[2], {
              formatters: intlFormatters,
              ...args[3],
            }),
          cache.message
        );
        return getMessageFormat;
      }
      function resolvePath(locale, messages, key, namespace) {
        const fullKey = joinPath(namespace, key);
        if (!messages) {
          throw new Error(`No messages available at \`${namespace}\`.`);
        }
        let message = messages;
        key.split('.').forEach((part) => {
          const next = message[part];
          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
          if (part == null || next == null) {
            throw new Error(
              `Could not resolve \`${fullKey}\` in messages for locale \`${locale}\`.`
            );
          }
          message = next;
        });
        return message;
      }
      function prepareTranslationValues(values) {
        // Workaround for https://github.com/formatjs/formatjs/issues/1467
        const transformedValues = {};
        Object.keys(values).forEach((key) => {
          let index = 0;
          const value = values[key];
          let transformed;
          if (typeof value === 'function') {
            transformed = (chunks) => {
              const result = value(chunks);
              return /*#__PURE__*/ (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'isValidElement'
              ])(result)
                ? /*#__PURE__*/ (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'cloneElement'
                  ])(result, {
                    key: key + index++,
                  })
                : result;
            };
          } else {
            transformed = value;
          }
          transformedValues[key] = transformed;
        });
        return transformedValues;
      }
      function getMessagesOrError(
        locale,
        messages,
        namespace,
        onError = defaultOnError
      ) {
        try {
          if (!messages) {
            throw new Error(`No messages were configured.`);
          }
          const retrievedMessages = namespace
            ? resolvePath(locale, messages, namespace)
            : messages;
          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
          if (!retrievedMessages) {
            throw new Error(
              `No messages for namespace \`${namespace}\` found.`
            );
          }
          return retrievedMessages;
        } catch (error) {
          const intlError = new IntlError(
            IntlErrorCode.MISSING_MESSAGE,
            error.message
          );
          onError(intlError);
          return intlError;
        }
      }
      function getPlainMessage(candidate, values) {
        // To improve runtime performance, only compile message if:
        return (
          // 1. Values are provided
          values || // 2. There are escaped braces (e.g. "'{name'}")
            /'[{}]/.test(candidate) || // 3. There are missing arguments or tags (dev-only error handling)
            /<|{/.test(candidate)
            ? undefined // Compile
            : candidate // Don't compile
        );
      }
      function createBaseTranslator(config) {
        const messagesOrError = getMessagesOrError(
          config.locale,
          config.messages,
          config.namespace,
          config.onError
        );
        return createBaseTranslatorImpl({
          ...config,
          messagesOrError,
        });
      }
      function createBaseTranslatorImpl({
        cache,
        formats: globalFormats,
        formatters,
        getMessageFallback = defaultGetMessageFallback,
        locale,
        messagesOrError,
        namespace,
        onError,
        timeZone,
      }) {
        const hasMessagesError = messagesOrError instanceof IntlError;
        function getFallbackFromErrorAndNotify(key, code, message) {
          const error = new IntlError(code, message);
          onError(error);
          return getMessageFallback({
            error,
            key,
            namespace,
          });
        }
        function translateBaseFn(
          /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key,
          /** Key value pairs for values to interpolate into the message. */ values,
          /** Provide custom formats for numbers, dates and times. */ formats
        ) {
          if (hasMessagesError) {
            // We have already warned about this during render
            return getMessageFallback({
              error: messagesOrError,
              key,
              namespace,
            });
          }
          const messages = messagesOrError;
          let message;
          try {
            message = resolvePath(locale, messages, key, namespace);
          } catch (error) {
            return getFallbackFromErrorAndNotify(
              key,
              IntlErrorCode.MISSING_MESSAGE,
              error.message
            );
          }
          if (typeof message === 'object') {
            let code, errorMessage;
            if (Array.isArray(message)) {
              code = IntlErrorCode.INVALID_MESSAGE;
              {
                errorMessage = `Message at \`${joinPath(namespace, key)}\` resolved to an array, but only strings are supported. See https://next-intl.dev/docs/usage/messages#arrays-of-messages`;
              }
            } else {
              code = IntlErrorCode.INSUFFICIENT_PATH;
              {
                errorMessage = `Message at \`${joinPath(namespace, key)}\` resolved to an object, but only strings are supported. Use a \`.\` to retrieve nested messages. See https://next-intl.dev/docs/usage/messages#structuring-messages`;
              }
            }
            return getFallbackFromErrorAndNotify(key, code, errorMessage);
          }
          let messageFormat;
          // Hot path that avoids creating an `IntlMessageFormat` instance
          const plainMessage = getPlainMessage(message, values);
          if (plainMessage) return plainMessage;
          // Lazy init the message formatter for better tree
          // shaking in case message formatting is not used.
          if (!formatters.getMessageFormat) {
            formatters.getMessageFormat = createMessageFormatter(
              cache,
              formatters
            );
          }
          try {
            messageFormat = formatters.getMessageFormat(
              message,
              locale,
              convertFormatsToIntlMessageFormat(
                globalFormats,
                formats,
                timeZone
              ),
              {
                formatters: {
                  ...formatters,
                  getDateTimeFormat(locales, options) {
                    // Workaround for https://github.com/formatjs/formatjs/issues/4279
                    return formatters.getDateTimeFormat(locales, {
                      timeZone,
                      ...options,
                    });
                  },
                },
              }
            );
          } catch (error) {
            const thrownError = error;
            return getFallbackFromErrorAndNotify(
              key,
              IntlErrorCode.INVALID_MESSAGE,
              thrownError.message +
                ('originalMessage' in thrownError
                  ? ` (${thrownError.originalMessage})`
                  : '')
            );
          }
          try {
            const formattedMessage = messageFormat.format(
              // @ts-expect-error `intl-messageformat` expects a different format
              // for rich text elements since a recent minor update. This
              // needs to be evaluated in detail, possibly also in regards
              // to be able to format to parts.
              values ? prepareTranslationValues(values) : values
            );
            if (formattedMessage == null) {
              throw new Error(
                `Unable to format \`${key}\` in ${namespace ? `namespace \`${namespace}\`` : 'messages'}`
              );
            }
            // Limit the function signature to return strings or React elements
            return /*#__PURE__*/ (0,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
              'isValidElement'
            ])(formattedMessage) || // Arrays of React elements
              Array.isArray(formattedMessage) ||
              typeof formattedMessage === 'string'
              ? formattedMessage
              : String(formattedMessage);
          } catch (error) {
            return getFallbackFromErrorAndNotify(
              key,
              IntlErrorCode.FORMATTING_ERROR,
              error.message
            );
          }
        }
        function translateFn(
          /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */ key,
          /** Key value pairs for values to interpolate into the message. */ values,
          /** Provide custom formats for numbers, dates and times. */ formats
        ) {
          const result = translateBaseFn(key, values, formats);
          if (typeof result !== 'string') {
            return getFallbackFromErrorAndNotify(
              key,
              IntlErrorCode.INVALID_MESSAGE,
              `The message \`${key}\` in ${namespace ? `namespace \`${namespace}\`` : 'messages'} didn't resolve to a string. If you want to format rich text, use \`t.rich\` instead.`
            );
          }
          return result;
        }
        translateFn.rich = translateBaseFn;
        // Augment `translateBaseFn` to return plain strings
        translateFn.markup = (key, values, formats) => {
          const result = translateBaseFn(
            key, // @ts-expect-error -- `MarkupTranslationValues` is practically a sub type
            // of `RichTranslationValues` but TypeScript isn't smart enough here.
            values,
            formats
          );
          if (typeof result !== 'string') {
            const error = new IntlError(
              IntlErrorCode.FORMATTING_ERROR,
              "`t.markup` only accepts functions for formatting that receive and return strings.\n\nE.g. t.markup('markup', {b: (chunks) => `<b>${chunks}</b>`})"
            );
            onError(error);
            return getMessageFallback({
              error,
              key,
              namespace,
            });
          }
          return result;
        };
        translateFn.raw = (key) => {
          if (hasMessagesError) {
            // We have already warned about this during render
            return getMessageFallback({
              error: messagesOrError,
              key,
              namespace,
            });
          }
          const messages = messagesOrError;
          try {
            return resolvePath(locale, messages, key, namespace);
          } catch (error) {
            return getFallbackFromErrorAndNotify(
              key,
              IntlErrorCode.MISSING_MESSAGE,
              error.message
            );
          }
        };
        translateFn.has = (key) => {
          if (hasMessagesError) {
            return false;
          }
          try {
            resolvePath(locale, messagesOrError, key, namespace);
            return true;
          } catch {
            return false;
          }
        };
        return translateFn;
      }
      /**
       * For the strictly typed messages to work we have to wrap the namespace into
       * a mandatory prefix. See https://stackoverflow.com/a/71529575/343045
       */ function resolveNamespace(namespace, namespacePrefix) {
        return namespace === namespacePrefix
          ? undefined
          : namespace.slice((namespacePrefix + '.').length);
      }
      const SECOND = 1;
      const MINUTE = SECOND * 60;
      const HOUR = MINUTE * 60;
      const DAY = HOUR * 24;
      const WEEK = DAY * 7;
      const MONTH = DAY * (365 / 12); // Approximation
      const QUARTER = MONTH * 3;
      const YEAR = DAY * 365;
      const UNIT_SECONDS = {
        second: SECOND,
        seconds: SECOND,
        minute: MINUTE,
        minutes: MINUTE,
        hour: HOUR,
        hours: HOUR,
        day: DAY,
        days: DAY,
        week: WEEK,
        weeks: WEEK,
        month: MONTH,
        months: MONTH,
        quarter: QUARTER,
        quarters: QUARTER,
        year: YEAR,
        years: YEAR,
      };
      function resolveRelativeTimeUnit(seconds) {
        const absValue = Math.abs(seconds);
        if (absValue < MINUTE) {
          return 'second';
        } else if (absValue < HOUR) {
          return 'minute';
        } else if (absValue < DAY) {
          return 'hour';
        } else if (absValue < WEEK) {
          return 'day';
        } else if (absValue < MONTH) {
          return 'week';
        } else if (absValue < YEAR) {
          return 'month';
        }
        return 'year';
      }
      function calculateRelativeTimeValue(seconds, unit) {
        // We have to round the resulting values, as `Intl.RelativeTimeFormat`
        // will include fractions like '2.1 hours ago'.
        return Math.round(seconds / UNIT_SECONDS[unit]);
      }
      function createFormatter(props) {
        const {
          _cache: cache = createCache(),
          _formatters: formatters = createIntlFormatters(cache),
          formats,
          locale,
          onError = defaultOnError,
          timeZone: globalTimeZone,
        } = props;
        function applyTimeZone(options) {
          if (!options?.timeZone) {
            if (globalTimeZone) {
              options = {
                ...options,
                timeZone: globalTimeZone,
              };
            } else {
              onError(
                new IntlError(
                  IntlErrorCode.ENVIRONMENT_FALLBACK,
                  `The \`timeZone\` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl.dev/docs/configuration#time-zone`
                )
              );
            }
          }
          return options;
        }
        function resolveFormatOrOptions(
          typeFormats,
          formatOrOptions,
          overrides
        ) {
          let options;
          if (typeof formatOrOptions === 'string') {
            const formatName = formatOrOptions;
            options = typeFormats?.[formatName];
            if (!options) {
              const error = new IntlError(
                IntlErrorCode.MISSING_FORMAT,
                `Format \`${formatName}\` is not available.`
              );
              onError(error);
              throw error;
            }
          } else {
            options = formatOrOptions;
          }
          if (overrides) {
            options = {
              ...options,
              ...overrides,
            };
          }
          return options;
        }
        function getFormattedValue(
          formatOrOptions,
          overrides,
          typeFormats,
          formatter,
          getFallback
        ) {
          let options;
          try {
            options = resolveFormatOrOptions(
              typeFormats,
              formatOrOptions,
              overrides
            );
          } catch {
            return getFallback();
          }
          try {
            return formatter(options);
          } catch (error) {
            onError(
              new IntlError(IntlErrorCode.FORMATTING_ERROR, error.message)
            );
            return getFallback();
          }
        }
        function dateTime(value, formatOrOptions, overrides) {
          return getFormattedValue(
            formatOrOptions,
            overrides,
            formats?.dateTime,
            (options) => {
              options = applyTimeZone(options);
              return formatters
                .getDateTimeFormat(locale, options)
                .format(value);
            },
            () => String(value)
          );
        }
        function dateTimeRange(start, end, formatOrOptions, overrides) {
          return getFormattedValue(
            formatOrOptions,
            overrides,
            formats?.dateTime,
            (options) => {
              options = applyTimeZone(options);
              return formatters
                .getDateTimeFormat(locale, options)
                .formatRange(start, end);
            },
            () => [dateTime(start), dateTime(end)].join(' – ')
          );
        }
        function number(value, formatOrOptions, overrides) {
          return getFormattedValue(
            formatOrOptions,
            overrides,
            formats?.number,
            (options) =>
              formatters.getNumberFormat(locale, options).format(value),
            () => String(value)
          );
        }
        function getGlobalNow() {
          // Only read when necessary to avoid triggering a `dynamicIO` error
          // unnecessarily (`now` is only needed for `format.relativeTime`)
          if (props.now) {
            return props.now;
          } else {
            onError(
              new IntlError(
                IntlErrorCode.ENVIRONMENT_FALLBACK,
                `The \`now\` parameter wasn't provided to \`relativeTime\` and there is no global default configured, therefore the current time will be used as a fallback. See https://next-intl.dev/docs/usage/dates-times#relative-times-usenow`
              )
            );
            return new Date();
          }
        }
        function relativeTime(date, nowOrOptions) {
          try {
            let nowDate, unit;
            const opts = {};
            if (
              nowOrOptions instanceof Date ||
              typeof nowOrOptions === 'number'
            ) {
              nowDate = new Date(nowOrOptions);
            } else if (nowOrOptions) {
              if (nowOrOptions.now != null) {
                nowDate = new Date(nowOrOptions.now);
              } else {
                nowDate = getGlobalNow();
              }
              unit = nowOrOptions.unit;
              opts.style = nowOrOptions.style;
              // @ts-expect-error -- Types are slightly outdated
              opts.numberingSystem = nowOrOptions.numberingSystem;
            }
            if (!nowDate) {
              nowDate = getGlobalNow();
            }
            const dateDate = new Date(date);
            const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;
            if (!unit) {
              unit = resolveRelativeTimeUnit(seconds);
            }
            // `numeric: 'auto'` can theoretically produce output like "yesterday",
            // but it only works with integers. E.g. -1 day will produce "yesterday",
            // but -1.1 days will produce "-1.1 days". Rounding before formatting is
            // not desired, as the given dates might cross a threshold were the
            // output isn't correct anymore. Example: 2024-01-08T23:00:00.000Z and
            // 2024-01-08T01:00:00.000Z would produce "yesterday", which is not the
            // case. By using `always` we can ensure correct output. The only exception
            // is the formatting of times <1 second as "now".
            opts.numeric = unit === 'second' ? 'auto' : 'always';
            const value = calculateRelativeTimeValue(seconds, unit);
            return formatters
              .getRelativeTimeFormat(locale, opts)
              .format(value, unit);
          } catch (error) {
            onError(
              new IntlError(IntlErrorCode.FORMATTING_ERROR, error.message)
            );
            return String(date);
          }
        }
        function list(value, formatOrOptions, overrides) {
          const serializedValue = [];
          const richValues = new Map();
          // `formatToParts` only accepts strings, therefore we have to temporarily
          // replace React elements with a placeholder ID that can be used to retrieve
          // the original value afterwards.
          let index = 0;
          for (const item of value) {
            let serializedItem;
            if (typeof item === 'object') {
              serializedItem = String(index);
              richValues.set(serializedItem, item);
            } else {
              serializedItem = String(item);
            }
            serializedValue.push(serializedItem);
            index++;
          }
          return getFormattedValue(
            formatOrOptions,
            overrides,
            formats?.list, // @ts-expect-error -- `richValues.size` is used to determine the return type, but TypeScript can't infer the meaning of this correctly
            (options) => {
              const result = formatters
                .getListFormat(locale, options)
                .formatToParts(serializedValue)
                .map((part) =>
                  part.type === 'literal'
                    ? part.value
                    : richValues.get(part.value) || part.value
                );
              if (richValues.size > 0) {
                return result;
              } else {
                return result.join('');
              }
            },
            () => String(value)
          );
        }
        return {
          dateTime,
          number,
          relativeTime,
          list,
          dateTimeRange,
        };
      }
      function validateMessagesSegment(messages, invalidKeyLabels, parentPath) {
        Object.entries(messages).forEach(([key, messageOrMessages]) => {
          if (key.includes('.')) {
            let keyLabel = key;
            if (parentPath) keyLabel += ` (at ${parentPath})`;
            invalidKeyLabels.push(keyLabel);
          }
          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
          if (
            messageOrMessages != null &&
            typeof messageOrMessages === 'object'
          ) {
            validateMessagesSegment(
              messageOrMessages,
              invalidKeyLabels,
              joinPath(parentPath, key)
            );
          }
        });
      }
      function validateMessages(messages, onError) {
        const invalidKeyLabels = [];
        validateMessagesSegment(messages, invalidKeyLabels);
        if (invalidKeyLabels.length > 0) {
          onError(
            new IntlError(
              IntlErrorCode.INVALID_KEY,
              `Namespace keys can not contain the character "." as this is used to express nesting. Please remove it or replace it with another character.

Invalid ${invalidKeyLabels.length === 1 ? 'key' : 'keys'}: ${invalidKeyLabels.join(', ')}

If you're migrating from a flat structure, you can convert your messages as follows:

import {set} from "lodash";

const input = {
  "one.one": "1.1",
  "one.two": "1.2",
  "two.one.one": "2.1.1"
};

const output = Object.entries(input).reduce(
  (acc, [key, value]) => set(acc, key, value),
  {}
);

// Output:
//
// {
//   "one": {
//     "one": "1.1",
//     "two": "1.2"
//   },
//   "two": {
//     "one": {
//       "one": "2.1.1"
//     }
//   }
// }
`
            )
          );
        }
      }
      /**
       * Enhances the incoming props with defaults.
       */ function initializeConfig({
        formats,
        getMessageFallback,
        messages,
        onError,
        ...rest
      }) {
        const finalOnError = onError || defaultOnError;
        const finalGetMessageFallback =
          getMessageFallback || defaultGetMessageFallback;
        {
          if (messages) {
            validateMessages(messages, finalOnError);
          }
        }
        return {
          ...rest,
          formats: formats || undefined,
          messages: messages || undefined,
          onError: finalOnError,
          getMessageFallback: finalGetMessageFallback,
        };
      }
    },
  '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-rsc] (ecmascript) <export i as initializeConfig>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        initializeConfig: () =>
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'i'
          ],
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-rsc] (ecmascript)'
        );
    },
  '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-rsc] (ecmascript) <export b as _createIntlFormatters>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        _createIntlFormatters: () =>
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'b'
          ],
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-rsc] (ecmascript)'
        );
    },
  '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-rsc] (ecmascript) <export d as _createCache>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        _createCache: () =>
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'd'
          ],
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-rsc] (ecmascript)'
        );
    },
  '[project]/node_modules/next-intl/dist/esm/development/shared/utils.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        getLocaleAsPrefix: () => getLocaleAsPrefix,
        getLocalePrefix: () => getLocalePrefix,
        getLocalizedTemplate: () => getLocalizedTemplate,
        getSortedPathnames: () => getSortedPathnames,
        hasPathnamePrefixed: () => hasPathnamePrefixed,
        isLocalizableHref: () => isLocalizableHref,
        isPromise: () => isPromise,
        matchesPathname: () => matchesPathname,
        normalizeTrailingSlash: () => normalizeTrailingSlash,
        prefixPathname: () => prefixPathname,
        templateToRegex: () => templateToRegex,
        unprefixPathname: () => unprefixPathname,
      });
      function isRelativeHref(href) {
        const pathname = typeof href === 'object' ? href.pathname : href;
        return pathname != null && !pathname.startsWith('/');
      }
      function isLocalHref(href) {
        if (typeof href === 'object') {
          return href.host == null && href.hostname == null;
        } else {
          const hasProtocol = /^[a-z]+:/i.test(href);
          return !hasProtocol;
        }
      }
      function isLocalizableHref(href) {
        return isLocalHref(href) && !isRelativeHref(href);
      }
      function unprefixPathname(pathname, prefix) {
        return pathname.replace(new RegExp(`^${prefix}`), '') || '/';
      }
      function prefixPathname(prefix, pathname) {
        let localizedHref = prefix;
        // Avoid trailing slashes
        if (/^\/(\?.*)?$/.test(pathname)) {
          pathname = pathname.slice(1);
        }
        localizedHref += pathname;
        return localizedHref;
      }
      function hasPathnamePrefixed(prefix, pathname) {
        return pathname === prefix || pathname.startsWith(`${prefix}/`);
      }
      function hasTrailingSlash() {
        try {
          // Provided via `env` setting in `next.config.js` via the plugin
          return process.env._next_intl_trailing_slash === 'true';
        } catch {
          return false;
        }
      }
      function getLocalizedTemplate(pathnameConfig, locale, internalTemplate) {
        return typeof pathnameConfig === 'string'
          ? pathnameConfig
          : pathnameConfig[locale] || internalTemplate;
      }
      function normalizeTrailingSlash(pathname) {
        const trailingSlash = hasTrailingSlash();
        const [path, ...hashParts] = pathname.split('#');
        const hash = hashParts.join('#');
        let normalizedPath = path;
        if (normalizedPath !== '/') {
          const pathnameEndsWithSlash = normalizedPath.endsWith('/');
          if (trailingSlash && !pathnameEndsWithSlash) {
            normalizedPath += '/';
          } else if (!trailingSlash && pathnameEndsWithSlash) {
            normalizedPath = normalizedPath.slice(0, -1);
          }
        }
        if (hash) {
          normalizedPath += '#' + hash;
        }
        return normalizedPath;
      }
      function matchesPathname(
        /** E.g. `/users/[userId]-[userName]` */ template,
        /** E.g. `/users/23-jane` */ pathname
      ) {
        const normalizedTemplate = normalizeTrailingSlash(template);
        const normalizedPathname = normalizeTrailingSlash(pathname);
        const regex = templateToRegex(normalizedTemplate);
        return regex.test(normalizedPathname);
      }
      function getLocalePrefix(locale, localePrefix) {
        return (
          (localePrefix.mode !== 'never' && localePrefix.prefixes?.[locale]) || // We return a prefix even if `mode: 'never'`. It's up to the consumer
          // to decide to use it or not.
          getLocaleAsPrefix(locale)
        );
      }
      function getLocaleAsPrefix(locale) {
        return '/' + locale;
      }
      function templateToRegex(template) {
        const regexPattern = template // Replace optional catchall ('[[...slug]]')
          .replace(/\[\[(\.\.\.[^\]]+)\]\]/g, '?(.*)') // Replace catchall ('[...slug]')
          .replace(/\[(\.\.\.[^\]]+)\]/g, '(.+)') // Replace regular parameter ('[slug]')
          .replace(/\[([^\]]+)\]/g, '([^/]+)');
        return new RegExp(`^${regexPattern}$`);
      }
      function isOptionalCatchAllSegment(pathname) {
        return pathname.includes('[[...');
      }
      function isCatchAllSegment(pathname) {
        return pathname.includes('[...');
      }
      function isDynamicSegment(pathname) {
        return pathname.includes('[');
      }
      function comparePathnamePairs(a, b) {
        const pathA = a.split('/');
        const pathB = b.split('/');
        const maxLength = Math.max(pathA.length, pathB.length);
        for (let i = 0; i < maxLength; i++) {
          const segmentA = pathA[i];
          const segmentB = pathB[i];
          // If one of the paths ends, prioritize the shorter path
          if (!segmentA && segmentB) return -1;
          if (segmentA && !segmentB) return 1;
          if (!segmentA && !segmentB) continue;
          // Prioritize static segments over dynamic segments
          if (!isDynamicSegment(segmentA) && isDynamicSegment(segmentB))
            return -1;
          if (isDynamicSegment(segmentA) && !isDynamicSegment(segmentB))
            return 1;
          // Prioritize non-catch-all segments over catch-all segments
          if (!isCatchAllSegment(segmentA) && isCatchAllSegment(segmentB))
            return -1;
          if (isCatchAllSegment(segmentA) && !isCatchAllSegment(segmentB))
            return 1;
          // Prioritize non-optional catch-all segments over optional catch-all segments
          if (
            !isOptionalCatchAllSegment(segmentA) &&
            isOptionalCatchAllSegment(segmentB)
          ) {
            return -1;
          }
          if (
            isOptionalCatchAllSegment(segmentA) &&
            !isOptionalCatchAllSegment(segmentB)
          ) {
            return 1;
          }
          if (segmentA === segmentB) continue;
        }
        // Both pathnames are completely static
        return 0;
      }
      function getSortedPathnames(pathnames) {
        return pathnames.sort(comparePathnamePairs);
      }
      function isPromise(value) {
        // https://github.com/amannn/next-intl/issues/1711
        return typeof value.then === 'function';
      }
    },
  '[project]/node_modules/next/dist/server/web/spec-extension/cookies.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            RequestCookies: null,
            ResponseCookies: null,
            stringifyCookie: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          RequestCookies: function () {
            return _cookies.RequestCookies;
          },
          ResponseCookies: function () {
            return _cookies.ResponseCookies;
          },
          stringifyCookie: function () {
            return _cookies.stringifyCookie;
          },
        });
        const _cookies = __turbopack_context__.r(
          '[project]/node_modules/next/dist/compiled/@edge-runtime/cookies/index.js [app-rsc] (ecmascript)'
        ); //# sourceMappingURL=cookies.js.map
      }
    },
  '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'ReflectAdapter', {
          enumerable: true,
          get: function () {
            return ReflectAdapter;
          },
        });
        class ReflectAdapter {
          static get(target, prop, receiver) {
            const value = Reflect.get(target, prop, receiver);
            if (typeof value === 'function') {
              return value.bind(target);
            }
            return value;
          }
          static set(target, prop, value, receiver) {
            return Reflect.set(target, prop, value, receiver);
          }
          static has(target, prop) {
            return Reflect.has(target, prop);
          }
          static deleteProperty(target, prop) {
            return Reflect.deleteProperty(target, prop);
          }
        } //# sourceMappingURL=reflect.js.map
      }
    },
  '[project]/node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            MutableRequestCookiesAdapter: null,
            ReadonlyRequestCookiesError: null,
            RequestCookiesAdapter: null,
            appendMutableCookies: null,
            areCookiesMutableInCurrentPhase: null,
            getModifiedCookieValues: null,
            responseCookiesToRequestCookies: null,
            wrapWithMutableAccessCheck: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          MutableRequestCookiesAdapter: function () {
            return MutableRequestCookiesAdapter;
          },
          ReadonlyRequestCookiesError: function () {
            return ReadonlyRequestCookiesError;
          },
          RequestCookiesAdapter: function () {
            return RequestCookiesAdapter;
          },
          appendMutableCookies: function () {
            return appendMutableCookies;
          },
          areCookiesMutableInCurrentPhase: function () {
            return areCookiesMutableInCurrentPhase;
          },
          getModifiedCookieValues: function () {
            return getModifiedCookieValues;
          },
          responseCookiesToRequestCookies: function () {
            return responseCookiesToRequestCookies;
          },
          wrapWithMutableAccessCheck: function () {
            return wrapWithMutableAccessCheck;
          },
        });
        const _cookies = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/web/spec-extension/cookies.js [app-rsc] (ecmascript)'
        );
        const _reflect = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-rsc] (ecmascript)'
        );
        const _workasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/work-async-storage.external.js [external] (next/dist/server/app-render/work-async-storage.external.js, cjs)'
        );
        const _workunitasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/work-unit-async-storage.external.js [external] (next/dist/server/app-render/work-unit-async-storage.external.js, cjs)'
        );
        class ReadonlyRequestCookiesError extends Error {
          constructor() {
            super(
              'Cookies can only be modified in a Server Action or Route Handler. Read more: https://nextjs.org/docs/app/api-reference/functions/cookies#options'
            );
          }
          static callable() {
            throw new ReadonlyRequestCookiesError();
          }
        }
        class RequestCookiesAdapter {
          static seal(cookies) {
            return new Proxy(cookies, {
              get(target, prop, receiver) {
                switch (prop) {
                  case 'clear':
                  case 'delete':
                  case 'set':
                    return ReadonlyRequestCookiesError.callable;
                  default:
                    return _reflect.ReflectAdapter.get(target, prop, receiver);
                }
              },
            });
          }
        }
        const SYMBOL_MODIFY_COOKIE_VALUES = Symbol.for('next.mutated.cookies');
        function getModifiedCookieValues(cookies) {
          const modified = cookies[SYMBOL_MODIFY_COOKIE_VALUES];
          if (!modified || !Array.isArray(modified) || modified.length === 0) {
            return [];
          }
          return modified;
        }
        function appendMutableCookies(headers, mutableCookies) {
          const modifiedCookieValues = getModifiedCookieValues(mutableCookies);
          if (modifiedCookieValues.length === 0) {
            return false;
          }
          // Return a new response that extends the response with
          // the modified cookies as fallbacks. `res` cookies
          // will still take precedence.
          const resCookies = new _cookies.ResponseCookies(headers);
          const returnedCookies = resCookies.getAll();
          // Set the modified cookies as fallbacks.
          for (const cookie of modifiedCookieValues) {
            resCookies.set(cookie);
          }
          // Set the original cookies as the final values.
          for (const cookie of returnedCookies) {
            resCookies.set(cookie);
          }
          return true;
        }
        class MutableRequestCookiesAdapter {
          static wrap(cookies, onUpdateCookies) {
            const responseCookies = new _cookies.ResponseCookies(new Headers());
            for (const cookie of cookies.getAll()) {
              responseCookies.set(cookie);
            }
            let modifiedValues = [];
            const modifiedCookies = new Set();
            const updateResponseCookies = () => {
              // TODO-APP: change method of getting workStore
              const workStore =
                _workasyncstorageexternal.workAsyncStorage.getStore();
              if (workStore) {
                workStore.pathWasRevalidated = true;
              }
              const allCookies = responseCookies.getAll();
              modifiedValues = allCookies.filter((c) =>
                modifiedCookies.has(c.name)
              );
              if (onUpdateCookies) {
                const serializedCookies = [];
                for (const cookie of modifiedValues) {
                  const tempCookies = new _cookies.ResponseCookies(
                    new Headers()
                  );
                  tempCookies.set(cookie);
                  serializedCookies.push(tempCookies.toString());
                }
                onUpdateCookies(serializedCookies);
              }
            };
            const wrappedCookies = new Proxy(responseCookies, {
              get(target, prop, receiver) {
                switch (prop) {
                  // A special symbol to get the modified cookie values
                  case SYMBOL_MODIFY_COOKIE_VALUES:
                    return modifiedValues;
                  // TODO: Throw error if trying to set a cookie after the response
                  // headers have been set.
                  case 'delete':
                    return function (...args) {
                      modifiedCookies.add(
                        typeof args[0] === 'string' ? args[0] : args[0].name
                      );
                      try {
                        target.delete(...args);
                        return wrappedCookies;
                      } finally {
                        updateResponseCookies();
                      }
                    };
                  case 'set':
                    return function (...args) {
                      modifiedCookies.add(
                        typeof args[0] === 'string' ? args[0] : args[0].name
                      );
                      try {
                        target.set(...args);
                        return wrappedCookies;
                      } finally {
                        updateResponseCookies();
                      }
                    };
                  default:
                    return _reflect.ReflectAdapter.get(target, prop, receiver);
                }
              },
            });
            return wrappedCookies;
          }
        }
        function wrapWithMutableAccessCheck(responseCookies) {
          const wrappedCookies = new Proxy(responseCookies, {
            get(target, prop, receiver) {
              switch (prop) {
                case 'delete':
                  return function (...args) {
                    ensureCookiesAreStillMutable('cookies().delete');
                    target.delete(...args);
                    return wrappedCookies;
                  };
                case 'set':
                  return function (...args) {
                    ensureCookiesAreStillMutable('cookies().set');
                    target.set(...args);
                    return wrappedCookies;
                  };
                default:
                  return _reflect.ReflectAdapter.get(target, prop, receiver);
              }
            },
          });
          return wrappedCookies;
        }
        function areCookiesMutableInCurrentPhase(requestStore) {
          return requestStore.phase === 'action';
        }
        /** Ensure that cookies() starts throwing on mutation
         * if we changed phases and can no longer mutate.
         *
         * This can happen when going:
         *   'render' -> 'after'
         *   'action' -> 'render'
         * */ function ensureCookiesAreStillMutable(callingExpression) {
          const requestStore = (0,
          _workunitasyncstorageexternal.getExpectedRequestStore)(
            callingExpression
          );
          if (!areCookiesMutableInCurrentPhase(requestStore)) {
            // TODO: maybe we can give a more precise error message based on callingExpression?
            throw new ReadonlyRequestCookiesError();
          }
        }
        function responseCookiesToRequestCookies(responseCookies) {
          const requestCookies = new _cookies.RequestCookies(new Headers());
          for (const cookie of responseCookies.getAll()) {
            requestCookies.set(cookie);
          }
          return requestCookies;
        } //# sourceMappingURL=request-cookies.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/hooks-server-context.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            DynamicServerError: null,
            isDynamicServerError: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          DynamicServerError: function () {
            return DynamicServerError;
          },
          isDynamicServerError: function () {
            return isDynamicServerError;
          },
        });
        const DYNAMIC_ERROR_CODE = 'DYNAMIC_SERVER_USAGE';
        class DynamicServerError extends Error {
          constructor(description) {
            super('Dynamic server usage: ' + description),
              (this.description = description),
              (this.digest = DYNAMIC_ERROR_CODE);
          }
        }
        function isDynamicServerError(err) {
          if (
            typeof err !== 'object' ||
            err === null ||
            !('digest' in err) ||
            typeof err.digest !== 'string'
          ) {
            return false;
          }
          return err.digest === DYNAMIC_ERROR_CODE;
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=hooks-server-context.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/static-generation-bailout.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            StaticGenBailoutError: null,
            isStaticGenBailoutError: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          StaticGenBailoutError: function () {
            return StaticGenBailoutError;
          },
          isStaticGenBailoutError: function () {
            return isStaticGenBailoutError;
          },
        });
        const NEXT_STATIC_GEN_BAILOUT = 'NEXT_STATIC_GEN_BAILOUT';
        class StaticGenBailoutError extends Error {
          constructor(...args) {
            super(...args), (this.code = NEXT_STATIC_GEN_BAILOUT);
          }
        }
        function isStaticGenBailoutError(error) {
          if (
            typeof error !== 'object' ||
            error === null ||
            !('code' in error)
          ) {
            return false;
          }
          return error.code === NEXT_STATIC_GEN_BAILOUT;
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=static-generation-bailout.js.map
      }
    },
  '[project]/node_modules/next/dist/server/dynamic-rendering-utils.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            isHangingPromiseRejectionError: null,
            makeHangingPromise: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          isHangingPromiseRejectionError: function () {
            return isHangingPromiseRejectionError;
          },
          makeHangingPromise: function () {
            return makeHangingPromise;
          },
        });
        function isHangingPromiseRejectionError(err) {
          if (typeof err !== 'object' || err === null || !('digest' in err)) {
            return false;
          }
          return err.digest === HANGING_PROMISE_REJECTION;
        }
        const HANGING_PROMISE_REJECTION = 'HANGING_PROMISE_REJECTION';
        class HangingPromiseRejectionError extends Error {
          constructor(expression) {
            super(
              `During prerendering, ${expression} rejects when the prerender is complete. Typically these errors are handled by React but if you move ${expression} to a different context by using \`setTimeout\`, \`after\`, or similar functions you may observe this error and you should handle it in that context.`
            ),
              (this.expression = expression),
              (this.digest = HANGING_PROMISE_REJECTION);
          }
        }
        const abortListenersBySignal = new WeakMap();
        function makeHangingPromise(signal, expression) {
          if (signal.aborted) {
            return Promise.reject(new HangingPromiseRejectionError(expression));
          } else {
            const hangingPromise = new Promise((_, reject) => {
              const boundRejection = reject.bind(
                null,
                new HangingPromiseRejectionError(expression)
              );
              let currentListeners = abortListenersBySignal.get(signal);
              if (currentListeners) {
                currentListeners.push(boundRejection);
              } else {
                const listeners = [boundRejection];
                abortListenersBySignal.set(signal, listeners);
                signal.addEventListener(
                  'abort',
                  () => {
                    for (let i = 0; i < listeners.length; i++) {
                      listeners[i]();
                    }
                  },
                  {
                    once: true,
                  }
                );
              }
            });
            // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so
            // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct
            // your own promise out of it you'll need to ensure you handle the error when it rejects.
            hangingPromise.catch(ignoreReject);
            return hangingPromise;
          }
        }
        function ignoreReject() {} //# sourceMappingURL=dynamic-rendering-utils.js.map
      }
    },
  '[project]/node_modules/next/dist/lib/metadata/metadata-constants.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            METADATA_BOUNDARY_NAME: null,
            OUTLET_BOUNDARY_NAME: null,
            VIEWPORT_BOUNDARY_NAME: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          METADATA_BOUNDARY_NAME: function () {
            return METADATA_BOUNDARY_NAME;
          },
          OUTLET_BOUNDARY_NAME: function () {
            return OUTLET_BOUNDARY_NAME;
          },
          VIEWPORT_BOUNDARY_NAME: function () {
            return VIEWPORT_BOUNDARY_NAME;
          },
        });
        const METADATA_BOUNDARY_NAME = '__next_metadata_boundary__';
        const VIEWPORT_BOUNDARY_NAME = '__next_viewport_boundary__';
        const OUTLET_BOUNDARY_NAME = '__next_outlet_boundary__'; //# sourceMappingURL=metadata-constants.js.map
      }
    },
  '[project]/node_modules/next/dist/lib/scheduler.js [app-rsc] (ecmascript)': (
    __turbopack_context__
  ) => {
    'use strict';

    var { m: module, e: exports } = __turbopack_context__;
    {
      Object.defineProperty(exports, '__esModule', {
        value: true,
      });
      0 &&
        (module.exports = {
          atLeastOneTask: null,
          scheduleImmediate: null,
          scheduleOnNextTick: null,
          waitAtLeastOneReactRenderTask: null,
        });
      function _export(target, all) {
        for (var name in all)
          Object.defineProperty(target, name, {
            enumerable: true,
            get: all[name],
          });
      }
      _export(exports, {
        atLeastOneTask: function () {
          return atLeastOneTask;
        },
        scheduleImmediate: function () {
          return scheduleImmediate;
        },
        scheduleOnNextTick: function () {
          return scheduleOnNextTick;
        },
        waitAtLeastOneReactRenderTask: function () {
          return waitAtLeastOneReactRenderTask;
        },
      });
      const scheduleOnNextTick = (cb) => {
        // We use Promise.resolve().then() here so that the operation is scheduled at
        // the end of the promise job queue, we then add it to the next process tick
        // to ensure it's evaluated afterwards.
        //
        // This was inspired by the implementation of the DataLoader interface: https://github.com/graphql/dataloader/blob/d336bd15282664e0be4b4a657cb796f09bafbc6b/src/index.js#L213-L255
        //
        Promise.resolve().then(() => {
          if (('TURBOPACK compile-time falsy', 0));
          else {
            //TURBOPACK unreachable
            process.nextTick(cb);
          }
        });
      };
      const scheduleImmediate = (cb) => {
        if (('TURBOPACK compile-time falsy', 0));
        else {
          //TURBOPACK unreachable
          setImmediate(cb);
        }
      };
      function atLeastOneTask() {
        return new Promise((resolve) => scheduleImmediate(resolve));
      }
      function waitAtLeastOneReactRenderTask() {
        if (('TURBOPACK compile-time falsy', 0));
        else {
          //TURBOPACK unreachable
          return new Promise((r) => setImmediate(r));
        }
      } //# sourceMappingURL=scheduler.js.map
    }
  },
  '[project]/node_modules/next/dist/server/app-render/dynamic-rendering.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        /**
         * The functions provided by this module are used to communicate certain properties
         * about the currently running code so that Next.js can make decisions on how to handle
         * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.
         *
         * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.
         * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts
         * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of
         * Dynamic indications.
         *
         * The first is simply an intention to be dynamic. unstable_noStore is an example of this where
         * the currently executing code simply declares that the current scope is dynamic but if you use it
         * inside unstable_cache it can still be cached. This type of indication can be removed if we ever
         * make the default dynamic to begin with because the only way you would ever be static is inside
         * a cache scope which this indication does not affect.
         *
         * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic
         * because it means that it is inappropriate to cache this at all. using a dynamic data source inside
         * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should
         * read that data outside the cache and pass it in as an argument to the cached function.
         */ Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            Postpone: null,
            PreludeState: null,
            abortAndThrowOnSynchronousRequestDataAccess: null,
            abortOnSynchronousPlatformIOAccess: null,
            accessedDynamicData: null,
            annotateDynamicAccess: null,
            consumeDynamicAccess: null,
            createDynamicTrackingState: null,
            createDynamicValidationState: null,
            createHangingInputAbortSignal: null,
            createPostponedAbortSignal: null,
            formatDynamicAPIAccesses: null,
            getFirstDynamicReason: null,
            isDynamicPostpone: null,
            isPrerenderInterruptedError: null,
            markCurrentScopeAsDynamic: null,
            postponeWithTracking: null,
            throwIfDisallowedDynamic: null,
            throwToInterruptStaticGeneration: null,
            trackAllowedDynamicAccess: null,
            trackDynamicDataInDynamicRender: null,
            trackFallbackParamAccessed: null,
            trackSynchronousPlatformIOAccessInDev: null,
            trackSynchronousRequestDataAccessInDev: null,
            useDynamicRouteParams: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          Postpone: function () {
            return Postpone;
          },
          PreludeState: function () {
            return PreludeState;
          },
          abortAndThrowOnSynchronousRequestDataAccess: function () {
            return abortAndThrowOnSynchronousRequestDataAccess;
          },
          abortOnSynchronousPlatformIOAccess: function () {
            return abortOnSynchronousPlatformIOAccess;
          },
          accessedDynamicData: function () {
            return accessedDynamicData;
          },
          annotateDynamicAccess: function () {
            return annotateDynamicAccess;
          },
          consumeDynamicAccess: function () {
            return consumeDynamicAccess;
          },
          createDynamicTrackingState: function () {
            return createDynamicTrackingState;
          },
          createDynamicValidationState: function () {
            return createDynamicValidationState;
          },
          createHangingInputAbortSignal: function () {
            return createHangingInputAbortSignal;
          },
          createPostponedAbortSignal: function () {
            return createPostponedAbortSignal;
          },
          formatDynamicAPIAccesses: function () {
            return formatDynamicAPIAccesses;
          },
          getFirstDynamicReason: function () {
            return getFirstDynamicReason;
          },
          isDynamicPostpone: function () {
            return isDynamicPostpone;
          },
          isPrerenderInterruptedError: function () {
            return isPrerenderInterruptedError;
          },
          markCurrentScopeAsDynamic: function () {
            return markCurrentScopeAsDynamic;
          },
          postponeWithTracking: function () {
            return postponeWithTracking;
          },
          throwIfDisallowedDynamic: function () {
            return throwIfDisallowedDynamic;
          },
          throwToInterruptStaticGeneration: function () {
            return throwToInterruptStaticGeneration;
          },
          trackAllowedDynamicAccess: function () {
            return trackAllowedDynamicAccess;
          },
          trackDynamicDataInDynamicRender: function () {
            return trackDynamicDataInDynamicRender;
          },
          trackFallbackParamAccessed: function () {
            return trackFallbackParamAccessed;
          },
          trackSynchronousPlatformIOAccessInDev: function () {
            return trackSynchronousPlatformIOAccessInDev;
          },
          trackSynchronousRequestDataAccessInDev: function () {
            return trackSynchronousRequestDataAccessInDev;
          },
          useDynamicRouteParams: function () {
            return useDynamicRouteParams;
          },
        });
        const _react = /*#__PURE__*/ _interop_require_default(
          __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
          )
        );
        const _hooksservercontext = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/hooks-server-context.js [app-rsc] (ecmascript)'
        );
        const _staticgenerationbailout = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/static-generation-bailout.js [app-rsc] (ecmascript)'
        );
        const _workunitasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/work-unit-async-storage.external.js [external] (next/dist/server/app-render/work-unit-async-storage.external.js, cjs)'
        );
        const _workasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/work-async-storage.external.js [external] (next/dist/server/app-render/work-async-storage.external.js, cjs)'
        );
        const _dynamicrenderingutils = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/dynamic-rendering-utils.js [app-rsc] (ecmascript)'
        );
        const _metadataconstants = __turbopack_context__.r(
          '[project]/node_modules/next/dist/lib/metadata/metadata-constants.js [app-rsc] (ecmascript)'
        );
        const _scheduler = __turbopack_context__.r(
          '[project]/node_modules/next/dist/lib/scheduler.js [app-rsc] (ecmascript)'
        );
        function _interop_require_default(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj,
              };
        }
        const hasPostpone =
          typeof _react.default.unstable_postpone === 'function';
        function createDynamicTrackingState(isDebugDynamicAccesses) {
          return {
            isDebugDynamicAccesses,
            dynamicAccesses: [],
            syncDynamicErrorWithStack: null,
          };
        }
        function createDynamicValidationState() {
          return {
            hasSuspenseAboveBody: false,
            hasDynamicMetadata: false,
            hasDynamicViewport: false,
            hasAllowedDynamic: false,
            dynamicErrors: [],
          };
        }
        function getFirstDynamicReason(trackingState) {
          var _trackingState_dynamicAccesses_;
          return (_trackingState_dynamicAccesses_ =
            trackingState.dynamicAccesses[0]) == null
            ? void 0
            : _trackingState_dynamicAccesses_.expression;
        }
        function markCurrentScopeAsDynamic(store, workUnitStore, expression) {
          if (workUnitStore) {
            if (
              workUnitStore.type === 'cache' ||
              workUnitStore.type === 'unstable-cache'
            ) {
              // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
              // creates a cache boundary. This is subtly different from reading a dynamic data source which is
              // forbidden inside a cache scope.
              return;
            }
          }
          // If we're forcing dynamic rendering or we're forcing static rendering, we
          // don't need to do anything here because the entire page is already dynamic
          // or it's static and it should not throw or postpone here.
          if (store.forceDynamic || store.forceStatic) return;
          if (store.dynamicShouldError) {
            throw Object.defineProperty(
              new _staticgenerationbailout.StaticGenBailoutError(
                `Route ${store.route} with \`dynamic = "error"\` couldn't be rendered statically because it used \`${expression}\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E553',
                enumerable: false,
                configurable: true,
              }
            );
          }
          if (workUnitStore) {
            if (workUnitStore.type === 'prerender-ppr') {
              postponeWithTracking(
                store.route,
                expression,
                workUnitStore.dynamicTracking
              );
            } else if (workUnitStore.type === 'prerender-legacy') {
              workUnitStore.revalidate = 0;
              // We aren't prerendering but we are generating a static page. We need to bail out of static generation
              const err = Object.defineProperty(
                new _hooksservercontext.DynamicServerError(
                  `Route ${store.route} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`
                ),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E550',
                  enumerable: false,
                  configurable: true,
                }
              );
              store.dynamicUsageDescription = expression;
              store.dynamicUsageStack = err.stack;
              throw err;
            } else if (
              ('TURBOPACK compile-time value', 'development') ===
                'development' &&
              workUnitStore &&
              workUnitStore.type === 'request'
            ) {
              workUnitStore.usedDynamic = true;
            }
          }
        }
        function trackFallbackParamAccessed(store, expression) {
          const prerenderStore =
            _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
          if (!prerenderStore || prerenderStore.type !== 'prerender-ppr')
            return;
          postponeWithTracking(
            store.route,
            expression,
            prerenderStore.dynamicTracking
          );
        }
        function throwToInterruptStaticGeneration(
          expression,
          store,
          prerenderStore
        ) {
          // We aren't prerendering but we are generating a static page. We need to bail out of static generation
          const err = Object.defineProperty(
            new _hooksservercontext.DynamicServerError(
              `Route ${store.route} couldn't be rendered statically because it used \`${expression}\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`
            ),
            '__NEXT_ERROR_CODE',
            {
              value: 'E558',
              enumerable: false,
              configurable: true,
            }
          );
          prerenderStore.revalidate = 0;
          store.dynamicUsageDescription = expression;
          store.dynamicUsageStack = err.stack;
          throw err;
        }
        function trackDynamicDataInDynamicRender(_store, workUnitStore) {
          if (workUnitStore) {
            if (
              workUnitStore.type === 'cache' ||
              workUnitStore.type === 'unstable-cache'
            ) {
              // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope
              // creates a cache boundary. This is subtly different from reading a dynamic data source which is
              // forbidden inside a cache scope.
              return;
            }
            // TODO: it makes no sense to have these work unit store types during a dev render.
            if (
              workUnitStore.type === 'prerender' ||
              workUnitStore.type === 'prerender-client' ||
              workUnitStore.type === 'prerender-legacy'
            ) {
              workUnitStore.revalidate = 0;
            }
            if (
              ('TURBOPACK compile-time value', 'development') ===
                'development' &&
              workUnitStore.type === 'request'
            ) {
              workUnitStore.usedDynamic = true;
            }
          }
        }
        function abortOnSynchronousDynamicDataAccess(
          route,
          expression,
          prerenderStore
        ) {
          const reason = `Route ${route} needs to bail out of prerendering at this point because it used ${expression}.`;
          const error = createPrerenderInterruptedError(reason);
          prerenderStore.controller.abort(error);
          const dynamicTracking = prerenderStore.dynamicTracking;
          if (dynamicTracking) {
            dynamicTracking.dynamicAccesses.push({
              // When we aren't debugging, we don't need to create another error for the
              // stack trace.
              stack: dynamicTracking.isDebugDynamicAccesses
                ? new Error().stack
                : undefined,
              expression,
            });
          }
        }
        function abortOnSynchronousPlatformIOAccess(
          route,
          expression,
          errorWithStack,
          prerenderStore
        ) {
          const dynamicTracking = prerenderStore.dynamicTracking;
          abortOnSynchronousDynamicDataAccess(
            route,
            expression,
            prerenderStore
          );
          // It is important that we set this tracking value after aborting. Aborts are executed
          // synchronously except for the case where you abort during render itself. By setting this
          // value late we can use it to determine if any of the aborted tasks are the task that
          // called the sync IO expression in the first place.
          if (dynamicTracking) {
            if (dynamicTracking.syncDynamicErrorWithStack === null) {
              dynamicTracking.syncDynamicErrorWithStack = errorWithStack;
            }
          }
        }
        function trackSynchronousPlatformIOAccessInDev(requestStore) {
          // We don't actually have a controller to abort but we do the semantic equivalent by
          // advancing the request store out of prerender mode
          requestStore.prerenderPhase = false;
        }
        function abortAndThrowOnSynchronousRequestDataAccess(
          route,
          expression,
          errorWithStack,
          prerenderStore
        ) {
          const prerenderSignal = prerenderStore.controller.signal;
          if (prerenderSignal.aborted === false) {
            // TODO it would be better to move this aborted check into the callsite so we can avoid making
            // the error object when it isn't relevant to the aborting of the prerender however
            // since we need the throw semantics regardless of whether we abort it is easier to land
            // this way. See how this was handled with `abortOnSynchronousPlatformIOAccess` for a closer
            // to ideal implementation
            abortOnSynchronousDynamicDataAccess(
              route,
              expression,
              prerenderStore
            );
            // It is important that we set this tracking value after aborting. Aborts are executed
            // synchronously except for the case where you abort during render itself. By setting this
            // value late we can use it to determine if any of the aborted tasks are the task that
            // called the sync IO expression in the first place.
            const dynamicTracking = prerenderStore.dynamicTracking;
            if (dynamicTracking) {
              if (dynamicTracking.syncDynamicErrorWithStack === null) {
                dynamicTracking.syncDynamicErrorWithStack = errorWithStack;
              }
            }
          }
          throw createPrerenderInterruptedError(
            `Route ${route} needs to bail out of prerendering at this point because it used ${expression}.`
          );
        }
        const trackSynchronousRequestDataAccessInDev =
          trackSynchronousPlatformIOAccessInDev;
        function Postpone({ reason, route }) {
          const prerenderStore =
            _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
          const dynamicTracking =
            prerenderStore && prerenderStore.type === 'prerender-ppr'
              ? prerenderStore.dynamicTracking
              : null;
          postponeWithTracking(route, reason, dynamicTracking);
        }
        function postponeWithTracking(route, expression, dynamicTracking) {
          assertPostpone();
          if (dynamicTracking) {
            dynamicTracking.dynamicAccesses.push({
              // When we aren't debugging, we don't need to create another error for the
              // stack trace.
              stack: dynamicTracking.isDebugDynamicAccesses
                ? new Error().stack
                : undefined,
              expression,
            });
          }
          _react.default.unstable_postpone(
            createPostponeReason(route, expression)
          );
        }
        function createPostponeReason(route, expression) {
          return (
            `Route ${route} needs to bail out of prerendering at this point because it used ${expression}. ` +
            `React throws this special object to indicate where. It should not be caught by ` +
            `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`
          );
        }
        function isDynamicPostpone(err) {
          if (
            typeof err === 'object' &&
            err !== null &&
            typeof err.message === 'string'
          ) {
            return isDynamicPostponeReason(err.message);
          }
          return false;
        }
        function isDynamicPostponeReason(reason) {
          return (
            reason.includes(
              'needs to bail out of prerendering at this point because it used'
            ) &&
            reason.includes(
              'Learn more: https://nextjs.org/docs/messages/ppr-caught-error'
            )
          );
        }
        if (
          isDynamicPostponeReason(createPostponeReason('%%%', '^^^')) === false
        ) {
          throw Object.defineProperty(
            new Error(
              'Invariant: isDynamicPostpone misidentified a postpone reason. This is a bug in Next.js'
            ),
            '__NEXT_ERROR_CODE',
            {
              value: 'E296',
              enumerable: false,
              configurable: true,
            }
          );
        }
        const NEXT_PRERENDER_INTERRUPTED = 'NEXT_PRERENDER_INTERRUPTED';
        function createPrerenderInterruptedError(message) {
          const error = Object.defineProperty(
            new Error(message),
            '__NEXT_ERROR_CODE',
            {
              value: 'E394',
              enumerable: false,
              configurable: true,
            }
          );
          error.digest = NEXT_PRERENDER_INTERRUPTED;
          return error;
        }
        function isPrerenderInterruptedError(error) {
          return (
            typeof error === 'object' &&
            error !== null &&
            error.digest === NEXT_PRERENDER_INTERRUPTED &&
            'name' in error &&
            'message' in error &&
            error instanceof Error
          );
        }
        function accessedDynamicData(dynamicAccesses) {
          return dynamicAccesses.length > 0;
        }
        function consumeDynamicAccess(serverDynamic, clientDynamic) {
          // We mutate because we only call this once we are no longer writing
          // to the dynamicTrackingState and it's more efficient than creating a new
          // array.
          serverDynamic.dynamicAccesses.push(...clientDynamic.dynamicAccesses);
          return serverDynamic.dynamicAccesses;
        }
        function formatDynamicAPIAccesses(dynamicAccesses) {
          return dynamicAccesses
            .filter(
              (access) =>
                typeof access.stack === 'string' && access.stack.length > 0
            )
            .map(({ expression, stack }) => {
              stack = stack
                .split('\n') // Remove the "Error: " prefix from the first line of the stack trace as
                // well as the first 4 lines of the stack trace which is the distance
                // from the user code and the `new Error().stack` call.
                .slice(4)
                .filter((line) => {
                  // Exclude Next.js internals from the stack trace.
                  if (line.includes('node_modules/next/')) {
                    return false;
                  }
                  // Exclude anonymous functions from the stack trace.
                  if (line.includes(' (<anonymous>)')) {
                    return false;
                  }
                  // Exclude Node.js internals from the stack trace.
                  if (line.includes(' (node:')) {
                    return false;
                  }
                  return true;
                })
                .join('\n');
              return `Dynamic API Usage Debug - ${expression}:\n${stack}`;
            });
        }
        function assertPostpone() {
          if (!hasPostpone) {
            throw Object.defineProperty(
              new Error(
                `Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E224',
                enumerable: false,
                configurable: true,
              }
            );
          }
        }
        function createPostponedAbortSignal(reason) {
          assertPostpone();
          const controller = new AbortController();
          // We get our hands on a postpone instance by calling postpone and catching the throw
          try {
            _react.default.unstable_postpone(reason);
          } catch (x) {
            controller.abort(x);
          }
          return controller.signal;
        }
        function createHangingInputAbortSignal(workUnitStore) {
          const controller = new AbortController();
          if (workUnitStore.cacheSignal) {
            // If we have a cacheSignal it means we're in a prospective render. If the input
            // we're waiting on is coming from another cache, we do want to wait for it so that
            // we can resolve this cache entry too.
            workUnitStore.cacheSignal.inputReady().then(() => {
              controller.abort();
            });
          } else {
            // Otherwise we're in the final render and we should already have all our caches
            // filled. We might still be waiting on some microtasks so we wait one tick before
            // giving up. When we give up, we still want to render the content of this cache
            // as deeply as we can so that we can suspend as deeply as possible in the tree
            // or not at all if we don't end up waiting for the input.
            (0, _scheduler.scheduleOnNextTick)(() => controller.abort());
          }
          return controller.signal;
        }
        function annotateDynamicAccess(expression, prerenderStore) {
          const dynamicTracking = prerenderStore.dynamicTracking;
          if (dynamicTracking) {
            dynamicTracking.dynamicAccesses.push({
              stack: dynamicTracking.isDebugDynamicAccesses
                ? new Error().stack
                : undefined,
              expression,
            });
          }
        }
        function useDynamicRouteParams(expression) {
          const workStore =
            _workasyncstorageexternal.workAsyncStorage.getStore();
          if (
            workStore &&
            workStore.isStaticGeneration &&
            workStore.fallbackRouteParams &&
            workStore.fallbackRouteParams.size > 0
          ) {
            // There are fallback route params, we should track these as dynamic
            // accesses.
            const workUnitStore =
              _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
            if (workUnitStore) {
              // We're prerendering with dynamicIO or PPR or both
              if (workUnitStore.type === 'prerender-client') {
                // We are in a prerender with dynamicIO semantics
                // We are going to hang here and never resolve. This will cause the currently
                // rendering component to effectively be a dynamic hole
                _react.default.use(
                  (0, _dynamicrenderingutils.makeHangingPromise)(
                    workUnitStore.renderSignal,
                    expression
                  )
                );
              } else if (workUnitStore.type === 'prerender-ppr') {
                // We're prerendering with PPR
                postponeWithTracking(
                  workStore.route,
                  expression,
                  workUnitStore.dynamicTracking
                );
              } else if (workUnitStore.type === 'prerender-legacy') {
                throwToInterruptStaticGeneration(
                  expression,
                  workStore,
                  workUnitStore
                );
              }
            }
          }
        }
        const hasSuspenseRegex = /\n\s+at Suspense \(<anonymous>\)/;
        const hasSuspenseAfterBodyOrHtmlRegex =
          /\n\s+at (?:body|html) \(<anonymous>\)[\s\S]*?\n\s+at Suspense \(<anonymous>\)/;
        const hasMetadataRegex = new RegExp(
          `\\n\\s+at ${_metadataconstants.METADATA_BOUNDARY_NAME}[\\n\\s]`
        );
        const hasViewportRegex = new RegExp(
          `\\n\\s+at ${_metadataconstants.VIEWPORT_BOUNDARY_NAME}[\\n\\s]`
        );
        const hasOutletRegex = new RegExp(
          `\\n\\s+at ${_metadataconstants.OUTLET_BOUNDARY_NAME}[\\n\\s]`
        );
        function trackAllowedDynamicAccess(
          workStore,
          componentStack,
          dynamicValidation,
          clientDynamic
        ) {
          if (hasOutletRegex.test(componentStack)) {
            // We don't need to track that this is dynamic. It is only so when something else is also dynamic.
            return;
          } else if (hasMetadataRegex.test(componentStack)) {
            dynamicValidation.hasDynamicMetadata = true;
            return;
          } else if (hasViewportRegex.test(componentStack)) {
            dynamicValidation.hasDynamicViewport = true;
            return;
          } else if (hasSuspenseAfterBodyOrHtmlRegex.test(componentStack)) {
            // This prerender has a Suspense boundary above the body which
            // effectively opts the page into allowing 100% dynamic rendering
            dynamicValidation.hasAllowedDynamic = true;
            dynamicValidation.hasSuspenseAboveBody = true;
            return;
          } else if (hasSuspenseRegex.test(componentStack)) {
            // this error had a Suspense boundary above it so we don't need to report it as a source
            // of disallowed
            dynamicValidation.hasAllowedDynamic = true;
            return;
          } else if (clientDynamic.syncDynamicErrorWithStack) {
            // This task was the task that called the sync error.
            dynamicValidation.dynamicErrors.push(
              clientDynamic.syncDynamicErrorWithStack
            );
            return;
          } else {
            const message = `Route "${workStore.route}": A component accessed data, headers, params, searchParams, or a short-lived cache without a Suspense boundary nor a "use cache" above it. See more info: https://nextjs.org/docs/messages/next-prerender-missing-suspense`;
            const error = createErrorWithComponentOrOwnerStack(
              message,
              componentStack
            );
            dynamicValidation.dynamicErrors.push(error);
            return;
          }
        }
        /**
         * In dev mode, we prefer using the owner stack, otherwise the provided
         * component stack is used.
         */ function createErrorWithComponentOrOwnerStack(
          message,
          componentStack
        ) {
          const ownerStack =
            ('TURBOPACK compile-time value', 'development') !== 'production' &&
            _react.default.captureOwnerStack
              ? _react.default.captureOwnerStack()
              : null;
          const error = Object.defineProperty(
            new Error(message),
            '__NEXT_ERROR_CODE',
            {
              value: 'E394',
              enumerable: false,
              configurable: true,
            }
          );
          error.stack =
            error.name + ': ' + message + (ownerStack ?? componentStack);
          return error;
        }
        var PreludeState = /*#__PURE__*/ (function (PreludeState) {
          PreludeState[(PreludeState['Full'] = 0)] = 'Full';
          PreludeState[(PreludeState['Empty'] = 1)] = 'Empty';
          PreludeState[(PreludeState['Errored'] = 2)] = 'Errored';
          return PreludeState;
        })({});
        function logDisallowedDynamicError(workStore, error) {
          console.error(error);
          if (!workStore.dev) {
            if (workStore.hasReadableErrorStacks) {
              console.error(
                `To get a more detailed stack trace and pinpoint the issue, start the app in development mode by running \`next dev\`, then open "${workStore.route}" in your browser to investigate the error.`
              );
            } else {
              console.error(`To get a more detailed stack trace and pinpoint the issue, try one of the following:
  - Start the app in development mode by running \`next dev\`, then open "${workStore.route}" in your browser to investigate the error.
  - Rerun the production build with \`next build --debug-prerender\` to generate better stack traces.`);
            }
          }
        }
        function throwIfDisallowedDynamic(
          workStore,
          prelude,
          dynamicValidation,
          serverDynamic
        ) {
          if (workStore.invalidDynamicUsageError) {
            logDisallowedDynamicError(
              workStore,
              workStore.invalidDynamicUsageError
            );
            throw new _staticgenerationbailout.StaticGenBailoutError();
          }
          if (prelude !== 0) {
            if (dynamicValidation.hasSuspenseAboveBody) {
              // This route has opted into allowing fully dynamic rendering
              // by including a Suspense boundary above the body. In this case
              // a lack of a shell is not considered disallowed so we simply return
              return;
            }
            if (serverDynamic.syncDynamicErrorWithStack) {
              // There is no shell and the server did something sync dynamic likely
              // leading to an early termination of the prerender before the shell
              // could be completed. We terminate the build/validating render.
              logDisallowedDynamicError(
                workStore,
                serverDynamic.syncDynamicErrorWithStack
              );
              throw new _staticgenerationbailout.StaticGenBailoutError();
            }
            // We didn't have any sync bailouts but there may be user code which
            // blocked the root. We would have captured these during the prerender
            // and can log them here and then terminate the build/validating render
            const dynamicErrors = dynamicValidation.dynamicErrors;
            if (dynamicErrors.length > 0) {
              for (let i = 0; i < dynamicErrors.length; i++) {
                logDisallowedDynamicError(workStore, dynamicErrors[i]);
              }
              throw new _staticgenerationbailout.StaticGenBailoutError();
            }
            // If we got this far then the only other thing that could be blocking
            // the root is dynamic Viewport. If this is dynamic then
            // you need to opt into that by adding a Suspense boundary above the body
            // to indicate your are ok with fully dynamic rendering.
            if (dynamicValidation.hasDynamicViewport) {
              console.error(
                `Route "${workStore.route}" has a \`generateViewport\` that depends on Request data (\`cookies()\`, etc...) or uncached external data (\`fetch(...)\`, etc...) without explicitly allowing fully dynamic rendering. See more info here: https://nextjs.org/docs/messages/next-prerender-dynamic-viewport`
              );
              throw new _staticgenerationbailout.StaticGenBailoutError();
            }
            if (prelude === 1) {
              // If we ever get this far then we messed up the tracking of invalid dynamic.
              // We still adhere to the constraint that you must produce a shell but invite the
              // user to report this as a bug in Next.js.
              console.error(
                `Route "${workStore.route}" did not produce a static shell and Next.js was unable to determine a reason. This is a bug in Next.js.`
              );
              throw new _staticgenerationbailout.StaticGenBailoutError();
            }
          } else {
            if (
              dynamicValidation.hasAllowedDynamic === false &&
              dynamicValidation.hasDynamicMetadata
            ) {
              console.error(
                `Route "${workStore.route}" has a \`generateMetadata\` that depends on Request data (\`cookies()\`, etc...) or uncached external data (\`fetch(...)\`, etc...) when the rest of the route does not. See more info here: https://nextjs.org/docs/messages/next-prerender-dynamic-metadata`
              );
              throw new _staticgenerationbailout.StaticGenBailoutError();
            }
          }
        } //# sourceMappingURL=dynamic-rendering.js.map
      }
    },
  '[project]/node_modules/next/dist/server/create-deduped-by-callsite-server-error-logger.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(
          exports,
          'createDedupedByCallsiteServerErrorLoggerDev',
          {
            enumerable: true,
            get: function () {
              return createDedupedByCallsiteServerErrorLoggerDev;
            },
          }
        );
        const _react = /*#__PURE__*/ _interop_require_wildcard(
          __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
          )
        );
        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== 'function') return null;
          var cacheBabelInterop = new WeakMap();
          var cacheNodeInterop = new WeakMap();
          return (_getRequireWildcardCache = function (nodeInterop) {
            return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }
        function _interop_require_wildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (
            obj === null ||
            (typeof obj !== 'object' && typeof obj !== 'function')
          ) {
            return {
              default: obj,
            };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {
            __proto__: null,
          };
          var hasPropertyDescriptor =
            Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (
              key !== 'default' &&
              Object.prototype.hasOwnProperty.call(obj, key)
            ) {
              var desc = hasPropertyDescriptor
                ? Object.getOwnPropertyDescriptor(obj, key)
                : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj.default = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }
        const errorRef = {
          current: null,
        };
        // React.cache is currently only available in canary/experimental React channels.
        const cache =
          typeof _react.cache === 'function' ? _react.cache : (fn) => fn;
        // When Dynamic IO is enabled, we record these as errors so that they
        // are captured by the dev overlay as it's more critical to fix these
        // when enabled.
        const logErrorOrWarn = ('TURBOPACK compile-time falsy', 0)
          ? 'TURBOPACK unreachable'
          : console.warn;
        // We don't want to dedupe across requests.
        // The developer might've just attempted to fix the warning so we should warn again if it still happens.
        const flushCurrentErrorIfNew = cache((key) => {
          try {
            logErrorOrWarn(errorRef.current);
          } finally {
            errorRef.current = null;
          }
        });
        function createDedupedByCallsiteServerErrorLoggerDev(getMessage) {
          return function logDedupedError(...args) {
            const message = getMessage(...args);
            if (('TURBOPACK compile-time truthy', 1)) {
              var _stack;
              const callStackFrames =
                (_stack = new Error().stack) == null
                  ? void 0
                  : _stack.split('\n');
              if (callStackFrames === undefined || callStackFrames.length < 4) {
                logErrorOrWarn(message);
              } else {
                // Error:
                //   logDedupedError
                //   asyncApiBeingAccessedSynchronously
                //   <userland callsite>
                // TODO: This breaks if sourcemaps with ignore lists are enabled.
                const key = callStackFrames[4];
                errorRef.current = message;
                flushCurrentErrorIfNew(key);
              }
            } //TURBOPACK unreachable
            else;
          };
        } //# sourceMappingURL=create-deduped-by-callsite-server-error-logger.js.map
      }
    },
  '[project]/node_modules/next/dist/server/request/utils.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            isRequestAPICallableInsideAfter: null,
            throwForSearchParamsAccessInUseCache: null,
            throwWithStaticGenerationBailoutError: null,
            throwWithStaticGenerationBailoutErrorWithDynamicError: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          isRequestAPICallableInsideAfter: function () {
            return isRequestAPICallableInsideAfter;
          },
          throwForSearchParamsAccessInUseCache: function () {
            return throwForSearchParamsAccessInUseCache;
          },
          throwWithStaticGenerationBailoutError: function () {
            return throwWithStaticGenerationBailoutError;
          },
          throwWithStaticGenerationBailoutErrorWithDynamicError: function () {
            return throwWithStaticGenerationBailoutErrorWithDynamicError;
          },
        });
        const _staticgenerationbailout = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/static-generation-bailout.js [app-rsc] (ecmascript)'
        );
        const _aftertaskasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/after-task-async-storage.external.js [external] (next/dist/server/app-render/after-task-async-storage.external.js, cjs)'
        );
        function throwWithStaticGenerationBailoutError(route, expression) {
          throw Object.defineProperty(
            new _staticgenerationbailout.StaticGenBailoutError(
              `Route ${route} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`
            ),
            '__NEXT_ERROR_CODE',
            {
              value: 'E576',
              enumerable: false,
              configurable: true,
            }
          );
        }
        function throwWithStaticGenerationBailoutErrorWithDynamicError(
          route,
          expression
        ) {
          throw Object.defineProperty(
            new _staticgenerationbailout.StaticGenBailoutError(
              `Route ${route} with \`dynamic = "error"\` couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`
            ),
            '__NEXT_ERROR_CODE',
            {
              value: 'E543',
              enumerable: false,
              configurable: true,
            }
          );
        }
        function throwForSearchParamsAccessInUseCache(
          workStore,
          constructorOpt
        ) {
          const error = Object.defineProperty(
            new Error(
              `Route ${workStore.route} used "searchParams" inside "use cache". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "searchParams" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache`
            ),
            '__NEXT_ERROR_CODE',
            {
              value: 'E634',
              enumerable: false,
              configurable: true,
            }
          );
          Error.captureStackTrace(error, constructorOpt);
          workStore.invalidDynamicUsageError ??= error;
          throw error;
        }
        function isRequestAPICallableInsideAfter() {
          const afterTaskStore =
            _aftertaskasyncstorageexternal.afterTaskAsyncStorage.getStore();
          return (
            (afterTaskStore == null
              ? void 0
              : afterTaskStore.rootTaskSpawnPhase) === 'action'
          );
        } //# sourceMappingURL=utils.js.map
      }
    },
  '[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'InvariantError', {
          enumerable: true,
          get: function () {
            return InvariantError;
          },
        });
        class InvariantError extends Error {
          constructor(message, options) {
            super(
              'Invariant: ' +
                (message.endsWith('.') ? message : message + '.') +
                ' This is a bug in Next.js.',
              options
            );
            this.name = 'InvariantError';
          }
        } //# sourceMappingURL=invariant-error.js.map
      }
    },
  '[project]/node_modules/next/dist/server/request/cookies.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'cookies', {
          enumerable: true,
          get: function () {
            return cookies;
          },
        });
        const _requestcookies = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js [app-rsc] (ecmascript)'
        );
        const _cookies = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/web/spec-extension/cookies.js [app-rsc] (ecmascript)'
        );
        const _workasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/work-async-storage.external.js [external] (next/dist/server/app-render/work-async-storage.external.js, cjs)'
        );
        const _workunitasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/work-unit-async-storage.external.js [external] (next/dist/server/app-render/work-unit-async-storage.external.js, cjs)'
        );
        const _dynamicrendering = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/app-render/dynamic-rendering.js [app-rsc] (ecmascript)'
        );
        const _staticgenerationbailout = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/static-generation-bailout.js [app-rsc] (ecmascript)'
        );
        const _dynamicrenderingutils = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/dynamic-rendering-utils.js [app-rsc] (ecmascript)'
        );
        const _creatededupedbycallsiteservererrorlogger =
          __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/create-deduped-by-callsite-server-error-logger.js [app-rsc] (ecmascript)'
          );
        const _scheduler = __turbopack_context__.r(
          '[project]/node_modules/next/dist/lib/scheduler.js [app-rsc] (ecmascript)'
        );
        const _utils = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/request/utils.js [app-rsc] (ecmascript)'
        );
        const _invarianterror = __turbopack_context__.r(
          '[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-rsc] (ecmascript)'
        );
        const _reflect = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-rsc] (ecmascript)'
        );
        function cookies() {
          const callingExpression = 'cookies';
          const workStore =
            _workasyncstorageexternal.workAsyncStorage.getStore();
          const workUnitStore =
            _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
          if (workStore) {
            if (
              workUnitStore &&
              workUnitStore.phase === 'after' &&
              !(0, _utils.isRequestAPICallableInsideAfter)()
            ) {
              throw Object.defineProperty(
                new Error(
                  `Route ${workStore.route} used "cookies" inside "after(...)". This is not supported. If you need this data inside an "after" callback, use "cookies" outside of the callback. See more info here: https://nextjs.org/docs/canary/app/api-reference/functions/after`
                ),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E88',
                  enumerable: false,
                  configurable: true,
                }
              );
            }
            if (workStore.forceStatic) {
              // When using forceStatic we override all other logic and always just return an empty
              // cookies object without tracking
              const underlyingCookies = createEmptyCookies();
              return makeUntrackedExoticCookies(underlyingCookies);
            }
            if (workUnitStore) {
              if (workUnitStore.type === 'cache') {
                throw Object.defineProperty(
                  new Error(
                    `Route ${workStore.route} used "cookies" inside "use cache". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "cookies" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache`
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E398',
                    enumerable: false,
                    configurable: true,
                  }
                );
              } else if (workUnitStore.type === 'unstable-cache') {
                throw Object.defineProperty(
                  new Error(
                    `Route ${workStore.route} used "cookies" inside a function cached with "unstable_cache(...)". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "cookies" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E157',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
            }
            if (workStore.dynamicShouldError) {
              throw Object.defineProperty(
                new _staticgenerationbailout.StaticGenBailoutError(
                  `Route ${workStore.route} with \`dynamic = "error"\` couldn't be rendered statically because it used \`cookies\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`
                ),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E549',
                  enumerable: false,
                  configurable: true,
                }
              );
            }
            if (workUnitStore) {
              switch (workUnitStore.type) {
                case 'prerender':
                  return makeHangingCookies(workUnitStore);
                case 'prerender-client':
                  const exportName = '`cookies`';
                  throw Object.defineProperty(
                    new _invarianterror.InvariantError(
                      `${exportName} must not be used within a client component. Next.js should be preventing ${exportName} from being included in client components statically, but did not in this case.`
                    ),
                    '__NEXT_ERROR_CODE',
                    {
                      value: 'E693',
                      enumerable: false,
                      configurable: true,
                    }
                  );
                case 'prerender-ppr':
                  // PPR Prerender (no dynamicIO)
                  // We are prerendering with PPR. We need track dynamic access here eagerly
                  // to keep continuity with how cookies has worked in PPR without dynamicIO.
                  (0, _dynamicrendering.postponeWithTracking)(
                    workStore.route,
                    callingExpression,
                    workUnitStore.dynamicTracking
                  );
                  break;
                case 'prerender-legacy':
                  // Legacy Prerender
                  // We track dynamic access here so we don't need to wrap the cookies in
                  // individual property access tracking.
                  (0, _dynamicrendering.throwToInterruptStaticGeneration)(
                    callingExpression,
                    workStore,
                    workUnitStore
                  );
                  break;
                default:
              }
            }
            // We fall through to the dynamic context below but we still track dynamic access
            // because in dev we can still error for things like using cookies inside a cache context
            (0, _dynamicrendering.trackDynamicDataInDynamicRender)(
              workStore,
              workUnitStore
            );
          }
          // cookies is being called in a dynamic context
          const requestStore = (0,
          _workunitasyncstorageexternal.getExpectedRequestStore)(
            callingExpression
          );
          let underlyingCookies;
          if (
            (0, _requestcookies.areCookiesMutableInCurrentPhase)(requestStore)
          ) {
            // We can't conditionally return different types here based on the context.
            // To avoid confusion, we always return the readonly type here.
            underlyingCookies = requestStore.userspaceMutableCookies;
          } else {
            underlyingCookies = requestStore.cookies;
          }
          if (
            ('TURBOPACK compile-time value', 'development') === 'development' &&
            !(workStore == null ? void 0 : workStore.isPrefetchRequest)
          ) {
            if (
              ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
            );
            return makeUntrackedExoticCookiesWithDevWarnings(
              underlyingCookies,
              workStore == null ? void 0 : workStore.route
            );
          } else {
            return makeUntrackedExoticCookies(underlyingCookies);
          }
        }
        function createEmptyCookies() {
          return _requestcookies.RequestCookiesAdapter.seal(
            new _cookies.RequestCookies(new Headers({}))
          );
        }
        const CachedCookies = new WeakMap();
        function makeHangingCookies(prerenderStore) {
          const cachedPromise = CachedCookies.get(prerenderStore);
          if (cachedPromise) {
            return cachedPromise;
          }
          const promise = (0, _dynamicrenderingutils.makeHangingPromise)(
            prerenderStore.renderSignal,
            '`cookies()`'
          );
          CachedCookies.set(prerenderStore, promise);
          return promise;
        }
        function makeUntrackedExoticCookies(underlyingCookies) {
          const cachedCookies = CachedCookies.get(underlyingCookies);
          if (cachedCookies) {
            return cachedCookies;
          }
          const promise = Promise.resolve(underlyingCookies);
          CachedCookies.set(underlyingCookies, promise);
          Object.defineProperties(promise, {
            [Symbol.iterator]: {
              value: underlyingCookies[Symbol.iterator]
                ? underlyingCookies[Symbol.iterator].bind(underlyingCookies) // but that's already a hard thing to debug so we may as well implement it consistently. The biggest problem with
                : // implementing this in this way is the underlying cookie type is a ResponseCookie and not a RequestCookie and so it
                  // has extra properties not available on RequestCookie instances.
                  polyfilledResponseCookiesIterator.bind(underlyingCookies),
            },
            size: {
              get() {
                return underlyingCookies.size;
              },
            },
            get: {
              value: underlyingCookies.get.bind(underlyingCookies),
            },
            getAll: {
              value: underlyingCookies.getAll.bind(underlyingCookies),
            },
            has: {
              value: underlyingCookies.has.bind(underlyingCookies),
            },
            set: {
              value: underlyingCookies.set.bind(underlyingCookies),
            },
            delete: {
              value: underlyingCookies.delete.bind(underlyingCookies),
            },
            clear: {
              value:
                typeof underlyingCookies.clear === 'function'
                  ? underlyingCookies.clear.bind(underlyingCookies) // but that's already a hard thing to debug so we may as well implement it consistently. The biggest problem with
                  : // implementing this in this way is the underlying cookie type is a ResponseCookie and not a RequestCookie and so it
                    // has extra properties not available on RequestCookie instances.
                    polyfilledResponseCookiesClear.bind(
                      underlyingCookies,
                      promise
                    ),
            },
            toString: {
              value: underlyingCookies.toString.bind(underlyingCookies),
            },
          });
          return promise;
        }
        function makeUntrackedExoticCookiesWithDevWarnings(
          underlyingCookies,
          route
        ) {
          const cachedCookies = CachedCookies.get(underlyingCookies);
          if (cachedCookies) {
            return cachedCookies;
          }
          const promise = new Promise((resolve) =>
            (0, _scheduler.scheduleImmediate)(() => resolve(underlyingCookies))
          );
          CachedCookies.set(underlyingCookies, promise);
          Object.defineProperties(promise, {
            [Symbol.iterator]: {
              value: function () {
                const expression = '`...cookies()` or similar iteration';
                syncIODev(route, expression);
                return underlyingCookies[Symbol.iterator]
                  ? underlyingCookies[Symbol.iterator].apply(
                      underlyingCookies,
                      arguments
                    ) // but that's already a hard thing to debug so we may as well implement it consistently. The biggest problem with
                  : // implementing this in this way is the underlying cookie type is a ResponseCookie and not a RequestCookie and so it
                    // has extra properties not available on RequestCookie instances.
                    polyfilledResponseCookiesIterator.call(underlyingCookies);
              },
              writable: false,
            },
            size: {
              get() {
                const expression = '`cookies().size`';
                syncIODev(route, expression);
                return underlyingCookies.size;
              },
            },
            get: {
              value: function get() {
                let expression;
                if (arguments.length === 0) {
                  expression = '`cookies().get()`';
                } else {
                  expression = `\`cookies().get(${describeNameArg(arguments[0])})\``;
                }
                syncIODev(route, expression);
                return underlyingCookies.get.apply(
                  underlyingCookies,
                  arguments
                );
              },
              writable: false,
            },
            getAll: {
              value: function getAll() {
                let expression;
                if (arguments.length === 0) {
                  expression = '`cookies().getAll()`';
                } else {
                  expression = `\`cookies().getAll(${describeNameArg(arguments[0])})\``;
                }
                syncIODev(route, expression);
                return underlyingCookies.getAll.apply(
                  underlyingCookies,
                  arguments
                );
              },
              writable: false,
            },
            has: {
              value: function get() {
                let expression;
                if (arguments.length === 0) {
                  expression = '`cookies().has()`';
                } else {
                  expression = `\`cookies().has(${describeNameArg(arguments[0])})\``;
                }
                syncIODev(route, expression);
                return underlyingCookies.has.apply(
                  underlyingCookies,
                  arguments
                );
              },
              writable: false,
            },
            set: {
              value: function set() {
                let expression;
                if (arguments.length === 0) {
                  expression = '`cookies().set()`';
                } else {
                  const arg = arguments[0];
                  if (arg) {
                    expression = `\`cookies().set(${describeNameArg(arg)}, ...)\``;
                  } else {
                    expression = '`cookies().set(...)`';
                  }
                }
                syncIODev(route, expression);
                return underlyingCookies.set.apply(
                  underlyingCookies,
                  arguments
                );
              },
              writable: false,
            },
            delete: {
              value: function () {
                let expression;
                if (arguments.length === 0) {
                  expression = '`cookies().delete()`';
                } else if (arguments.length === 1) {
                  expression = `\`cookies().delete(${describeNameArg(arguments[0])})\``;
                } else {
                  expression = `\`cookies().delete(${describeNameArg(arguments[0])}, ...)\``;
                }
                syncIODev(route, expression);
                return underlyingCookies.delete.apply(
                  underlyingCookies,
                  arguments
                );
              },
              writable: false,
            },
            clear: {
              value: function clear() {
                const expression = '`cookies().clear()`';
                syncIODev(route, expression);
                // @ts-ignore clear is defined in RequestCookies implementation but not in the type
                return typeof underlyingCookies.clear === 'function'
                  ? underlyingCookies.clear.apply(underlyingCookies, arguments) // but that's already a hard thing to debug so we may as well implement it consistently. The biggest problem with
                  : // implementing this in this way is the underlying cookie type is a ResponseCookie and not a RequestCookie and so it
                    // has extra properties not available on RequestCookie instances.
                    polyfilledResponseCookiesClear.call(
                      underlyingCookies,
                      promise
                    );
              },
              writable: false,
            },
            toString: {
              value: function toString() {
                const expression = '`cookies().toString()` or implicit casting';
                syncIODev(route, expression);
                return underlyingCookies.toString.apply(
                  underlyingCookies,
                  arguments
                );
              },
              writable: false,
            },
          });
          return promise;
        }
        // Similar to `makeUntrackedExoticCookiesWithDevWarnings`, but just logging the
        // sync access without actually defining the cookies properties on the promise.
        function makeUntrackedCookiesWithDevWarnings(underlyingCookies, route) {
          const cachedCookies = CachedCookies.get(underlyingCookies);
          if (cachedCookies) {
            return cachedCookies;
          }
          const promise = new Promise((resolve) =>
            (0, _scheduler.scheduleImmediate)(() => resolve(underlyingCookies))
          );
          const proxiedPromise = new Proxy(promise, {
            get(target, prop, receiver) {
              switch (prop) {
                case Symbol.iterator: {
                  warnForSyncAccess(
                    route,
                    '`...cookies()` or similar iteration'
                  );
                  break;
                }
                case 'size':
                case 'get':
                case 'getAll':
                case 'has':
                case 'set':
                case 'delete':
                case 'clear':
                case 'toString': {
                  warnForSyncAccess(route, `\`cookies().${prop}\``);
                  break;
                }
                default: {
                  // We only warn for well-defined properties of the cookies object.
                }
              }
              return _reflect.ReflectAdapter.get(target, prop, receiver);
            },
          });
          CachedCookies.set(underlyingCookies, proxiedPromise);
          return proxiedPromise;
        }
        function describeNameArg(arg) {
          return typeof arg === 'object' &&
            arg !== null &&
            typeof arg.name === 'string'
            ? `'${arg.name}'`
            : typeof arg === 'string'
              ? `'${arg}'`
              : '...';
        }
        function syncIODev(route, expression) {
          const workUnitStore =
            _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
          if (
            workUnitStore &&
            workUnitStore.type === 'request' &&
            workUnitStore.prerenderPhase === true
          ) {
            // When we're rendering dynamically in dev we need to advance out of the
            // Prerender environment when we read Request data synchronously
            const requestStore = workUnitStore;
            (0, _dynamicrendering.trackSynchronousRequestDataAccessInDev)(
              requestStore
            );
          }
          // In all cases we warn normally
          warnForSyncAccess(route, expression);
        }
        const warnForSyncAccess = (0,
        _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(
          createCookiesAccessError
        );
        function createCookiesAccessError(route, expression) {
          const prefix = route ? `Route "${route}" ` : 'This route ';
          return Object.defineProperty(
            new Error(
              `${prefix}used ${expression}. ` +
                `\`cookies()\` should be awaited before using its value. ` +
                `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`
            ),
            '__NEXT_ERROR_CODE',
            {
              value: 'E223',
              enumerable: false,
              configurable: true,
            }
          );
        }
        function polyfilledResponseCookiesIterator() {
          return this.getAll()
            .map((c) => [c.name, c])
            .values();
        }
        function polyfilledResponseCookiesClear(returnable) {
          for (const cookie of this.getAll()) {
            this.delete(cookie.name);
          }
          return returnable;
        } //# sourceMappingURL=cookies.js.map
      }
    },
  '[project]/node_modules/next/dist/server/web/spec-extension/adapters/headers.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            HeadersAdapter: null,
            ReadonlyHeadersError: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          HeadersAdapter: function () {
            return HeadersAdapter;
          },
          ReadonlyHeadersError: function () {
            return ReadonlyHeadersError;
          },
        });
        const _reflect = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-rsc] (ecmascript)'
        );
        class ReadonlyHeadersError extends Error {
          constructor() {
            super(
              'Headers cannot be modified. Read more: https://nextjs.org/docs/app/api-reference/functions/headers'
            );
          }
          static callable() {
            throw new ReadonlyHeadersError();
          }
        }
        class HeadersAdapter extends Headers {
          constructor(headers) {
            // We've already overridden the methods that would be called, so we're just
            // calling the super constructor to ensure that the instanceof check works.
            super();
            this.headers = new Proxy(headers, {
              get(target, prop, receiver) {
                // Because this is just an object, we expect that all "get" operations
                // are for properties. If it's a "get" for a symbol, we'll just return
                // the symbol.
                if (typeof prop === 'symbol') {
                  return _reflect.ReflectAdapter.get(target, prop, receiver);
                }
                const lowercased = prop.toLowerCase();
                // Let's find the original casing of the key. This assumes that there is
                // no mixed case keys (e.g. "Content-Type" and "content-type") in the
                // headers object.
                const original = Object.keys(headers).find(
                  (o) => o.toLowerCase() === lowercased
                );
                // If the original casing doesn't exist, return undefined.
                if (typeof original === 'undefined') return;
                // If the original casing exists, return the value.
                return _reflect.ReflectAdapter.get(target, original, receiver);
              },
              set(target, prop, value, receiver) {
                if (typeof prop === 'symbol') {
                  return _reflect.ReflectAdapter.set(
                    target,
                    prop,
                    value,
                    receiver
                  );
                }
                const lowercased = prop.toLowerCase();
                // Let's find the original casing of the key. This assumes that there is
                // no mixed case keys (e.g. "Content-Type" and "content-type") in the
                // headers object.
                const original = Object.keys(headers).find(
                  (o) => o.toLowerCase() === lowercased
                );
                // If the original casing doesn't exist, use the prop as the key.
                return _reflect.ReflectAdapter.set(
                  target,
                  original ?? prop,
                  value,
                  receiver
                );
              },
              has(target, prop) {
                if (typeof prop === 'symbol')
                  return _reflect.ReflectAdapter.has(target, prop);
                const lowercased = prop.toLowerCase();
                // Let's find the original casing of the key. This assumes that there is
                // no mixed case keys (e.g. "Content-Type" and "content-type") in the
                // headers object.
                const original = Object.keys(headers).find(
                  (o) => o.toLowerCase() === lowercased
                );
                // If the original casing doesn't exist, return false.
                if (typeof original === 'undefined') return false;
                // If the original casing exists, return true.
                return _reflect.ReflectAdapter.has(target, original);
              },
              deleteProperty(target, prop) {
                if (typeof prop === 'symbol')
                  return _reflect.ReflectAdapter.deleteProperty(target, prop);
                const lowercased = prop.toLowerCase();
                // Let's find the original casing of the key. This assumes that there is
                // no mixed case keys (e.g. "Content-Type" and "content-type") in the
                // headers object.
                const original = Object.keys(headers).find(
                  (o) => o.toLowerCase() === lowercased
                );
                // If the original casing doesn't exist, return true.
                if (typeof original === 'undefined') return true;
                // If the original casing exists, delete the property.
                return _reflect.ReflectAdapter.deleteProperty(target, original);
              },
            });
          }
          /**
           * Seals a Headers instance to prevent modification by throwing an error when
           * any mutating method is called.
           */ static seal(headers) {
            return new Proxy(headers, {
              get(target, prop, receiver) {
                switch (prop) {
                  case 'append':
                  case 'delete':
                  case 'set':
                    return ReadonlyHeadersError.callable;
                  default:
                    return _reflect.ReflectAdapter.get(target, prop, receiver);
                }
              },
            });
          }
          /**
           * Merges a header value into a string. This stores multiple values as an
           * array, so we need to merge them into a string.
           *
           * @param value a header value
           * @returns a merged header value (a string)
           */ merge(value) {
            if (Array.isArray(value)) return value.join(', ');
            return value;
          }
          /**
           * Creates a Headers instance from a plain object or a Headers instance.
           *
           * @param headers a plain object or a Headers instance
           * @returns a headers instance
           */ static from(headers) {
            if (headers instanceof Headers) return headers;
            return new HeadersAdapter(headers);
          }
          append(name, value) {
            const existing = this.headers[name];
            if (typeof existing === 'string') {
              this.headers[name] = [existing, value];
            } else if (Array.isArray(existing)) {
              existing.push(value);
            } else {
              this.headers[name] = value;
            }
          }
          delete(name) {
            delete this.headers[name];
          }
          get(name) {
            const value = this.headers[name];
            if (typeof value !== 'undefined') return this.merge(value);
            return null;
          }
          has(name) {
            return typeof this.headers[name] !== 'undefined';
          }
          set(name, value) {
            this.headers[name] = value;
          }
          forEach(callbackfn, thisArg) {
            for (const [name, value] of this.entries()) {
              callbackfn.call(thisArg, value, name, this);
            }
          }
          *entries() {
            for (const key of Object.keys(this.headers)) {
              const name = key.toLowerCase();
              // We assert here that this is a string because we got it from the
              // Object.keys() call above.
              const value = this.get(name);
              yield [name, value];
            }
          }
          *keys() {
            for (const key of Object.keys(this.headers)) {
              const name = key.toLowerCase();
              yield name;
            }
          }
          *values() {
            for (const key of Object.keys(this.headers)) {
              // We assert here that this is a string because we got it from the
              // Object.keys() call above.
              const value = this.get(key);
              yield value;
            }
          }
          [Symbol.iterator]() {
            return this.entries();
          }
        } //# sourceMappingURL=headers.js.map
      }
    },
  '[project]/node_modules/next/dist/server/request/headers.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'headers', {
          enumerable: true,
          get: function () {
            return headers;
          },
        });
        const _headers = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/web/spec-extension/adapters/headers.js [app-rsc] (ecmascript)'
        );
        const _workasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/work-async-storage.external.js [external] (next/dist/server/app-render/work-async-storage.external.js, cjs)'
        );
        const _workunitasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/work-unit-async-storage.external.js [external] (next/dist/server/app-render/work-unit-async-storage.external.js, cjs)'
        );
        const _dynamicrendering = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/app-render/dynamic-rendering.js [app-rsc] (ecmascript)'
        );
        const _staticgenerationbailout = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/static-generation-bailout.js [app-rsc] (ecmascript)'
        );
        const _dynamicrenderingutils = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/dynamic-rendering-utils.js [app-rsc] (ecmascript)'
        );
        const _creatededupedbycallsiteservererrorlogger =
          __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/create-deduped-by-callsite-server-error-logger.js [app-rsc] (ecmascript)'
          );
        const _scheduler = __turbopack_context__.r(
          '[project]/node_modules/next/dist/lib/scheduler.js [app-rsc] (ecmascript)'
        );
        const _utils = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/request/utils.js [app-rsc] (ecmascript)'
        );
        const _invarianterror = __turbopack_context__.r(
          '[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-rsc] (ecmascript)'
        );
        const _reflect = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-rsc] (ecmascript)'
        );
        function headers() {
          const workStore =
            _workasyncstorageexternal.workAsyncStorage.getStore();
          const workUnitStore =
            _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
          if (workStore) {
            if (
              workUnitStore &&
              workUnitStore.phase === 'after' &&
              !(0, _utils.isRequestAPICallableInsideAfter)()
            ) {
              throw Object.defineProperty(
                new Error(
                  `Route ${workStore.route} used "headers" inside "after(...)". This is not supported. If you need this data inside an "after" callback, use "headers" outside of the callback. See more info here: https://nextjs.org/docs/canary/app/api-reference/functions/after`
                ),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E367',
                  enumerable: false,
                  configurable: true,
                }
              );
            }
            if (workStore.forceStatic) {
              // When using forceStatic we override all other logic and always just return an empty
              // headers object without tracking
              const underlyingHeaders = _headers.HeadersAdapter.seal(
                new Headers({})
              );
              return makeUntrackedExoticHeaders(underlyingHeaders);
            }
            if (workUnitStore) {
              if (workUnitStore.type === 'cache') {
                throw Object.defineProperty(
                  new Error(
                    `Route ${workStore.route} used "headers" inside "use cache". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "headers" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache`
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E304',
                    enumerable: false,
                    configurable: true,
                  }
                );
              } else if (workUnitStore.type === 'unstable-cache') {
                throw Object.defineProperty(
                  new Error(
                    `Route ${workStore.route} used "headers" inside a function cached with "unstable_cache(...)". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use "headers" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E127',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
            }
            if (workStore.dynamicShouldError) {
              throw Object.defineProperty(
                new _staticgenerationbailout.StaticGenBailoutError(
                  `Route ${workStore.route} with \`dynamic = "error"\` couldn't be rendered statically because it used \`headers\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`
                ),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E525',
                  enumerable: false,
                  configurable: true,
                }
              );
            }
            if (workUnitStore) {
              switch (workUnitStore.type) {
                case 'prerender':
                  return makeHangingHeaders(workUnitStore);
                case 'prerender-client':
                  const exportName = '`headers`';
                  throw Object.defineProperty(
                    new _invarianterror.InvariantError(
                      `${exportName} must not be used within a client component. Next.js should be preventing ${exportName} from being included in client components statically, but did not in this case.`
                    ),
                    '__NEXT_ERROR_CODE',
                    {
                      value: 'E693',
                      enumerable: false,
                      configurable: true,
                    }
                  );
                case 'prerender-ppr':
                  // PPR Prerender (no dynamicIO)
                  // We are prerendering with PPR. We need track dynamic access here eagerly
                  // to keep continuity with how headers has worked in PPR without dynamicIO.
                  // TODO consider switching the semantic to throw on property access instead
                  (0, _dynamicrendering.postponeWithTracking)(
                    workStore.route,
                    'headers',
                    workUnitStore.dynamicTracking
                  );
                  break;
                case 'prerender-legacy':
                  // Legacy Prerender
                  // We are in a legacy static generation mode while prerendering
                  // We track dynamic access here so we don't need to wrap the headers in
                  // individual property access tracking.
                  (0, _dynamicrendering.throwToInterruptStaticGeneration)(
                    'headers',
                    workStore,
                    workUnitStore
                  );
                  break;
                default:
              }
            }
            // We fall through to the dynamic context below but we still track dynamic access
            // because in dev we can still error for things like using headers inside a cache context
            (0, _dynamicrendering.trackDynamicDataInDynamicRender)(
              workStore,
              workUnitStore
            );
          }
          const requestStore = (0,
          _workunitasyncstorageexternal.getExpectedRequestStore)('headers');
          if (
            ('TURBOPACK compile-time value', 'development') === 'development' &&
            !(workStore == null ? void 0 : workStore.isPrefetchRequest)
          ) {
            if (
              ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
            );
            return makeUntrackedExoticHeadersWithDevWarnings(
              requestStore.headers,
              workStore == null ? void 0 : workStore.route
            );
          } else {
            return makeUntrackedExoticHeaders(requestStore.headers);
          }
        }
        const CachedHeaders = new WeakMap();
        function makeHangingHeaders(prerenderStore) {
          const cachedHeaders = CachedHeaders.get(prerenderStore);
          if (cachedHeaders) {
            return cachedHeaders;
          }
          const promise = (0, _dynamicrenderingutils.makeHangingPromise)(
            prerenderStore.renderSignal,
            '`headers()`'
          );
          CachedHeaders.set(prerenderStore, promise);
          return promise;
        }
        function makeUntrackedExoticHeaders(underlyingHeaders) {
          const cachedHeaders = CachedHeaders.get(underlyingHeaders);
          if (cachedHeaders) {
            return cachedHeaders;
          }
          const promise = Promise.resolve(underlyingHeaders);
          CachedHeaders.set(underlyingHeaders, promise);
          Object.defineProperties(promise, {
            append: {
              value: underlyingHeaders.append.bind(underlyingHeaders),
            },
            delete: {
              value: underlyingHeaders.delete.bind(underlyingHeaders),
            },
            get: {
              value: underlyingHeaders.get.bind(underlyingHeaders),
            },
            has: {
              value: underlyingHeaders.has.bind(underlyingHeaders),
            },
            set: {
              value: underlyingHeaders.set.bind(underlyingHeaders),
            },
            getSetCookie: {
              value: underlyingHeaders.getSetCookie.bind(underlyingHeaders),
            },
            forEach: {
              value: underlyingHeaders.forEach.bind(underlyingHeaders),
            },
            keys: {
              value: underlyingHeaders.keys.bind(underlyingHeaders),
            },
            values: {
              value: underlyingHeaders.values.bind(underlyingHeaders),
            },
            entries: {
              value: underlyingHeaders.entries.bind(underlyingHeaders),
            },
            [Symbol.iterator]: {
              value: underlyingHeaders[Symbol.iterator].bind(underlyingHeaders),
            },
          });
          return promise;
        }
        function makeUntrackedExoticHeadersWithDevWarnings(
          underlyingHeaders,
          route
        ) {
          const cachedHeaders = CachedHeaders.get(underlyingHeaders);
          if (cachedHeaders) {
            return cachedHeaders;
          }
          const promise = new Promise((resolve) =>
            (0, _scheduler.scheduleImmediate)(() => resolve(underlyingHeaders))
          );
          CachedHeaders.set(underlyingHeaders, promise);
          Object.defineProperties(promise, {
            append: {
              value: function append() {
                const expression = `\`headers().append(${describeNameArg(arguments[0])}, ...)\``;
                syncIODev(route, expression);
                return underlyingHeaders.append.apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
            delete: {
              value: function _delete() {
                const expression = `\`headers().delete(${describeNameArg(arguments[0])})\``;
                syncIODev(route, expression);
                return underlyingHeaders.delete.apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
            get: {
              value: function get() {
                const expression = `\`headers().get(${describeNameArg(arguments[0])})\``;
                syncIODev(route, expression);
                return underlyingHeaders.get.apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
            has: {
              value: function has() {
                const expression = `\`headers().has(${describeNameArg(arguments[0])})\``;
                syncIODev(route, expression);
                return underlyingHeaders.has.apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
            set: {
              value: function set() {
                const expression = `\`headers().set(${describeNameArg(arguments[0])}, ...)\``;
                syncIODev(route, expression);
                return underlyingHeaders.set.apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
            getSetCookie: {
              value: function getSetCookie() {
                const expression = '`headers().getSetCookie()`';
                syncIODev(route, expression);
                return underlyingHeaders.getSetCookie.apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
            forEach: {
              value: function forEach() {
                const expression = '`headers().forEach(...)`';
                syncIODev(route, expression);
                return underlyingHeaders.forEach.apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
            keys: {
              value: function keys() {
                const expression = '`headers().keys()`';
                syncIODev(route, expression);
                return underlyingHeaders.keys.apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
            values: {
              value: function values() {
                const expression = '`headers().values()`';
                syncIODev(route, expression);
                return underlyingHeaders.values.apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
            entries: {
              value: function entries() {
                const expression = '`headers().entries()`';
                syncIODev(route, expression);
                return underlyingHeaders.entries.apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
            [Symbol.iterator]: {
              value: function () {
                const expression = '`...headers()` or similar iteration';
                syncIODev(route, expression);
                return underlyingHeaders[Symbol.iterator].apply(
                  underlyingHeaders,
                  arguments
                );
              },
            },
          });
          return promise;
        }
        // Similar to `makeUntrackedExoticHeadersWithDevWarnings`, but just logging the
        // sync access without actually defining the headers properties on the promise.
        function makeUntrackedHeadersWithDevWarnings(underlyingHeaders, route) {
          const cachedHeaders = CachedHeaders.get(underlyingHeaders);
          if (cachedHeaders) {
            return cachedHeaders;
          }
          const promise = new Promise((resolve) =>
            (0, _scheduler.scheduleImmediate)(() => resolve(underlyingHeaders))
          );
          const proxiedPromise = new Proxy(promise, {
            get(target, prop, receiver) {
              switch (prop) {
                case Symbol.iterator: {
                  warnForSyncAccess(
                    route,
                    '`...headers()` or similar iteration'
                  );
                  break;
                }
                case 'append':
                case 'delete':
                case 'get':
                case 'has':
                case 'set':
                case 'getSetCookie':
                case 'forEach':
                case 'keys':
                case 'values':
                case 'entries': {
                  warnForSyncAccess(route, `\`headers().${prop}\``);
                  break;
                }
                default: {
                  // We only warn for well-defined properties of the headers object.
                }
              }
              return _reflect.ReflectAdapter.get(target, prop, receiver);
            },
          });
          CachedHeaders.set(underlyingHeaders, proxiedPromise);
          return proxiedPromise;
        }
        function describeNameArg(arg) {
          return typeof arg === 'string' ? `'${arg}'` : '...';
        }
        function syncIODev(route, expression) {
          const workUnitStore =
            _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
          if (
            workUnitStore &&
            workUnitStore.type === 'request' &&
            workUnitStore.prerenderPhase === true
          ) {
            // When we're rendering dynamically in dev we need to advance out of the
            // Prerender environment when we read Request data synchronously
            const requestStore = workUnitStore;
            (0, _dynamicrendering.trackSynchronousRequestDataAccessInDev)(
              requestStore
            );
          }
          // In all cases we warn normally
          warnForSyncAccess(route, expression);
        }
        const warnForSyncAccess = (0,
        _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(
          createHeadersAccessError
        );
        function createHeadersAccessError(route, expression) {
          const prefix = route ? `Route "${route}" ` : 'This route ';
          return Object.defineProperty(
            new Error(
              `${prefix}used ${expression}. ` +
                `\`headers()\` should be awaited before using its value. ` +
                `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`
            ),
            '__NEXT_ERROR_CODE',
            {
              value: 'E277',
              enumerable: false,
              configurable: true,
            }
          );
        } //# sourceMappingURL=headers.js.map
      }
    },
  '[project]/node_modules/next/dist/server/request/draft-mode.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'draftMode', {
          enumerable: true,
          get: function () {
            return draftMode;
          },
        });
        const _workunitasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/work-unit-async-storage.external.js [external] (next/dist/server/app-render/work-unit-async-storage.external.js, cjs)'
        );
        const _workasyncstorageexternal = __turbopack_context__.r(
          '[externals]/next/dist/server/app-render/work-async-storage.external.js [external] (next/dist/server/app-render/work-async-storage.external.js, cjs)'
        );
        const _dynamicrendering = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/app-render/dynamic-rendering.js [app-rsc] (ecmascript)'
        );
        const _creatededupedbycallsiteservererrorlogger =
          __turbopack_context__.r(
            '[project]/node_modules/next/dist/server/create-deduped-by-callsite-server-error-logger.js [app-rsc] (ecmascript)'
          );
        const _staticgenerationbailout = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/static-generation-bailout.js [app-rsc] (ecmascript)'
        );
        const _hooksservercontext = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/hooks-server-context.js [app-rsc] (ecmascript)'
        );
        const _invarianterror = __turbopack_context__.r(
          '[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-rsc] (ecmascript)'
        );
        const _reflect = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-rsc] (ecmascript)'
        );
        function draftMode() {
          const callingExpression = 'draftMode';
          const workStore =
            _workasyncstorageexternal.workAsyncStorage.getStore();
          const workUnitStore =
            _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
          if (!workStore || !workUnitStore) {
            (0, _workunitasyncstorageexternal.throwForMissingRequestStore)(
              callingExpression
            );
          }
          switch (workUnitStore.type) {
            case 'request':
              return createOrGetCachedDraftMode(
                workUnitStore.draftMode,
                workStore
              );
            case 'cache':
            case 'unstable-cache':
              // Inside of `"use cache"` or `unstable_cache`, draft mode is available if
              // the outmost work unit store is a request store, and if draft mode is
              // enabled.
              const draftModeProvider = (0,
              _workunitasyncstorageexternal.getDraftModeProviderForCacheScope)(
                workStore,
                workUnitStore
              );
              if (draftModeProvider) {
                return createOrGetCachedDraftMode(draftModeProvider, workStore);
              }
            // Otherwise, we fall through to providing an empty draft mode.
            // eslint-disable-next-line no-fallthrough
            case 'prerender':
            case 'prerender-client':
            case 'prerender-ppr':
            case 'prerender-legacy':
              // Return empty draft mode
              return createOrGetCachedDraftMode(null, workStore);
            default:
              const _exhaustiveCheck = workUnitStore;
              return _exhaustiveCheck;
          }
        }
        function createOrGetCachedDraftMode(draftModeProvider, workStore) {
          const cacheKey = draftModeProvider ?? NullDraftMode;
          const cachedDraftMode = CachedDraftModes.get(cacheKey);
          if (cachedDraftMode) {
            return cachedDraftMode;
          }
          let promise;
          if (
            ('TURBOPACK compile-time value', 'development') === 'development' &&
            !(workStore == null ? void 0 : workStore.isPrefetchRequest)
          ) {
            const route = workStore == null ? void 0 : workStore.route;
            if (
              ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
            );
            promise = createExoticDraftModeWithDevWarnings(
              draftModeProvider,
              route
            );
          } else {
            if (
              ('TURBOPACK compile-time falsy', 0) //TURBOPACK unreachable
            );
            promise = createExoticDraftMode(draftModeProvider);
          }
          CachedDraftModes.set(cacheKey, promise);
          return promise;
        }
        const NullDraftMode = {};
        const CachedDraftModes = new WeakMap();
        function createExoticDraftMode(underlyingProvider) {
          const instance = new DraftMode(underlyingProvider);
          const promise = Promise.resolve(instance);
          Object.defineProperty(promise, 'isEnabled', {
            get() {
              return instance.isEnabled;
            },
            enumerable: true,
            configurable: true,
          });
          promise.enable = instance.enable.bind(instance);
          promise.disable = instance.disable.bind(instance);
          return promise;
        }
        function createExoticDraftModeWithDevWarnings(
          underlyingProvider,
          route
        ) {
          const instance = new DraftMode(underlyingProvider);
          const promise = Promise.resolve(instance);
          Object.defineProperty(promise, 'isEnabled', {
            get() {
              const expression = '`draftMode().isEnabled`';
              syncIODev(route, expression);
              return instance.isEnabled;
            },
            enumerable: true,
            configurable: true,
          });
          Object.defineProperty(promise, 'enable', {
            value: function get() {
              const expression = '`draftMode().enable()`';
              syncIODev(route, expression);
              return instance.enable.apply(instance, arguments);
            },
          });
          Object.defineProperty(promise, 'disable', {
            value: function get() {
              const expression = '`draftMode().disable()`';
              syncIODev(route, expression);
              return instance.disable.apply(instance, arguments);
            },
          });
          return promise;
        }
        // Similar to `createExoticDraftModeWithDevWarnings`, but just logging the sync
        // access without actually defining the draftMode properties on the promise.
        function createDraftModeWithDevWarnings(underlyingProvider, route) {
          const instance = new DraftMode(underlyingProvider);
          const promise = Promise.resolve(instance);
          const proxiedPromise = new Proxy(promise, {
            get(target, prop, receiver) {
              switch (prop) {
                case 'isEnabled':
                  warnForSyncAccess(route, `\`draftMode().${prop}\``);
                  break;
                case 'enable':
                case 'disable': {
                  warnForSyncAccess(route, `\`draftMode().${prop}()\``);
                  break;
                }
                default: {
                  // We only warn for well-defined properties of the draftMode object.
                }
              }
              return _reflect.ReflectAdapter.get(target, prop, receiver);
            },
          });
          return proxiedPromise;
        }
        class DraftMode {
          constructor(provider) {
            this._provider = provider;
          }
          get isEnabled() {
            if (this._provider !== null) {
              return this._provider.isEnabled;
            }
            return false;
          }
          enable() {
            // We have a store we want to track dynamic data access to ensure we
            // don't statically generate routes that manipulate draft mode.
            trackDynamicDraftMode('draftMode().enable()');
            if (this._provider !== null) {
              this._provider.enable();
            }
          }
          disable() {
            trackDynamicDraftMode('draftMode().disable()');
            if (this._provider !== null) {
              this._provider.disable();
            }
          }
        }
        function syncIODev(route, expression) {
          const workUnitStore =
            _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
          if (
            workUnitStore &&
            workUnitStore.type === 'request' &&
            workUnitStore.prerenderPhase === true
          ) {
            // When we're rendering dynamically in dev we need to advance out of the
            // Prerender environment when we read Request data synchronously
            const requestStore = workUnitStore;
            (0, _dynamicrendering.trackSynchronousRequestDataAccessInDev)(
              requestStore
            );
          }
          // In all cases we warn normally
          warnForSyncAccess(route, expression);
        }
        const warnForSyncAccess = (0,
        _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(
          createDraftModeAccessError
        );
        function createDraftModeAccessError(route, expression) {
          const prefix = route ? `Route "${route}" ` : 'This route ';
          return Object.defineProperty(
            new Error(
              `${prefix}used ${expression}. ` +
                `\`draftMode()\` should be awaited before using its value. ` +
                `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`
            ),
            '__NEXT_ERROR_CODE',
            {
              value: 'E377',
              enumerable: false,
              configurable: true,
            }
          );
        }
        function trackDynamicDraftMode(expression) {
          const store = _workasyncstorageexternal.workAsyncStorage.getStore();
          const workUnitStore =
            _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
          if (store) {
            // We have a store we want to track dynamic data access to ensure we
            // don't statically generate routes that manipulate draft mode.
            if (workUnitStore) {
              if (workUnitStore.type === 'cache') {
                throw Object.defineProperty(
                  new Error(
                    `Route ${store.route} used "${expression}" inside "use cache". The enabled status of draftMode can be read in caches but you must not enable or disable draftMode inside a cache. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache`
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E246',
                    enumerable: false,
                    configurable: true,
                  }
                );
              } else if (workUnitStore.type === 'unstable-cache') {
                throw Object.defineProperty(
                  new Error(
                    `Route ${store.route} used "${expression}" inside a function cached with "unstable_cache(...)". The enabled status of draftMode can be read in caches but you must not enable or disable draftMode inside a cache. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E259',
                    enumerable: false,
                    configurable: true,
                  }
                );
              } else if (workUnitStore.phase === 'after') {
                throw Object.defineProperty(
                  new Error(
                    `Route ${store.route} used "${expression}" inside \`after\`. The enabled status of draftMode can be read inside \`after\` but you cannot enable or disable draftMode. See more info here: https://nextjs.org/docs/app/api-reference/functions/after`
                  ),
                  '__NEXT_ERROR_CODE',
                  {
                    value: 'E348',
                    enumerable: false,
                    configurable: true,
                  }
                );
              }
            }
            if (store.dynamicShouldError) {
              throw Object.defineProperty(
                new _staticgenerationbailout.StaticGenBailoutError(
                  `Route ${store.route} with \`dynamic = "error"\` couldn't be rendered statically because it used \`${expression}\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`
                ),
                '__NEXT_ERROR_CODE',
                {
                  value: 'E553',
                  enumerable: false,
                  configurable: true,
                }
              );
            }
            if (workUnitStore) {
              switch (workUnitStore.type) {
                case 'prerender':
                  // dynamicIO Prerender
                  const error = Object.defineProperty(
                    new Error(
                      `Route ${store.route} used ${expression} without first calling \`await connection()\`. See more info here: https://nextjs.org/docs/messages/next-prerender-sync-headers`
                    ),
                    '__NEXT_ERROR_CODE',
                    {
                      value: 'E126',
                      enumerable: false,
                      configurable: true,
                    }
                  );
                  (0,
                  _dynamicrendering.abortAndThrowOnSynchronousRequestDataAccess)(
                    store.route,
                    expression,
                    error,
                    workUnitStore
                  );
                  break;
                case 'prerender-client':
                  const exportName = '`draftMode`';
                  throw Object.defineProperty(
                    new _invarianterror.InvariantError(
                      `${exportName} must not be used within a client component. Next.js should be preventing ${exportName} from being included in client components statically, but did not in this case.`
                    ),
                    '__NEXT_ERROR_CODE',
                    {
                      value: 'E693',
                      enumerable: false,
                      configurable: true,
                    }
                  );
                case 'prerender-ppr':
                  // PPR Prerender
                  (0, _dynamicrendering.postponeWithTracking)(
                    store.route,
                    expression,
                    workUnitStore.dynamicTracking
                  );
                  break;
                case 'prerender-legacy':
                  // legacy Prerender
                  workUnitStore.revalidate = 0;
                  const err = Object.defineProperty(
                    new _hooksservercontext.DynamicServerError(
                      `Route ${store.route} couldn't be rendered statically because it used \`${expression}\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`
                    ),
                    '__NEXT_ERROR_CODE',
                    {
                      value: 'E558',
                      enumerable: false,
                      configurable: true,
                    }
                  );
                  store.dynamicUsageDescription = expression;
                  store.dynamicUsageStack = err.stack;
                  throw err;
                case 'request':
                  if (('TURBOPACK compile-time truthy', 1)) {
                    workUnitStore.usedDynamic = true;
                  }
                  break;
                default:
              }
            }
          }
        } //# sourceMappingURL=draft-mode.js.map
      }
    },
  '[project]/node_modules/next/headers.js [app-rsc] (ecmascript)': (
    __turbopack_context__
  ) => {
    var { m: module, e: exports } = __turbopack_context__;
    {
      module.exports.cookies = __turbopack_context__.r(
        '[project]/node_modules/next/dist/server/request/cookies.js [app-rsc] (ecmascript)'
      ).cookies;
      module.exports.headers = __turbopack_context__.r(
        '[project]/node_modules/next/dist/server/request/headers.js [app-rsc] (ecmascript)'
      ).headers;
      module.exports.draftMode = __turbopack_context__.r(
        '[project]/node_modules/next/dist/server/request/draft-mode.js [app-rsc] (ecmascript)'
      ).draftMode;
    }
  },
  '[project]/node_modules/next-intl/dist/esm/development/shared/constants.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      // Used to read the locale from the middleware
      __turbopack_context__.s({
        HEADER_LOCALE_NAME: () => HEADER_LOCALE_NAME,
      });
      const HEADER_LOCALE_NAME = 'X-NEXT-INTL-LOCALE';
    },
  '[project]/node_modules/next-intl/dist/esm/development/server/react-server/RequestLocaleCache.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        getCachedRequestLocale: () => getCachedRequestLocale,
        setCachedRequestLocale: () => setCachedRequestLocale,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
        );
      // See https://github.com/vercel/next.js/discussions/58862
      function getCacheImpl() {
        const value = {
          locale: undefined,
        };
        return value;
      }
      const getCache = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(getCacheImpl);
      function getCachedRequestLocale() {
        return getCache().locale;
      }
      function setCachedRequestLocale(locale) {
        getCache().locale = locale;
      }
    },
  '[project]/node_modules/next-intl/dist/esm/development/server/react-server/RequestLocale.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        getRequestLocale: () => getRequestLocale,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$headers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/headers.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/shared/constants.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/shared/utils.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$RequestLocaleCache$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/RequestLocaleCache.js [app-rsc] (ecmascript)'
        );
      async function getHeadersImpl() {
        const promiseOrValue = (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$headers$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'headers'
        ])();
        // Compatibility with Next.js <15
        return (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'isPromise'
        ])(promiseOrValue)
          ? await promiseOrValue
          : promiseOrValue;
      }
      const getHeaders = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(getHeadersImpl);
      async function getLocaleFromHeaderImpl() {
        let locale;
        try {
          locale =
            (await getHeaders()).get(
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'HEADER_LOCALE_NAME'
              ]
            ) || undefined;
        } catch (error) {
          if (
            error instanceof Error &&
            error.digest === 'DYNAMIC_SERVER_USAGE'
          ) {
            const wrappedError = new Error(
              'Usage of next-intl APIs in Server Components currently opts into dynamic rendering. This limitation will eventually be lifted, but as a stopgap solution, you can use the `setRequestLocale` API to enable static rendering, see https://next-intl.dev/docs/getting-started/app-router/with-i18n-routing#static-rendering',
              {
                cause: error,
              }
            );
            wrappedError.digest = error.digest;
            throw wrappedError;
          } else {
            throw error;
          }
        }
        return locale;
      }
      const getLocaleFromHeader = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(getLocaleFromHeaderImpl);
      async function getRequestLocale() {
        return (
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$RequestLocaleCache$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'getCachedRequestLocale'
          ])() || (await getLocaleFromHeader())
        );
      }
    },
  '[project]/node_modules/next-intl/dist/esm/development/config.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => getConfig,
      });
      function getConfig() {
        throw new Error(
          "Couldn't find next-intl config file. Please follow the instructions at https://next-intl.dev/docs/getting-started/app-router"
        );
      }
    },
  '[project]/node_modules/next-intl/dist/esm/development/server/react-server/validateLocale.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => validateLocale,
      });
      function validateLocale(locale) {
        try {
          const constructed = new Intl.Locale(locale);
          if (!constructed.language) {
            throw new Error('Language is required');
          }
        } catch {
          console.error(
            `An invalid locale was provided: "${locale}"\nPlease ensure you're using a valid Unicode locale identifier (e.g. "en-US").`
          );
        }
      }
    },
  '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getConfig.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => getConfig,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__i__as__initializeConfig$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-rsc] (ecmascript) <export i as initializeConfig>'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__b__as__$5f$createIntlFormatters$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-rsc] (ecmascript) <export b as _createIntlFormatters>'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__d__as__$5f$createCache$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/use-intl/dist/esm/development/initializeConfig-DPFnvsUO.js [app-rsc] (ecmascript) <export d as _createCache>'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/shared/utils.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$RequestLocale$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/RequestLocale.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$config$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/config.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$validateLocale$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/validateLocale.js [app-rsc] (ecmascript)'
        );
      // This is automatically inherited by `NextIntlClientProvider` if
      // the component is rendered from a Server Component
      function getDefaultTimeZoneImpl() {
        return Intl.DateTimeFormat().resolvedOptions().timeZone;
      }
      const getDefaultTimeZone = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(getDefaultTimeZoneImpl);
      async function receiveRuntimeConfigImpl(getConfig, localeOverride) {
        if (typeof getConfig !== 'function') {
          throw new Error(`Invalid i18n request configuration detected.

Please verify that:
1. In case you've specified a custom location in your Next.js config, make sure that the path is correct.
2. You have a default export in your i18n request configuration file.

See also: https://next-intl.dev/docs/usage/configuration#i18n-request
`);
        }
        const params = {
          locale: localeOverride,
          // In case the consumer doesn't read `params.locale` and instead provides the
          // `locale` (either in a single-language workflow or because the locale is
          // read from the user settings), don't attempt to read the request locale.
          get requestLocale() {
            return localeOverride
              ? Promise.resolve(localeOverride)
              : (0,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$RequestLocale$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                  'getRequestLocale'
                ])();
          },
        };
        let result = getConfig(params);
        if (
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'isPromise'
          ])(result)
        ) {
          result = await result;
        }
        if (!result.locale) {
          throw new Error(
            'No locale was returned from `getRequestConfig`.\n\nSee https://next-intl.dev/docs/usage/configuration#i18n-request'
          );
        }
        {
          (0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$validateLocale$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'default'
          ])(result.locale);
        }
        return result;
      }
      const receiveRuntimeConfig = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(receiveRuntimeConfigImpl);
      const getFormatters = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__b__as__$5f$createIntlFormatters$3e$__[
          '_createIntlFormatters'
        ]
      );
      const getCache = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__d__as__$5f$createCache$3e$__[
          '_createCache'
        ]
      );
      async function getConfigImpl(localeOverride) {
        const runtimeConfig = await receiveRuntimeConfig(
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$config$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'default'
          ],
          localeOverride
        );
        return {
          ...(0,
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$intl$2f$dist$2f$esm$2f$development$2f$initializeConfig$2d$DPFnvsUO$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$export__i__as__initializeConfig$3e$__[
            'initializeConfig'
          ])(runtimeConfig),
          _formatters: getFormatters(getCache()),
          timeZone: runtimeConfig.timeZone || getDefaultTimeZone(),
        };
      }
      const getConfig = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(getConfigImpl);
    },
  '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getConfigNow.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => getConfigNow,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfig$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getConfig.js [app-rsc] (ecmascript)'
        );
      async function getConfigNowImpl(locale) {
        const config = await (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfig$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'default'
        ])(locale);
        return config.now;
      }
      const getConfigNow = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(getConfigNowImpl);
    },
  '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getFormats.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => getFormats,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfig$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getConfig.js [app-rsc] (ecmascript)'
        );
      async function getFormatsCachedImpl() {
        const config = await (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfig$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'default'
        ])();
        return config.formats;
      }
      const getFormats = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(getFormatsCachedImpl);
    },
  '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js [app-rsc] (client reference proxy) <module evaluation>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => __TURBOPACK__default__export__,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server.js [app-rsc] (ecmascript)'
        );
      const __TURBOPACK__default__export__ = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'registerClientReference'
      ])(
        function () {
          throw new Error(
            "Attempted to call the default export of [project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."
          );
        },
        '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js <module evaluation>',
        'default'
      );
    },
  '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js [app-rsc] (client reference proxy)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => __TURBOPACK__default__export__,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-turbopack-server.js [app-rsc] (ecmascript)'
        );
      const __TURBOPACK__default__export__ = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$server$2d$dom$2d$turbopack$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'registerClientReference'
      ])(
        function () {
          throw new Error(
            "Attempted to call the default export of [project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component."
          );
        },
        '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js',
        'default'
      );
    },
  '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$NextIntlClientProvider$2e$js__$5b$app$2d$rsc$5d$__$28$client__reference__proxy$29$__$3c$module__evaluation$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js [app-rsc] (client reference proxy) <module evaluation>'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$NextIntlClientProvider$2e$js__$5b$app$2d$rsc$5d$__$28$client__reference__proxy$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js [app-rsc] (client reference proxy)'
        );
      __turbopack_context__.n(
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$NextIntlClientProvider$2e$js__$5b$app$2d$rsc$5d$__$28$client__reference__proxy$29$__
      );
    },
  '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getTimeZone.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => getTimeZone,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfig$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getConfig.js [app-rsc] (ecmascript)'
        );
      async function getTimeZoneCachedImpl(locale) {
        const config = await (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfig$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'default'
        ])(locale);
        return config.timeZone;
      }
      const getTimeZoneCached = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(getTimeZoneCachedImpl);
      async function getTimeZone(opts) {
        return getTimeZoneCached(opts?.locale);
      }
    },
  '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getMessages.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => getMessages,
        getMessagesFromConfig: () => getMessagesFromConfig,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfig$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getConfig.js [app-rsc] (ecmascript)'
        );
      function getMessagesFromConfig(config) {
        if (!config.messages) {
          throw new Error(
            'No messages found. Have you configured them correctly? See https://next-intl.dev/docs/configuration#messages'
          );
        }
        return config.messages;
      }
      async function getMessagesCachedImpl(locale) {
        const config = await (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfig$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'default'
        ])(locale);
        return getMessagesFromConfig(config);
      }
      const getMessagesCached = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(getMessagesCachedImpl);
      async function getMessages(opts) {
        return getMessagesCached(opts?.locale);
      }
    },
  '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getLocale.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => getLocaleCached,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfig$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getConfig.js [app-rsc] (ecmascript)'
        );
      async function getLocaleCachedImpl() {
        const config = await (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfig$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'default'
        ])();
        return config.locale;
      }
      const getLocaleCached = (0,
      __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
        'cache'
      ])(getLocaleCachedImpl);
    },
  '[project]/node_modules/next-intl/dist/esm/development/react-server/NextIntlClientProviderServer.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        default: () => NextIntlClientProviderServer,
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfigNow$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getConfigNow.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getFormats$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getFormats.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$NextIntlClientProvider$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/shared/NextIntlClientProvider.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-runtime.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getTimeZone$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getTimeZone.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getMessages$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getMessages.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getLocale$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/server/react-server/getLocale.js [app-rsc] (ecmascript)'
        );
      async function NextIntlClientProviderServer({
        formats,
        locale,
        messages,
        now,
        timeZone,
        ...rest
      }) {
        return /*#__PURE__*/ (0,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$rsc$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
          'jsx'
        ])(
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$shared$2f$NextIntlClientProvider$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'default'
          ],
          {
            formats:
              formats === undefined
                ? await (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getFormats$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'default'
                  ])()
                : formats,
            locale:
              locale ??
              (await (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getLocale$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'default'
              ])()),
            messages:
              messages === undefined
                ? await (0,
                  __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getMessages$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                    'default'
                  ])()
                : messages,
            now:
              now ??
              (await (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getConfigNow$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'default'
              ])()),
            timeZone:
              timeZone ??
              (await (0,
              __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$server$2f$react$2d$server$2f$getTimeZone$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
                'default'
              ])()),
            ...rest,
          }
        );
      }
    },
  '[project]/node_modules/next-intl/dist/esm/development/react-server/NextIntlClientProviderServer.js [app-rsc] (ecmascript) <export default as NextIntlClientProvider>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({
        NextIntlClientProvider: () =>
          __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2d$server$2f$NextIntlClientProviderServer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__[
            'default'
          ],
      });
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2d$intl$2f$dist$2f$esm$2f$development$2f$react$2d$server$2f$NextIntlClientProviderServer$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next-intl/dist/esm/development/react-server/NextIntlClientProviderServer.js [app-rsc] (ecmascript)'
        );
    },
  '[project]/node_modules/next/dist/client/components/redirect-status-code.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'RedirectStatusCode', {
          enumerable: true,
          get: function () {
            return RedirectStatusCode;
          },
        });
        var RedirectStatusCode = /*#__PURE__*/ (function (RedirectStatusCode) {
          RedirectStatusCode[(RedirectStatusCode['SeeOther'] = 303)] =
            'SeeOther';
          RedirectStatusCode[(RedirectStatusCode['TemporaryRedirect'] = 307)] =
            'TemporaryRedirect';
          RedirectStatusCode[(RedirectStatusCode['PermanentRedirect'] = 308)] =
            'PermanentRedirect';
          return RedirectStatusCode;
        })({});
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=redirect-status-code.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/redirect-error.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            REDIRECT_ERROR_CODE: null,
            RedirectType: null,
            isRedirectError: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          REDIRECT_ERROR_CODE: function () {
            return REDIRECT_ERROR_CODE;
          },
          RedirectType: function () {
            return RedirectType;
          },
          isRedirectError: function () {
            return isRedirectError;
          },
        });
        const _redirectstatuscode = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/redirect-status-code.js [app-rsc] (ecmascript)'
        );
        const REDIRECT_ERROR_CODE = 'NEXT_REDIRECT';
        var RedirectType = /*#__PURE__*/ (function (RedirectType) {
          RedirectType['push'] = 'push';
          RedirectType['replace'] = 'replace';
          return RedirectType;
        })({});
        function isRedirectError(error) {
          if (
            typeof error !== 'object' ||
            error === null ||
            !('digest' in error) ||
            typeof error.digest !== 'string'
          ) {
            return false;
          }
          const digest = error.digest.split(';');
          const [errorCode, type] = digest;
          const destination = digest.slice(2, -2).join(';');
          const status = digest.at(-2);
          const statusCode = Number(status);
          return (
            errorCode === REDIRECT_ERROR_CODE &&
            (type === 'replace' || type === 'push') &&
            typeof destination === 'string' &&
            !isNaN(statusCode) &&
            statusCode in _redirectstatuscode.RedirectStatusCode
          );
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=redirect-error.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/redirect.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            getRedirectError: null,
            getRedirectStatusCodeFromError: null,
            getRedirectTypeFromError: null,
            getURLFromRedirectError: null,
            permanentRedirect: null,
            redirect: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          getRedirectError: function () {
            return getRedirectError;
          },
          getRedirectStatusCodeFromError: function () {
            return getRedirectStatusCodeFromError;
          },
          getRedirectTypeFromError: function () {
            return getRedirectTypeFromError;
          },
          getURLFromRedirectError: function () {
            return getURLFromRedirectError;
          },
          permanentRedirect: function () {
            return permanentRedirect;
          },
          redirect: function () {
            return redirect;
          },
        });
        const _redirectstatuscode = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/redirect-status-code.js [app-rsc] (ecmascript)'
        );
        const _redirecterror = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/redirect-error.js [app-rsc] (ecmascript)'
        );
        const actionAsyncStorage = ('TURBOPACK compile-time truthy', 1)
          ? __turbopack_context__.r(
              '[externals]/next/dist/server/app-render/action-async-storage.external.js [external] (next/dist/server/app-render/action-async-storage.external.js, cjs)'
            ).actionAsyncStorage
          : 'TURBOPACK unreachable';
        function getRedirectError(url, type, statusCode) {
          if (statusCode === void 0)
            statusCode =
              _redirectstatuscode.RedirectStatusCode.TemporaryRedirect;
          const error = Object.defineProperty(
            new Error(_redirecterror.REDIRECT_ERROR_CODE),
            '__NEXT_ERROR_CODE',
            {
              value: 'E394',
              enumerable: false,
              configurable: true,
            }
          );
          error.digest =
            _redirecterror.REDIRECT_ERROR_CODE +
            ';' +
            type +
            ';' +
            url +
            ';' +
            statusCode +
            ';';
          return error;
        }
        function redirect(/** The URL to redirect to */ url, type) {
          var _actionAsyncStorage_getStore;
          type != null
            ? type
            : (type = (
                actionAsyncStorage == null
                  ? void 0
                  : (_actionAsyncStorage_getStore =
                        actionAsyncStorage.getStore()) == null
                    ? void 0
                    : _actionAsyncStorage_getStore.isAction
              )
                ? _redirecterror.RedirectType.push
                : _redirecterror.RedirectType.replace);
          throw getRedirectError(
            url,
            type,
            _redirectstatuscode.RedirectStatusCode.TemporaryRedirect
          );
        }
        function permanentRedirect(/** The URL to redirect to */ url, type) {
          if (type === void 0) type = _redirecterror.RedirectType.replace;
          throw getRedirectError(
            url,
            type,
            _redirectstatuscode.RedirectStatusCode.PermanentRedirect
          );
        }
        function getURLFromRedirectError(error) {
          if (!(0, _redirecterror.isRedirectError)(error)) return null;
          // Slices off the beginning of the digest that contains the code and the
          // separating ';'.
          return error.digest.split(';').slice(2, -2).join(';');
        }
        function getRedirectTypeFromError(error) {
          if (!(0, _redirecterror.isRedirectError)(error)) {
            throw Object.defineProperty(
              new Error('Not a redirect error'),
              '__NEXT_ERROR_CODE',
              {
                value: 'E260',
                enumerable: false,
                configurable: true,
              }
            );
          }
          return error.digest.split(';', 2)[1];
        }
        function getRedirectStatusCodeFromError(error) {
          if (!(0, _redirecterror.isRedirectError)(error)) {
            throw Object.defineProperty(
              new Error('Not a redirect error'),
              '__NEXT_ERROR_CODE',
              {
                value: 'E260',
                enumerable: false,
                configurable: true,
              }
            );
          }
          return Number(error.digest.split(';').at(-2));
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=redirect.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/http-access-fallback/http-access-fallback.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            HTTPAccessErrorStatus: null,
            HTTP_ERROR_FALLBACK_ERROR_CODE: null,
            getAccessFallbackErrorTypeByStatus: null,
            getAccessFallbackHTTPStatus: null,
            isHTTPAccessFallbackError: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          HTTPAccessErrorStatus: function () {
            return HTTPAccessErrorStatus;
          },
          HTTP_ERROR_FALLBACK_ERROR_CODE: function () {
            return HTTP_ERROR_FALLBACK_ERROR_CODE;
          },
          getAccessFallbackErrorTypeByStatus: function () {
            return getAccessFallbackErrorTypeByStatus;
          },
          getAccessFallbackHTTPStatus: function () {
            return getAccessFallbackHTTPStatus;
          },
          isHTTPAccessFallbackError: function () {
            return isHTTPAccessFallbackError;
          },
        });
        const HTTPAccessErrorStatus = {
          NOT_FOUND: 404,
          FORBIDDEN: 403,
          UNAUTHORIZED: 401,
        };
        const ALLOWED_CODES = new Set(Object.values(HTTPAccessErrorStatus));
        const HTTP_ERROR_FALLBACK_ERROR_CODE = 'NEXT_HTTP_ERROR_FALLBACK';
        function isHTTPAccessFallbackError(error) {
          if (
            typeof error !== 'object' ||
            error === null ||
            !('digest' in error) ||
            typeof error.digest !== 'string'
          ) {
            return false;
          }
          const [prefix, httpStatus] = error.digest.split(';');
          return (
            prefix === HTTP_ERROR_FALLBACK_ERROR_CODE &&
            ALLOWED_CODES.has(Number(httpStatus))
          );
        }
        function getAccessFallbackHTTPStatus(error) {
          const httpStatus = error.digest.split(';')[1];
          return Number(httpStatus);
        }
        function getAccessFallbackErrorTypeByStatus(status) {
          switch (status) {
            case 401:
              return 'unauthorized';
            case 403:
              return 'forbidden';
            case 404:
              return 'not-found';
            default:
              return;
          }
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=http-access-fallback.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/not-found.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'notFound', {
          enumerable: true,
          get: function () {
            return notFound;
          },
        });
        const _httpaccessfallback = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/http-access-fallback/http-access-fallback.js [app-rsc] (ecmascript)'
        );
        /**
         * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)
         * within a route segment as well as inject a tag.
         *
         * `notFound()` can be used in
         * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
         * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
         * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
         *
         * - In a Server Component, this will insert a `<meta name="robots" content="noindex" />` meta tag and set the status code to 404.
         * - In a Route Handler or Server Action, it will serve a 404 to the caller.
         *
         * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)
         */ const DIGEST =
          '' + _httpaccessfallback.HTTP_ERROR_FALLBACK_ERROR_CODE + ';404';
        function notFound() {
          // eslint-disable-next-line no-throw-literal
          const error = Object.defineProperty(
            new Error(DIGEST),
            '__NEXT_ERROR_CODE',
            {
              value: 'E394',
              enumerable: false,
              configurable: true,
            }
          );
          error.digest = DIGEST;
          throw error;
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=not-found.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/forbidden.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'forbidden', {
          enumerable: true,
          get: function () {
            return forbidden;
          },
        });
        const _httpaccessfallback = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/http-access-fallback/http-access-fallback.js [app-rsc] (ecmascript)'
        );
        // TODO: Add `forbidden` docs
        /**
         * @experimental
         * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)
         * within a route segment as well as inject a tag.
         *
         * `forbidden()` can be used in
         * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
         * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
         * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
         *
         * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)
         */ const DIGEST =
          '' + _httpaccessfallback.HTTP_ERROR_FALLBACK_ERROR_CODE + ';403';
        function forbidden() {
          if (('TURBOPACK compile-time truthy', 1)) {
            throw Object.defineProperty(
              new Error(
                '`forbidden()` is experimental and only allowed to be enabled when `experimental.authInterrupts` is enabled.'
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E488',
                enumerable: false,
                configurable: true,
              }
            );
          }
          // eslint-disable-next-line no-throw-literal
          const error = Object.defineProperty(
            new Error(DIGEST),
            '__NEXT_ERROR_CODE',
            {
              value: 'E394',
              enumerable: false,
              configurable: true,
            }
          );
          error.digest = DIGEST;
          throw error;
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=forbidden.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/unauthorized.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'unauthorized', {
          enumerable: true,
          get: function () {
            return unauthorized;
          },
        });
        const _httpaccessfallback = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/http-access-fallback/http-access-fallback.js [app-rsc] (ecmascript)'
        );
        // TODO: Add `unauthorized` docs
        /**
         * @experimental
         * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)
         * within a route segment as well as inject a tag.
         *
         * `unauthorized()` can be used in
         * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),
         * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and
         * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).
         *
         *
         * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)
         */ const DIGEST =
          '' + _httpaccessfallback.HTTP_ERROR_FALLBACK_ERROR_CODE + ';401';
        function unauthorized() {
          if (('TURBOPACK compile-time truthy', 1)) {
            throw Object.defineProperty(
              new Error(
                '`unauthorized()` is experimental and only allowed to be used when `experimental.authInterrupts` is enabled.'
              ),
              '__NEXT_ERROR_CODE',
              {
                value: 'E411',
                enumerable: false,
                configurable: true,
              }
            );
          }
          // eslint-disable-next-line no-throw-literal
          const error = Object.defineProperty(
            new Error(DIGEST),
            '__NEXT_ERROR_CODE',
            {
              value: 'E394',
              enumerable: false,
              configurable: true,
            }
          );
          error.digest = DIGEST;
          throw error;
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=unauthorized.js.map
      }
    },
  '[project]/node_modules/next/dist/server/lib/router-utils/is-postpone.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'isPostpone', {
          enumerable: true,
          get: function () {
            return isPostpone;
          },
        });
        const REACT_POSTPONE_TYPE = Symbol.for('react.postpone');
        function isPostpone(error) {
          return (
            typeof error === 'object' &&
            error !== null &&
            error.$$typeof === REACT_POSTPONE_TYPE
          );
        } //# sourceMappingURL=is-postpone.js.map
      }
    },
  '[project]/node_modules/next/dist/shared/lib/lazy-dynamic/bailout-to-csr.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        // This has to be a shared module which is shared between client component error boundary and dynamic component
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            BailoutToCSRError: null,
            isBailoutToCSRError: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          BailoutToCSRError: function () {
            return BailoutToCSRError;
          },
          isBailoutToCSRError: function () {
            return isBailoutToCSRError;
          },
        });
        const BAILOUT_TO_CSR = 'BAILOUT_TO_CLIENT_SIDE_RENDERING';
        class BailoutToCSRError extends Error {
          constructor(reason) {
            super('Bail out to client-side rendering: ' + reason),
              (this.reason = reason),
              (this.digest = BAILOUT_TO_CSR);
          }
        }
        function isBailoutToCSRError(err) {
          if (typeof err !== 'object' || err === null || !('digest' in err)) {
            return false;
          }
          return err.digest === BAILOUT_TO_CSR;
        } //# sourceMappingURL=bailout-to-csr.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/is-next-router-error.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'isNextRouterError', {
          enumerable: true,
          get: function () {
            return isNextRouterError;
          },
        });
        const _httpaccessfallback = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/http-access-fallback/http-access-fallback.js [app-rsc] (ecmascript)'
        );
        const _redirecterror = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/redirect-error.js [app-rsc] (ecmascript)'
        );
        function isNextRouterError(error) {
          return (
            (0, _redirecterror.isRedirectError)(error) ||
            (0, _httpaccessfallback.isHTTPAccessFallbackError)(error)
          );
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=is-next-router-error.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/unstable-rethrow.server.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'unstable_rethrow', {
          enumerable: true,
          get: function () {
            return unstable_rethrow;
          },
        });
        const _dynamicrenderingutils = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/dynamic-rendering-utils.js [app-rsc] (ecmascript)'
        );
        const _ispostpone = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/lib/router-utils/is-postpone.js [app-rsc] (ecmascript)'
        );
        const _bailouttocsr = __turbopack_context__.r(
          '[project]/node_modules/next/dist/shared/lib/lazy-dynamic/bailout-to-csr.js [app-rsc] (ecmascript)'
        );
        const _isnextroutererror = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/is-next-router-error.js [app-rsc] (ecmascript)'
        );
        const _dynamicrendering = __turbopack_context__.r(
          '[project]/node_modules/next/dist/server/app-render/dynamic-rendering.js [app-rsc] (ecmascript)'
        );
        const _hooksservercontext = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/hooks-server-context.js [app-rsc] (ecmascript)'
        );
        function unstable_rethrow(error) {
          if (
            (0, _isnextroutererror.isNextRouterError)(error) ||
            (0, _bailouttocsr.isBailoutToCSRError)(error) ||
            (0, _hooksservercontext.isDynamicServerError)(error) ||
            (0, _dynamicrendering.isDynamicPostpone)(error) ||
            (0, _ispostpone.isPostpone)(error) ||
            (0, _dynamicrenderingutils.isHangingPromiseRejectionError)(error)
          ) {
            throw error;
          }
          if (error instanceof Error && 'cause' in error) {
            unstable_rethrow(error.cause);
          }
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=unstable-rethrow.server.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/unstable-rethrow.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        /**
         * This function should be used to rethrow internal Next.js errors so that they can be handled by the framework.
         * When wrapping an API that uses errors to interrupt control flow, you should use this function before you do any error handling.
         * This function will rethrow the error if it is a Next.js error so it can be handled, otherwise it will do nothing.
         *
         * Read more: [Next.js Docs: `unstable_rethrow`](https://nextjs.org/docs/app/api-reference/functions/unstable_rethrow)
         */ Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        Object.defineProperty(exports, 'unstable_rethrow', {
          enumerable: true,
          get: function () {
            return unstable_rethrow;
          },
        });
        const unstable_rethrow = ('TURBOPACK compile-time truthy', 1)
          ? __turbopack_context__.r(
              '[project]/node_modules/next/dist/client/components/unstable-rethrow.server.js [app-rsc] (ecmascript)'
            ).unstable_rethrow
          : 'TURBOPACK unreachable';
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=unstable-rethrow.js.map
      }
    },
  '[project]/node_modules/next/dist/client/components/navigation.react-server.js [app-rsc] (ecmascript)':
    (__turbopack_context__) => {
      'use strict';

      var { m: module, e: exports } = __turbopack_context__;
      {
        /** @internal */ Object.defineProperty(exports, '__esModule', {
          value: true,
        });
        0 &&
          (module.exports = {
            ReadonlyURLSearchParams: null,
            RedirectType: null,
            forbidden: null,
            notFound: null,
            permanentRedirect: null,
            redirect: null,
            unauthorized: null,
            unstable_rethrow: null,
          });
        function _export(target, all) {
          for (var name in all)
            Object.defineProperty(target, name, {
              enumerable: true,
              get: all[name],
            });
        }
        _export(exports, {
          ReadonlyURLSearchParams: function () {
            return ReadonlyURLSearchParams;
          },
          RedirectType: function () {
            return _redirecterror.RedirectType;
          },
          forbidden: function () {
            return _forbidden.forbidden;
          },
          notFound: function () {
            return _notfound.notFound;
          },
          permanentRedirect: function () {
            return _redirect.permanentRedirect;
          },
          redirect: function () {
            return _redirect.redirect;
          },
          unauthorized: function () {
            return _unauthorized.unauthorized;
          },
          unstable_rethrow: function () {
            return _unstablerethrow.unstable_rethrow;
          },
        });
        const _redirect = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/redirect.js [app-rsc] (ecmascript)'
        );
        const _redirecterror = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/redirect-error.js [app-rsc] (ecmascript)'
        );
        const _notfound = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/not-found.js [app-rsc] (ecmascript)'
        );
        const _forbidden = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/forbidden.js [app-rsc] (ecmascript)'
        );
        const _unauthorized = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/unauthorized.js [app-rsc] (ecmascript)'
        );
        const _unstablerethrow = __turbopack_context__.r(
          '[project]/node_modules/next/dist/client/components/unstable-rethrow.js [app-rsc] (ecmascript)'
        );
        class ReadonlyURLSearchParamsError extends Error {
          constructor() {
            super(
              'Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams'
            );
          }
        }
        class ReadonlyURLSearchParams extends URLSearchParams {
          /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */ append() {
            throw new ReadonlyURLSearchParamsError();
          }
          /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */ delete() {
            throw new ReadonlyURLSearchParamsError();
          }
          /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */ set() {
            throw new ReadonlyURLSearchParamsError();
          }
          /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */ sort() {
            throw new ReadonlyURLSearchParamsError();
          }
        }
        if (
          (typeof exports.default === 'function' ||
            (typeof exports.default === 'object' &&
              exports.default !== null)) &&
          typeof exports.default.__esModule === 'undefined'
        ) {
          Object.defineProperty(exports.default, '__esModule', {
            value: true,
          });
          Object.assign(exports.default, exports);
          module.exports = exports.default;
        } //# sourceMappingURL=navigation.react-server.js.map
      }
    },
  '[project]/node_modules/next/dist/api/navigation.react-server.js [app-rsc] (ecmascript) <locals>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({});
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$navigation$2e$react$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/client/components/navigation.react-server.js [app-rsc] (ecmascript)'
        ); //# sourceMappingURL=navigation.react-server.js.map
    },
  '[project]/node_modules/next/dist/api/navigation.react-server.js [app-rsc] (ecmascript) <module evaluation>':
    (__turbopack_context__) => {
      'use strict';

      __turbopack_context__.s({});
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$client$2f$components$2f$navigation$2e$react$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/client/components/navigation.react-server.js [app-rsc] (ecmascript)'
        );
      var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$api$2f$navigation$2e$react$2d$server$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__$3c$locals$3e$__ =
        __turbopack_context__.i(
          '[project]/node_modules/next/dist/api/navigation.react-server.js [app-rsc] (ecmascript) <locals>'
        );
    },
};

//# sourceMappingURL=node_modules_7afa698f._.js.map
